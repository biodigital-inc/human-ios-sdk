{"version":3,"sources":["assets/js/index.js"],"names":["setActiveTab","emitActiveUrl","params","URLSearchParams","decodeURI","document","location","search","substring","forEach","value","get","sessionStorage","setItem","accountType","getItem","subscription","plan","groupFreeTrial","setButtonsToContactUs","setCurrentPlan","inIframe","window","parent","sendParentMessage","action","label","metadata","iframeMessage","postMessage","path","pathname","individualTab","querySelector","classList","add","tab","includes","remove","concat","card","cardButton","toggle","setAttribute","innerHTML","addEventListener","event","preventDefault","dataAction","actionSelector","selector","querySelectorAll","button","target","getAttribute","isIndividualPlan","isResponsive","matchMedia","matches","personalPlusPlan","scollY","getBoundingClientRect","top","pageYOffset","scrollTo","behavior"],"mappings":";AAAAA,IACAC,IAGA,IAAIC,EAAS,IAAIC,gBAAgBC,UAAUC,SAASC,SAASC,OAAOC,UAAU,KAC9E,CAAC,cAAe,eAAgB,kBAAkBC,QAAQ,SAAAC,GACpDR,EAAOS,IAAID,IACbE,eAAeC,QAAQH,EAAOR,EAAOS,IAAID,IAAU,MAKvD,IAAMI,EAAcF,eAAeG,QAAQ,eACrCC,EAAeJ,eAAeG,QAAQ,gBACxCE,EAAO,GACLC,EAAiBN,eAAeG,QAAQ,kBAE9C,QAAQ,GAGN,IAAuB,mCAAjBC,EACJG,IACA,MAEF,IAAyB,UAAnBD,EACJC,EAAsB,OACtB,MAEF,IAAsB,SAAhBL,EACJM,EAAe,YACf,MAGF,IAAsB,eAAhBN,EACJM,EAAe,iBAMnB,IAAMC,EAAWC,OAAOhB,WAAagB,OAAOC,OAAOjB,SAqBnD,SAASkB,EAAkBC,EAAQC,EAAOC,GACxC,GAAKF,EAAL,CAKA,IAAMG,EAAgB,CACpBH,OAAQA,EACRC,MAAOA,GAAS,GAChBC,SAAUA,GAAY,IAGxBL,OAAOC,OAAOM,YAAYD,EAAe,MAG3C,SAAS5B,IACP,IACM8B,EAAOR,OAAOhB,SAASyB,SAEvBC,EAAgB3B,SAAS4B,cAAsC,yBAClED,GACDA,EAAcE,UAAUC,IAAI,mBALjB,CAAC,WAAY,SAAU,cAQ/B1B,QAAQ,SAAA2B,GACPN,EAAKO,SAASD,KAChB/B,SAAS4B,cAA2B,cAACC,UAAUI,OAAO,mBACtDjC,SAAS4B,cAAaM,aAAAA,OAAcH,EAAO,MAACF,UAAUC,IAAI,sBAKhE,SAASlC,IACP,IAAI6B,EAAOR,OAAOhB,SAASyB,SAGd,MAATD,IACFA,EAAO,oBAGTN,EAAkB,QAA2B,iBAAA,CAC3CM,KAAMA,IAIV,SAASV,EAAeH,GAEtB,IAAMuB,EAAOnC,SAAS4B,cAAaM,cAAAA,OAAetB,EAAQ,MAC1D,GAAIuB,EAAM,CACR,IAAMC,EAAaD,EAAKP,cAAc,cACtCQ,EAAWP,UAAUQ,OAAO,mBAAmB,GAC/CD,EAAWP,UAAUQ,OAAO,kBAAkB,GAC9CD,EAAWP,UAAUQ,OAAO,kBAAkB,GAC9CD,EAAWE,aAAa,YAAY,GACpCF,EAAWG,UAAY,eACvBH,EAAWI,iBAAiB,QAAS,SAACC,GACpCA,EAAMC,oBAKZ,SAAS5B,EAAsB6B,GAC7B,IAAMC,EAAiBD,EAAUT,gBAAAA,OAAmBS,GAAe,GAC7DE,EAAQX,aAAAA,OAAiBU,GACf5C,SAAS8C,iBAAiBD,GAElCzC,QAAQ,SAAA2C,GACdA,EAAOT,aAAa,cAAe,WACnCS,EAAOR,UAAY,eAvFvBvC,SAAS8C,iBAAiB,cAAc1C,QAAQ,SAAC4C,GAChDA,EAAOR,iBAAiB,QAAS,SAACC,GAGjC,GAAIzB,EAAU,CACbyB,EAAMC,iBAEH,IAAMpB,EAAW,CACfV,KAAMoC,EAAOC,aAAa,aAAe,GACzC7B,OAAQ4B,EAAOC,aAAa,gBAAkB,IAG/C3B,EAASV,MACRO,EAAkB,QAAS,GAAIG,QA+EvCL,OAAOuB,iBAAiB,OAAQ,WAC9B,IACMU,EADOjC,OAAOhB,SAASyB,SACCM,SAAS,cACjCmB,GAES,IAFMlC,OAClBmC,WAAW,sBACXC,QAEH,GAAIH,GAAoBC,EAAc,CACpC,IAAMG,EAAmBtD,SAAS4B,cAA4C,+BAC9E,GAAI0B,EAAkB,CACpB,IAKMC,EALaD,EAAiBE,wBAAwBC,IACxCxC,OAAOyC,aACV,GAIjBzC,OAAO0C,SAAS,CAAEF,IAAKF,EAAQK,SAAU","file":"js.96770172.js","sourceRoot":"../src","sourcesContent":["setActiveTab();\nemitActiveUrl();\n\n// Cache any passed params for use between page changes\nlet params = new URLSearchParams(decodeURI(document.location.search.substring(1)));\n['accountType', 'subscription', 'groupFreeTrial'].forEach(value => {\n  if (params.get(value)) {\n    sessionStorage.setItem(value, params.get(value) || '');\n  }\n})\n\n// Map accountType and subscription to plans\nconst accountType = sessionStorage.getItem('accountType');\nconst subscription = sessionStorage.getItem('subscription');\nlet plan = '';\nconst groupFreeTrial = sessionStorage.getItem('groupFreeTrial');\n\nswitch (true) {\n  // When the user has an active free trial, flip all buttons to contact us\n  // so they don't mistakenly go through sign up again.\n  case (subscription === 'school & business - free trial'):\n    setButtonsToContactUs();\n    break;\n  // When the user is not allowed to start a free trial, flip all Free Trial CTAs to Contact Us\n  case (groupFreeTrial === 'false'):\n    setButtonsToContactUs('try');\n    break;\n\n  case (accountType === 'free'): \n    setCurrentPlan('personal');\n    break;\n  \n  // Valid premium account when accoun type is passed\n  case (accountType === 'individual'):\n    setCurrentPlan('personal-plus');\n    break;\n}\n\n\n// Plan Selection\nconst inIframe = window.location !== window.parent.location;\n\ndocument.querySelectorAll('[data-cta]').forEach((target) => {\n\ttarget.addEventListener('click', (event) => {\n\t\t// When the pricing page is served in an iframe, override the default link click behavior\n\t\t// and pass back the CTA info for the parent (human.biodigital.com) to handle instead.\n\t\tif (inIframe) {\n\t\t\tevent.preventDefault();\n\n      const metadata = {\n        plan: target.getAttribute('data-cta') || '',\n        action: target.getAttribute('data-action') || ''\n      }\n\n\t\t\tif (metadata.plan) {\n        sendParentMessage('close', '', metadata);\n\t\t\t}\n\t\t}\n\t});\n});\n\nfunction sendParentMessage(action, label, metadata) {\n  if (!action) {\n    return;\n  }\n\n  // Implements IframeMessage interface from Human Studio next iframe-dialog.component.ts\n  const iframeMessage = {\n    action: action,\n    label: label || '',\n    metadata: metadata || {}\n  }\n\n  window.parent.postMessage(iframeMessage, '*');\n}\n\nfunction setActiveTab() {\n  const tabs = ['business', 'school', 'individual'];\n  const path = window.location.pathname;\n\n  const individualTab = document.querySelector(`[data-tab=individual]`);\n  if(individualTab) {\n    individualTab.classList.add('button-selected');\n  }\n\n  tabs.forEach(tab => {\n    if (path.includes(tab)) {\n      document.querySelector(`[data-tab]`).classList.remove('button-selected');\n      document.querySelector(`[data-tab=${tab}]`).classList.add('button-selected');\n    }\n  });\n}\n\nfunction emitActiveUrl() {\n  let path = window.location.pathname;\n\n  // Site defaults to showing individual when no specific path is defined\n  if (path === '/') {\n    path = '/individual.html';\n  }\n  \n  sendParentMessage('track', `Pricing - View`, {\n    path: path\n  });\n}\n\nfunction setCurrentPlan(plan) {\n  // When the existing plan is passed, disable the button.\n  const card = document.querySelector(`[data-card=${plan}]`);\n  if (card) {\n    const cardButton = card.querySelector('[data-cta]');\n    cardButton.classList.toggle('button-disabled', true);\n    cardButton.classList.toggle('button-outline', false);\n    cardButton.classList.toggle('button-primary', false);\n    cardButton.setAttribute('disabled', true);\n    cardButton.innerHTML = 'Current plan';\n    cardButton.addEventListener('click', (event) => {\n      event.preventDefault();\n    });\n  }\n}\n\nfunction setButtonsToContactUs(dataAction) {\n  const actionSelector = dataAction ? `[data-action=${dataAction}` : '';\n  const selector = `[data-cta]${ actionSelector }`;\n  const buttons = document.querySelectorAll(selector);\n\n  buttons.forEach(button => {\n    button.setAttribute('data-action', 'contact');\n    button.innerHTML = 'Contact Us';\n  })\n}\n\n// Special case: scroll to Personal Plus plan for individuals on responsive layout\nwindow.addEventListener('load', function () {\n  const path = window.location.pathname;\n  const isIndividualPlan = path.includes('individual');\n  const isResponsive = window\n    .matchMedia('(min-width: 960px)')\n    .matches === false;\n\n  if (isIndividualPlan && isResponsive) {\n    const personalPlusPlan = document.querySelector(`[data-card=\"personal-plus\"]`);\n    if (personalPlusPlan) {\n      const elementTop = personalPlusPlan.getBoundingClientRect().top;\n      const pageYOffset = window.pageYOffset;\n      const yOffset = -24;\n\n      // scroll into view\n      const scollY = elementTop + pageYOffset + yOffset;\n      window.scrollTo({ top: scollY, behavior: 'smooth' });\n    }\n  }\n});\n"]}