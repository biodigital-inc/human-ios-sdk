// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target x86_64-apple-ios9.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name HumanKit
import Compression
import CoreFoundation
import Foundation
@_exported import HumanKit
import StoreKit
import Swift
import SystemConfiguration
import UIKit
import WebKit
import os.log
import os
@objc public protocol HKHumanDelegate {
  @objc optional func human(_ view: HumanKit.HKHuman, initScene: Swift.String)
  @objc optional func human(_ view: HumanKit.HKHuman, modelLoadError: Swift.String)
  @objc optional func human(_ view: HumanKit.HKHuman, modelLoaded: Swift.String)
  @objc optional func human(_ view: HumanKit.HKHuman, annotationPicked: Swift.String)
  @objc optional func human(_ view: HumanKit.HKHuman, timelineUpdated: HumanKit.HKTimeline)
  @objc optional func human(_ view: HumanKit.HKHuman, animationComplete: Swift.Bool)
  @objc optional func human(_ view: HumanKit.HKHuman, objectPicked: Swift.String, position: [Swift.Double])
  @objc optional func human(_ view: HumanKit.HKHuman, objectSelected: Swift.String)
  @objc optional func human(_ view: HumanKit.HKHuman, objectDeselected: Swift.String)
  @objc optional func human(_ view: HumanKit.HKHuman, chapterTransition: Swift.String)
  @objc optional func human(_ view: HumanKit.HKHuman, cameraUpdated: HumanKit.HKCamera)
  @objc optional func human(_ view: HumanKit.HKHuman, xrayEnabled: Swift.Bool)
  @objc optional func human(_ view: HumanKit.HKHuman, sceneRestored: Swift.Bool)
  @objc optional func human(_ view: HumanKit.HKHuman, objectsShown: [Swift.String : Swift.Bool])
  @objc optional func human(_ view: HumanKit.HKHuman, objectColor: Swift.String, color: HumanKit.HKColor)
  @objc optional func human(_ view: HumanKit.HKHuman, annotationsShown: Swift.Bool)
  @objc optional func human(_ view: HumanKit.HKHuman, annotationCreated: Swift.String)
  @objc optional func human(_ view: HumanKit.HKHuman, annotationDestroyed: Swift.String)
  @objc optional func human(_ view: HumanKit.HKHuman, annotationUpdated: HumanKit.HKAnnotation)
  @objc optional func screenshot(image: UIKit.UIImage)
  @available(*, deprecated, message: "Please use human(_:initScene:)")
  @objc optional func onInitMessage()
  @available(*, deprecated, message: "Please use human(_:chapterTransition:)")
  @objc optional func onChapterTransition(chapterId: Swift.String, view: HumanKit.HKHuman)
  @available(*, deprecated, message: "Please use human(_:objectDeselected:)")
  @objc optional func onObjectDeselected(objectId: Swift.String, view: HumanKit.HKHuman)
  @available(*, deprecated, message: "Please use human(_:objectSelected:)")
  @objc optional func onObjectSelected(objectId: Swift.String, view: HumanKit.HKHuman)
  @available(*, deprecated, message: "Please use human(_:animationComplete:)")
  @objc optional func onAnimationComplete()
}
@objc public class HKHuman : ObjectiveC.NSObject {
  @objc weak public var delegate: HumanKit.HKHumanDelegate?
  @objc public var scene: HumanKit.HKScene
  @objc public var timeline: HumanKit.HKTimeline
  @objc public var camera: HumanKit.HKCamera
  @objc public var ui: HumanKit.HKUI
  @objc public var annotations: HumanKit.HKAnnotations
  @objc public var version: Swift.String
  @objc public init(view: UIKit.UIView)
  public init(view: UIKit.UIView, options: [HumanKit.HumanUIOptions : Swift.Bool])
  @objc public func setupUI(option: HumanKit.HumanUIOptions, value: Swift.Bool)
  @objc public func load(model: Swift.String)
  @objc public func unload()
  @objc public func reload()
  @objc public func disableInput()
  @objc public func enableInput()
  @objc deinit
  @objc override dynamic public init()
}
public typealias ProductIdentifier = Swift.String
public typealias ProductsRequestCompletionHandler = (Swift.Bool, [StoreKit.SKProduct]?) -> Swift.Void
@objc open class IAPHelper : ObjectiveC.NSObject {
  public init(productIds: Swift.Set<HumanKit.ProductIdentifier>)
  @objc deinit
  @objc override dynamic public init()
}
extension IAPHelper {
  public func requestProducts(_ completionHandler: @escaping HumanKit.ProductsRequestCompletionHandler)
  public func buyProduct(_ product: StoreKit.SKProduct)
  public func isProductPurchased(_ productIdentifier: HumanKit.ProductIdentifier) -> Swift.Bool
  public class func canMakePayments() -> Swift.Bool
  public func restorePurchases()
}
extension IAPHelper : StoreKit.SKProductsRequestDelegate {
  @objc dynamic public func productsRequest(_ request: StoreKit.SKProductsRequest, didReceive response: StoreKit.SKProductsResponse)
  @objc dynamic public func request(_ request: StoreKit.SKRequest, didFailWithError error: Swift.Error)
}
extension IAPHelper : StoreKit.SKPaymentTransactionObserver {
  @objc dynamic public func paymentQueue(_ queue: StoreKit.SKPaymentQueue, updatedTransactions transactions: [StoreKit.SKPaymentTransaction])
  @objc dynamic public func paymentQueueRestoreCompletedTransactionsFinished(_ queue: StoreKit.SKPaymentQueue)
  @objc dynamic public func paymentQueue(_ queue: StoreKit.SKPaymentQueue, restoreCompletedTransactionsFailedWithError error: Swift.Error)
}
@objc public class HKModel : ObjectiveC.NSObject {
  @objc public var modelId: Swift.String
  @objc public var title: Swift.String
  @objc public var text: Swift.String
  @objc public var thumbnail: Swift.String
  @objc public var thumbnailImage: UIKit.UIImage
  @objc public init(modelId: Swift.String, title: Swift.String, text: Swift.String, thumb: Swift.String = "")
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objc public class HKScene : ObjectiveC.NSObject {
  @objc public var title: Swift.String
  @objc public var text: Swift.String
  @objc public var textSections: [[Swift.String : Swift.String]]
  @objc public var objectIds: [Swift.String]
  @objc public var objects: [Swift.String : Swift.String]
  @objc public var hasLayers: Swift.Bool
  @objc public func share(from: CoreGraphics.CGRect)
  @objc public func screenshot()
  @objc public func reset()
  @objc public func hide(objectIds: [Swift.String])
  @objc public func show(objectIds: [Swift.String])
  @objc public func showOrHide(objectIds: [Swift.String : Swift.Bool])
  @objc public func isolate(objectIds: [Swift.String])
  @objc public func select(objectIds: [Swift.String])
  @objc public func undoSelections()
  @objc public func setHighlightColor(color: UIKit.UIColor)
  @objc public func resetHighlightColor()
  @objc public func disableHighlight()
  @objc public func enableHighlight()
  @objc public func highlight(objectIds: [Swift.String])
  @objc public func unhighlight(objectId: Swift.String)
  @objc public func disablePicking()
  @objc public func enablePicking()
  @objc public func showLabels()
  @objc public func hideLabels()
  @objc public func xray(_ enabled: Swift.Bool)
  @available(*, unavailable, message: "this is no longer supported.  please contact BioDigital if you require this functionality.")
  @objc public func getObjectPosition(objectID: Swift.String) -> [Swift.Double]
  @objc public func color(objectId: Swift.String, color: HumanKit.HKColor)
  @objc public func uncolor(objectId: Swift.String)
  @objc public func getColor(objectId: Swift.String)
  @objc public func translate(objectId: Swift.String, translate: [Swift.Double])
  @objc public func rotate(objectId: Swift.String, rotate: [Swift.Double])
  @objc public func scale(objectId: Swift.String, scale: [Swift.Double])
  @objc public func pivot(objectId: Swift.String, pivot: [Swift.Double])
  @objc public func transform(objectId: Swift.String, translate: [Swift.Double], rotate: [Swift.Double], scale: [Swift.Double], pivot: [Swift.Double])
  @objc public func capture()
  @objc public func restore()
  @available(*, deprecated, message: "Please use select(objectIds:) instead")
  @objc public func selectObject(objectID: Swift.String)
  @available(*, deprecated, message: "Please use select(objectIds:) instead")
  @objc public func selectObjectWithGroup(objectID: Swift.String, group: [Swift.String])
  @available(*, deprecated, message: "Please use isolate(objectIds:)")
  @objc public func isolate(_ enabled: Swift.Bool)
  @available(*, deprecated, message: "Please use hide(objectIds:)")
  @objc public func dissect(_ enabled: Swift.Bool)
  @available(*, deprecated, message: "Please use show(objectIds:)")
  @objc public func undo()
  @available(*, deprecated, renamed: "color(objectId:color:)")
  @objc public func colorObject(id: Swift.String, color: HumanKit.HKColor)
  @available(*, deprecated, renamed: "uncolor(objectId:)")
  @objc public func uncolorObject(id: Swift.String)
  @available(*, renamed: "unhighlight(objectId:)")
  @objc public func unhighlightObject(objectid: Swift.String)
  @available(*, unavailable, message: "Please use getColor(objectId:) instead")
  @objc public func isXray(objectID: Swift.String) -> Swift.Bool
  @available(*, unavailable, message: "Please use colorObject instead")
  @objc public func setXray(objectID: Swift.String, enable: Swift.Bool)
  @available(*, unavailable, message: "This is not currently supported")
  @objc public func setPickable(objectID: Swift.String, enable: Swift.Bool)
  @objc public func setLayers(percent: Swift.Int)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class HKCamera : ObjectiveC.NSObject {
  @objc public var eye: [Swift.Double]
  @objc public var look: [Swift.Double]
  @objc public var up: [Swift.Double]
  @objc public var zoomFactor: Swift.Double
  @available(*, unavailable, message: "camera info is directly accessible and always up to date")
  @objc public func getCameraInfo()
  @objc public func reset()
  @objc public func pan(x: Swift.Double, y: Swift.Double, z: Swift.Double)
  @objc public func zoom(_ factor: Swift.Double)
  @objc public func orbit(yaw: Swift.Float, pitch: Swift.Float, duration: Swift.Float = 1.0)
  @objc public func set(eyeIn: [Swift.Double]? = nil, lookIn: [Swift.Double]? = nil, upIn: [Swift.Double]? = nil, animated: Swift.Bool = true)
  @available(*, deprecated, message: "Please use set(eyeIn:lookIn,upIn,animated:)")
  @objc public func updateCamera(eyeIn: [Swift.Double], lookIn: [Swift.Double], upIn: [Swift.Double], animated: Swift.Bool)
  @objc public func animateTo(objectId: Swift.String)
  @available(*, unavailable, message: "This is no longer supported")
  @objc public func lock(_ lock: Swift.Bool)
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum HumanLanguage : Swift.Int {
  case english = 0
  case spanish
  case portuguese
  case french
  case italian
  case german
  case chinese
  case japanese
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
  public init?(rawValue: Swift.Int)
}
@objc public enum HumanUIOptions : Swift.Int {
  case tools
  case info
  case animation
  case help
  case objectTree
  case reset
  case nolink
  case all
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum BackgroundOptions : Swift.Int {
  case radial
  case linear
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class HKUI : ObjectiveC.NSObject {
  @objc public static var languageNames: [Swift.String]
  @objc public static var languageCodes: [Swift.String]
  @objc public var topColor: UIKit.UIColor
  @objc public var bottomColor: UIKit.UIColor
  @objc public var bgType: HumanKit.BackgroundOptions
  @objc public var colorStops: [Swift.Double]
  @objc public var hasPlayPause: Swift.Bool
  @objc public var hasScrubber: Swift.Bool
  @objc public static func languageCode() -> Swift.String
  @objc public func setBackgroundColor(top: UIKit.UIColor, bottom: UIKit.UIColor, type: HumanKit.BackgroundOptions = .radial)
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class HKChapter : ObjectiveC.NSObject {
  @objc public var title: Swift.String
  @objc public var text: Swift.String
  @objc public var index: Swift.Int
  @objc public var animated: Swift.Bool
  @objc public var loops: Swift.Bool
  @objc public var duration: Swift.Double
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objc public class HKTimeline : ObjectiveC.NSObject {
  @objc public var currentTime: Swift.Float
  @objc public var duration: Swift.Float
  @objc public var playing: Swift.Bool
  @objc public var currentChapter: HumanKit.HKChapter?
  @objc public var chapters: [Swift.String : HumanKit.HKChapter]
  @objc public var chapterList: [Swift.String]
  @available(*, unavailable, message: "timeline info is directly accessible and always up to date")
  @objc public func getTimelineInfo()
  @objc public func play()
  @objc public func pause()
  @objc public func unpause()
  @objc public func nextChapter()
  @objc public func prevChapter()
  @objc public func moveToChapter(chapterID: Swift.String)
  @objc public func moveToTime(time: Swift.Float)
  @objc public func loop(chapterId: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class HKAnnotations : ObjectiveC.NSObject {
  @objc public var annotations: [Swift.String : HumanKit.HKAnnotation]
  @objc public func show()
  @objc public func hide()
  @objc public func create(annotation: HumanKit.HKAnnotation)
  @objc public func update(annotationId: Swift.String)
  @objc public func destroy(annotationId: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc public class HKColor : ObjectiveC.NSObject {
  @objc public init(_ color: UIKit.UIColor? = nil)
  @objc public var tint: UIKit.UIColor
  @objc public var saturation: CoreGraphics.CGFloat
  @objc public var opacity: CoreGraphics.CGFloat
  @objc public var brightness: CoreGraphics.CGFloat
  @objc public var contrast: CoreGraphics.CGFloat
  @objc public func randomColor()
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class HKAnnotation : ObjectiveC.NSObject {
  @objc public var objectId: Swift.String
  @objc public var title: Swift.String
  @objc public var text: Swift.String
  @objc public var annotationId: Swift.String
  @objc public var position: [Swift.Double]
  @objc public var canvasPosition: [Swift.Double]
  @objc public var labelOffset: [Swift.Double]
  @objc public var shown: Swift.Bool
  @objc public var occludable: Swift.Bool
  @objc public init(objectId: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol HKServicesDelegate {
  @objc func onValidSDK()
  @objc func onInvalidSDK()
  @objc optional func modelsLoaded()
  @objc optional func modelDownloaded(modelId: Swift.String, count: Swift.Int, total: Swift.Int)
  @available(*, renamed: "modelsLoaded()")
  @objc optional func modulesLoaded()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class HKServices : ObjectiveC.NSObject {
  @objc public var models: [HumanKit.HKModel]
  @objc public static let shared: HumanKit.HKServices
  @objc public func setup(key: Swift.String, secret: Swift.String, delegate: HumanKit.HKServicesDelegate? = nil)
  @objc public func setup(delegate: HumanKit.HKServicesDelegate? = nil)
  @objc public func getModels()
  @objc public func findModel(ICD: Swift.String)
  @objc public func download(modelIds: [Swift.String])
  @objc public func modelDownloaded(id: Swift.String) -> Swift.Bool
  @objc public func deleteStoredData()
  @objc public func setLanguage(to: HumanKit.HumanLanguage)
  @objc public func isUnicodeLanguage() -> Swift.Bool
  @objc public func getJsonString(modelId: Swift.String) -> Swift.String
  @objc public func getJsonData(modelId: Swift.String) -> Foundation.Data
  @objc public func stop()
  @objc public func restart()
  @available(*, renamed: "getModels")
  @objc public func getModules()
  @available(*, renamed: "findModel(ICD:)")
  @objc public func findModule(ICD: Swift.String)
  @available(*, renamed: "modelDownloaded(Id:)")
  @objc public func moduleDownloaded(id: Swift.String) -> Swift.Bool
  @objc deinit
}
extension HumanKit.HumanLanguage : Swift.Equatable {}
extension HumanKit.HumanLanguage : Swift.Hashable {}
extension HumanKit.HumanLanguage : Swift.RawRepresentable {}
extension HumanKit.HumanUIOptions : Swift.Equatable {}
extension HumanKit.HumanUIOptions : Swift.Hashable {}
extension HumanKit.HumanUIOptions : Swift.RawRepresentable {}
extension HumanKit.BackgroundOptions : Swift.Equatable {}
extension HumanKit.BackgroundOptions : Swift.Hashable {}
extension HumanKit.BackgroundOptions : Swift.RawRepresentable {}
