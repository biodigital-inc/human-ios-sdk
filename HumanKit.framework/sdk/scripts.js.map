{"version":3,"sources":["src/engine/studio/human-engine-studio.js","src/human-api/2/human-api.min.js","src/vendor/immer-6.0.9/dist/immer.umd.production.min.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,UAAU,OAAO;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,cAAc,WAAW,WAAW;AACpC;AACA;AACA;AACA;;AAEA,cAAc,WAAW,YAAY;AACrC;AACA;AACA;AACA;;AAEA,eAAe,YAAY,YAAY;AACvC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,mBAAmB,YAAY,YAAY;AAC3C,mBAAmB,YAAY,YAAY;AAC3C,mBAAmB,YAAY,aAAa;;AAE5C,qBAAqB,cAAc,cAAc;AACjD,qBAAqB,cAAc,cAAc;AACjD,qBAAqB,cAAc,eAAe;;AAElD;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2CAA2C,aAAa;;AAExD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,eAAe,YAAY,YAAY;AACvC,eAAe,YAAY,YAAY;AACvC,eAAe,YAAY,aAAa;;AAExC;AACA,wBAAwB,yBAAyB;AACjD,4BAA4B,qBAAqB;AACjD,4BAA4B,yBAAyB;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA,2CAA2C,aAAa;;AAExD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAK;AACjB,YAAY,KAAK;AACjB,YAAY,KAAK;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAK;AACjB,YAAY,KAAK;AACjB,YAAY,KAAK;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,YAAY,KAAK;AACjB;AACA;AACA;AACA;AACA;;AAEA,kB;AACA;AACA;AACA;AACA,mC;AACA,mC;AACA,GAAG,iD;AACH;AACA;AACA;AACA,mC;AACA,mC;AACA,GAAG,6B;AACH;AACA;AACA,mC;AACA;AACA,mC;AACA,GAAG,O;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB;AACA,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,MAAM;AACjB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU,KAAK;AACf,UAAU,KAAK;AACf;AACA,YAAY,KAAK;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,UAAU,KAAK;AACf,UAAU,KAAK;AACf;AACA,YAAY,KAAK;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,MAAM;AACjB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA,uBAAuB,OAAO;AAC9B,0BAA0B;AAC1B;AACA,0BAA0B;AAC1B;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA,uBAAuB,OAAO;AAC9B,0BAA0B,iBAAiB;AAC3C;AACA,0BAA0B,iBAAiB;AAC3C;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,K;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA,uBAAuB,OAAO;AAC9B,0BAA0B,iBAAiB,iBAAiB;AAC5D;AACA,0BAA0B,iBAAiB,iBAAiB;AAC5D;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAK;AACjB,YAAY,KAAK;AACjB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA,e;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA,e;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA,e;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,O;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,wCAAwC;AACxC;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,qCAAqC;AACrC;AACA;;AAEA;;AAEA;;AAEA,aAAa;;AAEb;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED,CAAC;AACD;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,4CAA4C;AAC5C,6BAA6B;AAC7B,gCAAgC;AAChC,6BAA6B;;AAE7B;AACA,sBAAsB,eAAe;AACrC;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,iDAAiD,sDAAsD,8CAA8C,sDAAsD;;AAE3M;AACA,iDAAiD,kBAAkB,8CAA8C,kBAAkB;AACnI;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,sEAAsE,WAAW;AACjF;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,mBAAmB,eAAe;AAClC,oBAAoB,OAAO,oEAAoE,WAAW;AAC1G;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;;AAEA;AACA,0EAA0E,UAAU;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6CAA6C,UAAU,oBAAoB,WAAW;AACtF,mBAAmB,OAAO;AAC1B,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,mBAAmB,EAAE;AACrB,mBAAmB,QAAQ;AAC3B,qBAAqB,cAAc;AACnC;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD,aAAa;AACb,oDAAoD;AACpD;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA,qBAAqB,cAAc;AACnC;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB,cAAc;AACnC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,2BAA2B,YAAY;AACvC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,2DAA2D,SAAS;AACpE;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,2DAA2D,SAAS;AACpE;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,2CAA2C;AAC3C;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA,qCAAqC;AACrC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,uBAAuB,WAAW;AAClC;AACA;AACA;AACA;;AAEA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;;;AAGA,KAAK;;AAEL,CAAC;AACD,CAAC;AACD;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,uBAAuB;AACvB,8BAA8B;AAC9B,+BAA+B;AAC/B,iCAAiC;AACjC,iCAAiC;AACjC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,8CAA8C,SAAS;AACvD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,+BAA+B,iBAAiB;AAChD;AACA;AACA;AACA;AACA;AACA;;AAEA,KAAK;;;AAGL;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;;AAEA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;;AAEA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;AAGA;AACA;AACA,CAAC;;AAED,CAAC;AACD;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E,cAAc,WAAW,YAAY;AACpH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6F;AACA,SAAS;;AAET;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,4BAA4B;;AAE5B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,aAAa,YAAY;AACzB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA,2BAA2B,kDAAkD;AAC7E;AACA;AACA,iBAAiB,YAAY;AAC7B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED,CAAC;AACD;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,4BAA4B;;AAE5B;AACA,4DAA4D;AAC5D;AACA;AACA;;;AAGA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,yDAAyD,mBAAmB;AAC5E;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,0BAA0B;AAC1B;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb,wBAAwB;AACxB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,gDAAgD,SAAS;AACzD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,2CAA2C;;AAE3C;AACA;AACA,uCAAuC;AACvC;;AAEA;AACA;AACA;AACA;AACA,6EAA6E,kBAAkB;AAC/F,aAAa;AACb;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,wDAAwD,SAAS;AACjE;AACA;;AAEA;AACA;AACA;AACA;AACA,kDAAkD;AAClD,6CAA6C;AAC7C,iFAAiF,kBAAkB;AACnG,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,+BAA+B;;AAE/B;;AAEA,qEAAqE;AACrE;AACA;;AAEA;AACA;AACA;AACA;AACA,mDAAmD,SAAS;AAC5D;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE;AACjE;AACA,kDAAkD;AAClD,4CAA4C;AAC5C;AACA;;AAEA;AACA;AACA,gBAAgB,aAAa;AAC7B;AACA;AACA;AACA;;AAEA;AACA,eAAe,OAAO;AACtB,gBAAgB,eAAe;AAC/B;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA,qDAAqD,oBAAoB;AACzE;AACA,eAAe,aAAa;AAC5B;AACA;;AAEA;AACA,mBAAmB;AACnB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,iCAAiC,kCAAkC,gBAAgB;AACnF;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,QAAQ;AACvB;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA,2BAA2B,qBAAqB;;AAEhD;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,4BAA4B;AAC5B;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA,sEAAsE;AACtE;AACA,aAAa;AACb;AACA,uCAAuC;AACvC;AACA;AACA;AACA,+BAA+B;AAC/B;;AAEA;AACA,6CAA6C;AAC7C;AACA,eAAe,aAAa;AAC5B;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;;AAED,CAAC;AACD;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,CAAC;AACD,CAAC;AACD;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,wBAAwB;;AAExB;AACA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mCAAmC,kBAAkB;AACrD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B,oBAAoB;AACnD;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;;AAEA,KAAK;AACL,CAAC;;;AAGD,CAAC;AACD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,oBAAoB;AAClC,eAAe,mBAAmB;AAClC,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,gBAAgB;AAC/B,eAAe,gBAAgB;AAC/B,iBAAiB,EAAE;AACnB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,8BAA8B,uBAAuB;;AAErD;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,gBAAgB;AAC/B,eAAe,gBAAgB;AAC/B,iBAAiB,gBAAgB;AACjC;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,8BAA8B,uBAAuB;;AAErD;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,gBAAgB;AAC/B,iBAAiB,gBAAgB;AACjC;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,8BAA8B,uBAAuB;;AAErD;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,gBAAgB;AAC/B,eAAe,gBAAgB;AAC/B,eAAe,gBAAgB;AAC/B,eAAe,gBAAgB;AAC/B,eAAe,gBAAgB;AAC/B,eAAe,gBAAgB;AAC/B,iBAAiB,gBAAgB;AACjC;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,eAAe,gBAAgB;AAC/B,eAAe,gBAAgB;AAC/B,eAAe,gBAAgB;AAC/B,eAAe,gBAAgB;AAC/B,eAAe,gBAAgB;AAC/B,iBAAiB,gBAAgB;AACjC,iBAAiB;AACjB;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,gBAAgB;AAC/B,eAAe,gBAAgB;AAC/B,eAAe,gBAAgB;AAC/B,eAAe,gBAAgB;AAC/B,eAAe,gBAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,gBAAgB;AAC/B,eAAe,gBAAgB;AAC/B,eAAe,gBAAgB;AAC/B,eAAe,gBAAgB;AAC/B,eAAe,gBAAgB;AAC/B,iBAAiB,gBAAgB;AACjC,iBAAiB;AACjB;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,eAAe,gBAAgB;AAC/B,eAAe,gBAAgB;AAC/B,eAAe,gBAAgB;AAC/B,iBAAiB,gBAAgB;AACjC;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,8BAA8B,wBAAwB;;AAEtD;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B,OAAO;AAClC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;AAGD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;AACD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iHAAiH;AACjH;AACA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,8BAA8B;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,c;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB;AACvB,uFAAuF;AACvF;AACA,aAAa,OAAO;AACpB,+BAA+B,8BAA8B;AAC7D;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA,uBAAuB,8BAA8B;AACrD;AACA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,8BAA8B;AACzD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,kF;AACA,qF;AACA,6F;AACA,6F;AACA,wF;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2BAA2B,8BAA8B;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;;AAED,CAAC;AACD;AACA;AACA;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,SAAS;;AAET;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC,I;AACD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA,sCAAsC;;AAEtC;AACA;AACA;AACA,+BAA+B,kBAAkB;AACjD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,CAAC;AACD;AACA;AACA;;AAEA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,CAAC;;AAED,CAAC;AACD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,iB;AACA,aAAa;AACb,8CAA8C,SAAS;AACvD;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,0CAA0C,SAAS;AACnD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,0CAA0C,SAAS;AACnD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,0CAA0C,SAAS;AACnD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,8CAA8C,SAAS;AACvD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,8CAA8C,SAAS;AACvD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,8CAA8C,SAAS;AACvD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,iB;AACA,aAAa;AACb,kDAAkD,SAAS;AAC3D;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;;AAEA;AACA;AACA,8CAA8C,SAAS;AACvD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,8CAA8C,SAAS;AACvD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,8CAA8C,SAAS;AACvD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,8CAA8C,SAAS;AACvD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA,8CAA8C,SAAS;AACvD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,8CAA8C,SAAS;AACvD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA,CAAC;;;;;;;;;AASD,CAAC;AACD,uCAAuC,mBAAmB;AAC1D;AACA,YAAY,mBAAmB;AAC/B,IAAI,oBAAoB;AACxB;AACA,+CAA+C,oB;AAC/C;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,0FAA0F,mBAAmB;AAC7G;AACA;AACA;AACA;;AAEA;AACA;AACA,mFAAmF,0BAA0B;AAC7G;AACA;AACA;AACA;;AAEA;AACA,yDAAyD,sBAAsB;AAC/E;AACA,iCAAiC,sBAAsB;AACvD,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,mBAAmB;AACxC;AACA;AACA;;AAEA,CAAC;AACD,CAAC;AACD;AACA;AACA,yCAAyC;AACzC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,4BAA4B;AAC5B,0BAA0B;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA,CAAC;AACD;AACA,6BAA6B;AAC7B;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,4BAA4B;AAC5B,0BAA0B;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,CAAC;AACD,uCAAuC,mBAAmB;AAC1D;AACA,YAAY,mBAAmB;AAC/B,IAAI,oBAAoB;AACxB;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,0FAA0F,mBAAmB;AAC7G;AACA;AACA;AACA;;AAEA;AACA;AACA,mFAAmF,0BAA0B;AAC7G;AACA;AACA;AACA;;AAEA;AACA,yDAAyD,sBAAsB;AAC/E;AACA,iCAAiC,sBAAsB;AACvD,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yGAAyG;AACzG;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA,SAAS;AACT;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,uBAAuB,aAAa;AACpC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,2CAA2C,SAAS;AACpD;;AAEA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iB;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iB;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA,2CAA2C,SAAS;AACpD;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,CAAC;AACD,CAAC;AACD,uCAAuC,mBAAmB;AAC1D;AACA,YAAY,mBAAmB;AAC/B,IAAI,oBAAoB;AACxB;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;AAGA;AACA,0FAA0F,mBAAmB;AAC7G;AACA;AACA;AACA;;AAEA;AACA;AACA,mFAAmF,0BAA0B;AAC7G;AACA;AACA;AACA;;AAEA;AACA,yDAAyD,sBAAsB;AAC/E;AACA,iCAAiC,sBAAsB;AACvD,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,mBAAmB;AACxC;AACA;;AAEA,uDAAuD;AACvD,6DAA6D;AAC7D,4DAA4D;AAC5D,iCAAiC,KAAK;AACtC;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gCAAgC;AAChC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAoB,+BAA+B;AACnD;AACA;AACA;AACA;AACA;AACA,oBAAoB,+BAA+B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;AACD,CAAC;AACD,wDAAwD,mBAAmB;AAC3E;AACA;;AAEA;AACA;;AAEA;;AAEA,qEAAqE;;AAErE,yBAAyB;AACzB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,KAAK;AACtB;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA,qBAAqB;;AAErB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,0BAA0B;;AAE1B;AACA,sFAAsF;;AAEtF;;AAEA;AACA;;;AAGA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,KAAK;AACpB;AACA;;AAEA;AACA,mBAAmB;AACnB;;AAEA,mCAAmC;;AAEnC;;AAEA;;AAEA,oDAAoD;AACpD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;AACD,CAAC;AACD;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,eAAe;AAC9B,eAAe,aAAa;AAC5B;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,4BAA4B;AAC5B;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;;AAEA;AACA,eAAe,OAAO;AACtB,iBAAiB,KAAK;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,KAAK;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,KAAK;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,IAAI;AACnB,iBAAiB,KAAK;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA,eAAe,cAAc;AAC7B,iBAAiB,KAAK;AACtB;AACA;AACA;AACA,2BAA2B,8BAA8B;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gDAAgD,SAAS;AACzD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gDAAgD,SAAS;AACzD;AACA;AACA;;AAEA;AACA,eAAe,IAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,cAAc;AAC7B,iBAAiB,KAAK;AACtB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4BAA4B;AAC5B,2BAA2B,uBAAuB;AAClD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,SAAS,OAAO;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,uCAAuC,SAAS,OAAO;AACvD;AACA;AACA;AACA,8CAA8C,SAAS,OAAO;AAC9D;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,QAAQ;AAC9C;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA,eAAe,KAAK;AACpB,eAAe,IAAI;AACnB,gBAAgB,KAAK;AACrB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,6BAA6B;AAC7B,iDAAiD;AACjD;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,SAAS;;AAET;AACA;AACA;;AAEA,SAAS;AACT;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,sBAAsB;AACrC,gBAAgB,OAAO;AACvB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,eAAe,cAAc;AAC7B;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,SAAS;AACT;;AAEA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA,eAAe,cAAc;AAC7B;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,SAAS;AACT;;AAEA,SAAS;AACT;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,sBAAsB;AACrC,gBAAgB,OAAO;AACvB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,SAAS;AACT,kFAAkF;;AAElF,SAAS;AACT;AACA;;AAEA;AACA;AACA;;AAEA,yBAAyB;AACzB;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,uBAAuB,SAAS;AAChC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,SAAS;AAChC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,gDAAgD,SAAS;;AAEzD;;AAEA,sEAAsE;;AAEtE,8EAA8E;AAC9E;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA,wDAAwD;AACxD;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,+BAA+B,SAAS;AACxC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA,uCAAuC;;AAEvC;AACA,gDAAgD,SAAS;AACzD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,4BAA4B;AAC5B;AACA;;AAEA;AACA;;AAEA,CAAC;AACD,CAAC;AACD,wDAAwD,mBAAmB;AAC3E;AACA;;AAEA;AACA;;AAEA;AACA,uCAAuC;AACvC;;AAEA;;AAEA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gDAAgD;AAChD;AACA;;AAEA;AACA;AACA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,6CAA6C,yBAAyB;AACtE;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;;AAEA;;AAEA,uCAAuC;AACvC,oCAAoC;AACpC;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uEAAuE,aAAa;AACpF;AACA;AACA;;AAEA;AACA;AACA,gDAAgD;AAChD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,WAAW;AACxmBAAmB;AAC/C;AACA;;AAEA;AACA;AACA;;AAEA;AACA,mCAAmC,iBAAiB;AACpD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,4BAA4B,kBAAkB;AAC9C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;;AAEA;AACA;AACA;AACA,qBAAqB,aAAa;;AAElC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb,6BAA6B;AAC7B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,WAAW;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,6BAA6B;AAC7B;AACA;AACA;AACA;;AAEA;AACA,kEAAkE;AAClE,0DAA0D;AAC1D,uDAAuD;AACvD,gEAAgE;AAChE,sEAAsE;AACtE,2DAA2D;AAC3D,mEAAmE;AACnE,+CAA+C;AAC/C,iDAAiD;AACjD,kDAAkD;AAClD,kDAAkD;AAClD;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,uCAAuC;;AAEvC;AACA;AACA;AACA;AACA,aAAa;;AAEb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,6CAA6C,SAAS;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,6CAA6C,SAAS;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,mDAAmD,SAAS;AAC5D;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,mDAAmD,SAAS;AAC5D;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gDAAgD,SAAS;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,sDAAsD,UAAU;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,aAAa;AACb;AACA,SAAS,YAAY;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,mCAAmC,cAAc;AACjD;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iDAAiD,SAAS;AAC1D;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,2CAA2C,SAAS;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,WAAW;AACtiBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,mDAAmD,SAAS;;AAE5D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA,kCAAkC;AAClC;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,qBAAqB;AACrB;AACA;AACA,gDAAgD,SAAS;AACzD;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA,mEAAmE;AACnE;AACA,SAAS;;AAET,mDAAmD,wEAAwE;;AAE3H;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;;AAEA,oEAAoE;AACpE;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,yCAAyC,SAAS;AAClD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,CAAC;AACD,CAAC;AACD;AACA;AACA;AACA;AACA;;AAEA;AACA,wDAAwD;AACxD;AACA,CAAC;;;;AAID,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kFAAkF,uBAAuB;AACzG;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,6CAA6C,uBAAuB;AACpE;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,gBAAgB;AAChmCAAmC;AACnC;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;AACA;;AAEA;AACA,6CAA6C,4BAA4B;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA,yEAAyE,uBAAuB;AAChG;AACA;AACA;;AAEA;;AAEA,uCAAuC;;AAEvC;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA,4DAA4D,SAAS;;AAErE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,kDAAkD,SAAS;;AAE3D;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,SAAS;AACT;AACA;;AAEA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,mCAAmC;AACnC;;AAEA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA,uCAAuC;AACvC,wEAAwE;AACxE;AACA;AACA,0DAA0D,SAAS;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mCAAmC;;AAEnC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,iDAAiD,SAAS;AAC1D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,iDAAiD,SAAS;AAC1D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,sCAAsC;AACtC;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,aAAa;AACxC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,2CAA2C,SAAS;AACpD;;AAEA,2BAA2B,OAAO;AAClC;;AAEA,+BAA+B,gBAAgB;AAC/C;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,qB;;AAEA;AACA;AACA;;AAEA;AACA;AACA,qB;;AAEA;AACA;AACA;;AAEA;AACA;AACA,qB;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,2CAA2C,SAAS;AACpD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,2BAA2B,gBAAgB;AAC3C;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,0B;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,CAAC;AACD,CAAC;AACD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA,4CAA4C;AAC5C,6BAA6B;AAC7B,gCAAgC;AAChC,6BAA6B;AAC7B;;;AAGA;AACA;AACA,sEAAsE,0BAA0B;AAChG;AACA;AACA;AACA;;;AAGA;AACA;AACA,gBAAgB,WAAW;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,4CAA4C,SAAS;AACrD;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,6CAA6C,SAAS;AACtD;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD,aAAa;AACb;AACA;;AAEA;AACA,S;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oFAAoF;AACpF;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yCAAyC,SAAS;AAClD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,8EAA8E;AAC9E;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yCAAyC,SAAS;AAClD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,M;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA,qBAAqB,YAAY,EAAE;AACnC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,mCAAmC;AAChD,aAAa,mCAAmC;AAChD,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA,6CAA6C;AAC7C,mDAAmD;AACnD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wDAAwD,aAAa,eAAe,iBAAiB;AACrG;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,gBAAgB,eAAe;AAC/B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,gBAAgB,aAAa;AAC7B;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB,gBAAgB,aAAa;AAC7B;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,kEAAkE,WAAW;AAC7E;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,eAAe;AAC9B,gBAAgB,OAAO,oEAAoE,WAAW;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mFAAmF,UAAU;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yCAAyC,UAAU,oBAAoB,WAAW;AAClF,eAAe,OAAO;AACtB,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA,CAAC;;AAED,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C,sBAAsB;AACnE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,mFAAmF,uBAAuB;AAC1G;AACA;AACA;;AAEA;;AAEA;;AAEA,uCAAuC;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;;AAErB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb,gEAAgE;AAChE;AACA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa,yBAAyB;AACtC;AACA,aAAa,uBAAuB;AACpC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,wCAAwC;AACxC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,uBAAuB,kBAAkB;AACzC;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET,6BAA6B;AAC7B;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE;AACjE;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA,gDAAgD,SAAS;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uCAAuC;AACvC,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA,uBAAuB,qCAAqC;AAC5D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA,8BAA8B;AAC9B;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;;AAGL,CAAC;AACD,CAAC;AACD;AACA;AACA;AACA;AACA;;AAEA;;AAEA,6CAA6C,sBAAsB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA,wEAAwE,uBAAuB;AAC/F;AACA;AACA;;AAEA;;AAEA,uCAAuC;;AAEvmCAAmC;AACnC;;AAEA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA,wDAAwD;AACxD;AACA;AACA,qDAAqD;AACrD;AACA;AACA,uDAAuD;AACvD;AACA;AACA,oDAAoD;AACpD;AACA;AACA,wDAAwD;AACxD;AACA;AACA,4DAA4D;AAC5D;AACA,qCAAqC;AACrC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA,6CAA6C,uBAAuB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;;AAEA;AACA,wCAAwC;AACxC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B;AAC/B;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,2BAA2B,kBAAkB;;AAE7C;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA,iEAAiE,UAAU;AAC3E;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;;AAE7B;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,SAAS;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;AACD,CAAC;AACD;AACA;AACA;AACA;AACA;;AAEA,6CAA6C,wBAAwB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,uCAAuC;;AAEvC;AACA;AACA,iBAAiB;AACjB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA,aAAa;;AAEb;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,iBAAiB;AACjB;AACA;;AAEA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,uCAAuC;AACvC;AACA,SAAS,OAAO;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET,6BAA6B;AAC7B;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE;AACjE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uCAAuC;AACvC,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,UAAU;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;;AAEA,uCAAuC;;AAEvC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;;AAEA,CAAC;;AAED,CAAC;AACD;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;;;;AAID,CAAC;AACD,mCAAmC,oBAAoB;AACvD;AACA;AACA,mCAAmC,qBAAqB;AACxD,sCAAsC,oBAAoB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,qBAAqB;AAC9C,qBAAqB,qBAAqB;AAC1C;AACA;AACA,6CAA6C,oBAAoB,oBAAoB,qBAAqB;AAC1G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,aAAa,GAAG,aAAa,GAAG,gBAAgB;AAChF;AACA,MAAM,uBAAuB,mDAAmD,mBAAmB;AACnG,sFAAsF;AACtF;AACA;AACA,qDAAqD,sBAAsB;AAC3E;AACA;AACA,uBAAuB,uBAAuB,qDAAqD;AACnG,mBAAmB,oBAAoB;AACvC,oFAAoF,mBAAmB;AACvG,iBAAiB,sBAAsB;AACvC;AACA,8BAA8B,qBAAqB,aAAa,mBAAmB;AACnF,IAAI,oBAAoB,uEAAuE,sBAAsB;AACrH,SAAS,mBAAmB,gEAAgE,oBAAoB;AAChH;;AAEA;AACA,qEAAqE,oBAAoB,WAAW;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA,+CAA+C,sBAAsB;AACrE;AACA;AACA,SAAS;;AAET,+CAA+C,oBAAoB;AACnE;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA,yCAAyC,oBAAoB;AAC7D;AACA;AACA;;AAEA;AACA,yCAAyC,uBAAuB;AAChE;AACA;AACA;;AAEA;AACA,yCAAyC,sBAAsB;AAC/D;AACA;AACA;;AAEA;AACA,yCAAyC,sBAAsB;AAC/D;AACA;AACA;;AAEA;AACA,yCAAyC,sBAAsB;AAC/D;AACA;AACA;;AAEA;AACA,yCAAyC,oBAAoB;AAC7D;AACA;AACA;;AAEA;AACA,yCAAyC,wBAAwB;AACjE;AACA;AACA;;AAEA;AACA,yCAAyC,4BAA4B;AACrE;AACA;AACA;;AAEA;AACA,yCAAyC,uBAAuB;AAChE;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B;AAC3B;AACA;AACA;;AAEA;AACA,yBAAyB;AACzB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,qGAAqG,cAAc,KAAK,YAAY;AACpI;AACA;AACA;AACA;AACA;;AAEA;AACA,4FAA4F,cAAc,KAAK,YAAY;AAC3H;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,kCAAkC;AAClC,6BAA6B;AAC7B,uCAAuC;AACvC,yBAAyB;AACzB,wDAAwD;AACxD,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA,kCAAkC;AAClC,6BAA6B;AAC7B,sCAAsC;AACtC,0CAA0C;AAC1C;AACA,8EAA8E;AAC9E,+DAA+D;AAC/D,uEAAuE;AACvE,gDAAgD;AAChD,2CAA2C;AAC3C,uCAAuC;AACvC,+EAA+E;AAC/E,aAAa;AACb,yBAAyB;AACzB,yDAAyD;AACzD,kFAAkF;AAClF,kFAAkF;AAClF,kFAAkF;AAClF,kFAAkF;AAClF,gDAAgD;AAChD,0CAA0C;AAC1C,0CAA0C;AAC1C,0CAA0C;AAC1C,0CAA0C;AAC1C,8FAA8F;AAC9F,yFAAyF;AACzF,8DAA8D;AAC9D,6GAA6G;AAC7G,wCAAwC;AACxC,gDAAgD;AAChD,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA,gEAAgE,SAAS;AACzE;AACA;AACA;AACA;;AAEA;;AAEA,qCAAqC,SAAS;AAC9C;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,+DAA+D,SAAS;AACxE;AACA;AACA;AACA;;AAEA;;AAEA,qCAAqC,SAAS;AAC9C;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C,2CAA2C;AAC3C;AACA;AACA,2CAA2C;AAC3C;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,+BAA+B;AAC/B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAS;AACT;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA;;AAEA;AACA,0CAA0C,qBAAqB;AAC/D,gBAAgB,sBAAsB;AACtC;AACA;AACA,eAAe,OAAO;AACtB;AACA;;AAEA;;AAEA,sBAAsB;AACtB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;;AAElB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA,mEAAmE;;AAEnE,qDAAqD;AACrD;AACA;AACA,mEAAmE;;AAEnE,qDAAqD;AACrD;AACA;AACA;AACA,mEAAmE;;AAEnE,6DAA6D;AAC7D;AACA;AACA,2EAA2E;;AAE3E,sDAAsD;AACtD;AACA;AACA,oEAAoE;;AAEpE,4DAA4D;AAC5D;AACA;AACA;AACA,0EAA0E;;AAE1E;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,+CAA+C,SAAS;AACxD;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA,0DAA0D;AAC1D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,+CAA+C,SAAS;AACxD;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,yCAAyC;AACzC;AACA;AACA,kDAAkD;AAClD;;AAEA,iGAAiG;AACjG;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,SAAS;AACzD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,qCAAqC;AACrC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,sE;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA,mCAAmC;AACnC;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,iFAAiF;AACjF;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA,mBAAmB,EAAE;AACrB,qBAAqB;AACrB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA,oDAAoD;;AAEpD;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,qDAAqD;;AAErD;;AAEA,oDAAoD;AACpD;;AAEA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA,0BAA0B;;AAE1B;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;;AAEA;;AAEA;AACA;AACA;;AAEA,uCAAuC;AACvC;AACA;AACA;AACA;;AAEA,wDAAwD,SAAS;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA,oCAAoC;;AAEpC;AACA;;AAEA,uCAAuC;AACvC;;AAEA;;AAEA;AACA,0CAA0C;AAC1C;AACA,qBAAqB,QAAQ;AAC7B;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,iCAAiC;AACjC;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA,eAAe,EAAE;AACjB,eAAe,QAAQ;AACvB,eAAe,EAAE;AACjB,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,qDAAqD,SAAS;AAC9D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA,iDAAiD,UAAU;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,sFAAsF;AACtF;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,0BAA0B,oBAAoB;AAC9C;AACA;AACA;AACA,aAAa;AACb;;AAEA;;AAEA;AACA;AACA;;AAEA,yDAAyD,SAAS;AAClE;AACA;AACA;AACA;AACA;AACA;;AAEA,8DAA8D,SAAS;AACvE;AACA;AACA;AACA;AACA;AACA;;AAEA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iEAAiE,SAAS;AAC1E;AACA;AACA;AACA;AACA;AACA;;AAEA,sEAAsE,SAAS;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,aAAa,OAAO;AACpB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,yDAAyD,SAAS,OAAO;AACzE;;AAEA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,4EAA4E,SAAS;AACrF;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,yBAAyB;AACzB;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,mCAAmC,iCAAiC;AACpE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6BAA6B;AAC7B;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB;AACrB;;AAEA,gF;AACA,gF;;AAEA;AACA;AACA;AACA,mCAAmC,iCAAiC;AACpE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,mCAAmC,iCAAiC;AACpE;;AAEA;AACA;AACA,6BAA6B;AAC7B;AACA,6B;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2C;AACA,qBAAqB;AACrB;;AAEA,mCAAmC,iCAAiC;AACpE;;AAEA;AACA;AACA,6BAA6B;AAC7B;AACA,6B;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mFAAmF,SAAS;AAC5F;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,yB;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;;AAEA;AACA,iEAAiE,qBAAqB;AACtF;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA,uBAAuB,UAAU;;AAEjC,kDAAkD;;AAElD;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,CAAC;;AAED,CAAC;AACD,oDAAoD,4BAA4B;AAChF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,2BAA2B;;AAE3B,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,sCAAsC;AACtC,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yBAAyB;;AAEzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,kDAAkD,SAAS;AAC3D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kDAAkD,SAAS;AAC3D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kDAAkD,SAAS;AAC3D;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,oDAAoD;AACpD;AACA,0DAA0D;AAC1D,wDAAwD;AACxD;AACA,mDAAmD;AACnD,mDAAmD;AACnD,mDAAmD;;AAEnD;AACA,0DAA0D;AAC1D;AACA,wEAAwE;AACxE;AACA;;AAEA;AACA,oEAAoE;AACpE;;AAEA,uDAAuD;;AAEvD;AACA,6DAA6D;AAC7D,2DAA2D;AAC3D;;AAEA;AACA,4DAA4D,GAAG;AAC/D,oEAAoE;AACpE,iEAAiE;AACjE;;AAEA;AACA,wEAAwE;AACxE;AACA;;AAEA,sCAAsC;;AAEtC;AACA,gGAAgG;AAChG,iBAAiB;AACjB,gEAAgE;AAChE;;AAEA;AACA;AACA;AACA,8IAA8I;AAC9I,yBAAyB;AACzB,8GAA8G;AAC9G;AACA;AACA;AACA,6EAA6E;;AAE7E,wDAAwD;;AAExD;AACA,uDAAuD;AACvD;;AAEA,4EAA4E;AAC5E,oEAAoE;;AAEpE;AACA,qEAAqE;AACrE;;AAEA;AACA,+DAA+D;AAC/D;;AAEA;AACA,2DAA2D;AAC3D;AACA,2EAA2E;AAC3E;AACA;AACA,2EAA2E;AAC3E;AACA,mFAAmF;AACnF;;AAEA,sBAAsB;;AAEtB;AACA;;AAEA;;AAEA;;AAEA,uFAAuF;;AAEvF,uDAAuD;;AAEvD;AACA,yDAAyD;AACzD,iBAAiB;AACjB,0DAA0D,GAAG;AAC7D,0DAA0D,GAAG;AAC7D;;AAEA;AACA,mCAAmC,+BAA+B;AAClE,+EAA+E;AAC/E;AACA,kFAAkF;AAClF;AACA;AACA;;AAEA;AACA,2DAA2D;AAC3D,qEAAqE;AACrE;;AAEA,sCAAsC;;AAEtC;;AAEA;AACA,iDAAiD;AACjD;AACA;AACA,mDAAmD;AACnD;;AAEA,mCAAmC,+BAA+B;AAClE;AACA;AACA,mNAAmN;AACnN,yBAAyB;AACzB;AACA,wKAAwK;AACxK;AACA;;AAEA;AACA;AACA,iDAAiD,SAAS,EAAE;AAC5D;;AAEA;AACA;AACA;AACA,mDAAmD,SAAS,EAAE;AAC9D;;AAEA;AACA;AACA,0DAA0D;AAC1D,iBAAiB;AACjB,6DAA6D,GAAG;AAChE,qEAAqE;AACrE,8BAA8B,OAAO,GAAG;AACxC;AACA,iJAAiJ;AACjJ,qBAAqB;AACrB,+EAA+E;AAC/E;AACA,8BAA8B;AAC9B;AACA,sBAAsB;;AAEtB;AACA;;AAEA;;AAEA;;AAEA,oDAAoD;AACpD,mDAAmD;AACnD,mDAAmD;AACnD,mDAAmD;;AAEnD;AACA,oEAAoE;AACpE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8EAA8E;AAC9E,gFAAgF;AAChF;AACA,yFAAyF;AACzF;AACA;AACA;;AAEA,uDAAuD;;AAEvD;AACA,4DAA4D,GAAG;AAC/D,oEAAoE;AACpE,iEAAiE;AACjE;;AAEA;AACA,wEAAwE;AACxE;AACA;;AAEA,sCAAsC;;AAEtC;AACA,gGAAgG;AAChG,iBAAiB;AACjB,gEAAgE;AAChE;;AAEA;AACA;AACA;AACA,8IAA8I;AAC9I,yBAAyB;AACzB,8GAA8G;AAC9G;AACA;AACA;AACA,6EAA6E;;AAE7E,wDAAwD;;AAExD,4EAA4E;AAC5E,oEAAoE;;AAEpE;AACA;AACA,oKAAoK;AACpK,qBAAqB;AACrB,uGAAuG;AACvG;AACA;;AAEA,sBAAsB;;AAEtB;AACA;;AAEA;;AAEA;;AAEA,uFAAuF;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE;AACpE,8EAA8E;AAC9E;AACA;;AAEA,sCAAsC;AACtC,4CAA4C;AAC5C;AACA,2CAA2C;AAC3C,4EAA4E;AAC5E;AACA,sEAAsE;AACtE;AACA,qDAAqD;AACrD,kFAAkF;AAClF,0BAA0B;AAC1B;AACA,0CAA0C;AAC1C,sBAAsB;;AAEtB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,SAAS;AAC5E;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,SAAS;AAC5E;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,SAAS;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,SAAS;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA,mDAAmD,GAAG;;AAEtD;AACA,uDAAuD,GAAG;AAC1D,iBAAiB;AACjB,+DAA+D,GAAG;AAClE;;AAEA,mDAAmD,GAAG;;AAEtD,oDAAoD,GAAG;;AAEvD;AACA,wDAAwD,GAAG;AAC3D,iBAAiB;AACjB,gEAAgE;AAChE;;AAEA,sDAAsD,GAAG;;AAEzD;AACA,0DAA0D;AAC1D;AACA,wEAAwE;AACxE,kEAAkE;AAClE;AACA;AACA,sEAAsE;AACtE,mEAAmE;AACnE,oEAAoE;AACpE;AACA;;AAEA;AACA,oEAAoE;AACpE;;AAEA;AACA,wDAAwD,GAAG;AAC3D,0DAA0D,GAAG;;AAE7D,4DAA4D,GAAG;;AAE/D;AACA,iEAAiE,GAAG;AACpE;;AAEA;AACA,6DAA6D,GAAG;AAChE,6DAA6D;AAC7D;AACA;;AAEA;;AAEA;;AAEA;AACA,4DAA4D,SAAS;AACrE;AACA,8EAA8E;AAC9E;AACA,uFAAuF;AACvF;AACA;AACA;AACA;AACA;;AAEA;AACA,6DAA6D;AAC7D,qDAAqD,GAAG;AACxD;;AAEA;AACA,2DAA2D,GAAG;AAC9D;;AAEA;AACA,2DAA2D;AAC3D;;AAEA,sDAAsD,GAAG;;AAEzD,gCAAgC;;AAEhC;;AAEA;AACA,wDAAwD,SAAS;AACjE;AACA,4EAA4E;AAC5E;AACA;AACA;AACA;;AAEA;AACA,6DAA6D;AAC7D,2DAA2D;AAC3D;;AAEA;AACA,4DAA4D,GAAG;AAC/D,oEAAoE;AACpE,iEAAiE;AACjE;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA,kEAAkE;AAClE;AACA;;AAEA;AACA,wEAAwE;AACxE;AACA;;AAEA;;AAEA;AACA;;AAEA,yDAAyD;AACzD,6DAA6D;AAC7D,6DAA6D;AAC7D,6DAA6D;AAC7D,0BAA0B;AAC1B;;AAEA;AACA,mDAAmD;AACnD,kFAAkF;AAClF,6CAA6C;AAC7C,mHAAmH;AACnH,8BAA8B;AAC9B,iDAAiD;AACjD,0BAA0B;AAC1B;;AAEA,sCAAsC;;AAEtC;AACA,8DAA8D;AAC9D;;;AAGA;AACA,8FAA8F;AAC9F,iBAAiB;AACjB,8DAA8D;AAC9D;;AAEA;AACA,uFAAuF;AACvF,iBAAiB;AACjB,yEAAyE;AACzE;;AAEA;AACA;AACA;AACA;AACA,8IAA8I;AAC9I,yBAAyB;AACzB,8GAA8G;AAC9G;AACA;AACA;AACA;AACA;AACA,gJAAgJ;AAChJ,6BAA6B;AAC7B,kIAAkI;AAClI;AACA;AACA;AACA;AACA,6GAA6G;AAC7G;AACA;;AAEA;AACA,6DAA6D;AAC7D;;AAEA,yDAAyD;AACzD,wDAAwD;;AAExD;AACA,oEAAoE;AACpE;;AAEA,sCAAsC;AACtC,qCAAqC;;AAErC;AACA,uDAAuD;AACvD;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,6EAA6E;;AAE7E,mDAAmD;AACnD,kDAAkD;AAClD,uDAAuD;;AAEvD;AACA,6DAA6D;AAC7D;;AAEA,oEAAoE;AACpE,uEAAuE;;AAEvE,iBAAiB;;AAEjB,mEAAmE;AACnE,kEAAkE;AAClE;;AAEA;AACA,oFAAoF;AACpF,2FAA2F;AAC3F;AACA,gEAAgE;AAChE;AACA;;AAEA;AACA,8DAA8D;AAC9D;;AAEA,wDAAwD;;AAExD,mEAAmE;;AAEnE;AACA,yDAAyD;AACzD;;AAEA,+GAA+G;;AAE/G;;AAEA;;AAEA;AACA,wDAAwD,SAAS;AACjE;AACA;AACA,kJAAkJ;AAClJ,iCAAiC;AACjC,+FAA+F;AAC/F;AACA;AACA;AACA;AACA;;AAEA;AACA,+DAA+D;AAC/D;;AAEA;AACA,qEAAqE;AACrE;;AAEA;AACA,2DAA2D;AAC3D;AACA,2EAA2E;AAC3E;AACA;AACA,oFAAoF;AACpF,2EAA2E;AAC3E;AACA;AACA,mFAAmF;AACnF;AACA,mFAAmF;AACnF;;AAEA,sBAAsB;;AAEtB;AACA;;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,uFAAuF;;AAEvF,4DAA4D;AAC5D,qDAAqD;;AAErD;AACA;AACA;;AAEA;AACA,6DAA6D;AAC7D,6MAA6M;AAC7M,0BAA0B;AAC1B;;AAEA;AACA,6DAA6D;AAC7D;;AAEA;AACA,6CAA6C;AAC7C,oHAAoH;AACpH,0BAA0B;;AAE1B,+CAA+C;AAC/C,gEAAgE;AAChE,0BAA0B;AAC1B;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,sFAAsF;AACtF,kFAAkF;AAClF,0BAA0B;;AAE1B,+CAA+C;AAC/C,uCAAuC;AACvC,2CAA2C;AAC3C,2BAA2B;;AAE3B,gDAAgD;AAChD,yCAAyC;AACzC,0CAA0C;AAC1C,2BAA2B;;AAE3B,0CAA0C;AAC1C,0CAA0C;AAC1C,4CAA4C;AAC5C,6CAA6C;AAC7C,4CAA4C;AAC5C,2BAA2B;;AAE3B,0CAA0C;AAC1C,iDAAiD;AACjD,sDAAsD;AACtD,kDAAkD;AAClD,0CAA0C,GAAG;AAC7C,2BAA2B;;AAE3B;;AAEA;;AAEA;;AAEA,0MAA0M;AAC1M,uKAAuK;AACvK,8BAA8B;AAC9B;;AAEA;;AAEA;;AAEA,6FAA6F,GAAG;AAChG,gEAAgE;AAChE,6DAA6D;AAC7D,8BAA8B;;AAE9B,mHAAmH;AACnH,uJAAuJ;AACvJ,mFAAmF;AACnF,8BAA8B;;AAE9B,uLAAuL;AACvL,2GAA2G,GAAG;AAC9G;AACA,6HAA6H;AAC7H,yBAAyB;AACzB,uHAAuH;AACvH;AACA,mDAAmD;AACnD,8BAA8B;;AAE9B,oJAAoJ;AACpJ,sGAAsG;AACtG,mFAAmF;AACnF,kFAAkF;AAClF,6DAA6D;AAC7D,6FAA6F;AAC7F,6EAA6E;AAC7E,mEAAmE;AACnE,8BAA8B;;AAE9B,oQAAoQ;AACpQ,iHAAiH;AACjH,gHAAgH;AAChH,sHAAsH;AACtH,wJAAwJ;AACxJ,0JAA0J;AAC1J,0GAA0G;AAC1G,8BAA8B;AAC9B;;AAEA;;AAEA,4FAA4F;AAC5F,2FAA2F;AAC3F,qFAAqF;AACrF,0BAA0B;;AAE1B,8GAA8G;AAC9G,qDAAqD;AACrD,6FAA6F;AAC7F,6FAA6F;AAC7F,qDAAqD;AACrD,0BAA0B;;AAE1B,wHAAwH;AACxH,yDAAyD;AACzD,6FAA6F;AAC7F,6FAA6F;AAC7F,iEAAiE;AACjE,0BAA0B;;AAE1B,kFAAkF;AAClF,yDAAyD;AACzD,iFAAiF;AACjF,0EAA0E;AAC1E,0BAA0B;;AAE1B,0KAA0K;AAC1K,oEAAoE;AACpE,sGAAsG;AACtG,0GAA0G;AAC1G,sGAAsG;AACtG,0FAA0F;AAC1F,8FAA8F;AAC9F,wEAAwE;AACxE,mFAAmF;AACnF,4DAA4D;AAC5D,+CAA+C;AAC/C,0BAA0B;;AAE1B,qLAAqL;AACrL,0GAA0G;AAC1G,+EAA+E;AAC/E,4GAA4G;AAC5G,mKAAmK;AACnK,0BAA0B;;AAE1B,iBAAiB;;AAEjB;AACA;AACA;;AAEA;AACA,2DAA2D,GAAG;AAC9D;;AAEA;AACA,2DAA2D;AAC3D;;AAEA,sDAAsD,GAAG;;AAEzD;AACA,qDAAqD,GAAG;AACxD;;AAEA;;AAEA;;AAEA;AACA,qHAAqH;AACrH,iHAAiH;AACjH,iHAAiH;AACjH,gEAAgE;AAChE,gEAAgE;AAChE,qFAAqF;AACrF,sFAAsF;AACtF,uEAAuE;AACvE,4FAA4F;AAC5F,kEAAkE;AAClE,sEAAsE;AACtE,kCAAkC;;AAElC;AACA,4HAA4H;AAC5H,qHAAqH;AACrH,qHAAqH;AACrH,oEAAoE;AACpE,oEAAoE;AACpE,yFAAyF;AACzF,0FAA0F;AAC1F,2EAA2E;AAC3E,+EAA+E;AAC/E,0GAA0G;AAC1G,sGAAsG;AACtG,sEAAsE;AACtE,4EAA4E;AAC5E,sCAAsC;AACtC;AACA,yBAAyB;AACzB,+DAA+D;;AAE/D;AACA;AACA,4DAA4D;AAC5D,kDAAkD;AAClD;AACA;AACA;;AAEA,wDAAwD;AACxD;AACA,4DAA4D,SAAS;AACrE;AACA,4EAA4E;AAC5E;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mDAAmD,GAAG;AACtD,mDAAmD,GAAG;;AAEtD;AACA;AACA;;AAEA,oDAAoD;AACpD,sDAAsD,GAAG;;AAEzD;AACA;AACA;;AAEA;;AAEA,0DAA0D;AAC1D,8DAA8D;;AAE9D;;AAEA;;AAEA,uEAAuE,SAAS;AAChF;AACA,yEAAyE;AACzE;AACA,4EAA4E;AAC5E;AACA,8EAA8E;AAC9E;AACA;;AAEA;;AAEA;AACA;;AAEA,sHAAsH;AACtH,sEAAsE;AACtE,6GAA6G;AAC7G,6DAA6D;AAC7D,+BAA+B;;AAE/B;AACA,6EAA6E;AAC7E,2EAA2E;AAC3E,wEAAwE;AACxE;;AAEA;AACA,8EAA8E;AAC9E,4EAA4E;AAC5E,yEAAyE;AACzE;;AAEA;AACA,2EAA2E;AAC3E,yEAAyE;AACzE,sEAAsE;AACtE;;AAEA;AACA,kFAAkF;AAClF,gFAAgF;AAChF,6EAA6E;AAC7E;;AAEA;AACA,6EAA6E;AAC7E,2EAA2E;AAC3E,wEAAwE;AACxE;;AAEA;AACA,0EAA0E;AAC1E,wEAAwE;AACxE,qEAAqE;AACrE;;AAEA;AACA,8EAA8E;AAC9E,4EAA4E;AAC5E,yEAAyE;AACzE;AACA;;AAEA;;AAEA;AACA,6DAA6D;AAC7D,sEAAsE;AACtE,8DAA8D;AAC9D;;AAEA;;AAEA;AACA,oEAAoE;AACpE;;AAEA;AACA;AACA;;AAEA;;AAEA,2DAA2D,GAAG;;AAE9D;;AAEA;;AAEA,2EAA2E,SAAS;AACpF;AACA,sFAAsF;AACtF,kFAAkF;AAClF,kFAAkF;AAClF;AACA;;AAEA;AACA,kFAAkF;AAClF,8EAA8E;AAC9E,8EAA8E;AAC9E;;AAEA;AACA,6EAA6E;AAC7E,yEAAyE;AACzE,yEAAyE;AACzE;;AAEA,0DAA0D;;AAE1D;AACA,+DAA+D;AAC/D;;AAEA,mCAAmC,0BAA0B;;AAE7D;;AAEA,wEAAwE;;AAExE;AACA,yEAAyE;AACzE;;AAEA;AACA,kFAAkF;AAClF,yEAAyE;AACzE;;AAEA;AACA,kFAAkF;AAClF,yEAAyE;AACzE,yEAAyE;AACzE,2EAA2E;AAC3E,2EAA2E;AAC3E;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iCAAiC,WAAW;AAC5C;;AAEA;AACA,sFAAsF;AACtF,wFAAwF;AACxF,wFAAwF;;AAExF,yBAAyB;AACzB;AACA;AACA,wFAAwF;AACxF,6BAA6B;AAC7B,yFAAyF;AACzF;AACA;;AAEA,wDAAwD;AACxD;AACA,iFAAiF;AACjF,iFAAiF,GAAG;AACpF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iCAAiC,WAAW;AAC5C;;AAEA;AACA;AACA,wFAAwF;AACxF,0FAA0F;AAC1F,0FAA0F;;AAE1F,yBAAyB;AACzB;AACA,uFAAuF;AACvF;;AAEA,0DAA0D;AAC1D;AACA,mFAAmF;AACnF,mFAAmF,GAAG;AACtF;AACA;AACA;;AAEA;AACA,2DAA2D,GAAG;AAC9D,0DAA0D,GAAG;AAC7D;;AAEA;AACA,2DAA2D;AAC3D,qEAAqE;AACrE,oEAAoE;AACpE,wEAAwE;AACxE,mEAAmE;AACnE;;AAEA;AACA;AACA,+DAA+D;AAC/D;AACA,mCAAmC,+BAA+B;AAClE,+EAA+E;AAC/E;AACA,kFAAkF;AAClF;AACA;AACA;;AAEA,yDAAyD;;AAEzD;;AAEA;AACA;AACA,kEAAkE;AAClE;AACA;AACA,gEAAgE;AAChE,oEAAoE;AACpE;AACA;;AAEA;AACA,yFAAyF;AACzF,sGAAsG;AACtG,+BAA+B;AAC/B;;AAEA;AACA;AACA;;AAEA,sCAAsC;;AAEtC;AACA;;AAEA;AACA,iDAAiD;AACjD;AACA;AACA,mDAAmD;AACnD;;AAEA,mCAAmC,+BAA+B;AAClE;AACA;AACA,mNAAmN;AACnN,yBAAyB;AACzB;AACA,wKAAwK;AACxK;AACA;AACA;AACA;AACA,iDAAiD,SAAS,EAAE;AAC5D;AACA;AACA;AACA;AACA,mDAAmD,SAAS,EAAE;AAC9D;;;AAGA;AACA,2DAA2D;AAC3D,8EAA8E;AAC9E,uCAAuC;AACvC,8BAA8B;AAC9B;AACA;;AAEA;;AAEA;AACA,8DAA8D;AAC9D,iDAAiD;AACjD,uCAAuC;AACvC,oCAAoC;AACpC,0BAA0B;AAC1B;;AAEA;AACA,oGAAoG,GAAG;AACvG;;AAEA;;AAEA;AACA,8DAA8D;AAC9D,gEAAgE;AAChE,iBAAiB;AACjB,sEAAsE;AACtE;AACA,8DAA8D;;AAE9D,0EAA0E;AAC1E,4EAA4E;AAC5E,iDAAiD;;AAEjD;AACA,6CAA6C;AAC7C;;AAEA,uDAAuD;;AAEvD;AACA,uEAAuE;AACvE,kFAAkF;AAClF,oFAAoF;AACpF,wEAAwE;AACxE;;AAEA;AACA,qEAAqE,GAAG;AACxE,iFAAiF;AACjF,iFAAiF;AACjF,iFAAiF;AACjF;;AAEA;;AAEA;AACA,iDAAiD;AACjD;AACA,sEAAsE;AACtE,qBAAqB;AACrB,iFAAiF;AACjF;AACA,0EAA0E;;AAE1E,qEAAqE;AACrE,mEAAmE;;AAEnE,kDAAkD;AAClD,sDAAsD;AACtD,yHAAyH;AACzH,kDAAkD;AAClD,sDAAsD;AACtD,0BAA0B;AAC1B;;AAEA;AACA,+EAA+E;AAC/E,iEAAiE;AACjE,oEAAoE;AACpE,gGAAgG;AAChG,kDAAkD;AAClD;;AAEA;;AAEA,2CAA2C;;AAE3C;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4FAA4F;AAC5F,0DAA0D;AAC1D;AACA,uGAAuG;AACvG,6GAA6G;AAC7G;AACA;AACA,uEAAuE;AACvE,uEAAuE;AACvE,uEAAuE;AACvE,0FAA0F;AAC1F,0FAA0F;AAC1F;AACA;;AAEA,uEAAuE,SAAS;AAChF;AACA;AACA;;AAEA;AACA,qFAAqF;AACrF,yBAAyB;AACzB,2DAA2D;AAC3D,yBAAyB;AACzB;AACA;AACA;;AAEA;AACA,gHAAgH;AAChH;;AAEA;AACA,uEAAuE;AACvE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sKAAsK;AACtK;AACA,6BAA6B;AAC7B,gEAAgE;AAChE,sJAAsJ;AACtJ,gEAAgE;AAChE,6BAA6B;AAC7B,gEAAgE;AAChE,0IAA0I;AAC1I,gEAAgE;AAChE,6BAA6B;AAC7B,gEAAgE;AAChE,kJAAkJ;AAClJ,gEAAgE;AAChE;AACA;;AAEA;AACA;AACA,gKAAgK;AAChK;AACA,6BAA6B;AAC7B,6JAA6J;AAC7J,6BAA6B;AAC7B,iJAAiJ;AACjJ,6BAA6B;AAC7B,gKAAgK;AAChK;AACA;;AAEA;AACA;AACA,0JAA0J;AAC1J;AACA,6BAA6B;AAC7B,0JAA0J;AAC1J,6BAA6B;AAC7B,4IAA4I;AAC5I,6BAA6B;AAC7B,0JAA0J;AAC1J;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,0KAA0K;AAC1K;AACA,qCAAqC;AACrC,8KAA8K;AAC9K,qCAAqC;AACrC,gKAAgK;AAChK,qCAAqC;AACrC,0KAA0K;AAC1K;AACA;;AAEA;AACA;AACA,kLAAkL;AAClL;AACA,qCAAqC;AACrC,kLAAkL;AAClL,qCAAqC;AACrC,oKAAoK;AACpK,qCAAqC;AACrC,kLAAkL;AAClL;AACA;;AAEA,6BAA6B;;AAE7B;AACA;AACA;AACA;AACA;AACA,6EAA6E;AAC7E,6HAA6H;AAC7H,kJAAkJ;AAClJ,kDAAkD;AAClD,yCAAyC;AACzC,gKAAgK;AAChK;AACA;AACA,qCAAqC;AACrC,gKAAgK;AAChK,qCAAqC;AACrC,kJAAkJ;AAClJ,qCAAqC;AACrC,4JAA4J;AAC5J,qCAAqC;AACrC,yEAAyE;AACzE,sHAAsH;AACtH,2IAA2I;AAC3I,8CAA8C;AAC9C;AACA;;AAEA;AACA;AACA,oKAAoK;AACpK;AACA,qCAAqC;AACrC,oKAAoK;AACpK,qCAAqC;AACrC,sJAAsJ;AACtJ,qCAAqC;AACrC,oKAAoK;AACpK;AACA;AACA;;AAEA;AACA;AACA,4JAA4J;AAC5J;AACA,iCAAiC;AACjC,6JAA6J;AAC7J,iCAAiC;AACjC,+IAA+I;AAC/I,iCAAiC;AACjC,4JAA4J;AAC5J;AACA;;AAEA;AACA;AACA,uJAAuJ;AACvJ;AACA,iCAAiC;AACjC,0JAA0J;AAC1J,iCAAiC;AACjC,4IAA4I;AAC5I,iCAAiC;AACjC,uJAAuJ;AACvJ;AACA;AACA;;AAEA;;AAEA;AACA;AACA,sKAAsK;AACtK;AACA,iCAAiC;AACjC,0KAA0K;AAC1K,iCAAiC;AACjC,4JAA4J;AAC5J,iCAAiC;AACjC,sKAAsK;AACtK;AACA;;AAEA;AACA;AACA,8KAA8K;AAC9K;AACA,iCAAiC;AACjC,8KAA8K;AAC9K,iCAAiC;AACjC,gKAAgK;AAChK,iCAAiC;AACjC,8KAA8K;AAC9K;AACA;;AAEA;AACA;AACA,4JAA4J;AAC5J;AACA,iCAAiC;AACjC,6JAA6J;AAC7J,iCAAiC;AACjC,+IAA+I;AAC/I,iCAAiC;AACjC,4JAA4J;AAC5J;AACA;;AAEA;AACA;AACA,8JAA8J;AAC9J;AACA,iCAAiC;AACjC,8JAA8J;AAC9J,iCAAiC;AACjC,gJAAgJ;AAChJ,iCAAiC;AACjC,8JAA8J;AAC9J;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6NAA6N;AAC7N,yCAAyC;AACzC,2PAA2P;AAC3P;AACA,qCAAqC;AACrC,sNAAsN;AACtN;AACA,iCAAiC;AACjC;AACA;AACA;AACA,wHAAwH;AACxH,yCAAyC;AACzC,sJAAsJ;AACtJ;AACA;AACA;AACA,mGAAmG;AACnG,qDAAqD;AACrD,2GAA2G;AAC3G,sIAAsI;AACtI,qCAAqC;AACrC,iMAAiM;AACjM;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,6NAA6N;AAC7N,yCAAyC;AACzC,2PAA2P;AAC3P;AACA,qCAAqC;AACrC,oOAAoO;AACpO;AACA,iCAAiC;AACjC;AACA;AACA;AACA,wHAAwH;AACxH,yCAAyC;AACzC,sJAAsJ;AACtJ;AACA;AACA;AACA,mGAAmG;AACnG,qDAAqD;AACrD,2GAA2G;AAC3G,8IAA8I;AAC9I,qCAAqC;AACrC,yMAAyM;AACzM;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,sEAAsE;AACtE;AACA;;AAEA,oCAAoC;;AAEpC;;AAEA,2CAA2C;;AAE3C;;AAEA;AACA;AACA;;AAEA,mEAAmE;AACnE,uEAAuE;AACvE,+CAA+C;AAC/C,wCAAwC;AACxC,gDAAgD;AAChD,6CAA6C;;AAE7C;;AAEA,2DAA2D;;AAE3D;AACA,wMAAwM;;AAExM;AACA,wJAAwJ;AACxJ,iCAAiC;AACjC,wJAAwJ;AACxJ;AACA;;AAEA,sFAAsF;;AAEtF,+CAA+C;AAC/C,+EAA+E,SAAS;AACxF;AACA;AACA,6GAA6G;AAC7G,yIAAyI;AACzI;AACA;AACA;;AAEA;;AAEA,mEAAmE,SAAS;AAC5E;;AAEA;AACA;AACA;;AAEA;AACA;AACA,8GAA8G,GAAG;AACjH,6GAA6G;AAC7G,iCAAiC;AACjC,iHAAiH,GAAG;AACpH;AACA,kGAAkG;AAClG,gHAAgH;AAChH;AACA;AACA;AACA,qGAAqG;AACrG;AACA,+GAA+G;AAC/G;AACA;AACA,wPAAwP;AACxP;AACA;;AAEA;;AAEA,+EAA+E;;AAE/E;AACA,8GAA8G,GAAG;AACjH,6GAA6G;AAC7G,6GAA6G;AAC7G,iCAAiC;AACjC,iHAAiH,GAAG;AACpH;;AAEA,kGAAkG;AAClG,2HAA2H;AAC3H,gHAAgH;AAChH;AACA;AACA;AACA,qGAAqG;;AAErG;AACA,iMAAiM;AACjM;AACA,+GAA+G;AAC/G;AACA;AACA,wPAAwP;AACxP;AACA;;AAEA;AACA;AACA,8FAA8F;AAC9F,6GAA6G;;AAE7G,iCAAiC;AACjC,8FAA8F;AAC9F;AACA,kEAAkE;AAClE,kGAAkG;AAClG;AACA,2FAA2F;AAC3F;AACA;AACA,sOAAsO;AACtO;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,mMAAmM;AACnM;AACA,oJAAoJ;AACpJ,6BAA6B;AAC7B,oJAAoJ;AACpJ;AACA;;AAEA;AACA,mMAAmM;AACnM;AACA,2JAA2J;AAC3J,6BAA6B;AAC7B,2JAA2J;AAC3J;AACA;;AAEA;AACA;AACA;AACA;AACA,2LAA2L;AAC3L,4DAA4D;AAC5D;AACA,sIAAsI;AACtI,6BAA6B;AAC7B,sIAAsI;AACtI;AACA,2DAA2D;AAC3D;;AAEA;AACA,uNAAuN;AACvN;AACA,kKAAkK;AAClK,6BAA6B;AAC7B,kKAAkK;AAClK;AACA;;AAEA;AACA,uLAAuL;AACvL;AACA,+IAA+I;AAC/I,6BAA6B;AAC7B,+IAA+I;AAC/I;AACA;;AAEA;AACA;AACA;;AAEA,wDAAwD;AACxD,qJAAqJ;;AAErJ,qBAAqB;;;AAGrB;;AAEA;AACA;AACA;;AAEA;;AAEA,kDAAkD;AAClD,qDAAqD;AACrD,qDAAqD;AACrD,kHAAkH;;AAElH,yFAAyF;AACzF,gHAAgH;AAChH,mEAAmE,GAAG;AACtE,0FAA0F;AAC1F,yGAAyG;;AAEzG;;AAEA,yEAAyE;;AAEzE;AACA,wFAAwF;AACxF;;AAEA,iEAAiE;AACjE,uFAAuF;;AAEvF;;AAEA;AACA,6NAA6N;AAC7N;;AAEA;;AAEA;;AAEA;AACA;AACA,wKAAwK;AACxK,6BAA6B;AAC7B,uKAAuK;AACvK;AACA;;AAEA;AACA;AACA;;AAEA,mEAAmE;AACnE,uEAAuE;AACvE,+CAA+C;AAC/C,wCAAwC;AACxC,gDAAgD;AAChD,6CAA6C;;AAE7C;;AAEA,mEAAmE,SAAS;;AAE5E;;AAEA;AACA;AACA;;AAEA;AACA;AACA,8FAA8F;AAC9F,6GAA6G,GAAG;AAChH,iCAAiC;AACjC,8FAA8F;AAC9F;AACA,kEAAkE;AAClE,oEAAoE;AACpE,gFAAgF;;AAEhF,mGAAmG;AACnG;;AAEA;AACA;AACA,8GAA8G;AAC9G,6GAA6G,GAAG;AAChH,iCAAiC;AACjC,iHAAiH,GAAG;AACpH;AACA,sEAAsE;AACtE;AACA;AACA;AACA,qGAAqG;AACrG,+EAA+E;AAC/E,8FAA8F;;AAE9F,mGAAmG;AACnG;;AAEA;AACA,+EAA+E;AAC/E;AACA,8GAA8G;AAC9G,6GAA6G,GAAG;AAChH,6GAA6G;AAC7G,iCAAiC;AACjC,iHAAiH,GAAG;AACpH;AACA,2HAA2H;AAC3H,+GAA+G;AAC/G;AACA;AACA;AACA,qGAAqG;AACrG,iMAAiM;AACjM,+EAA+E;AAC/E,8FAA8F;;AAE9F,mGAAmG;AACnG;AACA;;AAEA;AACA;AACA;;AAEA;AACA,mMAAmM;AACnM;AACA,iKAAiK;AACjK,6BAA6B;AAC7B,iKAAiK;AACjK;AACA;;AAEA;AACA,mMAAmM;AACnM;AACA,iKAAiK;AACjK,6BAA6B;AAC7B,iKAAiK;AACjK;AACA;;AAEA;AACA;AACA;AACA;AACA,2LAA2L;AAC3L,4DAA4D;AAC5D;AACA,sIAAsI;AACtI,6BAA6B;AAC7B,sIAAsI;AACtI;AACA,4DAA4D;AAC5D;;AAEA;AACA,uNAAuN;AACvN;AACA,kKAAkK;AAClK,6BAA6B;AAC7B,kKAAkK;AAClK;AACA;;AAEA;AACA,uLAAuL;AACvL;AACA,+IAA+I;AAC/I,6BAA6B;AAC7B,+IAA+I;AAC/I;AACA;;AAEA;AACA;AACA;;AAEA,oJAAoJ;AACpJ,wDAAwD;AACxD,oEAAoE;;AAEpE,qBAAqB;;AAErB,iBAAiB,OAAO;;AAExB,oDAAoD;AACpD,+HAA+H;AAC/H;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,iCAAiC,WAAW;AAC5C;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA,qOAAqO;AACrO,8JAA8J;AAC9J,yBAAyB;AACzB,oFAAoF;AACpF;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA,uOAAuO;AACvO,+EAA+E;AAC/E;AACA,oDAAoD;AACpD;AACA;;AAEA;AACA,kEAAkE;AAClE;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA,2IAA2I;AAC3I,gDAAgD;AAChD,4FAA4F;AAC5F;AACA,kGAAkG;AAClG;AACA,sFAAsF;AACtF,yBAAyB;AACzB;AACA,6EAA6E;AAC7E;AACA,8BAA8B;AAC9B,qBAAqB;AACrB;AACA,kGAAkG;AAClG,yEAAyE;AACzE,8BAA8B;AAC9B;AACA;;AAEA;AACA,4EAA4E,SAAS,EAAE;AACvF,4EAA4E,SAAS,EAAE;AACvF;;AAEA;AACA,0BAA0B;AAC1B,gIAAgI;AAChI,6DAA6D;AAC7D,8GAA8G;AAC9G,6JAA6J;AAC7J,sEAAsE;AACtE,2FAA2F;AAC3F,yEAAyE;AACzE;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,uGAAuG;AACvG,mEAAmE;AACnE,yDAAyD;AACzD,yCAAyC;AACzC,8BAA8B,OAAO;AACrC,mDAAmD;AACnD,8BAA8B;AAC9B,0BAA0B;AAC1B;;AAEA;AACA;AACA,+CAA+C;AAC/C,0CAA0C;AAC1C,wCAAwC;AACxC,0CAA0C;AAC1C,8CAA8C;AAC9C,wCAAwC;;AAExC;AACA;AACA;AACA,iCAAiC,WAAW;;AAE5C;;AAEA;AACA;AACA,+NAA+N;AAC/N;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,yFAAyF;AACzF;AACA;;AAEA;AACA,iOAAiO;AACjO,+JAA+J;AAC/J,6BAA6B;AAC7B,wFAAwF;AACxF;;AAEA;AACA,kEAAkE;AAClE;AACA,mFAAmF;;AAEnF,yBAAyB;;AAEzB;AACA;AACA;;AAEA;AACA,iOAAiO;AACjO,6JAA6J;AAC7J,6BAA6B;AAC7B,sFAAsF;AACtF;;AAEA;AACA,mFAAmF;AACnF;AACA,wFAAwF;;AAExF,yBAAyB;;AAEzB;AACA;AACA;;AAEA;AACA,iOAAiO;AACjO,+JAA+J;AAC/J,6BAA6B;AAC7B,wFAAwF;AACxF;AACA;AACA,kEAAkE;AAClE;AACA,6DAA6D;;AAE7D,yBAAyB;;AAEzB;AACA;AACA;;AAEA;AACA,iOAAiO;AACjO,kKAAkK;AAClK;AACA,+FAA+F;AAC/F;AACA,6BAA6B;AAC7B,uFAAuF;AACvF;AACA,+FAA+F;AAC/F;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;;AAEA;AACA,+DAA+D;AAC/D,gEAAgE;AAChE,+DAA+D;AAC/D,6DAA6D;AAC7D,6DAA6D;AAC7D,6DAA6D;AAC7D;AACA,4GAA4G;AAC5G,qBAAqB;AACrB,sHAAsH;AACtH;AACA,kFAAkF;AAClF;AACA,oEAAoE;;AAEpE;AACA,0DAA0D;AAC1D,2EAA2E;AAC3E;;AAEA;AACA,+LAA+L;;AAE/L;AACA,mJAAmJ;AACnJ,qBAAqB;AACrB,mJAAmJ;AACnJ;AACA;;AAEA;AACA;AACA,wEAAwE;AACxE;;AAEA;AACA,sDAAsD;AACtD;;AAEA,4DAA4D;AAC5D,qGAAqG;;AAErG;AACA;AACA,iBAAiB;AACjB,4DAA4D;AAC5D,sDAAsD;AACtD,0BAA0B,yCAAyC;AACnE,4EAA4E;AAC5E,kGAAkG;AAClG,0DAA0D;AAC1D,sDAAsD;AACtD,2DAA2D;AAC3D,kEAAkE;AAClE,gDAAgD;AAChD,2FAA2F;AAC3F,uEAAuE;AACvE,0EAA0E;AAC1E,sGAAsG;AACtG,0HAA0H;AAC1H,0BAA0B;AAC1B;;AAEA,sBAAsB;;AAEtB;AACA;;AAEA;AACA;AACA,mDAAmD;AACnD;AACA,uDAAuD;AACvD,wDAAwD;AACxD,iBAAiB;AACjB,+DAA+D;AAC/D,gEAAgE;AAChE;AACA,mDAAmD;AACnD,oDAAoD;AACpD;AACA,0DAA0D;AAC1D;AACA,wEAAwE;AACxE;AACA;AACA;AACA,oEAAoE;AACpE;;AAEA,sDAAsD;;AAEtD;AACA,wDAAwD;AACxD,0DAA0D;AAC1D,4DAA4D;AAC5D;;AAEA;AACA,2DAA2D;AAC3D;AACA;AACA,2DAA2D;AAC3D;;AAEA;AACA,4DAA4D;AAC5D;AACA,iEAAiE;AACjE;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA,wEAAwE;AACxE;AACA;AACA;AACA,yDAAyD;AACzD,6DAA6D;AAC7D,6DAA6D;AAC7D,6DAA6D;AAC7D,0BAA0B;AAC1B;AACA;AACA,mDAAmD;AACnD,kFAAkF;AAClF,6CAA6C;AAC7C,mHAAmH;AACnH,8BAA8B;AAC9B,iDAAiD;AACjD,0BAA0B;AAC1B;AACA,sCAAsC;AACtC;AACA,4FAA4F;AAC5F,iBAAiB;AACjB,4DAA4D;AAC5D;AACA;AACA,qFAAqF;AACrF,iBAAiB;AACjB,uEAAuE;AACvE;AACA;AACA;AACA;AACA,4IAA4I;AAC5I,yBAAyB;AACzB,4GAA4G;AAC5G;AACA;AACA;AACA;AACA;AACA,8IAA8I;AAC9I,6BAA6B;AAC7B,gIAAgI;AAChI;AACA;AACA;AACA;;AAEA;AACA,4DAA4D;AAC5D;;AAEA,yDAAyD;AACzD,wDAAwD;AACxD;AACA,oEAAoE;AACpE;AACA,sCAAsC;AACtC,qCAAqC;AACrC;AACA,uDAAuD;AACvD;AACA;AACA,0EAA0E;AAC1E,gDAAgD;AAChD,+CAA+C;AAC/C,oDAAoD;AACpD;AACA,0DAA0D;AAC1D;AACA,iEAAiE;AACjE,oEAAoE;AACpE,iBAAiB;AACjB,iEAAiE;AACjE,gEAAgE;AAChE;;AAEA,sDAAsD;;AAEtD;AACA,kFAAkF;AAClF,yFAAyF;AACzF;AACA;AACA,4DAA4D;AAC5D;AACA,iEAAiE;AACjE;AACA,2DAA2D;AAC3D;AACA,2EAA2E;AAC3E;AACA;AACA,2EAA2E;AAC3E;AACA,mFAAmF;AACnF;AACA,sBAAsB;AACtB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uFAAuF;;AAEvF;AACA;AACA;AACA;;AAEA,4DAA4D;AAC5D,qDAAqD;;AAErD,sDAAsD;;AAEtD;AACA,2DAA2D;AAC3D;AACA,8DAA8D;AAC9D;;AAEA,mCAAmC,+BAA+B;AAClE,+EAA+E;AAC/E;AACA,kFAAkF;AAClF;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,yDAAyD;AACzD,0DAA0D;AAC1D;AACA;AACA,2DAA2D,GAAG;AAC9D,0DAA0D,GAAG;AAC7D;;AAEA,yDAAyD;;AAEzD;;AAEA;AACA,6DAA6D;AAC7D;;AAEA;AACA,6CAA6C;AAC7C,oHAAoH;AACpH,0BAA0B;;AAE1B,+CAA+C;AAC/C,gEAAgE;AAChE,0BAA0B;AAC1B;;AAEA,sCAAsC;AACtC,gDAAgD;AAChD;AACA;AACA,iDAAiD;AACjD;AACA;AACA,mDAAmD;AACnD;AACA,mCAAmC,+BAA+B;AAClE;AACA;AACA,mNAAmN;AACnN,yBAAyB;AACzB;AACA,wKAAwK;AACxK;AACA;AACA;AACA;AACA,iDAAiD,SAAS,EAAE;AAC5D;AACA;AACA;AACA;AACA,mDAAmD,SAAS,EAAE;AAC9D;AACA;;AAEA;AACA,8DAA8D;AAC9D,iDAAiD;AACjD,uCAAuC;AACvC,oCAAoC;AACpC,0BAA0B;AAC1B;;;AAGA;AACA,kHAAkH;AAClH,6GAA6G;AAC7G,4DAA4D;AAC5D,oFAAoF;AACpF;;AAEA;AACA,0DAA0D;AAC1D;;AAEA;AACA,4EAA4E,SAAS,EAAE;AACvF,4EAA4E,SAAS,EAAE;AACvF;;AAEA;AACA,0BAA0B;AAC1B,gIAAgI;AAChI,6DAA6D;AAC7D,8GAA8G;AAC9G,6JAA6J;AAC7J,sEAAsE;AACtE,2FAA2F;AAC3F,yEAAyE;AACzE;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,uGAAuG;AACvG,mEAAmE;AACnE,yDAAyD;AACzD,yCAAyC;AACzC,8BAA8B,OAAO;AACrC,mDAAmD;AACnD,8BAA8B;AAC9B,0BAA0B;AAC1B;;AAEA;AACA,+DAA+D;AAC/D,gEAAgE;AAChE,+DAA+D;AAC/D,6DAA6D;AAC7D,6DAA6D;AAC7D,6DAA6D;AAC7D;AACA,4GAA4G;AAC5G,qBAAqB;AACrB,sHAAsH;AACtH;AACA,kFAAkF;AAClF;AACA,oEAAoE;AACpE;AACA,0DAA0D;AAC1D,2EAA2E;AAC3E;;AAEA,kDAAkD;;AAElD;AACA,4DAA4D;AAC5D,qGAAqG;;AAErG;AACA;AACA,iBAAiB;AACjB,4DAA4D;AAC5D,sDAAsD;AACtD,0BAA0B,yCAAyC;AACnE,4EAA4E;AAC5E,kGAAkG;AAClG,0DAA0D;AAC1D,sDAAsD;AACtD,2DAA2D;AAC3D,kEAAkE;AAClE,gDAAgD;AAChD,2FAA2F;AAC3F,uEAAuE;AACvE,0EAA0E;AAC1E,sGAAsG;AACtG,0HAA0H;AAC1H,0BAA0B;AAC1B;;AAEA,sBAAsB;;AAEtB;AACA;AACA;;AAEA;;AAEA;;AAEA,oDAAoD;AACpD,mDAAmD;AACnD,mDAAmD;AACnD,mDAAmD;;AAEnD;AACA,0DAA0D;AAC1D;AACA,wEAAwE;AACxE;AACA;;AAEA;AACA,oEAAoE;AACpE;;AAEA,uDAAuD;;AAEvD;AACA,4DAA4D,GAAG;AAC/D,oEAAoE;AACpE,iEAAiE;AACjE;;AAEA;AACA,wEAAwE;AACxE;AACA;;AAEA,sCAAsC;;AAEtC;AACA,gGAAgG;AAChG,iBAAiB;AACjB,gEAAgE;AAChE;;AAEA;AACA;AACA;AACA,8IAA8I;AAC9I,yBAAyB;AACzB,8GAA8G;AAC9G;AACA;AACA;AACA,6EAA6E;;AAE7E,wDAAwD;;AAExD;AACA,uDAAuD;AACvD;;AAEA,4EAA4E;AAC5E,oEAAoE;;AAEpE;AACA,2DAA2D;AAC3D;AACA,2EAA2E;AAC3E;AACA;AACA,2EAA2E;AAC3E;AACA,mFAAmF;AACnF;;AAEA,sBAAsB;;AAEtB;AACA;;AAEA;;AAEA;;AAEA,uFAAuF;;AAEvF,uDAAuD;;AAEvD;AACA,mCAAmC,+BAA+B;AAClE,+EAA+E;AAC/E;AACA,kFAAkF;AAClF;AACA;AACA;;AAEA,sCAAsC;;AAEtC;;AAEA;AACA,iDAAiD;AACjD;AACA;AACA,mDAAmD;AACnD;;AAEA,mCAAmC,+BAA+B;AAClE;AACA;AACA,mNAAmN;AACnN,yBAAyB;AACzB;AACA,wKAAwK;AACxK;AACA;;AAEA;AACA;AACA,iDAAiD,SAAS,EAAE;AAC5D;;AAEA;AACA;AACA;AACA,mDAAmD,SAAS,EAAE;AAC9D;;AAEA;AACA,mEAAmE;AACnE,sBAAsB;;AAEtB;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,CAAC;AACD,CAAC;AACD,oDAAoD,sBAAsB;AAC1E;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,CAAC;AACD,CAAC;AACD,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,0CAA0C,aAAa,GAAG,eAAe,MAAM;AAC/E;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB,gBAAgB;AAClC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,iFAAiF;AACjF;AACA;AACA;;AAEA;AACA,+BAA+B,oBAAoB,6DAA6D,eAAe;AAC/H;AACA;;AAEA;AACA,+BAA+B,sBAAsB,6DAA6D;AAClH;AACA;;AAEA;AACA,+BAA+B,oBAAoB;AACnD;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oFAAoF;AACpF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;;AAGA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,4BAA4B,8CAA8C;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,8CAA8C;AAC1E;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,mDAAmD,SAAS;AAC5D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,wCAAwC;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;;AAED,CAAC;AACD,8BAA8B;AAC9B;AACA;;AAEA;AACA;;AAEA;AACA,kCAAkC;AAClC,0BAA0B;AAC1B,sBAAsB;AACtB,yCAAyC;AACzC,qDAAqD;AACrD,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,oE;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,oE;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,uBAAuB,uBAAuB;AAC9C;AACA;;AAEA,uBAAuB,uBAAuB;AAC9C;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;;AAGD,CAAC;AACD,8BAA8B;AAC9B;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA,aAAa;AACb;;AAEA;AACA,yF;AACA,4F;AACA,qG;AACA,qG;AACA,+F;AACA,+F;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,CAAC;;;AAGD,CAAC;AACD;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;;AAED,CAAC;AACD;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA,2CAA2C,SAAS;AACpD;AACA;AACA;AACA;;AAEA;AACA;;AAEA,oDAAoD,sBAAsB;AAC1E;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA,sC;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,0EAA0E;AAC1E;;AAEA,SAAS;AACT;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA,CAAC;AACD,CAAC;AACD;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA,2CAA2C,SAAS;AACpD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA,8EAA8E,WAAW;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gFAAgF,WAAW;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA,kFAAkF,WAAW;;AAE7F;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oFAAoF,WAAW;;AAE/F;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AACD,CAAC;AACD;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA,2CAA2C,SAAS;AACpD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,cAAc;AACrC;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,cAAc;AACrC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA,8CAA8C;AAC9C;;AAEA;AACA;AACA;AACA;;AAEA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,SAAS;AACT;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,qDAAqD,SAAS;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,8CAA8C;AAC9C;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,4DAA4D;AAC5D;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,2DAA2D,SAAS;AACpE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,iBAAiB;;AAEjB;;AAEA;AACA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,SAAS;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mEAAmE;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA,2CAA2C,SAAS;AACpD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA,oDAAoD,SAAS;;AAE7D;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,SAAS;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA,wDAAwD,SAAS;;AAEjE;;AAEA,sEAAsE;;AAEtwDAAwD,SAAS;AACjE;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AACD,CAAC;AACD;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA,2CAA2C,SAAS;AACpD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,2BAA2B,QAAQ;AACnC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,2BAA2B,oBAAoB;AAC/C;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,2BAA2B,mBAAmB;AAC9C;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,+CAA+C;AAC/C,aAAa;AACb,+CAA+C;AAC/C;AACA;;AAEA;AACA;;AAEA;AACA,CAAC;AACD,CAAC;AACD;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA,2CAA2C,SAAS;AACpD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,SAAS;;AAET;AACA;AACA;;AAEA;AACA,CAAC;AACD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,KAAK;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,+BAA+B,4BAA4B;AAC3D;AACA;AACA;;AAEA,oCAAoC,8BAA8B;AAClE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+BAA+B,2BAA2B;AAC1D,oCAAoC,6BAA6B;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,KAAK;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,oBAAoB,aAAa;AACjC,wBAAwB,aAAa;;AAErC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,oBAAoB,YAAY;AAChC,wBAAwB,YAAY;;AAEpC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,KAAK,iBAAiB;AACtB,KAAK,iBAAiB;AACtB,KAAK,iBAAiB;AACtB,KAAK,iBAAiB;AACtB;AACA;AACA;;AAEA;AACA;;AAEA,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA,wDAAwD;;AAExD;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,eAAe,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,kBAAkB;AAClB,kBAAkB;AAClB;AACA,GAAG;;AAEH;AACA;AACA;;AAEA,6EAA6E;AAC7E,6EAA6E;;AAE7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,6CAA6C;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,CAAC,2DAA2D;AAC5D;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA,oFAAoF,IAAI;AACxF;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,iCAAiC;AACjC,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA,CAAC;AACD,CAAC;AACD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA,oDAAoD;AACpD,iCAAiC;AACjC,oCAAoC;AACpC,iCAAiC;AACjC,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,sEAAsE,mBAAmB;AACzF;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,mBAAmB,eAAe;AAClC,oBAAoB,OAAO,oEAAoE,WAAW;AAC1G;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,SAAS;;AAET;AACA,wFAAwF,UAAU;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA,SAAS;;AAET;AACA;AACA,6CAA6C,UAAU,oBAAoB,WAAW;AACtF,mBAAmB,OAAO;AAC1B,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,kE;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;;AAGd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS,SAAS;AAChC;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;AAGA;AACA;AACA;AACA,oBAAoB,oBAAoB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,SAAS;AAC/C;AACA;AACA;AACA;AACA,eAAe,uBAAuB;AACtC;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,yCAAyC,qCAAqC;AAC9E,kBAAkB,YAAY;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA,kCAAkC,SAAS;AAC3C;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;;AAEA;AACA,kCAAkC,SAAS;AAC3C;AACA,eAAe,6BAA6B;AAC5C,eAAe,6BAA6B;AAC5C;AACA;AACA;AACA;;AAEA;AACA,kCAAkC,SAAS;AAC3C;AACA,mCAAmC,gCAAgC;AACnE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,6BAA6B;AAC5C,eAAe,6BAA6B;AAC5C;AACA,eAAe,uDAAuD;AACtE,eAAe,mDAAmD;AAClE,eAAe,mDAAmD;AAClE,eAAe;AACf;AACA;AACA;;;AAGA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,+CAA+C,KAAK;AACpD;AACA,yBAAyB,KAAK;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,uCAAuC,kBAAkB;AACzD;AACA,kBAAkB,UAAU;AAC5B;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,kBAAkB,cAAc;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,iBAAiB,uBAAuB;AACxC,iBAAiB,gCAAgC;;AAEjD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,8BAA8B;AACrD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,0BAA0B,wBAAwB,QAAQ,OAAO;AACjE,0BAA0B,WAAW,YAAY,SAAS;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,+DAA+D,SAAS;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,uBAAuB;AACvB;;AAEA,uBAAuB,eAAe;AACtC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,wDAAwD,SAAS;AACjE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,wDAAwD,SAAS;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,qDAAqD,SAAS;AAC9D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mDAAmD,SAAS;AAC5D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,iDAAiD,SAAS;AAC1D;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,SAAS;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC,KAAK;AACN;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,4D;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,+E;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,2CAA2C,SAAS;AACpD;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,2CAA2C,SAAS;AACpD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,uBAAuB,gBAAgB;AACvC;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;;AAEA,uBAAuB,OAAO;AAC9B;AACA;AACA;;AAEA,uCAAuC,wCAAwC;AAC/E;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,6BAA6B;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;;AAEA,+CAA+C,SAAS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,6BAA6B;AACxD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,0EAA0E,UAAU;AACpF;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA,aAAa;;AAEb;AACA,SAAS;AACT;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;AACT;AACA,SAAS;;AAET;AACA;AACA,SAAS;AACT;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,iCAAiC;AACjC;AACA;;AAEA;;AAEA;;AAEA,SAAS;;AAET;;AAEA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,uBAAuB;AACvB,yBAAyB;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,SAAS;AACrD;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,sCAAsC;AACtC,uCAAuC;AACvC;AACA;;AAEA,2EAA2E;;AAE3E;AACA;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iCAAiC;;AAEjC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,OAAO;AAChC;AACA,iBAAiB;AACjB,+CAA+C;AAC/C;AACA;AACA,aAAa;AACb;AACA;;AAEA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mDAAmD,YAAY;AAC/D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB;;AAErB,sCAAsC;;AAEtC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC,wBAAwB;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,+CAA+C;;AAE/C;AACA;AACA;;AAEA;AACA;AACA,+DAA+D;AAC/D,4BAA4B;AAC5B;;AAEA;AACA,eAAe,OAAO;AACtB;AACA;;AAEA;AACA;AACA,gCAAgC;AAChC;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,kCAAkC,aAAa;;AAE/C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,0BAA0B;AAC1B;AACA,SAAS;AACT;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kBAAkB,oCAAoC;AACtD,iBAAiB,oCAAoC;AACrD,kBAAkB,oCAAoC;AACtD,kBAAkB;AAClB;;AAEA;AACA,gCAAgC,eAAe;AAC/C,+BAA+B,eAAe;AAC9C,8BAA8B;AAC9B;;AAEA;AACA;AACA,0CAA0C,cAAc;AACxD;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA,wBAAwB;AACxB,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA,kBAAkB,oCAAoC;AACtD,iBAAiB,oCAAoC;AACrD,kBAAkB,oCAAoC;AACtD,kBAAkB;AAClB;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA,0CAA0C,cAAc;AACxD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA,0BAA0B;AAC1B,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,CAAC;AACD,CAAC;AACD;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,UAAU;AACV;;AAEA;;AAEA;;AAEA,8BAA8B;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,SAAS;AAC9D;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,aAAa;AAC/C;;AAEA;AACA;AACA,eAAe,OAAO;AACtB,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iEAAiE,uBAAuB;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,SAAS;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,qDAAqD,QAAQ;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E;AAC1E;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,KAAK;AACtC;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD;;AAEA;;AAEA;AACA;AACA;AACA;AACA,2BAA2B,yBAAyB;AACpD,4BAA4B;AAC5B;AACA;AACA,2BAA2B;AAC3B,4BAA4B;AAC5B;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,yBAAyB;AAClD,0BAA0B;AAC1B,OAAO;AACP;AACA,yBAAyB,yBAAyB;AAClD,0BAA0B;AAC1B,OAAO;AACP;AACA,yBAAyB,yBAAyB;AAClD,0BAA0B;AAC1B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,yBAAyB;AAClD,0BAA0B;AAC1B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,8BAA8B,mBAAmB;AACjD,8BAA8B;AAC9B,WAAW;;AAEX;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,eAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,yBAAyB;AACrD;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,gBAAgB,OAAO,oDAAoD,mCAAmC;AAC9G;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+CAA+C;AAC/C;AACA;;AAEA;;AAEA;AACA;AACA,mFAAmF;AACnF;;AAEA;AACA;;AAEA,sCAAsC;AACtC;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,+EAA+E;AAC/E;;AAEA;AACA;AACA,uBAAuB;AACvB;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO,mDAAmD;AACzE,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE;AACvE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,EAAE;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,CAAC;AACD,CAAC;AACD;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;;AAEA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;;AAEA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;;AAEA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,CAAC;;;;AAID,CAAC;AACD;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,SAAS;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,SAAS;AACzD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;AACD;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,uDAAuD,uBAAuB;AAC9E;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,wDAAwD,mBAAmB;AAC3E,kBAAkB;AAClB;AACA;AACA,qDAAqD,SAAS;AAC9D;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;;AAEA;AACA,6DAA6D,YAAY;AACzE;AACA,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,+DAA+D;AAC/D;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,4CAA4C;AAC5C;;AAEA;;AAEA,gDAAgD,SAAS;;AAEzD;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA,eAAe,wBAAwB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,CAAC;AACD,CAAC;AACD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL,CAAC;AACD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,SAAS;AACvB;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA,KAAK;;AAEL;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,iDAAiD,SAAS;AAC1D;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC,iBAAiB;AACjB,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC,iBAAiB;AACjB,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC,iBAAiB;AACjB,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA;AACA;AACA,kBAAkB,OAAO;AACzB,kBAAkB,OAAO;AACzB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,kBAAkB,OAAO;AACzB,kBAAkB,OAAO;AACzB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;;AAEA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,aAAa;;AAEb;AACA,oDAAoD,8BAA8B;;AAElF,aAAa;;AAEb;AACA;AACA;AACA,oDAAoD,SAAS;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,uBAAuB;;AAE3E,aAAa;;AAEb;AACA,oDAAoD,uCAAuC;AAC3F,aAAa;;AAEb;AACA,oDAAoD,sCAAsC;AAC1F,aAAa;;AAEb;AACA;AACA;AACA;AACA,SAAS;;;AAGT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,sBAAsB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,4BAA4B;AAC5B;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;;AAGT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZ;AACA;AACA;AACA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D;AACA;AACA,SAAS;;AAET;AACA;AACA,4CAA4C,mDAAmD;AAC/F,SAAS;;AAET;AACA;AACA,2CAA2C,mDAAmD;AAC9F,SAAS;;AAET;AACA;AACA;AACA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,SAAS;AAC7D;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,KAAK;;;AAGL;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,qBAAqB;AACrB;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,sCAAsC,mDAAmD;AACzF,SAAS;;;AAGT;AACA;AACA,0DAA0D,4EAA4E,OAAO;AAC7I,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,kEAAkE,SAAS;AAC3E;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,2CAA2C,8CAA8C;AACzF,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,kEAAkE,SAAS;AAC3E;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,yEAAyE,SAAS;AAClF;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA,wDAAwD,SAAS;AACjE;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;;;;AAIL;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA,aAAa,kBAAkcAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD,aAAa;AACb;AACA;AACA,4DAA4D;AAC5D;AACA,SAAS;AACT;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;;AAEA;AACA;AACA,8BAA8B,qCAAqC;AACnE,aAAa;;AAEb;;AAEA;AACA;AACA;AACA,kCAAkC,eAAe;AACjD,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA,kCAAkC,mBAAmB;AACrD,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,uBAAuB;AACjE;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA,aAAa;AACb,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA,KAAK;;;AAGL,CAAC;AACD;;AAEA;;AAEA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA,qCAAqC,SAAS;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;;AAEA;AACA;AACA,yCAAyC;AACzC,uBAAuB,eAAe;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC,KAAK;AACN;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,8CAA8C,aAAa;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;AACD,CAAC;AACD;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA,SAAS;AACT;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,gBAAgB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,+FAA+F,aAAa,cAAc;AAC1H;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,mEAAmE;AACnE;AACA;;AAEA,8DAA8D;AAC9D;AACA;;AAEA,4FAA4F;AAC5F;AACA,aAAa;;AAEb,4GAA4G;AAC5G;AACA;;AAEA;;AAEA;AACA;;AAEA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;;AAEA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kCAAkC;AAClC,gCAAgC;AAChC,gCAAgC;AAChC,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6BAA6B;;AAE7B;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,iBAAiB,aAAa;AAC9B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,eAAe,iBAAiB;AAChC,iBAAiB,aAAa;AAC9B;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B;AACA;AACA;AACA;;AAEA,CAAC;AACD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,2BAA2B,oBAAoB;AAC/C;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,CAAC;AACD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA,CAAC;AACD,CAAC;AACD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,wBAAwB;AACjC,SAAS,wBAAwB;AACjC,SAAS,wBAAwB;AACjC,SAAS,wBAAwB;AACjC,SAAS,wBAAwB;AACjC,SAAS;AACT;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA,+BAA+B;;AAE/B;AACA;AACA,aAAa;AACb;AACA;AACA,gCAAgC;;AAEhC;AACA;AACA,aAAa;AACb;AACA;AACA,8BAA8B;;AAE9B;;AAEA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA,sCAAsC;;AAEtC;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA,YAAY;AACZ;AACA;AACA;;;AAGA;AACA,uCAAuC,WAAW,MAAM;AACxD,YAAY;AACZ;AACA;AACA;;AAEA;AACA,uCAAuC,WAAW,MAAM;AACxD,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB,iCAAiC;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,iCAAiC;AAClD;AACA;AACA;AACA;;AAEA;AACA,cAAc,2FAA2F;AACzG,eAAe,8FAA8F;AAC7G,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC,qCAAqC;AACrC,mCAAmC;AACnC;AACA;AACA;;;AAGA;AACA;AACA;AACA,0CAA0C,qBAAqB;AAC/D;AACA,eAAe,OAAO;AACtB;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,mDAAmD;;AAEnD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;;;;AAIA;AACA;AACA;AACA,0CAA0C,qBAAqB;AAC/D;AACA,eAAe,OAAO;AACtB;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,mDAAmD;;AAEnD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;;AAEA;AACA;AACA,uCAAuC,qBAAqB;AAC5D;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,mBAAmB,sBAAsB;AACzC,kBAAkB,0BAA0B;AAC5C,iBAAiB;AACjB,SAAS;;AAET;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,mBAAmB,sBAAsB;AACzC,kBAAkB,yBAAyB;AAC3C,iBAAiB;AACjB,SAAS;;AAET;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,mBAAmB,sBAAsB;AACzC,kBAAkB,0BAA0B;AAC5C,iBAAiB;AACjB,SAAS;;AAET;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,mBAAmB,sBAAsB;AACzC,kBAAkB,yBAAyB;AAC3C,iBAAiB;AACjB,SAAS;;AAET;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,mBAAmB,sBAAsB;AACzC,kBAAkB,8BAA8B;AAChD,iBAAiB;AACjB,SAAS;;AAET;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,mBAAmB,sBAAsB;AACzC,kBAAkB,6BAA6B;AAC/C,iBAAiB;AACjB,SAAS;;AAET;;AAEA;AACA;AACA;AACA,uCAAuC,qBAAqB;AAC5D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,+CAA+C;AAC/C,oDAAoD;AACpD,mDAAmD;;AAEnD;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA,aAAa;AACb;AACA;AACA;;AAEA,2CAA2C;AAC3C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;;AAEA;AACA,gEAAgE,eAAe,MAAM,eAAe;AACpG;AACA,uCAAuC,qBAAqB;AAC5D;AACA,eAAe,OAAO;AACtB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,+CAA+C;AAC/C,2CAA2C;AAC3C;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;;AAEA;AACA,mEAAmE,eAAe,MAAM,eAAe;AACvG;AACA,gBAAgB,OAAO;AACvB;AACA;;AAEA;AACA;;AAEA,+CAA+C;AAC/C,oDAAoD;;AAEpD;AACA;;;AAGA;AACA,iFAAiF,eAAe,MAAM,eAAe;AACrH;AACA,uCAAuC,qBAAqB;AAC5D;AACA;AACA,eAAe,OAAO;AACtB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,+CAA+C;AAC/C,2CAA2C;;AAE3C;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,+CAA+C;AAC/C,oDAAoD;;AAEpD;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;;AAEA;AACA;AACA;;AAEA;AACA;AACA,aAAa,qBAAqB;AAClC,aAAa,qBAAqB;AAClC,aAAa,qBAAqB;AAClC,aAAa,qBAAqB;AAClC,aAAa,qBAAqB;AAClC,aAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,6BAA6B,mCAAmC;;AAEhE;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;AACA;AACA;;AAEA,SAAS;;AAET;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gC;AACA,gC;AACA,iC;AACA;;AAEA;AACA;AACA;;AAEA,+DAA+D;;AAE/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,CAAC;AACD,CAAC,mCAAmC,yBAAyB,UAAU,kBAAkB;AACzF;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,sBAAsB;AACtB;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,SAAS;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA,CAAC;AACD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS,2EAA2E;AACpF,SAAS,0EAA0E;AACnF,SAAS,2EAA2E;AACpF,SAAS,0EAA0E;AACnF,SAAS,2EAA2E;AACpF,SAAS,0EAA0E;AACnF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,iDAAiD,SAAS;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,iDAAiD,SAAS;AAC1D;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,qDAAqD,SAAS;AAC9D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET,4CAA4C,gBAAgB;;AAE5D;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C,4BAA4B,uBAAuB;AACnD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA,CAAC;AACD,CAAC;;AAED;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,4BAA4B;AACxD;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,2BAA2B;AACvD,0BAA0B,0BAA0B;AACpD;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,yBAAyB;AACrD,0BAA0B,yBAAyB;AACnD;AACA;AACA;AACA;AACA,aAAa;;AAEb;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,EAAE;;AAEF;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA,CAAC;AACD,CAAC;AACD;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA,CAAC;AACD,CAAC;AACD;;AAEA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;;AAEA;AACA,mCAAmC;AACnC,8BAA8B;AAC9B,4CAA4C;AAC5C,0BAA0B;AAC1B,6DAA6D;AAC7D,cAAc;AACd;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,S;AACA,M;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA,yCAAyC,SAAS;AAClD;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,yCAAyC,SAAS;AAClD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,+C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,eAAe;AAC1C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+D;AACA,gE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,cAAc;AACpE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,+CAA+C,SAAS;AACxD;AACA;AACA;;AAEA;AACA;AACA,6CAA6C,SAAS;AACtD;;AAEA;AACA;AACA;AACA;;AAEA;AACA,+DAA+D;AAC/D;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA,S;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;;AAEb;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,8CAA8C,SAAS;AACvD;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,OAAO;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,UAAU;AAChD;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA,6CAA6C,UAAU;AACvD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,8CAA8C,UAAU;AACxD,sC;AACA,0C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kC;AACA,kC;AACA;AACA,sC;AACA;AACA,sC;AACA;AACA;;AAEA;;AAEA;AACA,2BAA2B;AAC3B,uBAAuB;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA,4DAA4D,iBAAiB;AAC7E;AACA;;AAEA,CAAC;AACD,CAAC;AACD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,kBAAkB,kBAAkB;AACpC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,mBAAmB;AACnB,sBAAsB,eAAe;AACrC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB,eAAe;AACrC;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,oBAAoB;AACpB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,oBAAoB;AACpB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,SAAS;AACxB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,SAAS;AACxB,eAAe,SAAS;AACxB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;;AAEA;AACA,8CAA8C,SAAS;AACvD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,OAAO;AACtB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB,eAAe,SAAS;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,qBAAqB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA,SAAS;;AAET;AACA;AACA,yBAAyB,qBAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb,SAAS;;AAET;AACA,6BAA6B,oDAAoD;AACjF;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA,SAAS;;AAET;;AAEA;AACA;AACA,8BAA8B,2BAA2B;AACzD,+BAA+B,uBAAuB;AACtD,6BAA6B;AAC7B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,OAAO;AACtB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB,eAAe,SAAS;AACxB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA,SAAS;;AAET;;AAEA,SAAS;;AAET;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAS;;AAET;;AAEA;AACA;AACA,0BAA0B,2BAA2B;AACrD,2BAA2B,uBAAuB;AAClD,yBAAyB;AACzB,iBAAiB;AACjB;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qFAAqF;AACrF;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;AACD,CAAC;AACD,0BAA0B,4BAA4B;AACtD;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yFAAyF;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,6EAA6E;AAC7E,6EAA6E;AAC7E;AACA;AACA;;AAEA;AACA,0CAA0C;AAC1C;AACA,iFAAiF;;AAEjF;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA,aAAa;AACb;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,mEAAmE;AACnE,SAAS;AACT,4KAA4K;AAC5K;;AAEA;AACA;AACA;;;AAGA,sEAAsE;AACtE;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;;AAE7B;AACA;AACA;;AAEA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,aAAa;;AAEb,SAAS;;AAET;;AAEA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA,CAAC;AACD,CAAC;AACD,0BAA0B,4BAA4B;AACtD;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,qIAAqI;;AAErI;AACA;AACA;;;AAGA,sEAAsE;AACtE;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,aAAa;;AAEb,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;;;AAGb;AACA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;AACA;AACA;;AAEA;AACA,8BAA8B;AAC9B;AACA,yBAAyB;AACzB,kCAAkC;AAClC,gCAAgC;AAChC,uCAAuC;AACvC,mCAAmC;AACnC,iCAAiC;AACjC,kCAAkC;AAClC,iCAAiC;AACjC,qBAAqB;AACrB;AACA,6DAA6D;AAC7D,2IAA2I;AAC3I,2FAA2F;;AAE3F,mCAAmC;AACnC,gDAAgD;AAChD,uFAAuF;AACvF,kDAAkD;AAClD,kCAAkC;AAClC,mCAAmC,eAAe,OAAO;AACzD,yCAAyC;AACzC,8BAA8B;AAC9B,qBAAqB;AACrB,wFAAwF;AACxF,4BAA4B;AAC5B,iBAAiB;AACjB,+BAA+B;AAC/B,aAAa,OAAO;AACpB,iDAAiD;AACjD,aAAa;AACb,iCAAiC;AACjC,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb,qB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb,qB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;;AAEA;AACA,8BAA8B;AAC9B;AACA,yBAAyB;AACzB,uCAAuC;AACvC,mCAAmC;AACnC,kCAAkC;AAClC,qBAAqB;AACrB,mCAAmC;AACnC,8EAA8E;AAC9E,8CAA8C;AAC9C,8BAA8B;AAC9B,+BAA+B,eAAe,OAAO;AACrD,qCAAqC;AACrC,0BAA0B;AAC1B,iBAAiB;AACjB,oFAAoF;AACpF,wBAAwB;AACxB,aAAa;AACb,2BAA2B;AAC3B,iCAAiC;AACjC,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,8BAA8B;AAC9B;AACA,yBAAyB;AACzB,mCAAmC;AACnC,iCAAiC;AACjC,kCAAkC;AAClC,qBAAqB;AACrB,yCAAyC;AACzC,yCAAyC;AACzC,kDAAkD;AAClD,+CAA+C;AAC/C,0CAA0C;AAC1C,uCAAuC;AACvC,4BAA4B;AAC5B,2CAA2C;AAC3C,gDAAgD;;AAEhD,mCAAmC;AACnC,+BAA+B;AAC/B,0FAA0F;AAC1F,kDAAkD;AAClD,kCAAkC;AAClC,mCAAmC,eAAe,OAAO;AACzD,yCAAyC;AACzC,8BAA8B;AAC9B,qBAAqB;AACrB,uFAAuF;AACvF,4BAA4B;AAC5B,iBAAiB;AACjB,+BAA+B;AAC/B,aAAa,OAAO;AACpB,iDAAiD;AACjD,aAAa;AACb,iCAAiC;AACjC,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;AACA;;AAEA;AACA,+BAA+B;AAC/B,0BAA0B;AAC1B,8BAA8B;AAC9B,+BAA+B;AAC/B,oCAAoC;AACpC,2CAA2C;AAC3C,0CAA0C;AAC1C,UAAU;AACV,sBAAsB;AACtB,kDAAkD;AAClD,2BAA2B;AAC3B,uDAAuD;AACvD,aAAa;AACb,2DAA2D;AAC3D,iCAAiC;AACjC,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;AACA,+BAA+B;;AAE/B,oCAAoC;AACpC,mCAAmC;;AAEnC,0BAA0B;;AAE1B,8CAA8C;AAC9C,sDAAsD;AACtD,uDAAuD;;;AAGveAAe,EAAE;;AAE/D;AACA;AACA;AACA,gBAAgB,GAAG;AACnB;AACA;AACA;AACA,gBAAgB,KAAK;AACrB;AACA,oBAAoB,KAAK;AACzB;AACA;AACA;AACA;AACA,gBAAgB,GAAG;AACnB,gBAAgB,GAAG;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA,6BAA6B;AAC7B,4BAA4B;AAC5B,4BAA4B;AAC5B,sDAAsD;AACtD;AACA,wGAAwG;AACxG,wGAAwG;AACxG,wGAAwG;AACxG,wGAAwG;AACxG;AACA,iDAAiD;AACjD,iDAAiD;AACjD,kDAAkD;AAClD,kDAAkD;AAClD,iDAAiD;AACjD,iDAAiD;AACjD,qDAAqD;AACrD,qDAAqD;AACrD,4EAA4E;AAC5E,mDAAmD;AACnD,0FAA0F;AAC1F,0DAA0D;AAC1D;AACA;AACA,8BAA8B;AAC9B;AACA,yGAAyG;AACzG,yGAAyG;AACzG,yGAAyG;AACzG,yGAAyG;AACzG;AACA,8CAA8C;AAC9C,8CAA8C;AAC9C,kDAAkD;AAClD,oDAAoD;AACpD,2DAA2D;AAC3D,2DAA2D;AAC3D;AACA,kDAAkD;AAClD,kDAAkD;AAClD,6DAA6D;AAC7D,6DAA6D;AAC7D;AACA,kDAAkD;AAClD,kDAAkD;AAClD,2EAA2E;AAC3E,2EAA2E;AAC3E,6DAA6D;AAC7D,6DAA6D;AAC7D,6DAA6D;AAC7D,6DAA6D;AAC7D;AACA,4DAA4D;AAC5D,0DAA0D;AAC1D,sDAAsD;AACtD,mEAAmE;AACnE;AACA,yCAAyC;AACzC,yCAAyC;AACzC,6DAA6D;AAC7D,gEAAgE;AAChE;AACA,iDAAiD;AACjD,iDAAiD;AACjD,8CAA8C;AAC9C,8CAA8C;AAC9C,+DAA+D;AAC/D,sEAAsE;AACtE,gDAAgD;AAChD,wEAAwE;AACxE;AACA,6BAA6B;AAC7B,6BAA6B;AAC7B,6BAA6B;AAC7B,8BAA8B;AAC9B,iEAAiE;AACjE,iEAAiE;AACjE,sDAAsD;AACtD,sDAAsD;AACtD;AACA,6BAA6B;AAC7B,yDAAyD;AACzD,yDAAyD;AACzD,6BAA6B;AAC7B,yDAAyD;AACzD,yDAAyD;AACzD,wDAAwD;AACxD,kEAAkE;AAClE,mDAAmD;AACnD,kEAAkE;AAClE;AACA,wCAAwC;AACxC,2DAA2D;AAC3D,qDAAqD;AACrD,mDAAmD;AACnD,iDAAiD;AACjD;AACA,sCAAsC;AACtC,sCAAsC;AACtC,8DAA8D;AAC9D,8DAA8D;AAC9D,4DAA4D;AAC5D,4DAA4D;AAC5D,oDAAoD;AACpD,4DAA4D;AAC5D,4DAA4D;AAC5D;AACA,yBAAyB;AACzB,0EAA0E;AAC1E,0EAA0E;AAC1E,+DAA+D;AAC/D,+DAA+D;AAC/D,yDAAyD;AACzD,yDAAyD;AACzD,gEAAgE;AAChE,gEAAgE;AAChE,+CAA+C;AAC/C,gEAAgE;AAChE,gEAAgE;AAChE;AACA;AACA,6BAA6B;AAC7B,8EAA8E;AAC9E,8EAA8E;AAC9E,mEAAmE;AACnE,mEAAmE;AACnE,6DAA6D;AAC7D,6DAA6D;AAC7D,oEAAoE;AACpE,oEAAoE;AACpE,mDAAmD;AACnD,oEAAoE;AACpE,oEAAoE;AACpE;AACA;AACA,iCAAiC;AACjC,kFAAkF;AAClF,kFAAkF;AAClF,uEAAuE;AACvE,uEAAuE;AACvE,iEAAiE;AACjE,iEAAiE;AACjE,wEAAwE;AACxE,wEAAwE;AACxE,uDAAuD;AACvD,wEAAwE;AACxE,wEAAwE;AACxE;AACA;AACA,qCAAqC;AACrC,sFAAsF;AACtF,sFAAsF;AACtF,2EAA2E;AAC3E,2EAA2E;AAC3E,qEAAqE;AACrE,qEAAqE;AACrE,4EAA4E;AAC5E,4EAA4E;AAC5E,2DAA2D;AAC3D,4EAA4E;AAC5E,4EAA4E;AAC5E;AACA;AACA,yCAAyC;AACzC,0FAA0F;AAC1F,0FAA0F;AAC1F,+EAA+E;AAC/E,+EAA+E;AAC/E,yEAAyE;AACzE,yEAAyE;AACzE,gFAAgF;AAChF,gFAAgF;AAChF,+DAA+D;AAC/D,gFAAgF;AAChF,gFAAgF;AAChF;AACA;AACA,6CAA6C;AAC7C,8FAA8F;AAC9F,8FAA8F;AAC9F,mFAAmF;AACnF,mFAAmF;AACnF,6EAA6E;AAC7E,6EAA6E;AAC7E,oFAAoF;AACpF,oFAAoF;AACpF,mEAAmE;AACnE,oFAAoF;AACpF,oFAAoF;AACpF;AACA;AACA,yBAAyB;AACzB,0EAA0E;AAC1E,0EAA0E;AAC1E,+DAA+D;AAC/D,+DAA+D;AAC/D,yDAAyD;AACzD,yDAAyD;AACzD,gEAAgE;AAChE,gEAAgE;AAChE,+CAA+C;AAC/C,gEAAgE;AAChE,gEAAgE;AAChE;AACA;AACA,6BAA6B;AAC7B,8EAA8E;AAC9E,8EAA8E;AAC9E,mEAAmE;AACnE,mEAAmE;AACnE,6DAA6D;AAC7D,6DAA6D;AAC7D,oEAAoE;AACpE,oEAAoE;AACpE,mDAAmD;AACnD,oEAAoE;AACpE,oEAAoE;AACpE;AACA;AACA,iCAAiC;AACjC,kFAAkF;AAClF,kFAAkF;AAClF,uEAAuE;AACvE,uEAAuE;AACvE,iEAAiE;AACjE,iEAAiE;AACjE,yEAAyE;AACzE,yEAAyE;AACzE,uDAAuD;AACvD,yEAAyE;AACzE,yEAAyE;AACzE;AACA;AACA,qCAAqC;AACrC,sFAAsF;AACtF,sFAAsF;AACtF,2EAA2E;AAC3E,2EAA2E;AAC3E,qEAAqE;AACrE,qEAAqE;AACrE,6EAA6E;AAC7E,6EAA6E;AAC7E,2DAA2D;AAC3D,6EAA6E;AAC7E,6EAA6E;AAC7E;AACA;AACA,yCAAyC;AACzC,0FAA0F;AAC1F,0FAA0F;AAC1F,+EAA+E;AAC/E,+EAA+E;AAC/E,yEAAyE;AACzE,yEAAyE;AACzE,iFAAiF;AACjF,iFAAiF;AACjF,+DAA+D;AAC/D,iFAAiF;AACjF,iFAAiF;AACjF;AACA,8BAA8B;AAC9B;AACA;AACA,0BAA0B;AAC1B;AACA;AACA,sBAAsB;AACtB;AACA;AACA,kBAAkB;AAClB;AACA;AACA,cAAc;AACd;AACA;AACA,kCAAkC;AAClC;AACA;AACA,8BAA8B;AAC9B;AACA;AACA,0BAA0B;AAC1B;AACA;AACA,sBAAsB;AACtB;AACA;AACA,kBAAkB;AAClB;AACA;AACA,cAAc;AACd;AACA,8CAA8C;AAC9C,8CAA8C;AAC9C,kDAAkD;AAClD,kDAAkD;AAClD;AACA,kEAAkE;AAClE,kDAAkD;AAClD,kEAAkE;AAClE,sDAAsD;AACtD;AACA,+CAA+C;AAC/C,6CAA6C;AAC7C,oEAAoE;AACpE,mDAAmD;AACnD,oEAAoE;AACpE,6DAA6D;AAC7D;AACA,sEAAsE;AACtE,yEAAyE;AACzE,oEAAoE;AACpE,oEAAoE;AACpE,0CAA0C;AAC1C,UAAU;;AAEV,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,oCAAoC;AACpC,iCAAiC;AACjC,gCAAgC;AAChC,4BAA4B;AAC5B,kCAAkC;AAClC,kCAAkC;AAClC,+BAA+B;AAC/B,uCAAuC;AACvC,oDAAoD;AACpD,4CAA4C;AAC5C,yFAAyF;AACzF;AACA;AACA;AACA;AACA,cAAc;AACd,SAAS;AACT,qCAAqC;AACrC,8CAA8C;AAC9C,0CAA0C;AAC1C;AACA;AACA;AACA,cAAc;AACd,SAAS;AACT,qBAAqB;AACrB,6DAA6D;AAC7D,mCAAmC,SAAS,EAAE;AAC9C,wDAAwD;AACxD,2EAA2E;AAC3E,+FAA+F;AAC/F,iCAAiC,SAAS,EAAE;AAC5C,kCAAkC;AAClC,2BAA2B,sBAAsB,OAAO;AACxD,0DAA0D;AAC1D,sCAAsC;AACtC,qCAAqC;AACrC,qDAAqD;AACrD,oDAAoD;AACpD,yDAAyD;AACzD,gEAAgE;AAChE,oDAAoD;AACpD,0CAA0C;AAC1C,wEAAwE;AACxE,8FAA8F;AAC9F,aAAa;AACb,+EAA+E;AAC/E,iDAAiD;AACjD,+CAA+C;AAC/C,6DAA6D;AAC7D,aAAa;AACb,+CAA+C;AAC/C,6DAA6D;AAC7D,aAAa;AACb,uCAAuC;AACvC,oDAAoD;AACpD,SAAS;AACT;;AAEA;AACA,+BAA+B;AAC/B,0BAA0B;AAC1B,wCAAwC;AACxC,mCAAmC;AACnC,oCAAoC;AACpC,sCAAsC;AACtC,UAAU;AACV,sBAAsB;AACtB,+BAA+B;AAC/B,oCAAoC;AACpC,oCAAoC;AACpC,oCAAoC;AACpC,oCAAoC;AACpC,oCAAoC;AACpC,iEAAiE;AACjE,6CAA6C;AAC7C,qDAAqD;AACrD,6DAA6D;AAC7D,4BAA4B,QAAQ,OAAO;AAC3C,+DAA+D;AAC/D,oEAAoE;AACpE,iEAAiE;AACjE,4CAA4C;AAC5C,iFAAiF;AACjF,+CAA+C;AAC/C,uCAAuC;AACvC,cAAc;AACd,4BAA4B,QAAQ,OAAO;AAC3C,gEAAgE;AAChE,oEAAoE;AACpE,iEAAiE;AACjE,4CAA4C;AAC5C,iFAAiF;AACjF,+CAA+C;AAC/C,uCAAuC;AACvC,cAAc;AACd,2DAA2D;AAC3D,UAAU;AACV;;AAEA;AACA,+BAA+B;AAC/B,0BAA0B;AAC1B,wCAAwC;AACxC,4CAA4C;AAC5C,uCAAuC;AACvC,wCAAwC;AACxC,sBAAsB;AACtB,uDAAuD;AACvD,2HAA2H;AAC3H,+DAA+D;AAC/D,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb,+B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA,2E;AACA,iF;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA,2E;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sDAAsD;;AAEtD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;AACD,CAAC;AACD,0DAA0D,yBAAyB;AACnF;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,mCAAmC;;AAEnC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,gDAAgD;AAChD;;AAEA,kFAAkF;;AAElF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,UAAU;AAC/D;AACA;AACA,mDAAmD,UAAU;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,0CAA0C,SAAS;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,0CAA0C,SAAS;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,qDAAqD;AACrD;AACA,aAAa;AACb;AACA;;AAEA;AACA,6CAA6C,SAAS;AACtD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,iDAAiD,SAAS;AAC1D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,6CAA6C,SAAS;AACtD;AACA,8CAA8C;AAC9C;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA,6CAA6C,SAAS;AACtD;AACA,8CAA8C;AAC9C;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,SAAS;AACjE;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;;AAEA,mDAAmD;;AAEnD;AACA;AACA;AACA,+CAA+C;AAC/C,0CAA0C,SAAS;AACnD;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA,oDAAoD,qBAAqB;AACzE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,mDAAmD,SAAS;;AAE5D;;AAEA,4DAA4D;;AAE5D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sDAAsD;;AAEtD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,qDAAqD,SAAS;AAC9D;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,8BAA8B;AAC9B,8BAA8B;;AAE9B,8BAA8B;;AAE9B;AACA,gCAAgC;AAChC;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,iDAAiD,SAAS;AAC1D;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA;AACA;AACA;;AAEA,kDAAkD,SAAS;AAC3D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sDAAsD,SAAS;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,gDAAgD,SAAS;AACzD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oDAAoD,SAAS;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,yCAAyC,SAAS;AAClD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,yCAAyC,SAAS;AAClD;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,wDAAwD,SAAS;AACjE;AACA;;AAEA;AACA;;AAEA;AACA,wDAAwD,SAAS;AACjE;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb,4DAA4D,SAAS;AACrE;AACA;AACA;AACA,SAAS;AACT,wDAAwD,SAAS;AACjE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,yDAAyD,SAAS;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,sBAAsB;AACtB,0BAA0B;AAC1B,sBAAsB;AACtB,uBAAuB;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA,kDAAkD,SAAS;AAC3D;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;;AAEA;AACA,0BAA0B;AAC1B,8BAA8B;AAC9B,2BAA2B;AAC3B,0BAA0B;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,kDAAkD,SAAS;AAC3D;AACA;AACA;;AAEA;AACA;;AAEA,kDAAkD,SAAS;AAC3D;AACA;AACA;;AAEA;AACA;;AAEA,kDAAkD,SAAS;AAC3D;AACA;AACA;;AAEA;AACA,kDAAkD,SAAS;AAC3D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sDAAsD,SAAS;AAC/D;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,sDAAsD,SAAS;AAC/D;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kDAAkD,SAAS;AAC3D;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA,2CAA2C;AAC3C;;AAEA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;;AAEA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA,kBAAkB;AAClB;AACA,kDAAkD;;AAElD;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,sBAAsB;AACtB,0BAA0B;AAC1B,sBAAsB;AACtB,uBAAuB;AACvB;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,yDAAyD,SAAS;AAClE;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,iEAAiE,yBAAyB;AAC1F;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,0DAA0D,SAAS;AACnE;AACA;AACA;AACA;AACA,0DAA0D,SAAS;AACnE;AACA;AACA;AACA;AACA,0DAA0D,SAAS;AACnE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA,sDAAsD,SAAS;AAC/D;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;;AAEA;AACA,0BAA0B;AAC1B,8BAA8B;AAC9B,2BAA2B;AAC3B,0BAA0B;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sDAAsD,SAAS;AAC/D;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB;AAChB;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA,4CAA4C,gBAAgB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,yBAAyB;AACzE;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,qBAAqB;AACrE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;;AAEA,4CAA4C,4CAA4C;AACxF;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,4CAA4C,4CAA4C;AACxF;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,4CAA4C,0CAA0C;;AAEtF;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;;AAEA,4CAA4C,gDAAgD;AAC5F;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,4CAA4C,gDAAgD;AAC5F;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,4CAA4C,gDAAgD;AAC5F;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,4CAA4C,4CAA4C;AACxF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;;AAEA;AACA,0CAA0C,gBAAgB;AAC1D;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,0CAA0C,iBAAiB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA,0CAA0C,mBAAmB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA,0CAA0C,mBAAmB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA,gDAAgD,sBAAsB;AACtE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB,uFAAuF;AACzG,qBAAqB,8FAA8F;AACnH,sBAAsB,gGAAgG;AACtH,wBAAwB,+FAA+F;AACvH,sBAAsB,6FAA6F;AACnH,oBAAoB,0FAA0F;AAC9G,sBAAsB,iIAAiI;AACvJ,uBAAuB,4FAA4F;AACnH,uBAAuB,4FAA4F;AACnH,qBAAqB;AACrB;;AAEA;AACA,eAAe;;;AAGf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,yDAAyD,SAAS;AAClE;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,yDAAyD,SAAS;AAClE;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mCAAmC;AACnC,qCAAqC;AACrC,qDAAqD,SAAS;AAC9D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,sDAAsD,SAAS;AAC/D;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iDAAiD,SAAS;AAC1D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA,8DAA8D,SAAS;AACvE;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,M;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2DAA2D,SAAS;AACpE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,M;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,M;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,2DAA2D,SAAS;AACpE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,M;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA,4B;AACA;AACA;AACA;AACA;;AAEA;AACA,2B;AACA;AACA;AACA;AACA;;AAEA;AACA,uB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,6DAA6D,wBAAwB;AACrF;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;;AAEA,CAAC,KAAK;AACN;AACA;AACA;AACA;AACA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB;AACvB,OAAO;AACP;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,iCAAiC;AACjC;AACA,oBAAoB;AACpB;AACA;AACA,SAAS;AACT,4BAA4B,wBAAwB;AACpD,2BAA2B,QAAQ,sBAAsB;AACzD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB,oBAAoB,aAAa;AACjD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,UAAU,EAAE;AAC9C,kCAAkC,wBAAwB,EAAE;AAC5D,2CAA2C,2BAA2B;AACtE;;AAEA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,2BAA2B;AAC3B,oCAAoC;AACpC,oCAAoC;AACpC;AACA;AACA,2CAA2C,yBAAyB;AACpE;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;;AAEpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA,GAAG;AACH,CAAC;AACD;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,2BAA2B;;AAE3B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,oBAAoB;AAC3C;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA,6CAA6C,SAAS;AACtD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C,SAAS;AACtD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,oBAAoB;AAC3C;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,qDAAqD,SAAS;AAC9D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,yCAAyC,SAAS;AAClD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C,SAAS;AACnD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,yCAAyC,SAAS;AAClD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,yCAAyC,SAAS;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,2CAA2C,SAAS;AACpD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb,iEAAiE,UAAU;AAC3E;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,2DAA2D,SAAS;AACpE;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,oDAAoD,SAAS;AAC7D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,oDAAoD,SAAS;AAC7D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,oDAAoD,SAAS;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA,CAAC;AACD,CAAC;AACD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,yBAAyB;;AAEzB;AACA,kCAAkC;AAClC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,qBAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;;AAGA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kDAAkD,SAAS;AAC3D;AACA,qDAAqD,WAAW;AAChE;AACA;AACA;;AAEA;AACA;AACA;AACA,oDAAoD,aAAa;AACjE;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB,yCAAyC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,aAAa;AAC9D;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;AACD,CAAC;;AAED;;AAEA;AACA;;AAEA;AACA;AACA;AACA,2CAA2C;AAC3C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,wBAAwB,gCAAgC;AACxD;AACA;AACA;AACA;;AAEA;AACA,wBAAwB,kCAAkC;AAC1D;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;;AAEA,CAAC;AACD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB,oDAAoD;AACpE,iBAAiB,kDAAkD;AACnE,cAAc;AACd;;;AAGA;AACA,kCAAkC;AAClC,kCAAkC;AAClC;AACA,+BAA+B;AAC/B,+BAA+B;AAC/B,kCAAkC;AAClC,6BAA6B,+BAA+B;AAC5D,iCAAiC;AACjC,+BAA+B;AAC/B,8BAA8B;AAC9B,yCAAyC;;AAEzC;AACA;AACA;;;AAGA;AACA,gCAAgC;;AAEhC;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB;AACxB,yBAAyB;AACzB,sBAAsB;;AAEtB;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;;AAET;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,iDAAiD,yBAAyB;AAC1E;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA,yBAAyB;AACzB,uBAAuB;AACvB,wBAAwB;AACxB,sBAAsB;AACtB,uBAAuB;AACvB,uBAAuB;AACvB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,0BAA0B;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,aAAa;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,2BAA2B;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,cAAc;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe;AACf,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,QAAQ;AACtB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE;;AAExE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;;AAEA;AACA,4CAA4C;;AAE5C;AACA;AACA;AACA,SAAS;AACT,yCAAyC,oBAAoB;AAC7D;AACA;AACA,sBAAsB;AACtB,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kBAAkB;AAClB,SAAS;AACT,kBAAkB;AAClB;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,mDAAmD,iCAAiC;AACpF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,EAAE;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,qBAAqB;AACtC;AACA;AACA;;AAEA,KAAK;;AAEL,CAAC;AACD,CAAC;AACD;;AAEA;AACA,iCAAiC,qBAAqB;AACtD;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA,wCAAwC;;AAExC;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,kDAAkD,SAAS;;AAE3D;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB,eAAe,OAAO;AACtB;AACA;AACA,kDAAkD,SAAS;AAC3D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kDAAkD,SAAS;AAC3D;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,sBAAsB;AACrD,+BAA+B,mBAAmB;AAClD,+BAA+B;AAC/B,qBAAqB;AACrB;AACA,+BAA+B,uBAAuB;AACtD,+BAA+B,oBAAoB;AACnD,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,iDAAiD,SAAS;;AAE1D;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA,iCAAiC;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,+CAA+C,SAAS;AACxD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,CAAC;AACD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,gDAAgD,mBAAmB;AACnE;AACA,0BAA0B,oBAAoB;AAC9C,0BAA0B,mBAAmB;AAC7C,0BAA0B,oBAAoB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,eAAe;AAC3B,YAAY,eAAe;AAC3B,WAAW,QAAQ;AACnB,WAAW,OAAO,0EAA0E;AAC5F;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mDAAmD,MAAM;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,2BAA2B;AACpD;AACA;AACA,eAAe,OAAO;AACtB,gBAAgB,gBAAgB;AAChC;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,OAAO;AACtB,gBAAgB,QAAQ,2BAA2B,YAAY;AAC/D;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,uCAAuC,SAAS;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uCAAuC,SAAS;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA,mBAAmB;AACnB,kBAAkB;AAClB,kBAAkB;AAClB,oBAAoB;;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,sBAAsB;AACrD,+BAA+B,mBAAmB;AAClD,+BAA+B;AAC/B,qBAAqB;AACrB;AACA,+BAA+B,uBAAuB;AACtD,+BAA+B,oBAAoB;AACnD,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB,eAAe,OAAO;AACtB;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;AACA,8BAA8B,4BAA4B;AAC1D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,mBAAmB;AACpC,kBAAkB,mBAAmB;AACrC,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,CAAC;;AAED,CAAC;AACD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,iCAAiC;;;AAGjC;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA,+CAA+C,SAAS;AACxD;AACA;;AAEA;AACA;;;AAGA,aAAa;AACb;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,aAAa;;AAEb,kBAAkB;AAClB,aAAa;;AAEb,kBAAkB;AAClB,aAAa;;AAEb,kBAAkB;AAClB,aAAa;;AAEb,kBAAkB;AAClB,aAAa;;AAEb,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,qDAAqD,SAAS;AAC9D;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,S;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iDAAiD,SAAS;AAC1D;AACA;AACA;AACA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA,SAAS;;AAET;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB,KAAK;AAC1B,wBAAwB,WAAW;AACnC,oBAAoB,WAAW;AAC/B,oBAAoB;AACpB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA,CAAC;AACD,CAAC;AACD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,CAAC,KAAK;AACN;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,a;AACA;AACA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa;;AAEb;AACA,aAAa;;AAEb;AACA,aAAa;;AAEb;AACA,aAAa;;AAEb;AACA,aAAa;;AAEb;AACA,aAAa;;AAEb;AACA,aAAa;;AAEb;AACA,aAAa;;AAEbuBAAuB;AACvB,6BAA6B;AAC7B,qCAAqC;AACrC,iCAAiC;AACjC,gCAAgC;;AAEhC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA,SAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,4CAA4C,mBAAmB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;;AAEzD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,yDAAyD;AACzD;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD,gEAAgE;AAChE;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;AACD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,2BAA2B;AAC5C;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,8BAA8B;AAC/C;AACA;AACA,yBAAyB,2BAA2B;AACpD;AACA;AACA,aAAa;AACb,yBAAyB,mBAAmB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB;AACxB,gDAAgD;AAChD;AACA;;AAEA;AACA,uBAAuB;AACvB;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA,0BAA0B;AAC1B;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,0CAA0C;;AAE1C,mEAAmE;;AAEnE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,mCAAmC,gBAAgB;AACnD;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,qBAAqB;;AAErB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,6CAA6C;AAC7C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+DAA+D;AAC/D;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,0DAA0D,SAAS;AACnE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;;;AAGA;AACA,uBAAuB,6BAA6B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,uEAAuE;AACvE;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,gEAAgE,mBAAmB;AACnF;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAyB;;AAEzB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,gDAAgD;AAChD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,mCAAmC;AACnC,4BAA4B,qFAAqF;AACjH,4BAA4B;AAC5B,yBAAyB;AACzB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mDAAmD,yCAAyC;;AAE5F;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;;AAEA,oEAAoE;AACpE;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA,4BAA4B;AAC5B;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sFAAsF;AACtF,oFAAoF;;AAEpF;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,IAAI;AACnB,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,qDAAqD,SAAS;AAC9D,SAAS;AACT;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iDAAiD,qBAAqB;AACtE;AACA;;AAEA;;AAEA,qDAAqD,SAAS;AAC9D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;;AAEA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,MAAM;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAS;;AAET;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,8CAA8C,eAAe;AAC7D;AACA;;AAEA;AACA;AACA;AACA;AACA,8CAA8C,eAAe;AAC7D,+CAA+C,aAAa;AAC5D,oCAAoC;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C,SAAS;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,eAAe,EAAE;AACxF,sEAAsE,eAAe,EAAE;AACvF;AACA;AACA,6CAA6C;AAC7C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C,SAAS,OAAO;AAC1D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;;;AAGA;AACA,oBAAoB;AACpB,oBAAoB;AACpB,uBAAuB;AACvB,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C,SAAS;AACntD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6CAA6C,SAAS;AACtD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,+BAA+B,kBAAkB;AACjD;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,gDAAgD,SAAS;AACzD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA,0CAA0C,SAAS;AACnD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;;AAEA;AACA,kDAAkD,SAAS;AAC3D;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;;AAGT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,aAAa;AACb;AACA;;AAEA;;AAEA,uCAAuC,aAAa;AACpD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA,mDAAmD,SAAS;AAC5D;AACA;;AAEA;AACA;;AAEA,+CAA+C,SAAS;AACxD;AACA;;AAEA,2CAA2C,uBAAuB;AAClE;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,+BAA+B;AAClD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kDAAkD,SAAS;AAC3D;AACA;;AAEA;AACA;AACA,2CAA2C,uBAAuB;AAClE;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,S;;AAEA;AACA;AACA;;AAEA;AACA;AACA,S;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,S;;AAEA;AACA;AACA;AACA;AACA,S;;AAEA;AACA;AACA;AACA;AACA,S;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA,2BAA2B,SAAS;AACpC;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA,2BAA2B,SAAS;AACpC;AACA;AACA;AACA;AACA,a;AACA;;AAEA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA,2BAA2B,SAAS;AACpC;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA,2BAA2B,SAAS;AACpC;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,2BAA2B,SAAS;AACpC;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,2BAA2B,SAAS;AACpC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,2BAA2B,SAAS;AACpC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,4BAA4B,UAAU;AACtC;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,4BAA4B,UAAU;AACtC;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,2BAA2B,SAAS;AACpC;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,CAAC,KAAK;AACN;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA,2BAA2B,SAAS;AACpC;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,2BAA2B,SAAS;;AAEpC;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA,2BAA2B,SAAS;;AAEpC;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,2BAA2B,SAAS;;AAEpC;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,2BAA2B,SAAS;;AAEpC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;AACA;;AAEA,oDAAoD,SAAS;AAC7D;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,2BAA2B,SAAS;;AAEpC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,S;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,a;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,2BAA2B,SAAS;;AAEpC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,qD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,CAAC;AACD,CAAC;AACD;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,2BAA2B,SAAS;;AAEpC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,2BAA2B,SAAS;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,2DAA2D;AAC3D;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,2BAA2B,SAAS;;AAEpC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,mDAAmD;AACnD,sDAAsD;AACtD,mDAAmD;AACnD,6CAA6C;AAC7C,iDAAiD;;AAEjD;AACA;AACA;AACA;AACA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,2BAA2B,SAAS;AACpC;AACA;AACA;AACA;;AAEA;;AAEA,CAAC,KAAK;AACN;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,2BAA2B,SAAS;AACpC;AACA;AACA;AACA;;AAEA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,2BAA2B,SAAS;AACpC;AACA;AACA;AACA;;AAEA;AACA,aAAa;AACb;AACA;;AAEA;AACA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,2BAA2B,SAAS;AACpC;AACA;AACA;AACA;;AAEA;AACA,aAAa;AACb;AACA;;AAEA;AACA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,SAAS;AACpC;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,S;;AAEA;AACA,CAAC,KAAK;AACN;;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,2BAA2B,SAAS;AACpC;AACA;AACA;AACA,S;;AAEA;AACA,CAAC,KAAK;AACN;;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,2BAA2B,SAAS;AACpC;AACA;AACA;AACA,S;;AAEA;AACA,CAAC,KAAK;AACN;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,2BAA2B,SAAS;AACpC;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,gD;AACA,gD;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;AAIA,CAAC;AACD,CAAC;AACD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;;AAIA,CAAC;AACD,CAAC;AACD;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;AAIA,CAAC;AACD,CAAC;AACD;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;AAIA,CAAC;AACD,CAAC;AACD;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,GAAG,EAAE;AACpB;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,2CAA2C,SAAS;AACpD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,yCAAyC,QAAQ;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,sCAAsC;AACvG;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yDAAyD,iCAAiC;AAC1F;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yDAAyD,oCAAoC;AAC7F;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,6BAA6B;AACxF;;AAEA;AACA;AACA;AACA;AACA;AACA,yDAAyD,mCAAmC;AAC5F;;AAEA;AACA;AACA;AACA;AACA;AACA,yDAAyD,oCAAoC;AAC7F;;AAEA;AACA;AACA;AACA;AACA;AACA,yDAAyD,mCAAmC;AAC5F;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,mDAAmD;AACnD;AACA;AACA,sDAAsD;AACtD;AACA;AACA;;AAEA;AACA;;AAEA;AACA,wBAAwB;AACxB,sBAAsB;AACtB,0BAA0B;AAC1B,wBAAwB;AACxB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB;AACxB;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,sEAAsE;AACtE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,qBAAqB;AACrB;AACA,c;AACA;AACA,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;;AAGA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,iBAAiB;;AAEjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,sDAAsD;AACtD;AACA,eAAe,OAAO;AACtB;;AAEA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,SAAS;AACxD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,mDAAmD,SAAS;AAC5D;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,uDAAuD,SAAS;AAChE;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA,SAAS;AACT;AACA;AACA;AACA;AACA,mDAAmD,SAAS;AAC5D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA,CAAC;AACD,CAAC;AACD;;AAEA;AACA;AACA;;AAEA,yBAAyB;;AAEzB;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,+DAA+D,SAAS;AACxE;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,wCAAwC,kBAAkB;;AAE1D,uDAAuD,SAAS;AAChE;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;;;AAGA,aAAa;;AAEb;AACA;;AAEA;AACA,iCAAiC;AACjC,iCAAiC;AACjC,iCAAiC;AACjC,kCAAkC;AAClC,kCAAkC;AAClC,kCAAkC;AAClC,kCAAkC;AAClC,qCAAqC;AACrC,gCAAgC;AAChC,gCAAgC;AAChC,qCAAqC;AACrC,qCAAqC;AACrC,mCAAmC;AACnC,qCAAqC;AACrC;;;AAGA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;;AAGA;;AAEA;AACA;;AAEA;;AAEA;AACA,uDAAuD,SAAS;AAChE;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;;AAET;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,CAAC;AACD,CAAC;AACD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,oCAAoC;AAClF,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,KAAK;AACN;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,aAAa;AACpC;AACA,0FAA0F;AAC1F,sFAAsF;;AAEtF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,yBAAyB;AACzB,yBAAyB;AACzB,yBAAyB;AACzB,0BAA0B;AAC1B,0BAA0B;AAC1B,0BAA0B;AAC1B,0BAA0B;AAC1B,6BAA6B;AAC7B,wBAAwB;AACxB,wBAAwB;AACxB,6BAA6B;AAC7B,6BAA6B;AAC7B,2BAA2B;AAC3B,6BAA6B;AAC7B;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,yBAAyB;AACzB,yBAAyB;AACzB,yBAAyB;AACzB,yBAAyB;AACzB,yBAAyB;AACzB,yBAAyB;AACzB,yBAAyB;AACzB,wBAAwB;AACxB,wBAAwB;AACxB,wBAAwB;AACxB;AACA,yBAAyB;AACzB;AACA,yBAAyB;AACzB,wBAAwB;AACxB;AACA,wBAAwB;AACxB,kDAAkD;;AAElD;AACA,mCAAmC;AACnC,mCAAmC,yBAAyB;AAC5D,4BAA4B;AAC5B,4BAA4B;AAC5B;AACA,4BAA4B;AAC5B,2BAA2B;AAC3B,2BAA2B;AAC3B;AACA,2BAA2B;AAC3B,gCAAgC;AAChC;AACA,8BAA8B;AAC9B;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,iCAAiC,aAAa;AAC9C;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,uBAAuB,aAAa;AACpC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,yBAAyB;AACzB,yBAAyB;AACzB,yBAAyB;AACzB,yBAAyB;AACzB,yBAAyB;AACzB,wBAAwB;AACxB,wBAAwB;AACxB,yBAAyB;AACzB;AACA,yBAAyB;AACzB;AACA;AACA,uBAAuB;AACvB,uBAAuB,yBAAyB;AAChD,4BAA4B;AAC5B,4BAA4B;AAC5B;AACA,4BAA4B;AAC5B,0BAA0B;AAC1B;AACA;AACA;AACA,sDAAsD;AACtD;AACA;AACA,wCAAwC,gBAAgB;AACxD;AACA,2CAA2C;;AAE3C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA,mGAAmG;AACnG;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,SAAS;AAC5D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,oEAAoE;AACpE,0EAA0E;;AAE1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;;AAEjB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;;AAEjB;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,qEAAqE;AACrE,0EAA0E;;AAE1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,qEAAqE;AACrE,0EAA0E;;AAE1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA,SAAS;AACT;AACA;AACA;;AAEA,gCAAgC;AAChC;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA,kDAAkD,SAAS;AAC3D;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA,qDAAqD,SAAS;AAC9D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kD;AACA;AACA;AACA;AACA,+C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,SAAS;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,6CAA6C,SAAS;AACtD;AACA;AACA;;AAEA,oDAAoD,UAAU;AAC9D;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,aAAa;;AAEb;;AAEA;;AAEA;AACA;;AAEA,8CAA8C;;AAE9C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;;AAE1C;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,yBAAyB;AACzB,yBAAyB;AACzB,yBAAyB;AACzB,0BAA0B;AAC1B,0BAA0B;AAC1B,0BAA0B;AAC1B,0BAA0B;AAC1B,6BAA6B;AAC7B,wBAAwB;AACxB,wBAAwB;AACxB,6BAA6B;AAC7B,6BAA6B;AAC7B,2BAA2B;AAC3B,6BAA6B;AAC7B;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,uBAAuB,aAAa;;AAEpC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB;AACzB,yBAAyB;AACzB,yBAAyB;AACzB,yBAAyB;AACzB,yBAAyB;AACzB,yBAAyB;AACzB,yBAAyB;AACzB,yBAAyB;AACzB,wBAAwB;AACxB,wBAAwB;AACxB,wBAAwB;AACxB;AACA,yBAAyB;AACzB;AACA,yBAAyB;AACzB,wBAAwB;AACxB;AACA,wBAAwB;AACxB,kDAAkD;;AAElD;AACA,mCAAmC;AACnC,mCAAmC,yBAAyB;AAC5D,4BAA4B;AAC5B,4BAA4B;AAC5B;AACA,4BAA4B;AAC5B,2BAA2B;AAC3B,2BAA2B;AAC3B;AACA,2BAA2B;AAC3B,gCAAgC;AAChC;AACA,8BAA8B;AAC9B;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,iCAAiC,aAAa;AAC9C;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA,mBAAmB,aAAa;AAChC;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA,uBAAuB,aAAa;AACpC;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,uBAAuB,aAAa;AACpC;AACA;;AAEA;AACA;;AAEA;AACA,uBAAuB,aAAa;AACpC;AACA;AACA;;AAEA;AACA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;AACA,mFAAmF,qBAAqB;AACxG,4CAA4C,cAAc;AAC1D,0DAA0D,4BAA4B;AACtF,UAAU,uBAAuB,kCAAkC,0BAA0B;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,yDAAyD;AACvF;;AAEA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,SAAS;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,SAAS;AAC9D;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD;;AAEA;AACA,wDAAwD,4BAA4B;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,6C;;AAEA;AACA;;AAEA,4CAA4C,SAAS;;AAErD;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,0CAA0C,SAAS;AACnD;AACA;;AAEA;AACA;AACA,CAAC;AACD,CAAC;AACD;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,2FAA2F;;AAE3F;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;;AAEA;AACA;AACA;AACA,yBAAyB;AACzB;;AAEA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,aAAa;;AAEb;;AAEA;AACA;;AAEA;AACA,mEAAmE;;AAEnE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA,CAAC;AACD,CAAC;AACD;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,uDAAuD;AACvD;AACA,eAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,qDAAqD,SAAS;AAC9D;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,8EAA8E;AAC9E;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,4EAA4E;AAC5E;AACA;AACA;AACA,qBAAqB;AACrB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,+CAA+C,SAAS;AACxD;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD;;AAEA;AACA,uDAAuD,wBAAwB;AAC/E;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;AACA,uDAAuD,wBAAwB;AAC/E;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;AACA;AACA;;AAEA;AACA,uCAAuC;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,gBAAgB,iBAAiB;AACjC,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yBAAyB,sCAAsC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;;AAEA,SAAS;AACT;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA,kDAAkD;;AAElD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE;AACrE,2EAA2E;AAC3E;AACA;;AAEA,gBAAgB;AAChB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,mDAAmD,SAAS;AAC5D;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,uBAAuB;;AAEvB;;AAEA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,eAAe;AACf,WAAW;AACX;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,+BAA+B,4BAA4B;AAC3D;AACA;AACA,qEAAqE;AACrE,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kCAAkC,SAAS;AAC3C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0DAA0D,0BAA0B;AACpF;AACA;AACA;AACA;AACA,4DAA4D,yBAAyB;AACrF;AACA,SAAS;AACT;AACA,4DAA4D,iBAAiB;AAC7E;AACA;AACA;AACA,uDAAuD,uBAAuB;AAC9E;AACA;AACA,4DAA4D,2BAA2B;AACvF;AACA;AACA,2DAA2D,0BAA0B;AACrF;;AAEA;AACA,qDAAqD,qBAAqB;AAC1E;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yCAAyC,cAAc,iBAAiB;AACxE;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2CAA2C;AAC3C,mDAAmD;AACnD,2CAA2C;AAC3C,6CAA6C;;AAE7C;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA,CAAC;AACD,CAAC;AACD;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,kDAAkD,mBAAmB;AACrE;AACA;AACA;AACA,+DAA+D;AAC/D,2DAA2D,0CAA0C;AACrG;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,yCAAyC;;AAE5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,yDAAyD;AACjH;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,iCAAiC;AACtF,gDAAgD,kBAAkB;AAClE;AACA;AACA;AACA,oDAAoD,kBAAkB,EAAE;AACxE,0DAA0D,kBAAkB;AAC5E;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iDAAiD,gEAAgE;AACjH;AACA;AACA,0CAA0C;AAC1C,sDAAsD,gEAAgE;AACtH;AACA;AACA;AACA;AACA;AACA,6D;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA,mC;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA,kDAAkD,gEAAgE;AAClH;AACA,uDAAuD,gEAAgE;AACvH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uDAAuD,kCAAkC;AACzF;AACA;AACA;AACA,sDAAsD,kBAAkB;AACxE,4DAA4D,kBAAkB;AAC9E;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oDAAoD,kBAAkB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,kBAAkB;AAC9E;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,sBAAsB,sBAAsB;AAC5C;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;AACA,iCAAiC;AACjC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uCAAuC;;AAEvC,6CAA6C;AAC7C,qCAAqC;AACrC,qCAAqC;;AAErC,mDAAmD;AACnD;AACA;;;AAGA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,+BAA+B;AAC/B,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4DAA4D;;AAE5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,8DAA8D;AAC9D,iBAAiB,2BAA2B;AAC5C;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,0BAA0B;AAC7C,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb,kCAAkC,2BAA2B;AAC7D,gEAAgE;AAChE;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB,0BAA0B;AAC5C;AACA;AACA;AACA;AACA;AACA,qCAAqC,iBAAiB;AACtD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kD;AACA,+BAA+B,qBAAqB;AACpD;AACA,uC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yBAAyB,qCAAqC;AAC9D,8HAA8H;AAC9H;AACA;AACA;AACA,yBAAyB,0CAA0C;AACnE,oIAAoI;AACpI;AACA;AACA;AACA,2BAA2B,uCAAuC;AAClE,qHAAqH;AACrH;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB,qCAAqC;AAC1D;AACA;AACA;AACA;AACA,qBAAqB,0CAA0C;AAC/D;AACA,a;AACA;AACA;AACA,qBAAqB,qCAAqC;AAC1D;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,CAAC;AACD,CAAC;AACD;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,CAAC;AACD;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;AACD,CAAC;AACD;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,CAAC,KAAK;AACN;;AAEA;AACA;AACA;;AAEA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;;AAEA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,cAAc,OAAO;AACrB;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,aAAa,WAAW;AACxB;AACA;AACA,eAAe,OAAO;AACtB;;AAEA,iBAAiB,OAAO;AACxB;AACA;AACA;;AAEA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,eAAe;AAC9B,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,eAAe;AAC5B;AACA;AACA,eAAe,OAAO;AACtB;;AAEA;AACA,eAAe,UAAU;AACzB,gBAAgB,OAAO;AACvB;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA,eAAe,OAAO;AACtB;AACA,eAAe,eAAe;AAC9B,4BAA4B,eAAe;AAC3C,iBAAiB,eAAe;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS,OAAO;AAChB;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;;AAEA,iBAAiB,OAAO;AACxB;AACA;AACA;;AAEA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,aAAa,QAAQ,mBAAmB,kCAAkC;AAC1E,0BAA0B,EAAE;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,mBAAmB,kCAAkC;AACtE,4BAA4B;AAC5B;AACA;AACA,qBAAqB,mCAAmC;AACxD;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA,aAAa;AACb,SAAS;AACT,KAAK;;AAEL;AACA;AACA;;AAEA;AACA,aAAa,OAAO;AACpB,aAAa,gBAAgB;AAC7B,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,OAAO;AACpB,aAAa,gBAAgB;AAC7B,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA,aAAa,yDAAyD;AACtE;;AAEA;AACA,aAAa,OAAO;AACpB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B,mBAAmB,uBAAuB;AAC1C;AACA,eAAe,kBAAkB;AACjC;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,OAAO;AACpB,cAAc,OAAO;AACrB;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B,mBAAmB,uBAAuB;AAC1C;AACA,eAAe,kBAAkB;AACjC;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,cAAc,gBAAgB;AAC9B;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;;AAE1B;AACA,eAAe,gBAAgB;AAC/B,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,gBAAgB;AAC9B;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,eAAe,qBAAqB;AACpC,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,aAAa,eAAe;AAC5B,cAAc,gBAAgB;AAC9B;AACA;AACA;AACA;AACA,eAAe,gBAAgB;AAC/B,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,gBAAgB;AAC7B,cAAc,gBAAgB;AAC9B;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,eAAe,qBAAqB;AACpC,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB,cAAc,gBAAgB;AAC9B;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA,eAAe,gBAAgB;AAC/B,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB,cAAc,gBAAgB;AAC9B;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,eAAe,qBAAqB;AACpC,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,cAAc,gBAAgB;AAC9B;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B,mBAAmB,OAAO;AAC1B;AACA,eAAe,gBAAgB;AAC/B,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,gBAAgB;AAC9B;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,eAAe,qBAAqB;AACpC,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,cAAc,gBAAgB;AAC9B;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,mBAAmB,QAAQ;;AAE3B;AACA,eAAe,gBAAgB;AAC/B,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,gBAAgB;AAC9B;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,eAAe,qBAAqB;AACpC,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,cAAc,gBAAgB;AAC9B;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA,eAAe,gBAAgB;AAC/B,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,gBAAgB;AAC9B;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,eAAe,qBAAqB;AACpC,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,cAAc,gBAAgB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,mBAAmB,QAAQ;AAC3B,mBAAmB,OAAO;AAC1B;AACA,eAAe,gBAAgB;AAC/B,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,gBAAgB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA,eAAe,iBAAiB;AAChC,eAAe,qBAAqB;AACpC,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,cAAc,gBAAgB;AAC9B;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA,eAAe,gBAAgB;AAC/B,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,gBAAgB;AAC9B;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,eAAe,qBAAqB;AACpC,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,cAAc,gBAAgB;AAC9B;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA,eAAe,gBAAgB;AAC/B,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,cAAc,gBAAgB;AAC9B;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,eAAe,qBAAqB;AACpC,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,cAAc,gBAAgB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA,eAAe,gBAAgB;AAC/B,gBAAgB,QAAQ;AACxcAAc,gBAAgB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B,mBAAmB,OAAO;AAC1B;AACA,eAAe,iBAAiB;AAChC,eAAe,qBAAqB;AACpC,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB,cAAc,gBAAgB;AAC9B;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B,mBAAmB,QAAQ;AAC3B;AACA,eAAe,gBAAgB;AAC/B,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB,cAAc,gBAAgB;AAC9B;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,eAAe,qBAAqB;AACpC,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB;AACA,cAAc,eAAe,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C,wBAAwB,QAAQ;AAChC;AACA;AACA;AACA,yBAAyB,eAAe,EAAE;AAC1C,qBAAqB;;AAErB;AACA;AACA;AACA,SAAS,kBAAkB,4BAA4B,EAAE,EAAE;AAC3D,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB,gBAAgB,gBAAgB,EAAE;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,aAAa,QAAQ;AACrB;AACA,cAAc,eAAe,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C,wBAAwB,QAAQ;AAChC;AACA;AACA;AACA,yBAAyB,eAAe,EAAE;AAC1C,qBAAqB;;AAErB;AACA;AACA;AACA,SAAS,kBAAkB,4BAA4B,EAAE,EAAE;AAC3D,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,gBAAgB,gBAAgB,EAAE;AAClC;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,wCAAwC;AACxC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;;CClxyDD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY,aAAa,8BAA8B,WAAW,wBAAwB,WAAW,uBAAuB,YAAY,uCAAuC,IAAI,sDAAsD,kEAAkE,yCAAyC,qCAAqC,+DAA+D,SAAS,qCAAqC,gKAAgK,uCAAuC,mKAAmK,cAAc,aAAa,2BAA2B,iBAAiB,iBAAiB,wBAAwB,MAAM,yBAAyB,mBAAmB,yDAAyD,yBAAyB,MAAM,EAAE,eAAe,UAAU,4CAA4C,6BAA6B,uBAAuB,cAAc,aAAa,qCAAqC,gDAAgD,4GAA4G,iFAAiF,qDAAqD,0BAA0B,8HAA8H,6DAA6D,qCAAqC,6BAA6B,gHAAgH,iBAAiB,gBAAgB,IAAI,cAAc,8BAA8B,8CAA8C,aAAa,UAAU,kDAAkD,MAAM,cAAc,IAAI,gBAAgB,SAAS,OAAO,cAAc,gBAAgB,UAAU,oFAAoF,MAAM,8BAA8B,gFAAgF,0BAA0B,8BAA8B,oEAAoE,SAAS,qFAAqF,oEAAoE,6DAA6D,WAAW,EAAE,cAAc,2BAA2B,2DAA2D,OAAO,4BAA4B,gEAAgE,yEAAyE,0DAA0D,MAAM,kCAAkC,4CAA4C,EAAE,4BAA4B,0BAA0B,6DAA6D,4GAA4G,sDAAsD,oBAAoB,kBAAkB,oDAAoD,gCAAgC,yBAAyB,qDAAqD,mDAAmD,uDAAuD,mBAAmB,G;CCVhwH,eAAe,kJAAkJ,EAAE,mBAAmB,cAAc,kDAAkD,IAAI,wBAAwB,8HAA8H,cAAc,kBAAkB,cAAc,wBAAwB,mCAAmC,+BAA+B,+BAA+B,+DAA+D,kBAAkB,sEAAsE,mBAAmB,4BAA4B,gBAAgB,GAAG,cAAc,WAAW,4DAA4D,gBAAgB,mEAAmE,gBAAgB,8BAA8B,gBAAgB,wCAAwC,cAAc,2BAA2B,cAAc,2BAA2B,cAAc,gBAAgB,gBAAgB,wDAAwD,8CAA8C,wBAAwB,UAAU,qDAAqD,gFAAgF,oCAAoC,GAAG,KAAK,gBAAgB,oGAAoG,eAAe,OAAO,aAAa,KAAK,cAAc,uDAAuD,cAAc,WAAW,oBAAoB,gBAAgB,OAAO,aAAa,SAAS,gBAAgB,sCAAsC,cAAc,6BAA6B,cAAc,eAAe,cAAc,UAAU,uBAAuB,cAAc,WAAW,8BAA8B,gBAAgB,eAAe,iCAAiC,2KAA2K,kBAAkB,iBAAiB,WAAW,gCAAgC,sBAAsB,QAAQ,oBAAoB,+BAA+B,SAAS,eAAe,yCAAyC,mBAAmB,sBAAsB,iDAAiD,WAAW,wBAAwB,SAAS,yDAAyD,sFAAsF,OAAO,YAAY,+BAA+B,wBAAwB,yBAAyB,kBAAkB,sCAAsC,gBAAgB,0DAA0D,kBAAkB,cAAc,SAAS,4BAA4B,iBAAiB,qBAAqB,OAAO,cAAc,aAAa,cAAc,kBAAkB,kBAAkB,wEAAwE,0BAA0B,kCAAkC,oBAAoB,oBAAoB,SAAS,eAAe,gDAAgD,qBAAqB,sBAAsB,8BAA8B,gBAAgB,uBAAuB,aAAa,gBAAgB,WAAW,YAAY,OAAO,WAAW,gBAAgB,YAAY,cAAc,0BAA0B,cAAc,kBAAkB,cAAc,cAAc,MAAM,OAAO,gBAAgB,gBAAgB,YAAY,cAAc,qBAAqB,KAAK,KAAK,cAAc,oBAAoB,kBAAkB,MAAM,oBAAoB,cAAc,kDAAkD,KAAK,KAAK,kBAAkB,gCAAgC,qBAAqB,8BAA8B,wCAAwC,cAAc,UAAU,kCAAkC,oDAAoD,mBAAmB,cAAc,+BAA+B,SAAS,SAAS,gBAAgB,8BAA8B,iBAAiB,iBAAiB,WAAW,yBAAyB,4BAA4B,qBAAqB,KAAK,gBAAgB,6DAA6D,YAAY,iBAAiB,iBAAiB,wBAAwB,yBAAyB,UAAU,SAAS,eAAe,8BAA8B,sBAAsB,2CAA2C,2BAA2B,OAAO,GAAG,OAAO,uCAAuC,+BAA+B,kCAAkC,oBAAoB,IAAI,uBAAuB,yBAAyB,UAAU,kDAAkD,0BAA0B,WAAW,MAAM,4BAA4B,0BAA0B,4DAA4D,oBAAoB,sCAAsC,GAAG,eAAe,iEAAiE,WAAW,YAAY,wBAAwB,WAAW,YAAY,0CAA0C,IAAI,8BAA8B,kBAAkB,EAAE,aAAa,cAAc,mCAAmC,oCAAoC,gEAAgE,qBAAqB,IAAI,6CAA6C,8CAA8C,4BAA4B,SAAS,cAAc,mBAAmB,YAAY,aAAa,gBAAgB,8BAA8B,gCAAgC,aAAa,qDAAqD,wCAAwC,UAAU,wBAAwB,yBAAyB,aAAa,sBAAsB,iBAAiB,8BAA8B,yBAAyB,uBAAuB,sBAAsB,uBAAuB,4BAA4B,0BAA0B,gCAAgC,2BAA2B,iBAAiB,KAAK,qBAAqB,YAAY,8CAA8C,gBAAgB,qBAAqB,sDAAsD,yBAAyB,kBAAkB,qBAAqB,YAAY,EAAE,oBAAoB,gBAAgB,mBAAmB,eAAe,uBAAuB,EAAE,+BAA+B,GAAG,GAAG,UAAU,uCAAuC,sBAAsB,sBAAsB,YAAY,cAAc,YAAY,cAAc,gCAAgC,wBAAwB,KAAK,mBAAmB,uBAAuB,KAAK,YAAY,IAAI,0BAA0B,oBAAoB,QAAQ,kCAAkC,UAAU,kCAAkC,EAAE,2BAA2B,KAAK,KAAK,oBAAoB,UAAU,0BAA0B,SAAS,mBAAmB,GAAG,UAAU,gCAAgC,oBAAoB,uBAAuB,cAAc,oBAAoB,QAAQ,2BAA2B,aAAa,oBAAoB,EAAE,IAAI,8BAA8B,cAAc,oBAAoB,QAAQ,oBAAoB,aAAa,2BAA2B,EAAE,IAAI,GAAG,WAAW,qBAAqB,QAAQ,6BAA6B,UAAU,+BAA+B,GAAG,EAAE,aAAa,gBAAgB,aAAa,mBAAmB,mDAAmD,cAAc,oCAAoC,cAAc,2CAA2C,SAAS,mBAAmB,wBAAwB,gBAAgB,IAAI,cAAc,+BAA+B,oBAAoB,iCAAiC,aAAa,gCAAgC,cAAc,gBAAgB,gDAAgD,OAAO,cAAc,gBAAgB,gBAAgB,qEAAqE,MAAM,SAAS,kBAAkB,uCAAuC,eAAe,wBAAwB,oBAAoB,yBAAyB,qBAAqB,cAAc,6FAA6F,sBAAsB,yBAAyB,cAAc,2DAA2D,oBAAoB,cAAc,oDAAoD,yBAAyB,WAAW,kCAAkC,uBAAuB,GAAG,mBAAmB,cAAc,KAAK,kBAAkB,uBAAuB,2BAA2B,mBAAmB,2BAA2B,mBAAmB,yBAAyB,qBAAqB,2BAA2B,WAAW,gBAAgB,kBAAkB,mBAAmB,eAAe,iBAAiB,8BAA8B,GAAG,sBAAsB,2BAA2B,WAAW,gBAAgB,mBAAmB,mBAAmB,eAAe,mBAAmB,qBAAqB,OAAO,2BAA2B,GAAG,iBAAiB,sBAAsB,GAAG,gBAAgB,gBAAgB,gBAAgB,sEAAsE,MAAM,SAAS,kBAAkB,uCAAuC,eAAe,wBAAwB,oBAAoB,cAAc,8EAA8E,mBAAmB,cAAc,2DAA2D,sBAAsB,yBAAyB,cAAc,gFAAgF,oBAAoB,cAAc,wCAAwC,qBAAqB,cAAc,8BAA8B,sBAAsB,cAAc,+BAA+B,mBAAmB,qBAAqB,iBAAiB,qBAAqB,yBAAyB,mCAAmC,QAAQ,2CAA2C,GAAG,GAAG,YAAY,gBAAgB,kBAAkB,iBAAiB,mBAAmB,EAAE,4OAA4O,oSAAoS,6EAA6E,gCAAgC,IAAI,kBAAkB,kBAAkB,UAAU,4BAA4B,cAAc,uBAAuB,QAAQ,yBAAyB,MAAM,yBAAyB,mBAAmB,iBAAiB,qBAAqB,6BAA6B,qBAAqB,SAAS,eAAe,kDAAkD,UAAU,6BAA6B,8BAA8B,qGAAqG,wCAAwC,mDAAmD,iEAAiE,2BAA2B,MAAM,4BAA4B,kCAAkC,2BAA2B,OAAO,MAAM,mBAAmB,gBAAgB,6DAA6D,kCAAkC,0CAA0C,uBAAuB,uCAAuC,iBAAiB,cAAc,qRAAqR,kBAAkB,iCAAiC,+CAA+C,QAAQ,IAAI,WAAW,mBAAmB,WAAW,kBAAkB,kDAAkD,IAAI,wBAAwB,gCAAgC,MAAM,0CAA0C,IAAI,MAAM,2EAA2E,sCAAsC,IAAI,YAAY,QAAQ,YAAY,4EAA4E,qBAAqB,eAAe,aAAa,mBAAmB,2DAA2D,oCAAoC,eAAe,uCAAuC,kDAAkD,IAAI,wBAAwB,2CAA2C,qCAAqC,GAAG,kCAAkC,QAAQ,QAAQ,2BAA2B,WAAW,iCAAiC,wBAAwB,6BAA6B,kBAAkB,0BAA0B,6BAA6B,SAAS,6BAA6B,kBAAkB,8BAA8B,MAAM,iBAAiB,KAAK,KAAK,WAAW,wCAAwC,UAAU,OAAO,qBAAqB,+CAA+C,yBAAyB,GAAG,GAAG,wLAAwL,oDAAoD,SAAS,6BAA6B,SAAS,4DAA4D,YAAY,gJAAgJ,yBAAyB,gHAAgH,SAAS,EAAE;AACpgd","file":"scripts.js","sourcesContent":["/**\n * @fileoverview gl-matrix - High performance matrix and vector operations\n * @author Brandon Jones\n * @author Colin MacKenzie IV\n * @version 2.3.2\n */\n\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\nvar glMatrix = {};\n\n// Configuration Constants\nglMatrix.EPSILON = 0.000001;\nglMatrix.ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;\nglMatrix.RANDOM = Math.random;\n\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Type} type Array type, such as Float32Array or Array\n */\nglMatrix.setMatrixArrayType = function(type) {\n    glMatrix.ARRAY_TYPE = type;\n}\n\nvar degree = Math.PI / 180;\n\n/**\n* Convert Degree To Radian\n*\n* @param {Number} a Angle in Degrees\n*/\nglMatrix.toRadian = function(a){\n     return a * degree;\n}\n\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less \n * than or equal to 1.0, and a relative tolerance is used for larger values)\n * \n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\nglMatrix.equals = function(a, b) {\n\treturn Math.abs(a - b) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a), Math.abs(b));\n}\n\n/**\n * @class 4x4 Matrix\n * @name mat4\n */\nvar mat4 = {};\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\nmat4.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(16);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n};\n\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {mat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\nmat4.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(16);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\nmat4.fromValues = function(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    var out = new glMatrix.ARRAY_TYPE(16);\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m03;\n    out[4] = m10;\n    out[5] = m11;\n    out[6] = m12;\n    out[7] = m13;\n    out[8] = m20;\n    out[9] = m21;\n    out[10] = m22;\n    out[11] = m23;\n    out[12] = m30;\n    out[13] = m31;\n    out[14] = m32;\n    out[15] = m33;\n    return out;\n};\n\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\nmat4.set = function(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m03;\n    out[4] = m10;\n    out[5] = m11;\n    out[6] = m12;\n    out[7] = m13;\n    out[8] = m20;\n    out[9] = m21;\n    out[10] = m22;\n    out[11] = m23;\n    out[12] = m30;\n    out[13] = m31;\n    out[14] = m32;\n    out[15] = m33;\n    return out;\n};\n\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nmat4.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n};\n\n/**\n * Transpose the values of a mat4 not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.transpose = function(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        var a01 = a[1], a02 = a[2], a03 = a[3],\n            a12 = a[6], a13 = a[7],\n            a23 = a[11];\n\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a01;\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a02;\n        out[9] = a12;\n        out[11] = a[14];\n        out[12] = a03;\n        out[13] = a13;\n        out[14] = a23;\n    } else {\n        out[0] = a[0];\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a[1];\n        out[5] = a[5];\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a[2];\n        out[9] = a[6];\n        out[10] = a[10];\n        out[11] = a[14];\n        out[12] = a[3];\n        out[13] = a[7];\n        out[14] = a[11];\n        out[15] = a[15];\n    }\n\n    return out;\n};\n\n/**\n * Inverts a mat4 not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.invert = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32,\n\n        // Calculate the determinant\n        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n    return out;\n};\n\n/**\n * Calculates the adjugate of a mat4 not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.adjoint = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n    out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));\n    out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n    out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));\n    out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n    out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n    out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));\n    out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n    out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));\n    out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));\n    out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n    out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));\n    out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n    out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n    out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));\n    out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n    out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));\n    return out;\n};\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */\nmat4.determinant = function (a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n};\n\n/**\n * Multiplies two mat4's explicitly not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.multiply = function (out, a, b) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n    // Cache only the current line of the second matrix\n    var b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n    out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];\n    out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];\n    out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];\n    out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n    return out;\n};\n\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\nmat4.mul = mat4.multiply;\n\n/**\n * Translate a mat4 by the given vector not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nmat4.translate = function (out, a, v) {\n    var x = v[0], y = v[1], z = v[2],\n        a00, a01, a02, a03,\n        a10, a11, a12, a13,\n        a20, a21, a22, a23;\n\n    if (a === out) {\n        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n    } else {\n        a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n        a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n        a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n        out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;\n        out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;\n        out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;\n\n        out[12] = a00 * x + a10 * y + a20 * z + a[12];\n        out[13] = a01 * x + a11 * y + a21 * z + a[13];\n        out[14] = a02 * x + a12 * y + a22 * z + a[14];\n        out[15] = a03 * x + a13 * y + a23 * z + a[15];\n    }\n\n    return out;\n};\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nmat4.scale = function(out, a, v) {\n    var x = v[0], y = v[1], z = v[2];\n\n    out[0] = a[0] * x;\n    out[1] = a[1] * x;\n    out[2] = a[2] * x;\n    out[3] = a[3] * x;\n    out[4] = a[4] * y;\n    out[5] = a[5] * y;\n    out[6] = a[6] * y;\n    out[7] = a[7] * y;\n    out[8] = a[8] * z;\n    out[9] = a[9] * z;\n    out[10] = a[10] * z;\n    out[11] = a[11] * z;\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nmat4.rotate = function (out, a, rad, axis) {\n    var x = axis[0], y = axis[1], z = axis[2],\n        len = Math.sqrt(x * x + y * y + z * z),\n        s, c, t,\n        a00, a01, a02, a03,\n        a10, a11, a12, a13,\n        a20, a21, a22, a23,\n        b00, b01, b02,\n        b10, b11, b12,\n        b20, b21, b22;\n\n    if (Math.abs(len) < glMatrix.EPSILON) { return null; }\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c;\n\n    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n    // Construct the elements of the rotation matrix\n    b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\n    b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\n    b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\n\n    // Perform rotation-specific matrix multiplication\n    out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n    out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n    out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n    out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n    out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n    out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n    out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n    out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n    out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n    out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n    out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n    out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged last row\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the X axis not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.rotateX = function (out, a, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad),\n        a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7],\n        a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n        out[0]  = a[0];\n        out[1]  = a[1];\n        out[2]  = a[2];\n        out[3]  = a[3];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[4] = a10 * c + a20 * s;\n    out[5] = a11 * c + a21 * s;\n    out[6] = a12 * c + a22 * s;\n    out[7] = a13 * c + a23 * s;\n    out[8] = a20 * c - a10 * s;\n    out[9] = a21 * c - a11 * s;\n    out[10] = a22 * c - a12 * s;\n    out[11] = a23 * c - a13 * s;\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Y axis not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.rotateY = function (out, a, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad),\n        a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3],\n        a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n        out[4]  = a[4];\n        out[5]  = a[5];\n        out[6]  = a[6];\n        out[7]  = a[7];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[0] = a00 * c - a20 * s;\n    out[1] = a01 * c - a21 * s;\n    out[2] = a02 * c - a22 * s;\n    out[3] = a03 * c - a23 * s;\n    out[8] = a00 * s + a20 * c;\n    out[9] = a01 * s + a21 * c;\n    out[10] = a02 * s + a22 * c;\n    out[11] = a03 * s + a23 * c;\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Z axis not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.rotateZ = function (out, a, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad),\n        a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3],\n        a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged last row\n        out[8]  = a[8];\n        out[9]  = a[9];\n        out[10] = a[10];\n        out[11] = a[11];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[0] = a00 * c + a10 * s;\n    out[1] = a01 * c + a11 * s;\n    out[2] = a02 * c + a12 * s;\n    out[3] = a03 * c + a13 * s;\n    out[4] = a10 * c - a00 * s;\n    out[5] = a11 * c - a01 * s;\n    out[6] = a12 * c - a02 * s;\n    out[7] = a13 * c - a03 * s;\n    return out;\n};\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nmat4.fromTranslation = function(out, v) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Scaling vector\n * @returns {mat4} out\n */\nmat4.fromScaling = function(out, v) {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = v[1];\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = v[2];\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nmat4.fromRotation = function(out, rad, axis) {\n    var x = axis[0], y = axis[1], z = axis[2],\n        len = Math.sqrt(x * x + y * y + z * z),\n        s, c, t;\n\n    if (Math.abs(len) < glMatrix.EPSILON) { return null; }\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c;\n\n    // Perform rotation-specific matrix multiplication\n    out[0] = x * x * t + c;\n    out[1] = y * x * t + z * s;\n    out[2] = z * x * t - y * s;\n    out[3] = 0;\n    out[4] = x * y * t - z * s;\n    out[5] = y * y * t + c;\n    out[6] = z * y * t + x * s;\n    out[7] = 0;\n    out[8] = x * z * t + y * s;\n    out[9] = y * z * t - x * s;\n    out[10] = z * z * t + c;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.fromXRotation = function(out, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    // Perform axis-specific matrix multiplication\n    out[0]  = 1;\n    out[1]  = 0;\n    out[2]  = 0;\n    out[3]  = 0;\n    out[4] = 0;\n    out[5] = c;\n    out[6] = s;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = -s;\n    out[10] = c;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.fromYRotation = function(out, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    // Perform axis-specific matrix multiplication\n    out[0]  = c;\n    out[1]  = 0;\n    out[2]  = -s;\n    out[3]  = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = s;\n    out[9] = 0;\n    out[10] = c;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.fromZRotation = function(out, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    // Perform axis-specific matrix multiplication\n    out[0]  = c;\n    out[1]  = s;\n    out[2]  = 0;\n    out[3]  = 0;\n    out[4] = -s;\n    out[5] = c;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     var quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nmat4.fromRotationTranslation = function (out, q, v) {\n    // Quaternion math\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        xy = x * y2,\n        xz = x * z2,\n        yy = y * y2,\n        yz = y * z2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    out[0] = 1 - (yy + zz);\n    out[1] = xy + wz;\n    out[2] = xz - wy;\n    out[3] = 0;\n    out[4] = xy - wz;\n    out[5] = 1 - (xx + zz);\n    out[6] = yz + wx;\n    out[7] = 0;\n    out[8] = xz + wy;\n    out[9] = yz - wx;\n    out[10] = 1 - (xx + yy);\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nmat4.getTranslation = function (out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n\n  return out;\n};\n\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be \n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nmat4.getScaling = function (out, mat) {\n  var m11 = mat[0],\n      m12 = mat[1],\n      m13 = mat[2],\n      m21 = mat[4],\n      m22 = mat[5],\n      m23 = mat[6],\n      m31 = mat[8],\n      m32 = mat[9],\n      m33 = mat[10];\n\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n\n  return out;\n};\n\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {mat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\nmat4.getRotation = function (out, mat) {\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  var trace = mat[0] + mat[5] + mat[10];\n  var S = 0;\n\n  if (trace > 0) { \n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (mat[6] - mat[9]) / S;\n    out[1] = (mat[8] - mat[2]) / S; \n    out[2] = (mat[1] - mat[4]) / S; \n  } else if ((mat[0] > mat[5])&(mat[0] > mat[10])) { \n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n    out[3] = (mat[6] - mat[9]) / S;\n    out[0] = 0.25 * S;\n    out[1] = (mat[1] + mat[4]) / S; \n    out[2] = (mat[8] + mat[2]) / S; \n  } else if (mat[5] > mat[10]) { \n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n    out[3] = (mat[8] - mat[2]) / S;\n    out[0] = (mat[1] + mat[4]) / S; \n    out[1] = 0.25 * S;\n    out[2] = (mat[6] + mat[9]) / S; \n  } else { \n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n    out[3] = (mat[1] - mat[4]) / S;\n    out[0] = (mat[8] + mat[2]) / S;\n    out[1] = (mat[6] + mat[9]) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n};\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     var quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @returns {mat4} out\n */\nmat4.fromRotationTranslationScale = function (out, q, v, s) {\n    // Quaternion math\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        xy = x * y2,\n        xz = x * z2,\n        yy = y * y2,\n        yz = y * z2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2,\n        sx = s[0],\n        sy = s[1],\n        sz = s[2];\n\n    out[0] = (1 - (yy + zz)) * sx;\n    out[1] = (xy + wz) * sx;\n    out[2] = (xz - wy) * sx;\n    out[3] = 0;\n    out[4] = (xy - wz) * sy;\n    out[5] = (1 - (xx + zz)) * sy;\n    out[6] = (yz + wx) * sy;\n    out[7] = 0;\n    out[8] = (xz + wy) * sz;\n    out[9] = (yz - wx) * sz;\n    out[10] = (1 - (xx + yy)) * sz;\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     var quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @param {vec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\nmat4.fromRotationTranslationScaleOrigin = function (out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0], y = q[1], z = q[2], w = q[3],\n      x2 = x + x,\n      y2 = y + y,\n      z2 = z + z,\n\n      xx = x * x2,\n      xy = x * y2,\n      xz = x * z2,\n      yy = y * y2,\n      yz = y * z2,\n      zz = z * z2,\n      wx = w * x2,\n      wy = w * y2,\n      wz = w * z2,\n\n      sx = s[0],\n      sy = s[1],\n      sz = s[2],\n\n      ox = o[0],\n      oy = o[1],\n      oz = o[2];\n\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out[0] * ox + out[4] * oy + out[8] * oz);\n  out[13] = v[1] + oy - (out[1] * ox + out[5] * oy + out[9] * oz);\n  out[14] = v[2] + oz - (out[2] * ox + out[6] * oy + out[10] * oz);\n  out[15] = 1;\n\n  return out;\n};\n\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\nmat4.fromQuat = function (out, q) {\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        yx = y * x2,\n        yy = y * y2,\n        zx = z * x2,\n        zy = z * y2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[1] = yx + wz;\n    out[2] = zx - wy;\n    out[3] = 0;\n\n    out[4] = yx - wz;\n    out[5] = 1 - xx - zz;\n    out[6] = zy + wx;\n    out[7] = 0;\n\n    out[8] = zx + wy;\n    out[9] = zy - wx;\n    out[10] = 1 - xx - yy;\n    out[11] = 0;\n\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.frustum = function (out, left, right, bottom, top, near, far) {\n    var rl = 1 / (right - left),\n        tb = 1 / (top - bottom),\n        nf = 1 / (near - far);\n    out[0] = (near * 2) * rl;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = (near * 2) * tb;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = (right + left) * rl;\n    out[9] = (top + bottom) * tb;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = (far * near * 2) * nf;\n    out[15] = 0;\n    return out;\n};\n\n/**\n * Generates a perspective projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.perspective = function (out, fovy, aspect, near, far) {\n    var f = 1.0 / Math.tan(fovy / 2),\n        nf = 1 / (near - far);\n    out[0] = f / aspect;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = f;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = (2 * far * near) * nf;\n    out[15] = 0;\n    return out;\n};\n\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.perspectiveFromFieldOfView = function (out, fov, near, far) {\n    var upTan = Math.tan(fov.upDegrees * Math.PI/180.0),\n        downTan = Math.tan(fov.downDegrees * Math.PI/180.0),\n        leftTan = Math.tan(fov.leftDegrees * Math.PI/180.0),\n        rightTan = Math.tan(fov.rightDegrees * Math.PI/180.0),\n        xScale = 2.0 / (leftTan + rightTan),\n        yScale = 2.0 / (upTan + downTan);\n\n    out[0] = xScale;\n    out[1] = 0.0;\n    out[2] = 0.0;\n    out[3] = 0.0;\n    out[4] = 0.0;\n    out[5] = yScale;\n    out[6] = 0.0;\n    out[7] = 0.0;\n    out[8] = -((leftTan - rightTan) * xScale * 0.5);\n    out[9] = ((upTan - downTan) * yScale * 0.5);\n    out[10] = far / (near - far);\n    out[11] = -1.0;\n    out[12] = 0.0;\n    out[13] = 0.0;\n    out[14] = (far * near) / (near - far);\n    out[15] = 0.0;\n    return out;\n}\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.ortho = function (out, left, right, bottom, top, near, far) {\n    var lr = 1 / (left - right),\n        bt = 1 / (bottom - top),\n        nf = 1 / (near - far);\n    out[0] = -2 * lr;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = -2 * bt;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 2 * nf;\n    out[11] = 0;\n    out[12] = (left + right) * lr;\n    out[13] = (top + bottom) * bt;\n    out[14] = (far + near) * nf;\n    out[15] = 1;\n    return out;\n};\n\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nmat4.lookAt = function (out, eye, center, up) {\n    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len,\n        eyex = eye[0],\n        eyey = eye[1],\n        eyez = eye[2],\n        upx = up[0],\n        upy = up[1],\n        upz = up[2],\n        centerx = center[0],\n        centery = center[1],\n        centerz = center[2];\n\n    if (Math.abs(eyex - centerx) < glMatrix.EPSILON &&\n        Math.abs(eyey - centery) < glMatrix.EPSILON &&\n        Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n        return mat4.identity(out);\n    }\n\n    z0 = eyex - centerx;\n    z1 = eyey - centery;\n    z2 = eyez - centerz;\n\n    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n\n    x0 = upy * z2 - upz * z1;\n    x1 = upz * z0 - upx * z2;\n    x2 = upx * z1 - upy * z0;\n    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n    if (!len) {\n        x0 = 0;\n        x1 = 0;\n        x2 = 0;\n    } else {\n        len = 1 / len;\n        x0 *= len;\n        x1 *= len;\n        x2 *= len;\n    }\n\n    y0 = z1 * x2 - z2 * x1;\n    y1 = z2 * x0 - z0 * x2;\n    y2 = z0 * x1 - z1 * x0;\n\n    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n    if (!len) {\n        y0 = 0;\n        y1 = 0;\n        y2 = 0;\n    } else {\n        len = 1 / len;\n        y0 *= len;\n        y1 *= len;\n        y2 *= len;\n    }\n\n    out[0] = x0;\n    out[1] = y0;\n    out[2] = z0;\n    out[3] = 0;\n    out[4] = x1;\n    out[5] = y1;\n    out[6] = z1;\n    out[7] = 0;\n    out[8] = x2;\n    out[9] = y2;\n    out[10] = z2;\n    out[11] = 0;\n    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Returns a string representation of a mat4\n *\n * @param {mat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat4.str = function (a) {\n    return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +\n                    a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +\n                    a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' +\n                    a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {mat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat4.frob = function (a) {\n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2) ))\n};\n\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    out[9] = a[9] + b[9];\n    out[10] = a[10] + b[10];\n    out[11] = a[11] + b[11];\n    out[12] = a[12] + b[12];\n    out[13] = a[13] + b[13];\n    out[14] = a[14] + b[14];\n    out[15] = a[15] + b[15];\n    return out;\n};\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    out[9] = a[9] - b[9];\n    out[10] = a[10] - b[10];\n    out[11] = a[11] - b[11];\n    out[12] = a[12] - b[12];\n    out[13] = a[13] - b[13];\n    out[14] = a[14] - b[14];\n    out[15] = a[15] - b[15];\n    return out;\n};\n\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\nmat4.sub = mat4.subtract;\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\nmat4.multiplyScalar = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    out[9] = a[9] * b;\n    out[10] = a[10] * b;\n    out[11] = a[11] * b;\n    out[12] = a[12] * b;\n    out[13] = a[13] * b;\n    out[14] = a[14] * b;\n    out[15] = a[15] * b;\n    return out;\n};\n\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\nmat4.multiplyScalarAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    out[3] = a[3] + (b[3] * scale);\n    out[4] = a[4] + (b[4] * scale);\n    out[5] = a[5] + (b[5] * scale);\n    out[6] = a[6] + (b[6] * scale);\n    out[7] = a[7] + (b[7] * scale);\n    out[8] = a[8] + (b[8] * scale);\n    out[9] = a[9] + (b[9] * scale);\n    out[10] = a[10] + (b[10] * scale);\n    out[11] = a[11] + (b[11] * scale);\n    out[12] = a[12] + (b[12] * scale);\n    out[13] = a[13] + (b[13] * scale);\n    out[14] = a[14] + (b[14] * scale);\n    out[15] = a[15] + (b[15] * scale);\n    return out;\n};\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat4.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && \n           a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && \n           a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] &&\n           a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n};\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat4.equals = function (a, b) {\n    var a0  = a[0],  a1  = a[1],  a2  = a[2],  a3  = a[3],\n        a4  = a[4],  a5  = a[5],  a6  = a[6],  a7  = a[7], \n        a8  = a[8],  a9  = a[9],  a10 = a[10], a11 = a[11], \n        a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];\n\n    var b0  = b[0],  b1  = b[1],  b2  = b[2],  b3  = b[3],\n        b4  = b[4],  b5  = b[5],  b6  = b[6],  b7  = b[7], \n        b8  = b[8],  b9  = b[9],  b10 = b[10], b11 = b[11], \n        b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];\n\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n            Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n            Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n            Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n            Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n            Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)) &&\n            Math.abs(a9 - b9) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a9), Math.abs(b9)) &&\n            Math.abs(a10 - b10) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a10), Math.abs(b10)) &&\n            Math.abs(a11 - b11) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a11), Math.abs(b11)) &&\n            Math.abs(a12 - b12) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a12), Math.abs(b12)) &&\n            Math.abs(a13 - b13) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a13), Math.abs(b13)) &&\n            Math.abs(a14 - b14) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a14), Math.abs(b14)) &&\n            Math.abs(a15 - b15) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a15), Math.abs(b15)));\n};\n\nvar mat3 = {};\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\nmat3.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(9);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n};\n\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {mat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\nmat3.fromMat4 = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[4];\n    out[4] = a[5];\n    out[5] = a[6];\n    out[6] = a[8];\n    out[7] = a[9];\n    out[8] = a[10];\n    return out;\n};\n\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {mat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\nmat3.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(9);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n};\n\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n};\n\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\nmat3.fromValues = function(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n    var out = new glMatrix.ARRAY_TYPE(9);\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m10;\n    out[4] = m11;\n    out[5] = m12;\n    out[6] = m20;\n    out[7] = m21;\n    out[8] = m22;\n    return out;\n};\n\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\nmat3.set = function(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m10;\n    out[4] = m11;\n    out[5] = m12;\n    out[6] = m20;\n    out[7] = m21;\n    out[8] = m22;\n    return out;\n};\n\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nmat3.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n};\n\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.transpose = function(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        var a01 = a[1], a02 = a[2], a12 = a[5];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a01;\n        out[5] = a[7];\n        out[6] = a02;\n        out[7] = a12;\n    } else {\n        out[0] = a[0];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a[1];\n        out[4] = a[4];\n        out[5] = a[7];\n        out[6] = a[2];\n        out[7] = a[5];\n        out[8] = a[8];\n    }\n\n    return out;\n};\n\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.invert = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n\n        b01 = a22 * a11 - a12 * a21,\n        b11 = -a22 * a10 + a12 * a20,\n        b21 = a21 * a10 - a11 * a20,\n\n        // Calculate the determinant\n        det = a00 * b01 + a01 * b11 + a02 * b21;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = b01 * det;\n    out[1] = (-a22 * a01 + a02 * a21) * det;\n    out[2] = (a12 * a01 - a02 * a11) * det;\n    out[3] = b11 * det;\n    out[4] = (a22 * a00 - a02 * a20) * det;\n    out[5] = (-a12 * a00 + a02 * a10) * det;\n    out[6] = b21 * det;\n    out[7] = (-a21 * a00 + a01 * a20) * det;\n    out[8] = (a11 * a00 - a01 * a10) * det;\n    return out;\n};\n\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.adjoint = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8];\n\n    out[0] = (a11 * a22 - a12 * a21);\n    out[1] = (a02 * a21 - a01 * a22);\n    out[2] = (a01 * a12 - a02 * a11);\n    out[3] = (a12 * a20 - a10 * a22);\n    out[4] = (a00 * a22 - a02 * a20);\n    out[5] = (a02 * a10 - a00 * a12);\n    out[6] = (a10 * a21 - a11 * a20);\n    out[7] = (a01 * a20 - a00 * a21);\n    out[8] = (a00 * a11 - a01 * a10);\n    return out;\n};\n\n/**\n * Calculates the determinant of a mat3\n *\n * @param {mat3} a the source matrix\n * @returns {Number} determinant of a\n */\nmat3.determinant = function (a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8];\n\n    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n};\n\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nmat3.multiply = function (out, a, b) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n\n        b00 = b[0], b01 = b[1], b02 = b[2],\n        b10 = b[3], b11 = b[4], b12 = b[5],\n        b20 = b[6], b21 = b[7], b22 = b[8];\n\n    out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n    out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n    out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n\n    out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n    out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n    out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n\n    out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n    out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n    out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n    return out;\n};\n\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\nmat3.mul = mat3.multiply;\n\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to translate\n * @param {vec2} v vector to translate by\n * @returns {mat3} out\n */\nmat3.translate = function(out, a, v) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n        x = v[0], y = v[1];\n\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n\n    out[3] = a10;\n    out[4] = a11;\n    out[5] = a12;\n\n    out[6] = x * a00 + y * a10 + a20;\n    out[7] = x * a01 + y * a11 + a21;\n    out[8] = x * a02 + y * a12 + a22;\n    return out;\n};\n\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nmat3.rotate = function (out, a, rad) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n\n        s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    out[0] = c * a00 + s * a10;\n    out[1] = c * a01 + s * a11;\n    out[2] = c * a02 + s * a12;\n\n    out[3] = c * a10 - s * a00;\n    out[4] = c * a11 - s * a01;\n    out[5] = c * a12 - s * a02;\n\n    out[6] = a20;\n    out[7] = a21;\n    out[8] = a22;\n    return out;\n};\n\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\nmat3.scale = function(out, a, v) {\n    var x = v[0], y = v[1];\n\n    out[0] = x * a[0];\n    out[1] = x * a[1];\n    out[2] = x * a[2];\n\n    out[3] = y * a[3];\n    out[4] = y * a[4];\n    out[5] = y * a[5];\n\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n};\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat3} out\n */\nmat3.fromTranslation = function(out, v) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = v[0];\n    out[7] = v[1];\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nmat3.fromRotation = function(out, rad) {\n    var s = Math.sin(rad), c = Math.cos(rad);\n\n    out[0] = c;\n    out[1] = s;\n    out[2] = 0;\n\n    out[3] = -s;\n    out[4] = c;\n    out[5] = 0;\n\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat3} out\n */\nmat3.fromScaling = function(out, v) {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n\n    out[3] = 0;\n    out[4] = v[1];\n    out[5] = 0;\n\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat2d} a the matrix to copy\n * @returns {mat3} out\n **/\nmat3.fromMat2d = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = 0;\n\n    out[3] = a[2];\n    out[4] = a[3];\n    out[5] = 0;\n\n    out[6] = a[4];\n    out[7] = a[5];\n    out[8] = 1;\n    return out;\n};\n\n/**\n* Calculates a 3x3 matrix from the given quaternion\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {quat} q Quaternion to create matrix from\n*\n* @returns {mat3} out\n*/\nmat3.fromQuat = function (out, q) {\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        yx = y * x2,\n        yy = y * y2,\n        zx = z * x2,\n        zy = z * y2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[3] = yx - wz;\n    out[6] = zx + wy;\n\n    out[1] = yx + wz;\n    out[4] = 1 - xx - zz;\n    out[7] = zy - wx;\n\n    out[2] = zx - wy;\n    out[5] = zy + wx;\n    out[8] = 1 - xx - yy;\n\n    return out;\n};\n\n/**\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {mat4} a Mat4 to derive the normal matrix from\n*\n* @returns {mat3} out\n*/\nmat3.normalFromMat4 = function (out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32,\n\n        // Calculate the determinant\n        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\n    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\n    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\n    return out;\n};\n\n/**\n * Returns a string representation of a mat3\n *\n * @param {mat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat3.str = function (a) {\n    return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +\n                    a[3] + ', ' + a[4] + ', ' + a[5] + ', ' +\n                    a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {mat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat3.frob = function (a) {\n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)))\n};\n\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nmat3.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    return out;\n};\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nmat3.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    return out;\n};\n\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\nmat3.sub = mat3.subtract;\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\nmat3.multiplyScalar = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    return out;\n};\n\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\nmat3.multiplyScalarAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    out[3] = a[3] + (b[3] * scale);\n    out[4] = a[4] + (b[4] * scale);\n    out[5] = a[5] + (b[5] * scale);\n    out[6] = a[6] + (b[6] * scale);\n    out[7] = a[7] + (b[7] * scale);\n    out[8] = a[8] + (b[8] * scale);\n    return out;\n};\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat3.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] &&\n           a[3] === b[3] && a[4] === b[4] && a[5] === b[5] &&\n           a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n};\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat3.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n            Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n            Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n            Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n            Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n            Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)));\n};\n\n\nvar vec2 = {};\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\nvec2.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(2);\n    out[0] = 0;\n    out[1] = 0;\n    return out;\n};\n\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {vec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\nvec2.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(2);\n    out[0] = a[0];\n    out[1] = a[1];\n    return out;\n};\n\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\nvec2.fromValues = function(x, y) {\n    var out = new glMatrix.ARRAY_TYPE(2);\n    out[0] = x;\n    out[1] = y;\n    return out;\n};\n\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the source vector\n * @returns {vec2} out\n */\nvec2.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    return out;\n};\n\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\nvec2.set = function(out, x, y) {\n    out[0] = x;\n    out[1] = y;\n    return out;\n};\n\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    return out;\n};\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    return out;\n};\n\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\nvec2.sub = vec2.subtract;\n\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.multiply = function(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    return out;\n};\n\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\nvec2.mul = vec2.multiply;\n\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.divide = function(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    return out;\n};\n\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\nvec2.div = vec2.divide;\n\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to ceil\n * @returns {vec2} out\n */\nvec2.ceil = function (out, a) {\n    out[0] = Math.ceil(a[0]);\n    out[1] = Math.ceil(a[1]);\n    return out;\n};\n\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to floor\n * @returns {vec2} out\n */\nvec2.floor = function (out, a) {\n    out[0] = Math.floor(a[0]);\n    out[1] = Math.floor(a[1]);\n    return out;\n};\n\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.min = function(out, a, b) {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    return out;\n};\n\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.max = function(out, a, b) {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    return out;\n};\n\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to round\n * @returns {vec2} out\n */\nvec2.round = function (out, a) {\n    out[0] = Math.round(a[0]);\n    out[1] = Math.round(a[1]);\n    return out;\n};\n\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\nvec2.scale = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    return out;\n};\n\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\nvec2.scaleAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    return out;\n};\n\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} distance between a and b\n */\nvec2.distance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1];\n    return Math.sqrt(x*x + y*y);\n};\n\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\nvec2.dist = vec2.distance;\n\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\nvec2.squaredDistance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1];\n    return x*x + y*y;\n};\n\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\nvec2.sqrDist = vec2.squaredDistance;\n\n/**\n * Calculates the length of a vec2\n *\n * @param {vec2} a vector to calculate length of\n * @returns {Number} length of a\n */\nvec2.length = function (a) {\n    var x = a[0],\n        y = a[1];\n    return Math.sqrt(x*x + y*y);\n};\n\n/**\n * Alias for {@link vec2.length}\n * @function\n */\nvec2.len = vec2.length;\n\n/**\n * Calculates the squared length of a vec2\n *\n * @param {vec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nvec2.squaredLength = function (a) {\n    var x = a[0],\n        y = a[1];\n    return x*x + y*y;\n};\n\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\nvec2.sqrLen = vec2.squaredLength;\n\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to negate\n * @returns {vec2} out\n */\nvec2.negate = function(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    return out;\n};\n\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to invert\n * @returns {vec2} out\n */\nvec2.inverse = function(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n};\n\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to normalize\n * @returns {vec2} out\n */\nvec2.normalize = function(out, a) {\n    var x = a[0],\n        y = a[1];\n    var len = x*x + y*y;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n        out[0] = a[0] * len;\n        out[1] = a[1] * len;\n    }\n    return out;\n};\n\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} dot product of a and b\n */\nvec2.dot = function (a, b) {\n    return a[0] * b[0] + a[1] * b[1];\n};\n\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec3} out\n */\nvec2.cross = function(out, a, b) {\n    var z = a[0] * b[1] - a[1] * b[0];\n    out[0] = out[1] = 0;\n    out[2] = z;\n    return out;\n};\n\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec2} out\n */\nvec2.lerp = function (out, a, b, t) {\n    var ax = a[0],\n        ay = a[1];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    return out;\n};\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\nvec2.random = function (out, scale) {\n    scale = scale || 1.0;\n    var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n    out[0] = Math.cos(r) * scale;\n    out[1] = Math.sin(r) * scale;\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat2 = function(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[2] * y;\n    out[1] = m[1] * x + m[3] * y;\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2d} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat2d = function(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[2] * y + m[4];\n    out[1] = m[1] * x + m[3] * y + m[5];\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat3} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat3 = function(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[3] * y + m[6];\n    out[1] = m[1] * x + m[4] * y + m[7];\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat4 = function(out, a, m) {\n    var x = a[0], \n        y = a[1];\n    out[0] = m[0] * x + m[4] * y + m[12];\n    out[1] = m[1] * x + m[5] * y + m[13];\n    return out;\n};\n\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nvec2.forEach = (function() {\n    var vec = vec2.create();\n\n    return function(a, stride, offset, count, fn, arg) {\n        var i, l;\n        if(!stride) {\n            stride = 2;\n        }\n\n        if(!offset) {\n            offset = 0;\n        }\n        \n        if(count) {\n            l = Math.min((count * stride) + offset, a.length);\n        } else {\n            l = a.length;\n        }\n\n        for(i = offset; i < l; i += stride) {\n            vec[0] = a[i]; vec[1] = a[i+1];\n            fn(vec, vec, arg);\n            a[i] = vec[0]; a[i+1] = vec[1];\n        }\n        \n        return a;\n    };\n})();\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nvec2.str = function (a) {\n    return 'vec2(' + a[0] + ', ' + a[1] + ')';\n};\n\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec2.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1];\n};\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec2.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1];\n    var b0 = b[0], b1 = b[1];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)));\n};\n\n/**\n * @class 3 Dimensional Vector\n * @name vec3\n */\nvar vec3 = {};\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\nvec3.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(3);\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    return out;\n};\n\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {vec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\nvec3.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(3);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n};\n\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\nvec3.fromValues = function(x, y, z) {\n    var out = new glMatrix.ARRAY_TYPE(3);\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n};\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\nvec3.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n};\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nvec3.set = function(out, x, y, z) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n};\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    return out;\n};\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    return out;\n};\n\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\nvec3.sub = vec3.subtract;\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.multiply = function(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    return out;\n};\n\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\nvec3.mul = vec3.multiply;\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.divide = function(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    return out;\n};\n\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\nvec3.div = vec3.divide;\n\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to ceil\n * @returns {vec3} out\n */\nvec3.ceil = function (out, a) {\n    out[0] = Math.ceil(a[0]);\n    out[1] = Math.ceil(a[1]);\n    out[2] = Math.ceil(a[2]);\n    return out;\n};\n\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to floor\n * @returns {vec3} out\n */\nvec3.floor = function (out, a) {\n    out[0] = Math.floor(a[0]);\n    out[1] = Math.floor(a[1]);\n    out[2] = Math.floor(a[2]);\n    return out;\n};\n\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.min = function(out, a, b) {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    out[2] = Math.min(a[2], b[2]);\n    return out;\n};\n\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.max = function(out, a, b) {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    out[2] = Math.max(a[2], b[2]);\n    return out;\n};\n\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to round\n * @returns {vec3} out\n */\nvec3.round = function (out, a) {\n    out[0] = Math.round(a[0]);\n    out[1] = Math.round(a[1]);\n    out[2] = Math.round(a[2]);\n    return out;\n};\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nvec3.scale = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    return out;\n};\n\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\nvec3.scaleAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    return out;\n};\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\nvec3.distance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2];\n    return Math.sqrt(x*x + y*y + z*z);\n};\n\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\nvec3.dist = vec3.distance;\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nvec3.squaredDistance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2];\n    return x*x + y*y + z*z;\n};\n\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\nvec3.sqrDist = vec3.squaredDistance;\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nvec3.length = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2];\n    return Math.sqrt(x*x + y*y + z*z);\n};\n\n/**\n * Alias for {@link vec3.length}\n * @function\n */\nvec3.len = vec3.length;\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nvec3.squaredLength = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2];\n    return x*x + y*y + z*z;\n};\n\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\nvec3.sqrLen = vec3.squaredLength;\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */\nvec3.negate = function(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    return out;\n};\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */\nvec3.inverse = function(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n};\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nvec3.normalize = function(out, a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2];\n    var len = x*x + y*y + z*z;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n        out[0] = a[0] * len;\n        out[1] = a[1] * len;\n        out[2] = a[2] * len;\n    }\n    return out;\n};\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nvec3.dot = function (a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n};\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.cross = function(out, a, b) {\n    var ax = a[0], ay = a[1], az = a[2],\n        bx = b[0], by = b[1], bz = b[2];\n\n    out[0] = ay * bz - az * by;\n    out[1] = az * bx - ax * bz;\n    out[2] = ax * by - ay * bx;\n    return out;\n};\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nvec3.lerp = function (out, a, b, t) {\n    var ax = a[0],\n        ay = a[1],\n        az = a[2];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    return out;\n};\n\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nvec3.hermite = function (out, a, b, c, d, t) {\n  var factorTimes2 = t * t,\n      factor1 = factorTimes2 * (2 * t - 3) + 1,\n      factor2 = factorTimes2 * (t - 2) + t,\n      factor3 = factorTimes2 * (t - 1),\n      factor4 = factorTimes2 * (3 - 2 * t);\n  \n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  \n  return out;\n};\n\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nvec3.bezier = function (out, a, b, c, d, t) {\n  var inverseFactor = 1 - t,\n      inverseFactorTimesTwo = inverseFactor * inverseFactor,\n      factorTimes2 = t * t,\n      factor1 = inverseFactorTimesTwo * inverseFactor,\n      factor2 = 3 * t * inverseFactorTimesTwo,\n      factor3 = 3 * factorTimes2 * inverseFactor,\n      factor4 = factorTimes2 * t;\n  \n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  \n  return out;\n};\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\nvec3.random = function (out, scale) {\n    scale = scale || 1.0;\n\n    var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n    var z = (glMatrix.RANDOM() * 2.0) - 1.0;\n    var zScale = Math.sqrt(1.0-z*z) * scale;\n\n    out[0] = Math.cos(r) * zScale;\n    out[1] = Math.sin(r) * zScale;\n    out[2] = z * scale;\n    return out;\n};\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */\nvec3.transformMat4 = function(out, a, m) {\n    var x = a[0], y = a[1], z = a[2],\n        w = m[3] * x + m[7] * y + m[11] * z + m[15];\n    w = w || 1.0;\n    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n    return out;\n};\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nvec3.transformMat3 = function(out, a, m) {\n    var x = a[0], y = a[1], z = a[2];\n    out[0] = x * m[0] + y * m[3] + z * m[6];\n    out[1] = x * m[1] + y * m[4] + z * m[7];\n    out[2] = x * m[2] + y * m[5] + z * m[8];\n    return out;\n};\n\n/**\n * Transforms the vec3 with a quat\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */\nvec3.transformQuat = function(out, a, q) {\n    // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations\n\n    var x = a[0], y = a[1], z = a[2],\n        qx = q[0], qy = q[1], qz = q[2], qw = q[3],\n\n        // calculate quat * vec\n        ix = qw * x + qy * z - qz * y,\n        iy = qw * y + qz * x - qx * z,\n        iz = qw * z + qx * y - qy * x,\n        iw = -qx * x - qy * y - qz * z;\n\n    // calculate result * inverse quat\n    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    return out;\n};\n\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nvec3.rotateX = function(out, a, b, c){\n   var p = [], r=[];\n\t  //Translate point to the origin\n\t  p[0] = a[0] - b[0];\n\t  p[1] = a[1] - b[1];\n  \tp[2] = a[2] - b[2];\n\n\t  //perform rotation\n\t  r[0] = p[0];\n\t  r[1] = p[1]*Math.cos(c) - p[2]*Math.sin(c);\n\t  r[2] = p[1]*Math.sin(c) + p[2]*Math.cos(c);\n\n\t  //translate to correct position\n\t  out[0] = r[0] + b[0];\n\t  out[1] = r[1] + b[1];\n\t  out[2] = r[2] + b[2];\n\n  \treturn out;\n};\n\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nvec3.rotateY = function(out, a, b, c){\n  \tvar p = [], r=[];\n  \t//Translate point to the origin\n  \tp[0] = a[0] - b[0];\n  \tp[1] = a[1] - b[1];\n  \tp[2] = a[2] - b[2];\n  \n  \t//perform rotation\n  \tr[0] = p[2]*Math.sin(c) + p[0]*Math.cos(c);\n  \tr[1] = p[1];\n  \tr[2] = p[2]*Math.cos(c) - p[0]*Math.sin(c);\n  \n  \t//translate to correct position\n  \tout[0] = r[0] + b[0];\n  \tout[1] = r[1] + b[1];\n  \tout[2] = r[2] + b[2];\n  \n  \treturn out;\n};\n\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nvec3.rotateZ = function(out, a, b, c){\n  \tvar p = [], r=[];\n  \t//Translate point to the origin\n  \tp[0] = a[0] - b[0];\n  \tp[1] = a[1] - b[1];\n  \tp[2] = a[2] - b[2];\n  \n  \t//perform rotation\n  \tr[0] = p[0]*Math.cos(c) - p[1]*Math.sin(c);\n  \tr[1] = p[0]*Math.sin(c) + p[1]*Math.cos(c);\n  \tr[2] = p[2];\n  \n  \t//translate to correct position\n  \tout[0] = r[0] + b[0];\n  \tout[1] = r[1] + b[1];\n  \tout[2] = r[2] + b[2];\n  \n  \treturn out;\n};\n\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nvec3.forEach = (function() {\n    var vec = vec3.create();\n\n    return function(a, stride, offset, count, fn, arg) {\n        var i, l;\n        if(!stride) {\n            stride = 3;\n        }\n\n        if(!offset) {\n            offset = 0;\n        }\n        \n        if(count) {\n            l = Math.min((count * stride) + offset, a.length);\n        } else {\n            l = a.length;\n        }\n\n        for(i = offset; i < l; i += stride) {\n            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];\n            fn(vec, vec, arg);\n            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];\n        }\n        \n        return a;\n    };\n})();\n\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\nvec3.angle = function(a, b) {\n   \n    var tempA = vec3.fromValues(a[0], a[1], a[2]);\n    var tempB = vec3.fromValues(b[0], b[1], b[2]);\n \n    vec3.normalize(tempA, tempA);\n    vec3.normalize(tempB, tempB);\n \n    var cosine = vec3.dot(tempA, tempB);\n\n    if(cosine > 1.0) {\n        return 0;\n    }\n    else if(cosine < -1.0) {\n        return Math.PI;\n    } else {\n        return Math.acos(cosine);\n    }     \n};\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nvec3.str = function (a) {\n    return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n};\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec3.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n};\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec3.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2];\n    var b0 = b[0], b1 = b[1], b2 = b[2];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)));\n};\n\nvar vec4 = {};\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\nvec4.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    return out;\n};\n\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {vec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\nvec4.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\nvec4.fromValues = function(x, y, z, w) {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n};\n\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the source vector\n * @returns {vec4} out\n */\nvec4.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\nvec4.set = function(out, x, y, z, w) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n};\n\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    return out;\n};\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    return out;\n};\n\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\nvec4.sub = vec4.subtract;\n\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.multiply = function(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    out[3] = a[3] * b[3];\n    return out;\n};\n\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\nvec4.mul = vec4.multiply;\n\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.divide = function(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    out[3] = a[3] / b[3];\n    return out;\n};\n\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\nvec4.div = vec4.divide;\n\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to ceil\n * @returns {vec4} out\n */\nvec4.ceil = function (out, a) {\n    out[0] = Math.ceil(a[0]);\n    out[1] = Math.ceil(a[1]);\n    out[2] = Math.ceil(a[2]);\n    out[3] = Math.ceil(a[3]);\n    return out;\n};\n\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to floor\n * @returns {vec4} out\n */\nvec4.floor = function (out, a) {\n    out[0] = Math.floor(a[0]);\n    out[1] = Math.floor(a[1]);\n    out[2] = Math.floor(a[2]);\n    out[3] = Math.floor(a[3]);\n    return out;\n};\n\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.min = function(out, a, b) {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    out[2] = Math.min(a[2], b[2]);\n    out[3] = Math.min(a[3], b[3]);\n    return out;\n};\n\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.max = function(out, a, b) {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    out[2] = Math.max(a[2], b[2]);\n    out[3] = Math.max(a[3], b[3]);\n    return out;\n};\n\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to round\n * @returns {vec4} out\n */\nvec4.round = function (out, a) {\n    out[0] = Math.round(a[0]);\n    out[1] = Math.round(a[1]);\n    out[2] = Math.round(a[2]);\n    out[3] = Math.round(a[3]);\n    return out;\n};\n\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\nvec4.scale = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    return out;\n};\n\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\nvec4.scaleAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    out[3] = a[3] + (b[3] * scale);\n    return out;\n};\n\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} distance between a and b\n */\nvec4.distance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2],\n        w = b[3] - a[3];\n    return Math.sqrt(x*x + y*y + z*z + w*w);\n};\n\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\nvec4.dist = vec4.distance;\n\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\nvec4.squaredDistance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2],\n        w = b[3] - a[3];\n    return x*x + y*y + z*z + w*w;\n};\n\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\nvec4.sqrDist = vec4.squaredDistance;\n\n/**\n * Calculates the length of a vec4\n *\n * @param {vec4} a vector to calculate length of\n * @returns {Number} length of a\n */\nvec4.length = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2],\n        w = a[3];\n    return Math.sqrt(x*x + y*y + z*z + w*w);\n};\n\n/**\n * Alias for {@link vec4.length}\n * @function\n */\nvec4.len = vec4.length;\n\n/**\n * Calculates the squared length of a vec4\n *\n * @param {vec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nvec4.squaredLength = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2],\n        w = a[3];\n    return x*x + y*y + z*z + w*w;\n};\n\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\nvec4.sqrLen = vec4.squaredLength;\n\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to negate\n * @returns {vec4} out\n */\nvec4.negate = function(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = -a[3];\n    return out;\n};\n\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to invert\n * @returns {vec4} out\n */\nvec4.inverse = function(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n};\n\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to normalize\n * @returns {vec4} out\n */\nvec4.normalize = function(out, a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2],\n        w = a[3];\n    var len = x*x + y*y + z*z + w*w;\n    if (len > 0) {\n        len = 1 / Math.sqrt(len);\n        out[0] = x * len;\n        out[1] = y * len;\n        out[2] = z * len;\n        out[3] = w * len;\n    }\n    return out;\n};\n\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} dot product of a and b\n */\nvec4.dot = function (a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n};\n\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec4} out\n */\nvec4.lerp = function (out, a, b, t) {\n    var ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    out[3] = aw + t * (b[3] - aw);\n    return out;\n};\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\nvec4.random = function (out, scale) {\n    scale = scale || 1.0;\n\n    //TODO: This is a pretty awful way of doing this. Find something better.\n    out[0] = glMatrix.RANDOM();\n    out[1] = glMatrix.RANDOM();\n    out[2] = glMatrix.RANDOM();\n    out[3] = glMatrix.RANDOM();\n    vec4.normalize(out, out);\n    vec4.scale(out, out, scale);\n    return out;\n};\n\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec4} out\n */\nvec4.transformMat4 = function(out, a, m) {\n    var x = a[0], y = a[1], z = a[2], w = a[3];\n    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n    out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n    return out;\n};\n\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec4} out\n */\nvec4.transformQuat = function(out, a, q) {\n    var x = a[0], y = a[1], z = a[2],\n        qx = q[0], qy = q[1], qz = q[2], qw = q[3],\n\n        // calculate quat * vec\n        ix = qw * x + qy * z - qz * y,\n        iy = qw * y + qz * x - qx * z,\n        iz = qw * z + qx * y - qy * x,\n        iw = -qx * x - qy * y - qz * z;\n\n    // calculate result * inverse quat\n    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nvec4.forEach = (function() {\n    var vec = vec4.create();\n\n    return function(a, stride, offset, count, fn, arg) {\n        var i, l;\n        if(!stride) {\n            stride = 4;\n        }\n\n        if(!offset) {\n            offset = 0;\n        }\n        \n        if(count) {\n            l = Math.min((count * stride) + offset, a.length);\n        } else {\n            l = a.length;\n        }\n\n        for(i = offset; i < l; i += stride) {\n            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2]; vec[3] = a[i+3];\n            fn(vec, vec, arg);\n            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2]; a[i+3] = vec[3];\n        }\n        \n        return a;\n    };\n})();\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nvec4.str = function (a) {\n    return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n};\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec4.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n};\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec4.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));\n};\n\n/**\n * @class Quaternion\n * @name quat\n */\nvar quat = {};\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\nquat.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {vec3} a the initial vector\n * @param {vec3} b the destination vector\n * @returns {quat} out\n */\nquat.rotationTo = (function() {\n    var tmpvec3 = vec3.create();\n    var xUnitVec3 = vec3.fromValues(1,0,0);\n    var yUnitVec3 = vec3.fromValues(0,1,0);\n\n    return function(out, a, b) {\n        var dot = vec3.dot(a, b);\n        if (dot < -0.999999) {\n            vec3.cross(tmpvec3, xUnitVec3, a);\n            if (vec3.length(tmpvec3) < 0.000001)\n                vec3.cross(tmpvec3, yUnitVec3, a);\n            vec3.normalize(tmpvec3, tmpvec3);\n            quat.setAxisAngle(out, tmpvec3, Math.PI);\n            return out;\n        } else if (dot > 0.999999) {\n            out[0] = 0;\n            out[1] = 0;\n            out[2] = 0;\n            out[3] = 1;\n            return out;\n        } else {\n            vec3.cross(tmpvec3, a, b);\n            out[0] = tmpvec3[0];\n            out[1] = tmpvec3[1];\n            out[2] = tmpvec3[2];\n            out[3] = 1 + dot;\n            return quat.normalize(out, out);\n        }\n    };\n})();\n\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {vec3} view  the vector representing the viewing direction\n * @param {vec3} right the vector representing the local \"right\" direction\n * @param {vec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\nquat.setAxes = (function() {\n    var matr = mat3.create();\n\n    return function(out, view, right, up) {\n        matr[0] = right[0];\n        matr[3] = right[1];\n        matr[6] = right[2];\n\n        matr[1] = up[0];\n        matr[4] = up[1];\n        matr[7] = up[2];\n\n        matr[2] = -view[0];\n        matr[5] = -view[1];\n        matr[8] = -view[2];\n\n        return quat.normalize(out, quat.fromMat3(out, matr));\n    };\n})();\n\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {quat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\nquat.clone = vec4.clone;\n\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\nquat.fromValues = vec4.fromValues;\n\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nquat.copy = vec4.copy;\n\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nquat.set = vec4.set;\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nquat.identity = function(out) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nquat.setAxisAngle = function(out, axis, rad) {\n    rad = rad * 0.5;\n    var s = Math.sin(rad);\n    out[0] = s * axis[0];\n    out[1] = s * axis[1];\n    out[2] = s * axis[2];\n    out[3] = Math.cos(rad);\n    return out;\n};\n\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {quat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\nquat.getAxisAngle = function(out_axis, q) {\n    var rad = Math.acos(q[3]) * 2.0;\n    var s = Math.sin(rad / 2.0);\n    if (s != 0.0) {\n        out_axis[0] = q[0] / s;\n        out_axis[1] = q[1] / s;\n        out_axis[2] = q[2] / s;\n    } else {\n        // If s is zero, return any axis (no rotation - axis does not matter)\n        out_axis[0] = 1;\n        out_axis[1] = 0;\n        out_axis[2] = 0;\n    }\n    return rad;\n};\n\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n * @function\n */\nquat.add = vec4.add;\n\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */\nquat.multiply = function(out, a, b) {\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n    out[0] = ax * bw + aw * bx + ay * bz - az * by;\n    out[1] = ay * bw + aw * by + az * bx - ax * bz;\n    out[2] = az * bw + aw * bz + ax * by - ay * bx;\n    out[3] = aw * bw - ax * bx - ay * by - az * bz;\n    return out;\n};\n\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\nquat.mul = quat.multiply;\n\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nquat.scale = vec4.scale;\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nquat.rotateX = function (out, a, rad) {\n    rad *= 0.5; \n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bx = Math.sin(rad), bw = Math.cos(rad);\n\n    out[0] = ax * bw + aw * bx;\n    out[1] = ay * bw + az * bx;\n    out[2] = az * bw - ay * bx;\n    out[3] = aw * bw - ax * bx;\n    return out;\n};\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nquat.rotateY = function (out, a, rad) {\n    rad *= 0.5; \n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        by = Math.sin(rad), bw = Math.cos(rad);\n\n    out[0] = ax * bw - az * by;\n    out[1] = ay * bw + aw * by;\n    out[2] = az * bw + ax * by;\n    out[3] = aw * bw - ay * by;\n    return out;\n};\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nquat.rotateZ = function (out, a, rad) {\n    rad *= 0.5; \n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bz = Math.sin(rad), bw = Math.cos(rad);\n\n    out[0] = ax * bw + ay * bz;\n    out[1] = ay * bw - ax * bz;\n    out[2] = az * bw + aw * bz;\n    out[3] = aw * bw - az * bz;\n    return out;\n};\n\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate W component of\n * @returns {quat} out\n */\nquat.calculateW = function (out, a) {\n    var x = a[0], y = a[1], z = a[2];\n\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n    return out;\n};\n\n/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nquat.dot = vec4.dot;\n\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n * @function\n */\nquat.lerp = vec4.lerp;\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n */\nquat.slerp = function (out, a, b, t) {\n    // benchmarks:\n    //    http://jsperf.com/quaternion-slerp-implementations\n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n    var        omega, cosom, sinom, scale0, scale1;\n\n    // calc cosine\n    cosom = ax * bx + ay * by + az * bz + aw * bw;\n    // adjust signs (if necessary)\n    if ( cosom < 0.0 ) {\n        cosom = -cosom;\n        bx = - bx;\n        by = - by;\n        bz = - bz;\n        bw = - bw;\n    }\n    // calculate coefficients\n    if ( (1.0 - cosom) > 0.000001 ) {\n        // standard case (slerp)\n        omega  = Math.acos(cosom);\n        sinom  = Math.sin(omega);\n        scale0 = Math.sin((1.0 - t) * omega) / sinom;\n        scale1 = Math.sin(t * omega) / sinom;\n    } else {        \n        // \"from\" and \"to\" quaternions are very close \n        //  ... so we can do a linear interpolation\n        scale0 = 1.0 - t;\n        scale1 = t;\n    }\n    // calculate final values\n    out[0] = scale0 * ax + scale1 * bx;\n    out[1] = scale0 * ay + scale1 * by;\n    out[2] = scale0 * az + scale1 * bz;\n    out[3] = scale0 * aw + scale1 * bw;\n    \n    return out;\n};\n\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {quat} c the third operand\n * @param {quat} d the fourth operand\n * @param {Number} t interpolation amount\n * @returns {quat} out\n */\nquat.sqlerp = (function () {\n  var temp1 = quat.create();\n  var temp2 = quat.create();\n  \n  return function (out, a, b, c, d, t) {\n    quat.slerp(temp1, a, d, t);\n    quat.slerp(temp2, b, c, t);\n    quat.slerp(out, temp1, temp2, 2 * t * (1 - t));\n    \n    return out;\n  };\n}());\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */\nquat.invert = function(out, a) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n        dot = a0*a0 + a1*a1 + a2*a2 + a3*a3,\n        invDot = dot ? 1.0/dot : 0;\n    \n    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n    out[0] = -a0*invDot;\n    out[1] = -a1*invDot;\n    out[2] = -a2*invDot;\n    out[3] = a3*invDot;\n    return out;\n};\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nquat.conjugate = function (out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n * @function\n */\nquat.length = vec4.length;\n\n/**\n * Alias for {@link quat.length}\n * @function\n */\nquat.len = quat.length;\n\n/**\n * Calculates the squared length of a quat\n *\n * @param {quat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\nquat.squaredLength = vec4.squaredLength;\n\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\nquat.sqrLen = quat.squaredLength;\n\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nquat.normalize = vec4.normalize;\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nquat.fromMat3 = function(out, m) {\n    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n    // article \"Quaternion Calculus and Fast Animation\".\n    var fTrace = m[0] + m[4] + m[8];\n    var fRoot;\n\n    if ( fTrace > 0.0 ) {\n        // |w| > 1/2, may as well choose w > 1/2\n        fRoot = Math.sqrt(fTrace + 1.0);  // 2w\n        out[3] = 0.5 * fRoot;\n        fRoot = 0.5/fRoot;  // 1/(4w)\n        out[0] = (m[5]-m[7])*fRoot;\n        out[1] = (m[6]-m[2])*fRoot;\n        out[2] = (m[1]-m[3])*fRoot;\n    } else {\n        // |w| <= 1/2\n        var i = 0;\n        if ( m[4] > m[0] )\n          i = 1;\n        if ( m[8] > m[i*3+i] )\n          i = 2;\n        var j = (i+1)%3;\n        var k = (i+2)%3;\n        \n        fRoot = Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k] + 1.0);\n        out[i] = 0.5 * fRoot;\n        fRoot = 0.5 / fRoot;\n        out[3] = (m[j*3+k] - m[k*3+j]) * fRoot;\n        out[j] = (m[j*3+i] + m[i*3+j]) * fRoot;\n        out[k] = (m[k*3+i] + m[i*3+k]) * fRoot;\n    }\n    \n    return out;\n};\n\n/**\n * Returns a string representation of a quatenion\n *\n * @param {quat} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nquat.str = function (a) {\n    return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n};\n\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {quat} a The first quaternion.\n * @param {quat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nquat.exactEquals = vec4.exactEquals;\n\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {quat} a The first vector.\n * @param {quat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nquat.equals = vec4.equals;;/**\n * @class Generic map of IDs to items - can generate own IDs or accept given IDs. IDs should be strings in order to not\n * clash with internally generated IDs, which are numbers.\n * @private\n */\n\n(function () {\n    \"use strict\";\n\n    var SceneJS_Map = window.SceneJS_Map = function(items, _baseId) {\n\n        /**\n         * @property Items in this map\n         */\n        this.items = items || [];\n\n\n        var baseId = _baseId || 0;\n        var lastUniqueId = baseId + 1;\n\n        /**\n         * Adds an item to the map and returns the ID of the item in the map. If an ID is given, the item is\n         * mapped to that ID. Otherwise, the map automatically generates the ID and maps to that.\n         *\n         * id = myMap.addItem(\"foo\") // ID internally generated\n         *\n         * id = myMap.addItem(\"foo\", \"bar\") // ID is \"foo\"\n         *\n         */\n        this.addItem = function() {\n\n            var item;\n\n            if (arguments.length == 2) {\n\n                var id = arguments[0];\n\n                item = arguments[1];\n\n                if (this.items[id]) { // Won't happen if given ID is string\n                    SceneJS_error.fatalError(SceneJS.errors.ID_CLASH, \"ID clash: '\" + id + \"'\");\n                }\n\n                this.items[id] = item;\n\n                return id;\n\n            } else {\n\n                while (true) {\n\n                    item = arguments[0];\n                    var findId = lastUniqueId++;\n\n                    if (!this.items[findId]) {\n                        this.items[findId] = item;\n                        return findId;\n                    }\n                }\n            }\n        };\n\n        /**\n         * Removes the item of the given ID from the map\n         */\n        this.removeItem = function(id) {\n            delete this.items[id];\n        };\n    };\n})();\n\n;/**\n * The SceneJS object.\n */\n\n(function () {\n    \"use strict\";\n\n    var SceneJS = window.SceneJS = new (function () {\n\n        /**\n         * This SceneJS version\n         */\n        this.VERSION = '3.2';\n\n        this.ENABLE_EXTENSIONS = [\n            \"WEBGL_depth_texture\",\n            \"OES_texture_float\",\n            \"OES_texture_float_linear\",\n            \"OES_element_index_uint\",\n            \"OES_standard_derivatives\",\n            \"EXT_shader_texture_lod\"\n        ];\n\n        this._baseStateId = 0;\n\n        // Pub/sub support\n        this._handleMap = new SceneJS_Map(); // Subscription handle pool\n        this._topicSubs = {}; // A [handle -> callback] map for each topic name\n        this._handleTopics = {}; // Maps handles to topic names\n        this._topicPubs = {}; // Maps topics to publications\n\n        /**\n         * @property {SceneJS_Engine} Engines currently in existance\n         */\n        this._engines = {};\n\n        this._engineIds = new SceneJS_Map();\n\n        this.timer = window.performance || window.Date;\n\n        this.WEBGL_INFO = (function() {\n            var info = {\n                WEBGL: false,\n                SOFTWARE_RENDERER: false\n            };\n\n            var canvas = document.createElement(\"canvas\");\n\n            if (!canvas) {\n                return info;\n            }\n\n            var gl = canvas.getContext(\"webgl\", { antialias: true, failIfMajorPerformanceCaveat: true }) || canvas.getContext(\"experimental-webgl\", { antialias: true, failIfMajorPerformanceCaveat: true });\n\n            if (!gl) {\n                gl = canvas.getContext(\"webgl\", { antialias: true }) || canvas.getContext(\"experimental-webgl\", { antialias: true });\n                if (gl) {\n                    info.SOFTWARE_RENDERER = true;\n                }\n            }\n\n            info.WEBGL = !!gl;\n\n            if (!info.WEBGL) {\n                return info;\n            }\n\n            info.ANTIALIAS = gl.getContextAttributes().antialias;\n\n            if (gl.getShaderPrecisionFormat) {\n                if (gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).precision > 0) {\n                    info.FS_MAX_FLOAT_PRECISION = \"highp\";\n                } else if (gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).precision > 0) {\n                    info.FS_MAX_FLOAT_PRECISION = \"mediump\";\n                } else {\n                    info.FS_MAX_FLOAT_PRECISION = \"lowp\";\n                }\n            } else {\n                info.FS_MAX_FLOAT_PRECISION = \"mediump\";\n            }\n\n            info.DEPTH_BITS = gl.getParameter(gl.DEPTH_BITS);\n            info.STENCIL_BITS = gl.getParameter(gl.STENCIL_BITS);\n            info.MAX_TEXTURE_SIZE = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n            info.MAX_CUBE_MAP_SIZE = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n            info.MAX_RENDERBUFFER_SIZE = gl.getParameter(gl.MAX_RENDERBUFFER_SIZE);\n            info.MAX_TEXTURE_UNITS =  gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n            info.MAX_VERTEX_ATTRIBS = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n            info.MAX_VERTEX_UNIFORM_VECTORS = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);\n            info.MAX_FRAGMENT_UNIFORM_VECTORS = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);\n            info.MAX_VARYING_VECTORS = gl.getParameter(gl.MAX_VARYING_VECTORS);\n            info.SAMPLE_BUFFERS = !!gl.getParameter(gl.SAMPLE_BUFFERS);\n            info.SAMPLES = gl.getParameter(gl.SAMPLES);\n            info.MAX_POINT_SIZE = gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE)[1];\n            info.MAX_VIEWPORT_DIMS = gl.getParameter(gl.MAX_VIEWPORT_DIMS);\n\n            info.SUPPORTED_EXTENSIONS = {};\n\n            gl.getSupportedExtensions().forEach(function(ext) {\n                info.SUPPORTED_EXTENSIONS[ext] = true;\n            });\n\n            info.depthTexturesSupported = info.SUPPORTED_EXTENSIONS[\"WEBGL_depth_texture\"] || false;\n            info.floatTexturesSupported = info.SUPPORTED_EXTENSIONS[\"OES_texture_float\"] || false;\n            info.linearFloatTexturesSupported = info.SUPPORTED_EXTENSIONS[\"OES_texture_float_linear\"] || false;\n            info.drawBuffersSupported = info.SUPPORTED_EXTENSIONS[\"WEBGL_draw_buffers\"] || false;\n            info.standardDerivativesSupported = info.SUPPORTED_EXTENSIONS[\"OES_standard_derivatives\"] || false;\n            info.textureLODSupported = info.SUPPORTED_EXTENSIONS[\"EXT_shader_texture_lod\"] || false;\n\n            return info;\n        })();\n\n        this.DISPLAY_FLAGS = {\n            FOG_LINEAR: 1,\n            FOG_EXP:    2,\n            FOG_EXP2:   3\n        };\n\n        this.TEXTURE_FLAGS = {\n            baseColor:        1,\n            specular:         1 << 1,\n            emit:             1 << 2,\n            alpha:            1 << 3,\n            normals:          1 << 4,\n            shine:            1 << 5,\n            metallic:         1 << 6,\n            roughness:        1 << 7,\n            occlusion:        1 << 8,\n            add:              1 << 9,\n            multiply:         1 << 10,\n            over:             1 << 11,\n            transparency:     1 << 12,\n            conditionalAlpha: 1 << 13,\n            swizzledNormals:  1 << 14\n        };\n\n        this.CUBEMAP_FLAGS = {\n            reflect:      1,\n            light:        2\n        };\n\n        this.PROPERTY_FLAGS = {\n            PICKING:            1,\n            ENABLED:            1 << 1,\n            REFLECTIVE:         1 << 2,\n            SOLID:              1 << 3,\n            SKYBOX:             1 << 4,\n            XRAY:               1 << 5,\n            CCW:                1 << 6,\n            NO_DEPTH_MASK:      1 << 7,\n            PARTIALLY_OPAQUE:   1 << 8,\n            FORCE_TRANSPARENT:  1 << 9,\n            ROUND_POINTS:       1 << 10,\n            PERSPECTIVE_POINTS: 1 << 11,\n            BILLBOARD:          1 << 12,\n            CLIPPING:           1 << 13,\n            STOCHASTIC_ALPHA:   1 << 14\n        };\n\n        this.COLOR_MOD_FLAGS = {\n            SATURATION: 1,\n            BRIGHTNESS: 1 << 1,\n            CONTRAST:   1 << 2,\n            TINT:       1 << 3\n        };\n\n        this.XFORM_FLAGS = {\n            MATRIX_DIRTY: 1,      // Node matrix is dirty\n            COMPILING:    1 << 1, // Hierarchy is dirty\n            DIRTY:        1 << 2,\n        };\n\n        this.TRANSPARENCY_FLAGS = {\n            ALPHA:              1,\n            IMPROVED_ALPHA:     1 << 1,\n            ADD_ALPHA:          1 << 2,\n            ALPHA_TO_COVERAGE:  1 << 3,\n            WEIGHTED_OIT:       1 << 4\n        };\n\n        this.DEPTH_TEST_FLAGS = {\n            ENABLED:            1,\n            DISABLED:           1 << 1,\n            ALWAYS_PASS:        1 << 2\n        };\n\n        this.TRANSPARENCY_FLAGS.TWO_PASS = this.TRANSPARENCY_FLAGS.IMPROVED_ALPHA;\n        this.TRANSPARENCY_FLAGS.ORDER_DEPENDENT = this.TRANSPARENCY_FLAGS.ALPHA | this.TRANSPARENCY_FLAGS.IMPROVED_ALPHA;\n        this.TRANSPARENCY_FLAGS.ALPHA_NO_DEPTH_MASK = this.TRANSPARENCY_FLAGS.IMPROVED_ALPHA | this.TRANSPARENCY_FLAGS.ADD_ALPHA;\n        this.TRANSPARENCY_FLAGS.ALPHA_BLEND = this.TRANSPARENCY_FLAGS.ALPHA | this.TRANSPARENCY_FLAGS.IMPROVED_ALPHA | this.TRANSPARENCY_FLAGS.ADD_ALPHA;\n\n        this.KD_TREE_MAX_DEPTH = 10;\n        this.KD_TREE_MIN_TRIANGLES = 20;\n\n        // Should be called before creating a scene.\n        this.setMaxPointSize = function (val) {\n            SceneJS_ProgramSourceFactory.setMaxPointSize(val);\n        };\n\n        /**\n         * Publishes to a topic.\n         *\n         * Immediately notifies existing subscriptions to that topic, retains the publication to give to\n         * any subsequent notifications on that topic as they are made.\n         *\n         * @param {String} topic Publication topic\n         * @param {Object} pub The publication\n         * @param {Boolean} [forget] When true, the publication will be sent to subscribers then forgotten, so that any\n         * subsequent subscribers will not receive it\n         * @private\n         */\n        this.publish = function (topic, pub, forget) {\n            if (!forget) {\n                this._topicPubs[topic] = pub; // Save notification\n            }\n            var subsForTopic = this._topicSubs[topic];\n            if (subsForTopic) { // Notify subscriptions\n                for (var handle in subsForTopic) {\n                    if (subsForTopic.hasOwnProperty(handle)) {\n                        subsForTopic[handle].call(this, pub);\n                    }\n                }\n            }\n        };\n\n        /**\n         * Removes a topic publication\n         *\n         * Immediately notifies existing subscriptions to that topic, sending them each a null publication.\n         *\n         * @param topic Publication topic\n         * @private\n         */\n        this.unpublish = function (topic) {\n            var subsForTopic = this._topicSubs[topic];\n            if (subsForTopic) { // Notify subscriptions\n                for (var handle in subsForTopic) {\n                    if (subsForTopic.hasOwnProperty(handle)) {\n                        subsForTopic[handle].call(this, null);\n                    }\n                }\n            }\n            delete this._topicPubs[topic];\n        };\n\n\n        /**\n         * Listen for data changes at a particular location\n         *\n         * <p>Your callback will be triggered for\n         * the initial data and again whenever the data changes. Use {@link #off} to stop receiving updates.</p>\n         *\n         * <p>The callback is be called with SceneJS as scope.</p>\n         *\n         * @param {String} location Publication location\n         * @param {Function(data)} callback Called when fresh data is available at the location\n         * @return {String} Handle to the subscription, which may be used to unsubscribe with {@link #off}.\n         */\n        this.on = function (topic, callback) {\n            var subsForTopic = this._topicSubs[topic];\n            if (!subsForTopic) {\n                subsForTopic = {};\n                this._topicSubs[topic] = subsForTopic;\n            }\n            var handle = this._handleMap.addItem(); // Create unique handle\n            subsForTopic[handle] = callback;\n            this._handleTopics[handle] = topic;\n            var pub = this._topicPubs[topic];\n            if (pub) { // A publication exists, notify callback immediately\n                callback.call(this, pub);\n            }\n            return handle;\n        };\n\n        /**\n         * Unsubscribes from a publication that was previously made with {@link #on}.\n         * @param handle Publication handle\n         */\n        this.off = function (handle) {\n            var topic = this._handleTopics[handle];\n            if (topic) {\n                delete this._handleTopics[handle];\n                var topicSubs = this._topicSubs[topic];\n                if (topicSubs) {\n                    delete topicSubs[handle];\n                }\n                this._handleMap.removeItem(handle); // Release handle\n                if (topic == \"rendered\") {\n                    this._engine.branchDirty(this);\n                }\n            }\n        };\n\n        /**\n         * Listens for exactly one data update at the specified location, and then stops listening.\n         * <p>This is equivalent to calling {@link #on}, and then calling {@link #off} inside the callback function.</p>\n         * @param {String} location Data location to listen to\n         * @param {Function(data)} callback Called when fresh data is available at the location\n         */\n        this.once = function (topic, callback) {\n            var self = this;\n            var sub = this.on(topic,\n                function (pub) {\n                    self.off(sub);\n                    callback(pub);\n                });\n        };\n\n        /**\n         * Creates a new scene from the given JSON description and begins rendering it\n         *\n         * @param {String} json JSON scene description\n         * @param {*} options Optional options\n         * @param {Boolean} options.simulateWebGLContextLost Set true to enable simulation of lost WebGL context (has performance impact)\n         * @returns {SceneJS.Scene} New scene\n         */\n        this.createScene = function (json, options) {\n\n           json = json || {};\n\n            if (json.id) {\n                if (this._engines[json.id]) {\n                    SceneJS_error.fatalError(\n                        SceneJS.errors.ILLEGAL_NODE_CONFIG,\n                        \"Scene already exists with this ID: '\" + json.id + \"'\");\n                }\n                this._engineIds.addItem(json.id, {});\n            } else {\n                json.id = this._engineIds.addItem({});\n            }\n\n            var engine = new SceneJS_Engine(json, options);\n\n            this._engines[json.id] = engine;\n\n            return engine.scene;\n        };\n\n        /**\n         * Gets an existing scene\n         *\n         * @param {String} sceneId ID of target scene\n         * @deprecated\n         * @returns {SceneJS.Scene} The selected scene\n         */\n        this.scene = function (sceneId) {\n\n            var engine = this._engines[sceneId];\n\n            return engine ? engine.scene : null;\n        };\n\n        /**\n         * Gets an existing scene.\n         *\n         * When no scene ID is given, the first scene found is returned. This is a shorthand convenience for\n         * easy scripting when only one scene is defined.\n         *\n         * @param {String} [sceneId] ID of target scene\n         * @returns {SceneJS.Scene} The selected scene\n         */\n        this.getScene = function (sceneId) {\n\n            if (!sceneId) {\n                for (var sceneId in this._engines) {\n                    if (this._engines.hasOwnProperty(sceneId)) {\n                        return this._engines[sceneId].scene;\n                    }\n                }\n            }\n\n            var engine = this._engines[sceneId];\n\n            return engine ? engine.scene : null;\n        };\n\n        /**\n         * Gets existing scenes\n         *\n         * @returns  Existing scenes, mapped to their IDs\n         */\n        this.getScenes = function () {\n\n            var scenes = {};\n\n            for (var sceneId in this._engines) {\n                if (this._engines.hasOwnProperty(sceneId)) {\n                    scenes[sceneId] = this._engines[sceneId].scene;\n                }\n            }\n\n            return scenes;\n        };\n\n        /**\n         * Tests if the given object is an array\n         * @private\n         */\n        this._isArray = function (testObject) {\n            return testObject && !(testObject.propertyIsEnumerable('length'))\n                && typeof testObject === 'object' && typeof testObject.length === 'number';\n        };\n\n        /**\n         *\n         */\n        this._shallowClone = function (o) {\n            var o2 = {};\n            for (var name in o) {\n                if (o.hasOwnProperty(name)) {\n                    o2[name] = o[name];\n                }\n            }\n            return o2;\n        };\n\n        /**\n         * Add properties of o to o2 where undefined or null on o2\n         * @private\n         */\n        this._applyIf = function (o, o2) {\n            for (var name in o) {\n                if (o.hasOwnProperty(name)) {\n                    if (o2[name] == undefined || o2[name] == null) {\n                        o2[name] = o[name];\n                    }\n                }\n            }\n            return o2;\n        };\n\n        /**\n         * Add properties of o to o2, overwriting them on o2 if already there.\n         * The optional clear flag causes properties on o2 to be cleared first\n         * @private\n         */\n        this._apply = function (o, o2, clear) {\n            var name;\n            if (clear) {\n                for (name in o2) {\n                    if (o2.hasOwnProperty(name)) {\n                        delete o2[name];\n                    }\n                }\n            }\n            for (name in o) {\n                if (o.hasOwnProperty(name) && o[name] != undefined) {\n                    o2[name] = o[name];\n                }\n            }\n            return o2;\n        };\n\n        var hasOwnProperty = Object.prototype.hasOwnProperty;\n\n        /**\n         * Tests is an object is empty\n         * @param obj\n         * @returns {boolean}\n         * @private\n         */\n        this._isEmpty =function(obj) {\n            // null and undefined are \"empty\"\n            if (obj == null) return true;\n            // Assume if it has a length property with a non-zero value\n            // that that property is correct.\n            if (obj.length > 0)    return false;\n            if (obj.length === 0)  return true;\n            // Otherwise, does it have any properties of its own?\n            // Note that this doesn't handle\n            // toString and valueOf enumeration bugs in IE < 9\n            for (var key in obj) {\n                if (hasOwnProperty.call(obj, key)) return false;\n            }\n            return true;\n        };\n\n        /**\n         * Tests if the given value is a number\n         * @param value\n         * @returns {boolean}\n         * @private\n         */\n        this._isNumeric = function (value) {\n            return !isNaN(parseFloat(value)) && isFinite(value);\n        };\n\n        /**\n        * Shim for slicing arrays regardless of the array type.\n        * (Primarily because TypedArray.prototype.slice is\n        * not supported on all platforms)\n        */\n        this._sliceArray = function(array, start, end) {\n            if (array.slice) {\n                return array.slice(start, end);\n            }\n\n            start = start || 0;\n            end = end || array.length;\n\n            var length = end - start;\n            var newArray = new array.constructor(length);\n\n            for (var i = 0; i < length; i++) {\n                newArray[i] = array[start + i];\n            }\n\n            return newArray;\n        };\n\n        /**\n            Load binary data.\n        */\n        this._loadBinary = function (src, callback) {\n            var request = new XMLHttpRequest();\n            request.responseType = \"arraybuffer\";\n            request.open(\"GET\", src);\n\n            request.onload = function() {\n                callback(request.response);\n            };\n\n            request.send(null);\n        };\n\n        /**\n            Get a WebGL extension, including if prefixed.\n        */\n        var extensionPrefixes = [\"\", \"MOZ_\", \"WEBKIT_\"];\n\n        this.checkExtension = function(extension) {\n            for (var i = 0, len = extensionPrefixes.length; i < len; i++) {\n                if (this.WEBGL_INFO.SUPPORTED_EXTENSIONS[extensionPrefixes[i] + extension]) {\n                    return true;\n                }\n            }\n\n            return false;\n        };\n\n        this._getExtension = function(gl, extension) {\n            for (var i = 0, len = extensionPrefixes.length; i < len; i++) {\n                var ext = gl.getExtension(extensionPrefixes[i] + extension);\n                if (ext) {\n                    return ext;\n                }\n            }\n\n            return null;\n        };\n\n        this.printGraph = function(node) {\n            printGraph(node, 0);\n        }\n\n        /**\n         * Resets SceneJS, destroying all existing scenes\n         */\n        this.reset = function () {\n\n            var temp = [];\n\n            for (var id in this._engines) { // Collect engines to destroy\n                if (this._engines.hasOwnProperty(id)) {\n\n                    temp.push(this._engines[id]);\n\n                    delete this._engines[id];\n\n                    this._engineIds.removeItem(id);\n                }\n            }\n\n            while (temp.length > 0) { // Destroy the engines\n                temp.pop().destroy();\n            }\n\n            SceneJS_events.fireEvent(SceneJS_events.RESET);\n        };\n\n        function printGraph(node, level) {\n            var padding = \"\";\n            var i;\n\n            for (i = 0; i < level; i++) {\n                padding += \" \";\n            }\n            padding += \"-- \"\n            console.log(padding + node.type + \" (id: \" + node.id + \", coreId: \" + node.coreId + \")\");\n\n            for (i = 0; i < node.nodes.length; i++) {\n                printGraph(node.nodes[i], level + 1);\n            }\n        }\n\n\n    })();\n\n})();\n;/**\n *  @private\n */\n\n(function() {\n    \"use strict\";\n\n    var SceneJS_events = window.SceneJS_events = new (function () {\n\n        this.ERROR = 0;\n        this.RESET = 1;                         // SceneJS framework reset\n        this.NODE_CREATED = 2;                 // Scene has just been created\n        this.SCENE_CREATED = 3;                 // Scene has just been created\n        this.SCENE_COMPILING = 4;               // Scene about to be compiled and drawn\n        this.SCENE_DESTROYED = 5;               // Scene just been destroyed\n        this.OBJECT_COMPILING = 6;\n        this.WEBGL_CONTEXT_LOST = 7;\n        this.WEBGL_CONTEXT_RESTORED = 8;\n        this.RENDER = 9;\n\n        /* Priority queue for each type of event\n         */\n        var events = [];\n\n        /**\n         * Registers a handler for the given event and returns a subscription handle\n         *\n         * The handler can be registered with an optional priority number which specifies the order it is\n         * called among the other handler already registered for the event.\n         *\n         * So, with n being the number of commands registered for the given event:\n         *\n         * (priority <= 0)      - command will be the first called\n         * (priority >= n)      - command will be the last called\n         * (0 < priority < n)   - command will be called at the order given by the priority\n         * @private\n         * @param type Event type - one of the values in SceneJS_events\n         * @param command - Handler function that will accept whatever parameter object accompanies the event\n         * @param priority - Optional priority number (see above)\n         * @return {String} - Subscription handle\n         */\n        this.addListener = function (type, command, priority) {\n\n            var list = events[type];\n\n            if (!list) {\n                list = [];\n                events[type] = list;\n            }\n\n            var handler = {\n                command:command,\n                priority:(priority == undefined) ? list.length : priority\n            };\n\n            var index = -1;\n\n            for (var i = 0, len = list.length; i < len; i++) {\n                if (!list[i]) {\n                    index = i;\n                    break;\n                }\n            }\n\n            if (index < 0) {\n                list.push(handler);\n                index = list.length - 1;\n            }\n\n            var handle = type + \".\" + index;\n\n            return handle;\n        };\n\n        /**\n         * Removes a listener\n         * @param handle Subscription handle\n         */\n        this.removeListener = function (handle) {\n\n            var lastIdx = handle.lastIndexOf(\".\");\n\n            var type = parseInt(handle.substr(0, lastIdx));\n            var index = parseInt(handle.substr(lastIdx + 1));\n\n            var list = events[type];\n\n            if (!list) {\n                return;\n            }\n\n            delete list[index];\n        };\n\n        /**\n         * @private\n         */\n        this.fireEvent = function (type, params) {\n\n            var list = events[type];\n\n            if (list) {\n                params = params || {};\n                for (var i = 0; i < list.length; i++) {\n                    if (list[i]) {\n                        list[i].command(params);\n                    }\n                }\n            }\n        };\n\n    })();\n\n\n    /**\n     * Subscribe to SceneJS events\n     * @deprecated\n     */\n    SceneJS.bind = function (name, func) {\n        switch (name) {\n\n            case \"error\" :\n\n                return SceneJS_events.addListener(SceneJS_events.ERROR, func);\n                break;\n\n            case \"reset\" :\n\n                return SceneJS_events.addListener(\n                    SceneJS_events.RESET,\n                    function () {\n                        func();\n                    });\n                break;\n\n            case \"webglcontextlost\" :\n\n                return SceneJS_events.addListener(\n                    SceneJS_events.WEBGL_CONTEXT_LOST,\n                    function (params) {\n                        func(params);\n                    });\n                break;\n\n            case \"webglcontextrestored\" :\n\n                return SceneJS_events.addListener(\n                    SceneJS_events.WEBGL_CONTEXT_RESTORED,\n                    function (params) {\n                        func(params);\n                    });\n                break;\n\n            default:\n                SceneJS_error.fatalError(\"SceneJS.bind - this event type not supported: '\" + name + \"'\");\n        }\n    };\n\n    /* Subscribe to SceneJS events\n     * @deprecated\n     */\n    SceneJS.onEvent = SceneJS.bind;\n\n    /* Unsubscribe from event\n     */\n    SceneJS.unEvent = function (handle) {\n        return SceneJS_events.removeListener(handle);\n    };\n\n    SceneJS.subscribe = SceneJS.addListener = SceneJS.onEvent = SceneJS.bind;\n\n    SceneJS.unsubscribe = SceneJS.unEvent;\n\n\n    SceneJS.on = SceneJS.onEvent;\n    SceneJS.off = SceneJS.unEvent;\n})();\n\n;/**\n *\n */\n\n(function () {\n    \"use strict\";\n\n    var SceneJS_Canvas = window.SceneJS_Canvas = function (id, canvasId, contextAttr, options) {\n\n        /**\n         * ID of this canvas\n         */\n        this.canvasId;\n\n        if (!canvasId) {\n            // Automatic default canvas\n            canvasId = \"canvas-\" + id;\n            var body = document.getElementsByTagName(\"body\")[0];\n            var div = document.createElement('div');\n            var style = div.style;\n            style.height = \"100%\";\n            style.width = \"100%\";\n            style.padding = \"0\";\n            style.margin = \"0\";\n            style.left = \"0\";\n            style.top = \"0\";\n            style.position = \"absolute\";\n            // style[\"z-index\"] = \"10000\";\n            div.innerHTML += '<canvas id=\"' + canvasId + '\" style=\"width: 100%; height: 100%; margin: 0; padding: 0;\"></canvas>';\n            body.appendChild(div);\n        }\n\n        // Bind to canvas\n        var canvas = document.getElementById(canvasId);\n        if (!canvas) {\n            SceneJS_error.fatalError(SceneJS.errors.CANVAS_NOT_FOUND,\n                \"SceneJS.Scene attribute 'canvasId' does not match any elements in the page\");\n        }\n\n        canvas.addEventListener(\"webglcontextcreationerror\", function(e) {\n            console.error(\"Unable to initialize WebGL:\", e.statusMessage || \"Unknown error\"); \n        }, false);\n\n        this.canvasId = canvasId;\n\n        /**\n         * WebGL context options\n         */\n        this.options = options || {};\n\n        this.canvas = canvas;\n\n        if (this.options.simulateWebGLContextLost) {\n            if (window.WebGLDebugUtils) {\n                this.canvas = WebGLDebugUtils.makeLostContextSimulatingCanvas(this.canvas)\n            } else {\n                console.error(\"To simulate context loss, please include WebGLDebugUtils\");\n            }\n        }\n\n        // If the canvas uses css styles to specify the sizes make sure the basic\n        // width and height attributes match or the WebGL context will use 300 x 150\n        this.resolutionScaling = this.options.resolutionScaling || 1;\n\n        this.canvas.width = this.canvas.clientWidth * this.resolutionScaling;\n        this.canvas.height = this.canvas.clientHeight * this.resolutionScaling;\n\n        /**\n         * Attributes given when initialising the WebGL context\n         */\n        this.contextAttr = contextAttr || {};\n        this.contextAttr.alpha = true;\n\n        /**\n         * The WebGL context\n         */\n        this.gl = null;\n\n        /**\n         * True when WebGL 2 support is enabled.\n         *\n         * @property webgl2\n         * @type {Boolean}\n         * @final\n         */\n        this.webgl2 = false; // Will set true in _initWebGL if WebGL is requested and we succeed in getting it.\n\n        this.initWebGL();\n    };\n\n    /**\n     * Names of recognised WebGL contexts\n     */\n    SceneJS_Canvas.prototype._WEBGL_CONTEXT_NAMES = [\n        \"webgl\",\n        \"experimental-webgl\",\n        \"webkit-3d\",\n        \"moz-webgl\",\n        \"moz-glweb20\"\n    ];\n\n    /**\n     * Initialise the WebGL context\n\n     */\n    SceneJS_Canvas.prototype.initWebGL = function () {\n\n        if (this.options.webgl2 === true) {\n            try {\n                this.gl = this.canvas.getContext(\"webgl2\", this.contextAttr);\n            } catch (e) { // Try with next context name\n            }\n            if (!this.gl) {\n                console.log('Failed to get a WebGL 2 context - defaulting to WebGL 1.');\n            } else {\n                this.webgl2 = true;\n            }\n        }\n\n        if (!this.gl) {\n            for (var i = 0; !this.gl && i < this._WEBGL_CONTEXT_NAMES.length; i++) {\n                try {\n                    this.gl = this.canvas.getContext(this._WEBGL_CONTEXT_NAMES[i], this.contextAttr);\n                } catch (e) { // Try with next context name\n                }\n            }\n        }\n\n        if (!this.gl) {\n            // DO NOT THROW\n            // how will this effect control flow???\n            SceneJS_error.fatalError(\n                SceneJS.errors.WEBGL_NOT_SUPPORTED,\n                \"Failed to get a WebGL context\"\n            );\n        }\n    };\n\n\n    /**\n     * Simulate a lost WebGL context.\n     * Only works if the simulateWebGLContextLost was given as an option to the canvas' constructor.\n     */\n    SceneJS_Canvas.prototype.loseWebGLContext = function () {\n        if (this.options.simulateWebGLContextLost) {\n            this.canvas.loseContext();\n        }\n    };\n\n    /**\n     * Set canvas size multiplier for supersample anti-aliasing\n     */\n    SceneJS_Canvas.prototype.setResolutionScaling = function (resolutionScaling) {\n        this.resolutionScaling = resolutionScaling;\n        this.canvas.width = this.canvas.clientWidth * resolutionScaling;\n        this.canvas.height = this.canvas.clientHeight * resolutionScaling;\n    };\n})();\n\n;/**\n * @class A container for a scene graph and its display\n *\n *\n * @private\n */\n\n(function () {\n    \"use strict\";\n\n    var renderingEvent = {\n        pass: 0\n    };\n\n    var renderOptions = {\n        clear: true\n    };\n\n    var renderedEvent = {\n        sceneId: -1,\n        time: -1,\n        pass: 0\n    };\n\n    var sleepEvent = {\n        sceneId: -1,\n        startTime: -1,\n        prevTime: -1,\n        time: -1\n    };\n\n    var width;\n    var height;\n    var lastWidth = null;\n    var lastHeight = null;\n    var prevTime = -1;\n    var startTime = -1;\n\n    var SceneJS_Engine = window.SceneJS_Engine = function (json, options) {\n        options = options || {};\n\n        json.type = \"scene\"; // The type property supplied by user on the root JSON node is ignored - would always be 'scene'\n\n        /**\n         * ID of this engine, also the ID of this engine's {@link SceneJS.Scene}\n         * @type String\n         */\n        this.id = json.id;\n\n\n        /**\n         * Number of times the scene is drawn each time it's rendered.\n         * <p>This is useful for when we need to do things like render for left and right eyes.\n         * @type {*|number}\n         */\n        this._numPasses = json.numPasses || 1;\n\n        /**\n         * When doing multiple passes per frame, specifies whether to clear the\n         * canvas before each pass (true) or just before the first pass (false, default).\n         * @type Boolean\n         */\n        this._clearEachPass = !!json.clearEachPass;\n\n        /**\n         * Canvas and GL context for this engine\n         */\n        this.canvas = new SceneJS_Canvas(this.id, json.canvasId, json.contextAttr, options);\n\n        /**\n         * State core factory - creates, stores, shares and destroys cores\n         */\n        this._coreFactory = new SceneJS_CoreFactory();\n\n        /**\n         * Manages creation, recycle and destruction of {@link SceneJS.Node} instances for this engine's scene graph\n         */\n        this._nodeFactory = new SceneJS_NodeFactory();\n\n        /**\n         * Tracks statistics within this engine, such as numbers of\n         * scenes, textures, geometries etc.\n         *\n         * @property stats\n         * @type {*}\n         * @final\n         */\n        this.stats = {\n            build: {\n                version: SceneJS.VERSION\n            },\n            client: {\n                browser: (navigator && navigator.userAgent) ? navigator.userAgent : \"n/a\"\n            },\n            components: {},\n            state: {\n                programs: 0,\n            },\n            geometry: {\n                meshes: 0,\n                vertices: 0,\n                triangles: 0,\n            },\n            textures: {},\n            load: {\n                sceneGraphCompilation: 0,\n                shaderCompilation: 0,\n                programCompilation: 0\n            },\n            memory: {\n                positions: 0,\n                colors: 0,\n                normals: 0,\n                uvs: 0,\n                indices: 0,\n                morphPositions: 0,\n                morphNormals: 0,\n                textures: 0,\n                tangents: 0,\n                pickPositions: 0,\n                pickColors: 0\n            },\n            frame: {\n                frameCount: 0,\n                useProgram: 0,\n                bindTexture: 0,\n                bindArray: 0,\n                drawElements: 0,\n                drawArrays: 0,\n                drawChunks: 0\n            }\n        };\n\n        /**\n         * The engine's scene renderer\n         * @type SceneJS_Display\n         */\n        this.display = new SceneJS_Display(this.stats, {\n            canvas: this.canvas,\n            transparent: json.transparent,\n            autoTangents : options.autoTangents,\n            gammaInputPhong: options.gammaInputPhong\n        });\n\n        /**\n         * Flags the entirety of the scene graph as needing to be (re)compiled into the display\n         */\n        this.sceneDirty = false;\n\n        /**\n         * Flag set when at least one branch of the scene graph needs recompilation\n         */\n        this._sceneBranchesDirty = false;\n\n        /**\n         * Flag to prevent engine from re-compiling the scene graph\n         */\n        this._compilationPaused = false;\n\n        /**\n         * List of nodes scheduled for destruction by #destroyNode\n         * Destructions are done in a batch at the end of each render so as not to disrupt the render.\n         */\n        this._nodesToDestroy = [];\n\n        /**\n         * Number of nodes in destruction list\n         */\n        this._numNodesToDestroy = 0;\n\n        /**\n         * Flag set once this engine has been destroyed\n         */\n        this.destroyed = false;\n\n        var gl = this.canvas.gl;\n\n        var extensions = SceneJS.ENABLE_EXTENSIONS;\n        for (var i = 0, len = extensions.length; i < len; ++i) {\n            gl.getExtension(extensions[i]);\n        }\n\n        this.cpuTimer = SceneJS.timer;\n        this.gpuTimer = gl.getExtension(\"EXT_disjoint_timer_query\") || null;\n\n        if (this.gpuTimer) {\n            this.gpuTimerQuery = this.gpuTimer.createQueryEXT(this.gpuTimer.TIME_ELAPSED_EXT);\n        }\n\n        /**\n         * The current scene graph status\n         */\n        this.sceneStatus = {\n            nodes: {}, // Status for each node\n            numTasks: 0  // Number of loads currently in progress\n        };\n\n        var self = this;\n\n        // Create scene root first, then create its subnodes\n        // This way nodes can access the scene in their constructors\n        var nodes = json.nodes;\n        json.nodes = [];\n        this.scene = this.createNode(json); // Create scene root\n\n        if (nodes) {\n            json.nodes = nodes;\n            this.scene.addNodes(nodes); // then create sub-nodes\n        }\n\n        this.canvas.canvas.addEventListener(// WebGL context lost\n            \"webglcontextlost\",\n            function (event) {\n                event.preventDefault();\n                SceneJS_events.fireEvent(SceneJS_events.WEBGL_CONTEXT_LOST, {scene: self.scene});\n            },\n            false);\n\n        this.canvas.canvas.addEventListener(// WebGL context recovered\n            \"webglcontextrestored\",\n            function (event) {\n                self.canvas.initWebGL();\n\n                var gl = self.canvas.gl;\n\n                var extensions = SceneJS.ENABLE_EXTENSIONS;\n                for (var i = 0, len = extensions.length; i < len; ++i) {\n                    gl.getExtension(extensions[i]);\n                }\n\n                self.gpuTimer = gl.getExtension(\"EXT_disjoint_timer_query\");\n                if (self.gpuTimer) {\n                    self.gpuTimerQuery = self.gpuTimer.createQueryEXT(self.gpuTimer.TIME_ELAPSED_EXT);\n                }\n                self._coreFactory.webglRestored();  // Reallocate WebGL resources for node state cores\n                self.display.webglRestored(); // Reallocate shaders and re-cache shader var locations for display state chunks\n                SceneJS_events.fireEvent(SceneJS_events.WEBGL_CONTEXT_RESTORED, {scene: self.scene});\n            },\n            false);\n    };\n\n    /**\n     * Sets the number of times the scene is drawn on each render.\n     * <p>This is useful for when we need to do things like render for left and right eyes.\n     * @param {Number} numPasses The number of times the scene is drawn on each frame.\n     */\n    SceneJS_Engine.prototype.setNumPasses = function (numPasses) {\n        this._numPasses = numPasses;\n    };\n\n    /**\n     *  When doing multiple passes per frame, specifies whether to clear the\n     * canvas before each pass (true) or just before the first pass (false).\n     *\n     * <p>This is useful for when we need to do things like render a separate pass to a stereo framebuffer for left and right eyes,\n     * where we want to clear the buffer before each pass.</p>\n     *\n     * @param {Boolean} clearEachPass True to clear before each pass (default is false).\n     */\n    SceneJS_Engine.prototype.setClearEachPass = function (clearEachPass) {\n        this._clearEachPass = clearEachPass;\n    };\n\n    /**\n     * Simulate a lost WebGL context.\n     * Only works if the simulateWebGLContextLost was given as an option to the engine's constructor.\n     */\n    SceneJS_Engine.prototype.loseWebGLContext = function () {\n        this.canvas.loseWebGLContext();\n    };\n\n    /**\n     * Returns true if the given node type is currently loaded (ie. load not required)\n     * @param type\n     */\n    SceneJS_Engine.prototype.hasNodeType = function (type) {\n        return !!SceneJS_NodeFactory.nodeTypes[type];\n    };\n\n    /**\n     * Creates a node subtree from JSON. The root node will an orphan.\n     */\n    SceneJS_Engine.prototype.createNode = function (json) {\n\n        this._doDestroyNodes(); // Do buffered destroys now to avoid potential ID clashes\n\n        json.type = json.type || \"node\";\n\n        var core = this._coreFactory.getCore(json.type, json.coreId); // Create or share a core\n        var node = this._nodeFactory.getNode(this, json, core);\n        var nodes = json.nodes;\n\n        if (nodes) {\n            var nodeType = SceneJS_NodeFactory.nodeTypes[node.type];\n            var fromPlugin = (!!nodeType && !!nodeType.prototype._fromPlugin);\n            if (!fromPlugin) {\n                for (var i = 0, len = nodes.length; i < len; i++) {\n                    var childNode = this.createNode(nodes[i]);\n                    node.addNode(childNode);\n                }\n            }\n        }\n\n        return node;\n    };\n\n    /**\n     * Performs pending node destructions. When destroyed, each node and its core is released back to the\n     * node and core pools for reuse, respectively.\n     */\n    SceneJS_Engine.prototype._doDestroyNodes = function () {\n        var node;\n        while (this._numNodesToDestroy > 0) {\n            --this._numNodesToDestroy;\n            node = this._nodesToDestroy[this._numNodesToDestroy];\n            this._nodesToDestroy[this._numNodesToDestroy] = null; // Don't retain the node\n            node._doDestroy();\n            this._coreFactory.putCore(node._core);    // Release state core for reuse\n            this._nodeFactory.putNode(node);         // Release node for reuse\n        }\n    };\n\n    /**\n     * Finds the node with the given ID in this engine's scene graph\n     * @return {SceneJS.Node} The node if found, else null\n     */\n    SceneJS_Engine.prototype.findNode = function (nodeId) {\n        return this._nodeFactory.nodes.items[nodeId];\n    };\n\n    /** Finds nodes in this engine's scene graph that have nodes IDs matching the given regular expression\n     * @param {String} nodeIdRegex Regular expression to match on node IDs\n     * @return {[SceneJS.Node]} Array of nodes whose IDs match the given regex\n     */\n    SceneJS_Engine.prototype.findNodes = function (nodeIdRegex) {\n\n        var regex = new RegExp(nodeIdRegex);\n        var nodes = [];\n        var nodeMap = this._nodeFactory.nodes.items;\n\n        for (var nodeId in nodeMap) {\n            if (nodeMap.hasOwnProperty(nodeId)) {\n\n                if (regex.test(nodeId)) {\n                    nodes.push(nodeMap[nodeId]);\n                }\n            }\n        }\n\n        return nodes;\n    };\n\n    /**\n     * Tests whether a core of the given ID exists for the given node type\n     * @param {String} type Node type\n     * @param {String} coreId\n     * @returns Boolean\n     */\n    SceneJS_Engine.prototype.hasCore = function (type, coreId) {\n        return this._coreFactory.hasCore(type, coreId);\n    };\n\n    /**\n     * Schedules the given subtree of this engine's {@link SceneJS.Scene} for recompilation\n     *\n     * @param {SceneJS.Node} node Root node of the subtree to recompile\n     */\n    SceneJS_Engine.prototype.branchDirty = function (node) {\n\n        if (this.sceneDirty) {\n            return; // Whole scene will recompile anyway\n        }\n\n        /* Dealing with some weirdness with the embedded window and iframe / window fascism.\n         */\n        if (node == window) {\n            return;\n        }\n\n        node.branchDirty = true;\n        node.dirty = true;\n\n        for (var n = node.parent; n && !(n.dirty || n.branchDirty); n = n.parent) { // Flag path down to this node\n            n.dirty = true;\n        }\n\n        this._sceneBranchesDirty = true;\n    };\n\n    /**\n     * Renders a single frame. Does any pending scene compilations or draw graph updates first.\n     * Ordinarily the frame is rendered only if compilations or draw graph updates were performed,\n     * but may be forced to render the frame regardless.\n     *\n     * @param {*} params Rendering parameters\n     * @param {Boolean} params.clear True to clear the display first (default)\n     */\n    SceneJS_Engine.prototype.render = function (params) {\n\n        var rendered = false;\n\n        if (this._willRender() || (params && params.force)) {\n\n            var time = Date.now();\n\n            var force = params && params.force;\n            var custom = params && params.custom;\n\n            // Render the scene once for each pass\n            for (var i = 0; i < this._numPasses; i++) {\n\n                // Notify that render is upcoming\n                this.scene.publish(\"rendering\", {\n                    pass: i\n                });\n\n                // Compile scene graph to display graph, if necessary\n                this.compile();\n\n                // Render display graph\n                // Clear buffers only on first frame\n                this.display.prepareScene();\n                this.display.render({\n                    pass: i,\n                    clear: this._clearEachPass || i == 0,\n                    force: force,\n                    custom: custom,\n                    opaqueOnly: params && params.opaqueOnly\n                });\n\n                // Notify that render completed\n                this.scene.publish(\"rendered\", {\n                    sceneId: this.id,\n                    time: time,\n                    pass: i\n                });\n\n                rendered = true;\n            }\n        }\n\n        return rendered;\n    };\n\n    /**\n     * Performs a pick on this engine and returns a hit record containing at least the name of the picked\n     * scene object (as configured by SceneJS.Name nodes) and the canvas pick coordinates. Ordinarily, picking\n     * is the simple GPU color-name mapped method, but this method can instead perform a ray-intersect pick\n     * when the 'rayPick' flag is set on the options parameter for this method. For that mode, this method will\n     * also find the intersection point on the picked object's near surface with a ray cast from the eye that passes\n     * through the mouse position on the projection plane.\n     *\n     * @param params Pick options\n     * @param params.canvasPos Canvas coordinates\n     * @param params.rayPick Performs additional ray-intersect pick when true\n     * @param params.regionPick Performs additional region-intersect pick when true\n     * @returns The pick record\n     */\n    SceneJS_Engine.prototype.pick = function (params) {\n\n        // Do any pending scene compilations\n        if (this._willRender()) {\n            this.compile();\n        }\n\n        var hit = this.display.pick({\n            pickTriangle: params ? params.rayPick : false,\n            pickRegion: params ? params.regionPick : false,\n            canvasPos: params.canvasPos,\n            origin: params.origin,\n            direction: params.direction\n        });\n\n        return hit;\n    };\n\n    /**\n     * Reads colors of pixels from the last rendered frame.\n     */\n    SceneJS_Engine.prototype.readPixels = function (entries, size, opaqueOnly) {\n\n        // Do any pending scene compilations\n        if (this._willRender()) {\n            this.compile();\n        }\n\n        return this.display.readPixels(entries, size, opaqueOnly);\n    };\n\n    /**\n     * Returns true if view needs refreshing from scene\n     * @returns {Boolean}\n     * @private\n     */\n    SceneJS_Engine.prototype._willRender = function () {\n        SceneJS_events.fireEvent(SceneJS_events.RENDER);\n\n        return (this.display.imageDirty // Frame buffer needs redraw\n        || this.display.objectListDirty // Draw list needs to be rebuilt\n        || this._sceneBranchesDirty // One or more branches in scene graph need (re)compilation\n        || this.sceneDirty); // Whole scene needs recompilation\n    };\n\n    /**\n     * Prevent engine from compiling the scene graph\n     */\n    SceneJS_Engine.prototype.pauseCompilation = function () {\n        this._compilationPaused = true;\n    };\n\n    /**\n     * Resume compilation of scene graph\n     */\n    SceneJS_Engine.prototype.resumeCompilation = function () {\n        this._compilationPaused = false;\n    };\n\n    /**\n     * Performs any pending scene compilations or display rebuilds\n     */\n    SceneJS_Engine.prototype.compile = function () {\n        if (this._compilationPaused) {\n            return;\n        }\n\n        if (this._sceneBranchesDirty || this.sceneDirty) { // Need scene graph compilation\n            this._sceneBranchesDirty = false;\n            SceneJS_events.fireEvent(SceneJS_events.SCENE_COMPILING, {  // Notify compilation support start\n                engine: this                                            // Compilation support modules get ready\n            });\n            var startTime = SceneJS.timer.now();\n            this.scene._compileNodes(); // Begin depth-first compilation descent into scene sub-nodes\n            this.stats.load.sceneGraphCompilation += SceneJS.timer.now() - startTime;\n            this.sceneDirty = false;\n        }\n        this._doDestroyNodes(); // Garbage collect destroyed nodes - node destructions set imageDirty true\n    };\n\n    /**\n     * Destroys a node within this engine's {@link SceneJS.Scene}\n     *\n     * @param {SceneJS.Node} node Node to destroy\n     */\n    SceneJS_Engine.prototype.destroyNode = function (node) {\n\n        /* The node is actually scheduled for lazy destruction within the next invocation of #_tryCompile\n         */\n        this._nodesToDestroy[this._numNodesToDestroy++] = node;\n\n        /* Stop tracking node's status\n         */\n        var nodeStatus = this.sceneStatus.nodes[node.id];\n\n        if (nodeStatus) {\n            this.sceneStatus.numTasks -= nodeStatus.numTasks;\n            delete this.sceneStatus.nodes[node.id];\n        }\n    };\n\n    /**\n     * Destroys this engine\n     */\n    SceneJS_Engine.prototype.destroy = function () {\n        this.destroyed = true;\n    };\n\n})();\n\n;/**\n * Backend module that provides single point through which exceptions may be raised\n *\n * @class SceneJS_error\n * @private\n */\n\n(function () {\n    \"use strict\";\n\n    var SceneJS_error = window.SceneJS_error = new (function() {\n\n        var handler = undefined;\n        var bufferedFatalError = undefined;\n\n        this.setFatalErrorHandler = function(_handler) {\n            handler = _handler;\n            if (bufferedFatalError !== undefined) {\n                handler(bufferedFatalError);\n            }\n        }\n\n        this.fatalError = function(code, message) {\n            if (typeof code == \"string\") {\n                message = code;\n                code = SceneJS.errors.ERROR;\n            }\n            var error = {\n                errorName: SceneJS.errors._getErrorName(code) || \"ERROR\",\n                code: code,\n                messageFromCaller: message,\n                stackTrace: Human.utils.getStackTrace(),\n            };\n\n            if (handler !== undefined) {\n                handler(error);\n            } else {\n                bufferedFatalError = error;\n            }\n        };\n    })();\n\n    (function() {\n        SceneJS.errors = {};\n\n        var n = 0;\n        SceneJS.errors.ERROR = n++;\n        SceneJS.errors.INVALID_FRAMEBUFFER = n++;\n        SceneJS.errors.WEBGL_NOT_SUPPORTED = n++;\n        SceneJS.errors.WEBGL_CONTEXT_LOST = n++;\n        SceneJS.errors.NODE_CONFIG_EXPECTED = n++;\n        SceneJS.errors.ILLEGAL_NODE_CONFIG = n++;\n        SceneJS.errors.SHADER_COMPILATION_FAILURE = n++;\n        SceneJS.errors.SHADER_LINK_FAILURE = n++;\n        SceneJS.errors.CANVAS_NOT_FOUND = n++;\n        SceneJS.errors.OUT_OF_VRAM = n++;\n        SceneJS.errors.WEBGL_UNSUPPORTED_NODE_CONFIG = n++;\n        SceneJS.errors.NODE_NOT_FOUND = n++;\n        SceneJS.errors.NODE_ILLEGAL_STATE = n++;\n        SceneJS.errors.ID_CLASH = n++;\n    })();\n\n    SceneJS.errors._getErrorName = function(code) {\n        for (var key in SceneJS.errors) {\n            if (SceneJS.errors.hasOwnProperty(key) && SceneJS.errors[key] == code) {\n                return key;\n            }\n        }\n        return null;\n    };\n\n\n})();\n;/**\n * @class Manages logging\n *  @private\n */\n\n(function() {\n    \"use strict\";\n\n    SceneJS.log = new (function() {\n\n        var activeSceneId;\n        var funcs = null;\n        var queues = {};\n        var indent = 0;\n        var indentStr = \"\";\n\n        SceneJS_events.addListener(\n                SceneJS_events.SCENE_COMPILING, // Set default logging for scene root\n                function(params) {\n                    activeSceneId = params.engine.id;\n                });\n\n        SceneJS_events.addListener(\n                SceneJS_events.RESET,\n                function() {\n                    queues = {};\n                    funcs = null;\n                    activeSceneId = null;\n                },\n                100000);  // Really low priority - must be reset last\n\n        this._setIndent = function(_indent) {\n            indent = _indent;\n            var indentArray = [];\n            for (var i = 0; i < indent; i++) {\n                indentArray.push(\"----\");\n            }\n            indentStr = indentArray.join(\"\");\n        };\n\n        this.error = function(msg) {\n            this._log(\"error\", msg);\n        };\n\n        this.warn = function(msg) {\n            this._log(\"warn\", msg);\n        };\n\n        this.info = function(msg) {\n            this._log(\"info\", msg);\n        };\n\n        this.debug = function(msg) {\n            this._log(\"debug\", msg);\n        };\n\n        this.setFuncs = function(l) {\n            if (l) {\n                funcs = l;\n                for (var channel in queues) {\n                    this._flush(channel);\n                }\n            }\n        };\n\n        this._flush = function(channel) {\n            var queue = queues[channel];\n            if (queue) {\n                var func = funcs ? funcs[channel] : null;\n                if (func) {\n                    for (var i = 0; i < queue.length; i++) {\n                        func(queue[i]);\n                    }\n                    queues[channel] = [];\n                }\n            }\n        };\n\n        this._log = function(channel, message) {\n            if (SceneJS._isArray(message)) {\n                for (var i = 0; i < message.length; i++) {\n                    this.__log(channel, message[i]);\n                }\n            } else {\n                this.__log(channel, message);\n            }\n        };\n\n        this.__log = function(channel, message) {\n            message = indentStr + message;\n\n            if (funcs && funcs[channel]) {\n                funcs[channel](message);\n\n            } else if (console && console[channel]) {\n                console[channel](message);\n            }\n        };\n\n        this.getFuncs = function() {\n            return funcs;\n        };\n\n    })();\n})();\n\n\n;(function () {\n    \"use strict\";\n    \n    /*\n     * Optimizations made based on glMatrix by Brandon Jones\n     */\n\n    /*\n     * Copyright (c) 2010 Brandon Jones\n     *\n     * This software is provided 'as-is', without any express or implied\n     * warranty. In no event will the authors be held liable for any damages\n     * arising from the use of this software.\n     *\n     * Permission is granted to anyone to use this software for any purpose,\n     * including commercial applications, and to alter it and redistribute it\n     * freely, subject to the following restrictions:\n     *\n     *    1. The origin of this software must not be misrepresented; you must not\n     *    claim that you wrote the original software. If you use this software\n     *    in a product, an acknowledgment in the product documentation would be\n     *    appreciated but is not required.\n     *\n     *    2. Altered source versions must be plainly marked as such, and must not\n     *    be misrepresented as being the original software.\n     *\n     *    3. This notice may not be removed or altered from any source\n     *    distribution.\n     */\n\n\n    // Some temporary vars to help avoid garbage collection\n\n    var tempMat1 = mat4.create();\n    var tempMat2 = mat4.create();\n    var tempVec2 = vec2.create();\n    var tempVec3 = vec3.create();\n    var tempVec3b = vec3.create();\n    var tempVec3c = vec3.create();\n    var tempVec3d = vec3.create();\n    var tempVec3e = vec3.create();\n    var tempVec3f = vec3.create();\n    var tempVec3g = vec3.create();\n    var tempVec3h = vec3.create();\n    var tempVec4 = vec4.create();\n\n    if (Math.log2) {\n        window.SceneJS_math_log2 = Math.log2;\n    } else {\n        window.SceneJS_math_log2 = function (x) {\n            return Math.round(Math.log(x) * Math.LOG2E);\n        };\n    }\n\n    window.SceneJS_math_isPOT = function (x) {\n        return (x & (x - 1)) == 0;\n    };\n\n    /** @private */\n    window.SceneJS_math_cross3Vec4 = function (u, v) {\n        var u0 = u[0], u1 = u[1], u2 = u[2];\n        var v0 = v[0], v1 = v[1], v2 = v[2];\n        return [\n            u1 * v2 - u2 * v1,\n            u2 * v0 - u0 * v2,\n            u0 * v1 - u1 * v0,\n            0.0];\n    };\n\n    /** @private */\n    window.SceneJS_math_setCellMat4 = function (m, row, col, s) {\n        m[row + col * 4] = s;\n    };\n\n    /**\n     * Default lookat properties - eye at 0,0,1, looking at 0,0,0, up vector pointing up Y-axis\n     */\n    window.SceneJS_math_LOOKAT_OBJ = {\n        eye: {x: 0, y: 0, z: 10.0},\n        look: {x: 0, y: 0, z: 0.0},\n        up: {x: 0, y: 1, z: 0.0}\n    };\n\n    /**\n     * Default lookat properties in array form - eye at 0,0,1, looking at 0,0,0, up vector pointing up Y-axis\n     */\n    window.SceneJS_math_LOOKAT_ARRAYS = {\n        eye: [0, 0, 10.0],\n        look: [0, 0, 0.0],\n        up: [0, 1, 0.0]\n    };\n\n    /**\n     * Default orthographic projection properties\n     */\n    window.SceneJS_math_ORTHO_OBJ = {\n        left: -1.0,\n        right: 1.0,\n        bottom: -1.0,\n        near: 0.1,\n        top: 1.0,\n        far: 5000.0\n    };\n\n    window.SceneJS_math_identityQuaternion = function () {\n        return [0.0, 0.0, 0.0, 1.0];\n    };\n\n    window.SceneJS_math_angleAxisQuaternion = function (x, y, z, degrees) {\n        var angleRad = (degrees / 180.0) * Math.PI;\n        var halfAngle = angleRad / 2.0;\n        var fsin = Math.sin(halfAngle);\n        return [\n            fsin * x,\n            fsin * y,\n            fsin * z,\n            Math.cos(halfAngle)\n        ];\n    };\n\n    window.SceneJS_math_mulQuaternions = function (p, q) {\n        var p0 = p[0], p1 = p[1], p2 = p[2], p3 = p[3];\n        var q0 = q[0], q1 = q[1], q2 = q[2], q3 = q[3];\n        return [\n            p3 * q0 + p0 * q3 + p1 * q2 - p2 * q1,\n            p3 * q1 + p1 * q3 + p2 * q0 - p0 * q2,\n            p3 * q2 + p2 * q3 + p0 * q1 - p1 * q0,\n            p3 * q3 - p0 * q0 - p1 * q1 - p2 * q2\n        ];\n    };\n\n    window.SceneJS_math_newMat4FromQuaternion = function (q) {\n        var q0 = q[0], q1 = q[1], q2 = q[2], q3 = q[3];\n        var tx = 2.0 * q0;\n        var ty = 2.0 * q1;\n        var tz = 2.0 * q2;\n        var twx = tx * q3;\n        var twy = ty * q3;\n        var twz = tz * q3;\n        var txx = tx * q0;\n        var txy = ty * q0;\n        var txz = tz * q0;\n        var tyy = ty * q1;\n        var tyz = tz * q1;\n        var tzz = tz * q2;\n        var m = mat4.create();\n        SceneJS_math_setCellMat4(m, 0, 0, 1.0 - (tyy + tzz));\n        SceneJS_math_setCellMat4(m, 0, 1, txy - twz);\n        SceneJS_math_setCellMat4(m, 0, 2, txz + twy);\n        SceneJS_math_setCellMat4(m, 1, 0, txy + twz);\n        SceneJS_math_setCellMat4(m, 1, 1, 1.0 - (txx + tzz));\n        SceneJS_math_setCellMat4(m, 1, 2, tyz - twx);\n        SceneJS_math_setCellMat4(m, 2, 0, txz - twy);\n        SceneJS_math_setCellMat4(m, 2, 1, tyz + twx);\n        SceneJS_math_setCellMat4(m, 2, 2, 1.0 - (txx + tyy));\n        return m;\n    };\n\n    window.SceneJS_math_normalizeQuaternion = function (q) {\n        var len = vec4.length([q[0], q[1], q[2], q[3]]);\n        return [q[0] / len, q[1] / len, q[2] / len, q[3] / len];\n    };\n\n    window.SceneJS_math_angleAxisFromQuaternion = function (q) {\n        q = SceneJS_math_normalizeQuaternion(q);\n        var q3 = q[3];\n        var angle = 2 * Math.acos(q3);\n        var s = Math.sqrt(1 - q3 * q3);\n        if (s < 0.001) { // test to avoid divide by zero, s is always positive due to sqrt\n            return {\n                x: q[0],\n                y: q[1],\n                z: q[2],\n                angle: angle * 57.295779579\n            };\n        } else {\n            return {\n                x: q[0] / s,\n                y: q[1] / s,\n                z: q[2] / s,\n                angle: angle * 57.295779579\n            };\n        }\n    };\n\n    window.SceneJS_math_decompressPosition  = function(out, position, decodeMatrix) {\n        out[0] = position[0] * decodeMatrix[0]  + decodeMatrix[12];\n        out[1] = position[1] * decodeMatrix[5]  + decodeMatrix[13];\n        out[2] = position[2] * decodeMatrix[10] + decodeMatrix[14];\n    };\n\n    window.SceneJS_math_decompressUV  = function(out, uv, decodeMatrix) {\n        out[0] = uv[0] * decodeMatrix[0]  + decodeMatrix[6];\n        out[1] = uv[1] * decodeMatrix[4]  + decodeMatrix[7];\n    };\n\n    /**\n     * Builds vertex and index arrays needed by color-indexed triangle picking.\n     *\n     * @method getPickPrimitives\n     * @static\n     * @param {Array of Number} positions One-dimensional flattened array of positions.\n     * @param {Array of Number} indices One-dimensional flattened array of indices.\n     * @returns {*} Object containing the arrays, created by this method or reused from 'pickTris' parameter.\n     */\n    window.SceneJS_math_getPickPrimitives = function (positions, indices, compressed) {\n\n        var pickPositions;\n        var numIndices;\n        var hasIndices = !!indices;\n\n        if (hasIndices) {\n            numIndices = indices.length;\n            pickPositions = compressed ? new Uint16Array(numIndices * 3) : new Float32Array(numIndices * 3);\n        } else {\n            numIndices = positions.length / 3;\n            pickPositions = positions;\n        }\n        var pickColors = new Uint8Array(numIndices * 4);\n\n        var primIndex = 0;\n\n        // Positions array index\n        var vi;\n\n        // Picking positions array index\n        var pvi;\n\n        // Picking color array index\n        var pci;\n\n        // Triangle indices\n\n        var i;\n        var r;\n        var g;\n        var b;\n        var a;\n\n        for (var location = 0; location < numIndices; location += 3) {\n\n            pvi = location * 3;\n            pci = location * 4;\n\n            // Primitive-indexed triangle pick color\n\n            a = (primIndex >> 24 & 0xFF);\n            b = (primIndex >> 16 & 0xFF);\n            g = (primIndex >> 8 & 0xFF);\n            r = (primIndex & 0xFF);\n\n            // A\n\n            if (hasIndices) {\n                i = indices[location];\n                vi = i * 3;\n\n                pickPositions[pvi]     = positions[vi];\n                pickPositions[pvi + 1] = positions[vi + 1];\n                pickPositions[pvi + 2] = positions[vi + 2];\n            }\n\n            pickColors[pci]     = r;\n            pickColors[pci + 1] = g;\n            pickColors[pci + 2] = b;\n            pickColors[pci + 3] = a;\n\n\n            // B\n\n            if (hasIndices) {\n                i = indices[location + 1];\n                vi = i * 3;\n\n                pickPositions[pvi + 3] = positions[vi];\n                pickPositions[pvi + 4] = positions[vi + 1];\n                pickPositions[pvi + 5] = positions[vi + 2];\n            }\n\n            pickColors[pci + 4] = r;\n            pickColors[pci + 5] = g;\n            pickColors[pci + 6] = b;\n            pickColors[pci + 7] = a;\n\n\n            // C\n\n            if (hasIndices) {\n                i = indices[location + 2];\n                vi = i * 3;\n\n                pickPositions[pvi + 6] = positions[vi];\n                pickPositions[pvi + 7] = positions[vi + 1];\n                pickPositions[pvi + 8] = positions[vi + 2];\n            }\n\n            pickColors[pci + 8]  = r;\n            pickColors[pci + 9]  = g;\n            pickColors[pci + 10] = b;\n            pickColors[pci + 11] = a;\n\n            primIndex++;\n        }\n\n        return {\n            positions: pickPositions,\n            colors: pickColors\n        };\n    };\n\n    /**\n     * Builds vertex array needed by color-indexed triangle picking (for morph target positions).\n     *\n     * @method getPickPositions\n     * @static\n     * @param {Array of Number} positions One-dimensional flattened array of positions.\n     * @param {Array of Number} indices One-dimensional flattened array of indices.\n     * @returns {Array of Number} The pick positions.\n     */\n    window.SceneJS_math_getPickPositions = function (positions, indices) {\n\n        var numIndices = indices.length;\n\n        var pickPositions = new Float32Array(numIndices * 3);\n        var pvi, vi;\n        var i;\n\n        for (var location = 0; location < numIndices; location++) {\n\n            // Picking position array index\n            pvi = location * 3;\n\n            i = indices[location];\n\n            // Drawing position index\n            vi = i * 3;\n\n            pickPositions[pvi]     = positions[vi];\n            pickPositions[pvi + 1] = positions[vi + 1];\n            pickPositions[pvi + 2] = positions[vi + 2];\n\n        }\n\n        return pickPositions;\n    };\n\n    /**\n     * Builds color arrays needed by color-indexed triangle picking.\n     *\n     * @method getPickPrimitives\n     * @static\n     * @param {Array of Number} indices One-dimensional flattened array of indices.\n     * @returns {Array of Number} The pick colors\n     */\n    window.SceneJS_math_getPickColors = function (indices) {\n\n        var numIndices = indices.length;\n\n        var pickColors = new Uint8Array(numIndices * 4);\n\n        var primIndex = 0;\n        var pci;\n\n        // Triangle indices\n\n        var r;\n        var g;\n        var b;\n        var a;\n\n        for (var location = 0; location < numIndices; location += 3) {\n\n            // Picking color array index;\n            pci = location * 4;\n\n            // Primitive-indexed triangle pick color\n\n            a = (primIndex >> 24 & 0xFF);\n            b = (primIndex >> 16 & 0xFF);\n            g = (primIndex >> 8 & 0xFF);\n            r = (primIndex & 0xFF);\n\n            // A\n\n            pickColors[pci]     = r;\n            pickColors[pci + 1] = g;\n            pickColors[pci + 2] = b;\n            pickColors[pci + 3] = a;\n\n            // B\n\n            pickColors[pci + 4] = r;\n            pickColors[pci + 5] = g;\n            pickColors[pci + 6] = b;\n            pickColors[pci + 7] = a;\n\n            // C\n\n            pickColors[pci + 8]  = r;\n            pickColors[pci + 9]  = g;\n            pickColors[pci + 10] = b;\n            pickColors[pci + 11] = a;\n\n            primIndex++;\n        }\n\n        return pickColors;\n    };\n\n    /**\n     * Finds the intersection of a 3D ray with a plane defined by 3 points.\n     *\n     * @method rayPlaneIntersect\n     * @static\n     * @param {Array of Number} origin Ray origin.\n     * @param {Array of Number} dir Ray direction.\n     * @param {Array of Number} a First point on plane.\n     * @param {Array of Number} b Second point on plane.\n     * @param {Array of Number} c Third point on plane.\n     * @param {Array of Number} [isect] Intersection point.\n     * @returns {Array of Number} The intersection point.\n     */\n    window.SceneJS_math_rayPlaneIntersect = function (origin, dir, a, b, c, isect) {\n\n        isect = isect || vec3.create();\n        dir = vec3.normalize(tempVec3, dir);\n\n        var edge1 = vec3.subtract(tempVec3b, b, a);\n        var edge2 = vec3.subtract(tempVec3c, c, a);\n\n        var n = vec3.cross(tempVec3d, edge1, edge2);\n        vec3.normalize(n, n);\n\n        var d = -vec3.dot(a, n);\n\n        var t = -(vec3.dot(origin, n) + d) / vec3.dot(dir, n);\n        isect[0] = origin[0] + t * dir[0];\n        isect[1] = origin[1] + t * dir[1];\n        isect[2] = origin[2] + t * dir[2];\n\n        return isect;\n    };\n\n\n    /**\n     * Gets barycentric coordinates from cartesian coordinates within a triangle.\n     *\n     * @method cartesianToBaryCentric\n     * @static\n     * @param {Array of Number} cartesian Cartesian coordinates.\n     * @param {Array of Number} a First triangle vertex.\n     * @param {Array of Number} b Second triangle vertex.\n     * @param {Array of Number} c Third triangle vertex.\n     * @param {Array of Number} [bary] The barycentric coordinates.\n     * @returns {Array of Number} The barycentric coordinates, or null if the triangle was invalid.\n     * @returns {*}\n     */\n\n    window.SceneJS_math_cartesianToBarycentric = function (cartesian, a, b, c, dest) {\n\n        var v0 = vec3.subtract(tempVec3, c, a);\n        var v1 = vec3.subtract(tempVec3b, b, a);\n        var v2 = vec3.subtract(tempVec3c, cartesian, a);\n\n        var dot00 = vec3.dot(v0, v0);\n        var dot01 = vec3.dot(v0, v1);\n        var dot02 = vec3.dot(v0, v2);\n        var dot11 = vec3.dot(v1, v1);\n        var dot12 = vec3.dot(v1, v2);\n\n        var denom = ( dot00 * dot11 - dot01 * dot01 );\n\n        // Colinear or singular triangle\n\n        if (denom === 0) {\n\n            // Arbitrary location outside of triangle\n\n            return null;\n        }\n\n        var invDenom = 1 / denom;\n\n        var u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n        var v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n\n        dest[0] = 1 - u - v;\n        dest[1] = v;\n        dest[2] = u;\n\n        return dest;\n    };\n\n    /**\n     * Gets local-space coordinates in Euclidean coordnates from barycentric coordinate on arbitrary triangle\n     *\n     * @method barycentricToCartesian\n     * @static\n     * @param {Array of Number} barycentric Barycentric coordiantes\n     * @param {Array of Number} a First triangle vertex\n     * @param {Array of Number} b Second triangle vertex\n     * @param {Array of Number} c Third triangle vertex\n     * @param {Array of Number} cartesian output coordiantes\n     */\n    window.SceneJS_math_barycentricToCartesian = function(barycentric, a, b, c, cartesian) {\n        var u = barycentric[0];\n        var v = barycentric[1];\n        var w = barycentric[2];\n        cartesian[0] = a[0] * u + b[0] * v + c[0] * w;\n        cartesian[1] = a[1] * u + b[1] * v + c[1] * w;\n        cartesian[2] = a[2] * u + b[2] * v + c[2] * w;\n        return cartesian;\n    }\n\n    /**\n     * Gets cartesian coordinates from barycentric coordinates within a triangle.\n     *\n     * @method barycentricToCartesian\n     * @static\n     * @param {Array of Number} bary The barycentric coordinate.\n     * @param {Array of Number} a First triangle vertex.\n     * @param {Array of Number} b Second triangle vertex.\n     * @param {Array of Number} c Third triangle vertex.\n     * @param {Array of Number} [cartesian] Cartesian coordinates.\n     * @returns {Array of Number} The cartesian coordinates, or null if the triangle was invalid.\n     * @returns {*}\n     */\n    window.SceneJS_math_barycentricToCartesian = function (barycentric, a, b, c, cartesian) {\n\n        cartesian = cartesian || vec3.create();\n\n        var u = barycentric[0];\n        var v = barycentric[1];\n        var w = barycentric[2];\n\n        cartesian[0] = a[0] * u + b[0] * v + c[0] * w;\n        cartesian[1] = a[1] * u + b[1] * v + c[1] * w;\n        cartesian[2] = a[2] * u + b[2] * v + c[2] * w;\n\n        return cartesian;\n    };\n\n\n    /**\n     * Builds vertex tangent vectors from positions, UVs and indices\n     *\n     * @method buildTangents\n     * @static\n     * @param {Array of Number} positions One-dimensional flattened array of positions.\n     * @param {Array of Number} indices One-dimensional flattened array of indices.\n     * @param {Array of Number} uv One-dimensional flattened array of UV coordinates.\n     * @returns {Array of Number} One-dimensional flattened array of tangents.\n     */\n\n    window.SceneJS_math_buildTangents = function (positions, indices, uv, decodePositions, decodeUV) {\n\n        var tangents = new Float32Array(positions.length);\n\n        // The vertex arrays needs to be calculated\n        // before the calculation of the tangents\n\n        var MIN_DEN = 1e-3;\n\n        var v0 = vec3.create();\n        var v1 = vec3.create();\n        var v2 = vec3.create();\n\n        var uv0 = vec2.create();\n        var uv1 = vec2.create();\n        var uv2 = vec2.create();\n\n        var numVertices = indices ? indices.length : positions.length / 3;\n\n        for (var location = 0; location < numVertices; location += 3) {\n\n            // Recontructing each vertex and UV coordinate into the respective vectors\n\n            var index = indices ? indices[location] : location;\n\n            v0.set(positions.subarray(index * 3, index * 3 + 3));\n            uv0.set(uv.subarray(index * 2, index * 2 + 2));\n\n            index = indices ? indices[location + 1] : location + 1;\n\n            v1.set(positions.subarray(index * 3, index * 3 + 3));\n            uv1.set(uv.subarray(index * 2, index * 2 + 2));\n\n            index = indices ? indices[location + 2] : location + 2;\n\n            v2.set(positions.subarray(index * 3, index * 3 + 3));\n            uv2.set(uv.subarray(index * 2, index * 2 + 2));\n\n            if (decodePositions) {\n                SceneJS_math_decompressPosition(v0, v0, decodePositions);\n                SceneJS_math_decompressPosition(v1, v1, decodePositions);\n                SceneJS_math_decompressPosition(v2, v2, decodePositions);\n            }\n\n            if (decodeUV) {\n                SceneJS_math_decompressUV(uv0, uv0, decodeUV);\n                SceneJS_math_decompressUV(uv1, uv1, decodeUV);\n                SceneJS_math_decompressUV(uv2, uv2, decodeUV);\n            }\n\n            var deltaPos1 = vec3.subtract(tempVec3, v1, v0);\n            var deltaPos2 = vec3.subtract(tempVec3b, v2, v0);\n\n            var deltaUV1 = vec2.subtract(tempVec3c, uv1, uv0);\n            var deltaUV2 = vec2.subtract(tempVec3d, uv2, uv0);\n\n            var den = deltaUV1[0] * deltaUV2[1] - deltaUV1[1] * deltaUV2[0];\n\n            if (den === 0) {\n                den = MIN_DEN;\n            }\n\n            var r = 1 / den;\n\n            var tangent = vec3.scale(tempVec3f,\n                vec3.subtract(tempVec3g,\n                    vec3.scale(tempVec3e, deltaPos1, deltaUV2[1]),\n                    vec3.scale(tempVec3f, deltaPos2, deltaUV1[1])\n                ),\n                r\n            );\n\n            // Average the value of the vectors outs\n            for (var v = 0; v < 3; v++) {\n                var addTo = indices ? indices[location + v] * 3 : (location + v) * 3;\n\n                tangents[addTo]     += tangent[0];\n                tangents[addTo + 1] += tangent[1];\n                tangents[addTo + 2] += tangent[2];\n            }\n        }\n\n        return tangents;\n    };\n\n    window.SceneJS_math_octDecodeVec2 = function(oct, result) {\n        var x = oct[0];\n        var y = oct[1];\n        x = (2 * x + 1) / 255;\n        y = (2 * y + 1) / 255;\n\n        var z = 1 - Math.abs(x) - Math.abs(y);\n\n        if (z < 0) {\n            x = (1 - Math.abs(y)) * (x >= 0 ? 1 : -1);\n            y = (1 - Math.abs(x)) * (y >= 0 ? 1 : -1);\n        }\n\n        var length = Math.sqrt(x * x + y * y + z * z);\n\n        result[0] = x / length;\n        result[1] = y / length;\n        result[2] = z / length;\n\n        return result;\n    };\n\n})();\n;(function () {\n    \"use strict\";\n\n    SceneJS._webgl = {\n        enumMap: {\n            funcAdd: \"FUNC_ADD\",\n            funcSubtract: \"FUNC_SUBTRACT\",\n            funcReverseSubtract: \"FUNC_REVERSE_SUBTRACT\",\n            zero: \"ZERO\",\n            one: \"ONE\",\n            srcColor: \"SRC_COLOR\",\n            oneMinusSrcColor: \"ONE_MINUS_SRC_COLOR\",\n            dstColor: \"DST_COLOR\",\n            oneMinusDstColor: \"ONE_MINUS_DST_COLOR\",\n            srcAlpha: \"SRC_ALPHA\",\n            oneMinusSrcAlpha: \"ONE_MINUS_SRC_ALPHA\",\n            dstAlpha: \"DST_ALPHA\",\n            oneMinusDstAlpha: \"ONE_MINUS_DST_ALPHA\",\n            contantColor: \"CONSTANT_COLOR\",\n            oneMinusConstantColor: \"ONE_MINUS_CONSTANT_COLOR\",\n            constantAlpha: \"CONSTANT_ALPHA\",\n            oneMinusConstantAlpha: \"ONE_MINUS_CONSTANT_ALPHA\",\n            srcAlphaSaturate: \"SRC_ALPHA_SATURATE\",\n            front: \"FRONT\",\n            back: \"BACK\",\n            frontAndBack: \"FRONT_AND_BACK\",\n            never: \"NEVER\",\n            less: \"LESS\",\n            equal: \"EQUAL\",\n            lequal: \"LEQUAL\",\n            greater: \"GREATER\",\n            notequal: \"NOTEQUAL\",\n            gequal: \"GEQUAL\",\n            always: \"ALWAYS\",\n            cw: \"CW\",\n            ccw: \"CCW\",\n            linear: \"LINEAR\",\n            nearest: \"NEAREST\",\n            linearMipMapNearest: \"LINEAR_MIPMAP_NEAREST\",\n            nearestMipMapNearest: \"NEAREST_MIPMAP_NEAREST\",\n            nearestMipMapLinear: \"NEAREST_MIPMAP_LINEAR\",\n            linearMipMapLinear: \"LINEAR_MIPMAP_LINEAR\",\n            repeat: \"REPEAT\",\n            clampToEdge: \"CLAMP_TO_EDGE\",\n            mirroredRepeat: \"MIRRORED_REPEAT\",\n            alpha: \"ALPHA\",\n            rgb: \"RGB\",\n            rgba: \"RGBA\",\n            luminance: \"LUMINANCE\",\n            luminanceAlpha: \"LUMINANCE_ALPHA\",\n            textureBinding2D: \"TEXTURE_BINDING_2D\",\n            textureBindingCubeMap: \"TEXTURE_BINDING_CUBE_MAP\",\n            compareRToTexture: \"COMPARE_R_TO_TEXTURE\", // Hardware Shadowing Z-depth,\n            unsignedByte: \"UNSIGNED_BYTE\"\n        }\n    };\n})();\n\n\n;/** Buffer for vertices and indices\n *\n * @private\n * @param gl  WebGL gl\n * @param type     Eg. ARRAY_BUFFER, ELEMENT_ARRAY_BUFFER\n * @param values   WebGL array wrapper\n * @param numItems Count of items in array wrapper\n * @param itemSize Size of each item\n * @param usage    Eg. STATIC_DRAW\n */\n\n\n(function () {\n    \"use strict\";\n\n    SceneJS._webgl.ArrayBuffer = function (gl, type, values, numItems, itemSize, usage, normalize) {\n\n        /**\n         * True when this buffer is allocated and ready to go\n         * @type {boolean}\n         */\n        this.allocated = false;\n\n        switch (values.constructor) {\n\n            case Uint8Array:\n                this.itemType = gl.UNSIGNED_BYTE;\n                this.itemByteSize = 1;\n                break;\n\n            case Int8Array:\n                this.itemType = gl.BYTE;\n                this.itemByteSize = 1;\n                break;\n\n            case  Uint16Array:\n                this.itemType = gl.UNSIGNED_SHORT;\n                this.itemByteSize = 2;\n                break;\n\n            case  Int16Array:\n                this.itemType = gl.SHORT;\n                this.itemByteSize = 2;\n                break;\n\n            case Uint32Array:\n                this.itemType = gl.UNSIGNED_INT;\n                this.itemByteSize = 4;\n                break;\n\n            case Int32Array:\n                this.itemType = gl.INT;\n                this.itemByteSize = 4;\n                break;\n\n            default:\n                this.itemType = gl.FLOAT;\n                this.itemByteSize = 4;\n        }\n\n        this.gl = gl;\n        this.type = type;\n        this.numItems = numItems;\n        this.itemSize = itemSize;\n        this.usage = usage;\n        this.normalize = !!normalize;\n        this._allocate(values, numItems);\n    };\n\n    /**\n     * Allocates this buffer\n     *\n     * @param values\n     * @param numItems\n     * @private\n     */\n    SceneJS._webgl.ArrayBuffer.prototype._allocate = function (values, numItems) {\n        this.allocated = false;\n        this.handle = this.gl.createBuffer();\n        if (!this.handle) {\n            SceneJS_error.fatalError(SceneJS.errors.OUT_OF_VRAM, \"Failed to allocate WebGL ArrayBuffer\");\n        }\n        if (this.handle) {\n            this.gl.bindBuffer(this.type, this.handle);\n            this.gl.bufferData(this.type, values, this.usage);\n            this.gl.bindBuffer(this.type, null);\n            this.numItems = numItems;\n            this.length = values.length;\n            this.allocated = true;\n        }\n    };\n\n    /**\n     * Updates values within this buffer, reallocating if needed\n     *\n     * @param data\n     */\n    SceneJS._webgl.ArrayBuffer.prototype.setData = function (data) {\n        if (!this.allocated) {\n            return;\n        }\n\n        this.gl.bindBuffer(this.type, this.handle);\n\n        if (data.length > this.length) {\n            // Needs reallocation\n            this.gl.bufferData(this.type, data, this.usage);\n            this.length = data.length;\n        } else {\n            // No reallocation needed\n            this.gl.bufferSubData(this.type, 0, data);\n        }\n        this.gl.bindBuffer(this.type, null);\n        this.numItems = data.length;\n    };\n\n    /**\n     * Unbinds this buffer on WebGL\n     */\n    SceneJS._webgl.ArrayBuffer.prototype.unbind = function () {\n        if (!this.allocated) {\n            return;\n        }\n        this.gl.bindBuffer(this.type, null);\n    };\n\n    /**\n     * Destroys this buffer\n     */\n    SceneJS._webgl.ArrayBuffer.prototype.destroy = function () {\n        if (!this.allocated) {\n            return;\n        }\n        this.gl.deleteBuffer(this.handle);\n        this.handle = null;\n        this.allocated = false;\n    };\n\n\n    SceneJS._webgl.ArrayBuffer.prototype.bind = function () {\n        if (!this.allocated) {\n            return;\n        }\n        this.gl.bindBuffer(this.type, this.handle);\n    };\n\n})();\n;\n/** An attribute within a shader\n */\n\n(function() {\n    \"use strict\";\n\n    SceneJS._webgl.Attribute = function (gl, location) {\n        this.gl = gl;\n        this.location = location;\n    };\n\n    SceneJS._webgl.Attribute.prototype.bindArrayBuffer = function (buffer) {\n        if (buffer) {\n            buffer.bind();\n            this.gl.enableVertexAttribArray(this.location);\n            this.gl.vertexAttribPointer(this.location, buffer.itemSize, buffer.itemType, buffer.normalize, 0, 0);   // Vertices are not homogeneous - no w-element\n        }\n    };\n    \n})();\n;(function() {\n    \"use strict\";\n\n    SceneJS._webgl.Framebuffer = function (cfg) {\n\n        /**\n         * True as soon as this buffer is allocated and ready to go\n         */\n        this.allocated = false;\n\n        /**\n         * The canvas, to synch buffer size with when its dimensions change\n         */\n        this.canvas = cfg.canvas;\n\n        /**\n         * WebGL context\n         */\n        this.gl = cfg.canvas.gl;\n\n        // Initialized on touch\n        this.canvasWidth = 0;\n        this.canvasHeight = 0;\n        this.sizeRatio = cfg.sizeRatio || 1;\n\n        if (typeof cfg.colorAttachments === \"number\") {\n            cfg.colorAttachments = new Array(cfg.colorAttachments);\n        }\n\n        var colorAttachments = cfg.colorAttachments || new Array(1);\n        this.numColorAttachments = colorAttachments.length;\n        this.colorAttachments = new Array(this.numColorAttachments);\n        for (var i = 0; i < this.numColorAttachments; ++i) {\n            var attachment = colorAttachments[i] || {};\n            this.colorAttachments[i] = {\n                format: attachment.format !== undefined ? this.gl[attachment.format] : this.gl.RGBA,\n                type: attachment.type !== undefined ? this.gl[attachment.type] : this.gl.UNSIGNED_BYTE,\n                minFilter: attachment.minFilter !== undefined ? this.gl[attachment.minFilter] : this.gl.LINEAR,\n                magFilter: attachment.magFilter !== undefined ? this.gl[attachment.magFilter] : this.gl.LINEAR,\n                wrapS: attachment.wrapS !== undefined ? this.gl[attachment.wrapS] : this.gl.CLAMP_TO_EDGE,\n                wrapT: attachment.wrapT !== undefined ? this.gl[attachment.wrapT] : this.gl.CLAMP_TO_EDGE\n            };       \n        }\n\n        this.sharedDepthBuffer = cfg.sharedDepthBuffer || null;\n        this.hasDepthAttachment = cfg.depthAttachment !== false;\n\n        this.useDepthTextures = SceneJS.WEBGL_INFO.depthTexturesSupported;\n        this.drawBuffers = this.gl.getExtension(\"WEBGL_draw_buffers\");\n\n        // [GH] - BrightSign boards don't support this\n        if (window.localContentOnly) {\n            this.useDepthTextures = false;\n        }\n\n        /**\n         * Buffer resources, set up in #_touch\n         */\n        this.buf = null;\n\n        /**\n         * True while this buffer is bound\n         * @type {boolean}\n         */\n        this.bound = false;\n    };\n\n    /**\n     * Called after WebGL context is restored.\n     */\n    SceneJS._webgl.Framebuffer.prototype.webglRestored = function (_gl) {\n        this.gl = _gl;\n        this.buf = null;\n        this.allocated = false;\n        this.bound = false;\n    };\n\n    /**\n     * Binds this buffer\n     */\n    SceneJS._webgl.Framebuffer.prototype.bind = function () {\n        this._touch();\n        if (this.bound) {\n            return;\n        }\n        this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, this.buf.framebuf);\n        this.gl.viewport(0, 0, this.buf.width, this.buf.height);\n        this.bound = true;\n    };\n\n    SceneJS._webgl.Framebuffer.prototype._touch = function () {\n        var canvasWidth = this.gl.drawingBufferWidth;\n        var canvasHeight = this.gl.drawingBufferHeight;\n        if (this.buf) { // Currently have a buffer\n            if (this.canvasWidth == canvasWidth && this.canvasHeight == canvasHeight) { // Canvas size unchanged, buffer still good\n                return;\n            } else { // Buffer needs reallocation for new canvas size\n                for (var i = 0; i < this.numColorAttachments; ++i) {\n                    this.gl.deleteTexture(this.buf.colorTargets[i]);\n                }\n                if (!this.sharedDepthBuffer) {\n                    if (this.useDepthTextures) {\n                        this.gl.deleteTexture(this.buf.depthTarget);\n                    } else {\n                        this.gl.deleteRenderbuffer(this.buf.depthTarget);\n                    }\n                }\n                this.gl.deleteFramebuffer(this.buf.framebuf);\n            }\n        }\n\n        this.canvasWidth = canvasWidth;\n        this.canvasHeight = canvasHeight;\n\n        var width = Math.floor(canvasWidth * this.sizeRatio);\n        var height = Math.floor(canvasHeight * this.sizeRatio);\n\n        this.buf = {\n            framebuf: this.gl.createFramebuffer(),\n            colorTargets: new Array(this.numColorAttachments),\n            width: width,\n            height: height\n        };\n\n        if (this.sharedDepthBuffer) {\n            this.buf.depthTarget = this.sharedDepthBuffer.getDepthTarget().texture();\n        } else {\n            this.buf.depthTarget = this.useDepthTextures ? this.gl.createTexture() : this.gl.createRenderbuffer();\n        }\n\n        this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, this.buf.framebuf);\n\n        for (var i = 0; i < this.numColorAttachments; ++i) {\n            this.buf.colorTargets[i] = this.gl.createTexture();\n            this._setTexture(this.buf.colorTargets[i], width, height, this.colorAttachments[i]);\n            this.gl.framebufferTexture2D(this.gl.FRAMEBUFFER, this.gl.COLOR_ATTACHMENT0 + i, this.gl.TEXTURE_2D, this.buf.colorTargets[i], 0);\n        }\n\n        if (this.drawBuffers) {\n            var attachments = new Array(this.numColorAttachments);\n            for (var i = 0; i < this.numColorAttachments; ++i) {\n                attachments[i] = this.gl.COLOR_ATTACHMENT0 + i;\n            }\n            this.drawBuffers.drawBuffersWEBGL(attachments)\n        }\n\n        if (this.hasDepthAttachment) {\n            if (this.useDepthTextures) {\n                if (!this.sharedDepthBuffer) {\n                    this._setTexture(this.buf.depthTarget, width, height, {\n                        format: this.gl.DEPTH_COMPONENT, \n                        type: this.gl.UNSIGNED_INT\n                    });\n                }\n                this.gl.framebufferTexture2D(this.gl.FRAMEBUFFER, this.gl.DEPTH_ATTACHMENT, this.gl.TEXTURE_2D, this.buf.depthTarget, 0);\n            } else {\n                if (!this.sharedDepthBuffer) {\n                    this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.buf.depthTarget);\n                    this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.DEPTH_COMPONENT16, width, height);\n                }\n                this.gl.framebufferRenderbuffer(this.gl.FRAMEBUFFER, this.gl.DEPTH_ATTACHMENT, this.gl.RENDERBUFFER, this.buf.depthTarget);\n                this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, null);\n            }\n        }\n        \n        this.gl.bindTexture(this.gl.TEXTURE_2D, null);\n        this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, null);\n\n        // Verify framebuffer is OK\n        this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, this.buf.framebuf);\n\n        if (!this.gl.isFramebuffer(this.buf.framebuf)) {\n            SceneJS_error.fatalError(SceneJS.errors.INVALID_FRAMEBUFFER, \"Invalid framebuffer\");\n        }\n\n        var status = this.gl.checkFramebufferStatus(this.gl.FRAMEBUFFER);\n\n        switch (status) {\n\n            case this.gl.FRAMEBUFFER_COMPLETE:\n                break;\n\n            case this.gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n                SceneJS_error.fatalError(SceneJS.errors.ERROR, \"Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_ATTACHMENT\");\n\n            case this.gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n                SceneJS_error.fatalError(SceneJS.errors.ERROR, \"Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT\");\n\n            case this.gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n                SceneJS_error.fatalError(SceneJS.errors.ERROR, \"Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_DIMENSIONS\");\n\n            case this.gl.FRAMEBUFFER_UNSUPPORTED:\n                SceneJS_error.fatalError(SceneJS.errors.ERROR, \"Incomplete framebuffer: FRAMEBUFFER_UNSUPPORTED\");\n\n            default:\n                SceneJS_error.fatalError(SceneJS.errors.ERROR, \"Incomplete framebuffer: \" + status);\n        }\n\n        this.bound = false;\n    };\n\n    SceneJS._webgl.Framebuffer.prototype._setTexture = function (texture, width, height, options) {\n        var format = options.format !== undefined ? options.format : this.gl.RGBA; \n        var type = options.type !== undefined ? options.type : this.gl.UNSIGNED_BYTE; \n        var minFilter = options.minFilter !== undefined ? options.minFilter : this.gl.LINEAR; \n        var magFilter = options.magFilter !== undefined ? options.magFilter : this.gl.LINEAR; \n        var wrapS = options.wrapS !== undefined ? options.wrapS : this.gl.CLAMP_TO_EDGE; \n        var wrapT = options.wrapT !== undefined ? options.wrapT : this.gl.CLAMP_TO_EDGE;\n\n        this.gl.bindTexture(this.gl.TEXTURE_2D, texture);\n\n        try {\n            // Do it the way the spec requires\n            this.gl.texImage2D(this.gl.TEXTURE_2D, 0, format, width, height, 0, format, type, null);\n        } catch (exception) {\n            // Workaround for what appears to be a Minefield bug.\n            var textureStorage = new WebGLUnsignedByteArray(width * height * 3);\n            this.gl.texImage2D(this.gl.TEXTURE_2D, 0, format, width, height, 0, format, type, textureStorage);\n        }\n\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, minFilter);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, magFilter);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, wrapS);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, wrapT);\n    };\n\n    /**\n     * Clears this renderbuffer\n     */\n    SceneJS._webgl.Framebuffer.prototype.clear = function () {\n        if (!this.bound) {\n            throw \"Render buffer not bound\";\n        }\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n        this.gl.disable(this.gl.BLEND);\n    };\n\n    /**\n     * Reads buffer pixel at given coordinates\n     */\n    SceneJS._webgl.Framebuffer.prototype.read = function (pickX, pickY) {\n        var x = pickX;\n        var y = this.canvas.canvas.height - pickY;\n        var pix = new Uint8Array(4);\n        this.gl.readPixels(x, y, 1, 1, this.gl.RGBA, this.gl.UNSIGNED_BYTE, pix);\n        return pix;\n    };\n\n    /**\n     * Unbinds this renderbuffer\n     */\n    SceneJS._webgl.Framebuffer.prototype.unbind = function () {\n        this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, null);\n        this.gl.viewport(0, 0, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);\n        this.bound = false;\n    };\n\n    /** Returns the texture\n     */\n    SceneJS._webgl.Framebuffer.prototype.getColorTarget = function (i) {\n        var self = this;\n        i = i || 0;\n        return {\n            bind: function (unit) {\n                if (self.buf && self.buf.colorTargets[i]) {\n                    self.gl.activeTexture(self.gl.TEXTURE0 + unit);\n                    self.gl.bindTexture(self.gl.TEXTURE_2D, self.buf.colorTargets[i]);\n                    return true;\n                }\n                return false;\n            },\n            unbind: function (unit) {\n                if (self.buf && self.buf.colorTargets[i]) {\n                    self.gl.activeTexture(self.gl.TEXTURE0 + unit);\n                    self.gl.bindTexture(self.gl.TEXTURE_2D, null);\n                }\n            },\n            texture: function () {\n                return self.buf.colorTargets[i];\n            }\n        };\n    };\n\n    SceneJS._webgl.Framebuffer.prototype.getDepthTarget = function () {\n        var self = this;\n        if (this.sharedDepthBuffer) {\n            return this.sharedDepthBuffer.getDepthTarget();\n        }\n        return {\n            bind: function (unit) {\n                if (self.buf && self.buf.depthTarget) {\n                    self.gl.activeTexture(self.gl.TEXTURE0 + unit);\n                    self.gl.bindTexture(self.gl.TEXTURE_2D, self.buf.depthTarget);\n                    return true;\n                }\n                return false;\n            },\n            unbind: function (unit) {\n                if (self.buf && self.buf.depthTarget) {\n                    self.gl.activeTexture(self.gl.TEXTURE0 + unit);\n                    self.gl.bindTexture(self.gl.TEXTURE_2D, null);\n                }\n            },\n            texture: function () {\n                return self.buf.depthTarget;\n            }\n        };\n    };\n\n    /** Destroys this buffer\n     */\n    SceneJS._webgl.Framebuffer.prototype.destroy = function () {\n        if (this.buf) {\n            for (var i = 0; i < this.numColorAttachments; ++i) {\n                this.gl.deleteTexture(this.buf.colorTargets[i]);\n            }\n            this.gl.deleteFramebuffer(this.buf.framebuf);\n            if (!this.sharedDepthBuffer) {\n                if (this.useDepthTextures) {\n                    this.gl.deleteTexture(this.buf.depthTarget);\n                } else {\n                    this.gl.deleteRenderbuffer(this.buf.depthTarget);\n                }\n            }\n            this.buf = null;\n            this.bound = false;\n        }\n    };\n\n})();\n\n;/**\n * @class Wrapper for a WebGL program\n *\n * @param hash SceneJS-managed ID for program\n * @param {*} stats Collects scene statistics\n * @param gl WebGL gl\n * @param vertexSources Source codes for vertex shaders\n * @param fragmentSources Source codes for fragment shaders\n * @param logging Program and shaders will write to logging's debug channel as they compile and link\n */\n\n(function() {\n    \"use strict\";\n\n    SceneJS._webgl.Program = function (stats, gl, hash, vertexSource, fragmentSource) {\n\n        this.stats = stats;\n        this.hash = hash;\n        this.useCount = 0;\n\n        /**\n         * True as soon as this program is allocated and ready to go\n         * @type {boolean}\n         */\n        this.allocated = false;\n\n        this.gl = null;\n\n        this._uniforms = {};\n        this._samplers = {};\n        this._attributes = {};\n\n        // Create shaders from sources\n        this.vertexSource = vertexSource;\n        this.fragmentSource = fragmentSource;\n        this._vertexShader = null;\n        this._fragmentShader = null;\n\n        this.build(gl);\n    };\n\n    SceneJS._webgl.Program.prototype.build = function (gl) {\n        \n        var a, i, u, u_name, location, shader;\n\n        var startTime = SceneJS.timer.now();\n        var stats = this.stats;\n\n        this.gl = gl;\n\n        this._vertexShader = new SceneJS._webgl.Shader(stats, gl, gl.VERTEX_SHADER, this.vertexSource);\n        this._fragmentShader = new SceneJS._webgl.Shader(stats, gl, gl.FRAGMENT_SHADER, this.fragmentSource);\n\n        // Create program, attach shaders, link and validate program\n\n        this.handle = gl.createProgram();\n\n        if (this.handle) {\n\n            gl.attachShader(this.handle, this._vertexShader.handle);\n            gl.attachShader(this.handle, this._fragmentShader.handle);\n\n            gl.linkProgram(this.handle);\n\n            if (!gl.getProgramParameter(this.handle, gl.LINK_STATUS)) {\n                SceneJS.log.error(\"Shader program failed to link: \" + gl.getProgramInfoLog(this.handle));\n            }\n\n            // Discover uniforms and samplers\n\n            var numUniforms = gl.getProgramParameter(this.handle, gl.ACTIVE_UNIFORMS);\n            var valueIndex = 0;\n            for (i = 0; i < numUniforms; ++i) {\n                u = gl.getActiveUniform(this.handle, i);\n                if (u) {\n                    u_name = u.name;\n                    if (u_name[u_name.length - 1] == \"\\u0000\") {\n                        u_name = u_name.substr(0, u_name.length - 1);\n                    }\n                    location = gl.getUniformLocation(this.handle, u_name);\n                    if ((u.type == gl.SAMPLER_2D) || (u.type == gl.SAMPLER_CUBE) || (u.type == 35682)) {\n                        this._samplers[u_name] = location;\n                    } else {\n                        this._uniforms[u_name] = new SceneJS._webgl.Uniform(gl, u.type, u.size, location);\n                        ++valueIndex;\n                    }\n                }\n            }\n\n            // Discover attributes\n\n            var numAttribs = gl.getProgramParameter(this.handle, gl.ACTIVE_ATTRIBUTES);\n            for (i = 0; i < numAttribs; i++) {\n                a = gl.getActiveAttrib(this.handle, i);\n                if (a) {\n                    location = gl.getAttribLocation(this.handle, a.name);\n                    this._attributes[a.name] = new SceneJS._webgl.Attribute(gl, location);\n                }\n            }\n\n            stats.load.programCompilation += SceneJS.timer.now() - startTime;\n\n            // Program allocated\n            this.allocated = true;\n\n        } // if (this.handle)\n\n    };\n\n    SceneJS._webgl.Program.prototype.bind = function () {\n        if (!this.allocated) {\n            return;\n        }\n        this.gl.useProgram(this.handle);\n    };\n\n    SceneJS._webgl.Program.prototype.getUniformLocation = function (name) {\n        if (!this.allocated) {\n            return;\n        }\n        var u = this._uniforms[name];\n        if (u) {\n            return u.getLocation();\n        }\n    };\n\n    SceneJS._webgl.Program.prototype.getUniform = function (name) {\n        if (!this.allocated) {\n            return;\n        }\n        var u = this._uniforms[name];\n        if (u) {\n            return u;\n        }\n    };\n\n    SceneJS._webgl.Program.prototype.getAttribute = function (name) {\n        if (!this.allocated) {\n            return;\n        }\n        var attr = this._attributes[name];\n        if (attr) {\n            return attr;\n        }\n    };\n\n    SceneJS._webgl.Program.prototype.bindArrayBuffer = function (name, buffer) {\n        if (!this.allocated) {\n            return;\n        }\n        var attr = this._attributes[name];\n        if (attr) {\n            attr.bindArrayBuffer(buffer);\n        }\n    };\n\n    SceneJS._webgl.Program.prototype.bindTexture = function (name, texture, unit) {\n        if (!this.allocated) {\n            return false;\n        }\n        var sampler = this._samplers[name];\n\n        if (!sampler) {\n            return false;\n        }\n\n        if (!texture.bind(unit)) {\n            return false;\n        }\n\n        this.gl.uniform1i(sampler, unit);\n\n        return true;\n    };\n\n    SceneJS._webgl.Program.prototype.destroy = function () {\n        if (!this.allocated) {\n            return;\n        }\n        this.gl.deleteProgram(this.handle);\n        this.gl.deleteShader(this._vertexShader.handle);\n        this.gl.deleteShader(this._fragmentShader.handle);\n        this.handle = null;\n        this._attributes = null;\n        this._uniforms = null;\n        this._samplers = null;\n        this.allocated = false;\n    };\n\n\n    SceneJS._webgl.Program.prototype.setUniform = function (name, value) {\n        if (!this.allocated) {\n            return;\n        }\n        var u = this._uniforms[name];\n        if (u) {\n            u.setValue(value);\n        }\n    };\n\n})(); \n;/**\n * A vertex/fragment shader in a program\n *\n * @private\n * @param gl WebGL gl\n * @param gl.VERTEX_SHADER | gl.FRAGMENT_SHADER\n * @param source Source code for shader\n * @param logging Shader will write logging's debug channel as it compiles\n */\n\n(function() {\n    \"use strict\";\n\n    SceneJS._webgl.Shader = function (stats, gl, type, source) {\n\n        /**\n         * True as soon as this shader is allocated and ready to go\n         * @type {boolean}\n         */\n        this.allocated = false;\n\n        var startTime = SceneJS.timer.now();\n\n        this.handle = gl.createShader(type);\n\n        if (!this.handle) {\n            SceneJS_error.fatalError(SceneJS.errors.OUT_OF_VRAM, \"Failed to create WebGL shader\");\n        }\n\n        gl.shaderSource(this.handle, source);\n        gl.compileShader(this.handle);\n\n        this.valid = (gl.getShaderParameter(this.handle, gl.COMPILE_STATUS) != 0);\n\n        if (!this.valid) {\n\n            if (!gl.isContextLost()) { // Handled explicitely elsewhere, so wont rehandle here\n\n                SceneJS.log.error(\"Shader program failed to compile: \" + gl.getShaderInfoLog(this.handle));\n                SceneJS.log.error(\"Shader source:\");\n                var lines = source.split('\\n');\n                for (var j = 0; j < lines.length; j++) {\n                    SceneJS.log.error((j + 1) + \": \" + lines[j]);\n                }\n\n                SceneJS_error.fatalError(\n                    SceneJS.errors.SHADER_COMPILATION_FAILURE, \"Shader program failed to compile\");\n            }\n        }\n\n        stats.load.shaderCompilation += SceneJS.timer.now() - startTime;\n\n        this.allocated = true;\n    };\n\n})();\n;\n(function() {\n    \"use strict\";\n\n    SceneJS._webgl.Texture2D = function (gl, cfg) {\n\n        try {\n            this._init(gl, cfg);\n        } catch (e) {\n            SceneJS_error.fatalError(SceneJS.errors.OUT_OF_VRAM, \"Failed to create texture: \" + e.message || e);\n        }\n\n    };\n\n    SceneJS._webgl.Texture2D.prototype._init = function (gl, cfg) {\n        /**\n         * True as soon as this texture is allocated and ready to go\n         * @type {boolean}\n         */\n        this.allocated = false;\n        this.gl = gl;\n\n        this.target = cfg.target || gl.TEXTURE_2D;\n        this.minFilter = cfg.minFilter;\n        this.magFilter = cfg.magFilter;\n        this.wrapS = cfg.wrapS;\n        this.wrapT = cfg.wrapT;\n        this.update = cfg.update;  // For dynamically-sourcing textures (ie movies etc)\n        this.texture = cfg.texture;\n        this.compressed = !!cfg.compressed;\n        this.format = gl.RGBA;\n        this.isDepth = false;\n        this.depthMode = 0;\n        this.depthCompareMode = 0;\n        this.depthCompareFunc = 0;\n\n        gl.bindTexture(this.target, this.texture);\n\n        if (cfg.minFilter) {\n            gl.texParameteri(this.target, gl.TEXTURE_MIN_FILTER, cfg.minFilter);\n        }\n\n        if (cfg.magFilter) {\n            gl.texParameteri(this.target, gl.TEXTURE_MAG_FILTER, cfg.magFilter);\n        }\n\n        if (cfg.wrapS) {\n            gl.texParameteri(this.target, gl.TEXTURE_WRAP_S, cfg.wrapS);\n        }\n\n        if (cfg.wrapT) {\n            gl.texParameteri(this.target, gl.TEXTURE_WRAP_T, cfg.wrapT);\n        }\n\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, cfg.flipY !== false);\n\n        if (!this.compressed &&\n             (this.minFilter == gl.NEAREST_MIPMAP_NEAREST ||\n              this.minFilter == gl.LINEAR_MIPMAP_NEAREST ||\n              this.minFilter == gl.NEAREST_MIPMAP_LINEAR ||\n              this.minFilter == gl.LINEAR_MIPMAP_LINEAR)) {\n            gl.generateMipmap(this.target);\n        }\n\n        gl.bindTexture(this.target, null);\n\n        this.allocated = true;\n    }\n\n    SceneJS._webgl.Texture2D.prototype.bind = function (unit) {\n        if (!this.allocated) {\n            return;\n        }\n\n        var gl = this.gl;\n\n        if (this.texture) {\n            gl.activeTexture(gl[\"TEXTURE\" + unit]);\n            gl.bindTexture(this.target, this.texture);\n            if (this.update) {\n                this.update(gl);\n            }\n            return true;\n        }\n        return false;\n    };\n\n    SceneJS._webgl.Texture2D.prototype.unbind = function (unit) {\n        if (!this.allocated) {\n            return;\n        }\n\n        var gl = this.gl;\n\n        if (this.texture) {\n            gl.activeTexture(gl[\"TEXTURE\" + unit]);\n            gl.bindTexture(this.target, null);\n        }\n    };\n\n    SceneJS._webgl.Texture2D.prototype.destroy = function () {\n        if (!this.allocated) {\n            return;\n        }\n\n        var gl = this.gl;\n\n        if (this.texture) {\n            gl.deleteTexture(this.texture);\n            this.texture = null;\n        }\n    };\n\n})();\n\n;(function() {\n    \"use strict\";\n\n    var SET_VALUE_FUNCS = (function() {\n        var FUNCS = {};\n        var canvas = document.createElement(\"canvas\");\n        var gl = canvas.getContext(\"webgl\") || canvas.getContext(\"experimental-webgl\");\n\n        if(!gl) {\n            return FUNCS;\n        }\n\n        FUNCS[gl.BOOL] = function (v) {\n            var cached = true;\n            var i, len;\n\n            if (this.length === 1) {\n                if (this.value[0] !== v) {\n                    cached = false;\n                } \n            } else {\n                for (i = 0, len = this.length; i < len; ++i) {\n                    if (this.value[i] !== v[i]) {\n                        cached = false;\n                        break;\n                    }\n                }\n            }\n            \n\n            if (cached) {\n                return;\n            }\n            \n            if (this.length === 1) {\n                this.value[0] = v;\n            } else {\n                while (i < len) {\n                    this.value[i] = v[i];\n                    ++i;\n                }\n            }\n            \n            this.gl.uniform1fv(this.location, this.value);\n        };\n\n        FUNCS[gl.BOOL_VEC2] = function (v) {\n            var cached = true;\n            var i, len;\n            for (i = 0, len = this.length; i < len; ++i) {\n                if (this.value[i] !== v[i]) {\n                    cached = false;\n                    break;\n                }\n            }\n\n            if (cached) {\n                return;\n            }\n            \n            while (i < len) {\n                this.value[i] = v[i];\n                ++i;\n            }\n\n            this.gl.uniform2iv(this.location, v);\n        };\n\n        FUNCS[gl.BOOL_VEC3] = function (v) {\n            var cached = true;\n            var i, len;\n            for (i = 0, len = this.length; i < len; ++i) {\n                if (this.value[i] !== v[i]) {\n                    cached = false;\n                    break;\n                }\n            }\n\n            if (cached) {\n                return;\n            }\n            \n            while (i < len) {\n                this.value[i] = v[i];\n                ++i;\n            }\n\n            this.gl.uniform3iv(this.location, v);\n        };\n\n        FUNCS[gl.BOOL_VEC4] = function (v) {\n            var cached = true;\n            var i, len;\n            for (i = 0, len = this.length; i < len; ++i) {\n                if (this.value[i] !== v[i]) {\n                    cached = false;\n                    break;\n                }\n            }\n\n            if (cached) {\n                return;\n            }\n            \n            while (i < len) {\n                this.value[i] = v[i];\n                ++i;\n            }\n\n            this.gl.uniform4iv(this.location, v);\n        };\n\n        FUNCS[gl.INT_VEC2] = function (v) {\n            var cached = true;\n            for (var i = 0, len = this.length; i < len; ++i) {\n                if (this.value[i] !== v[i]) {\n                    cached = false;\n                    break;\n                }\n            }\n\n            if (cached) {\n                return;\n            }\n            \n            this.value.set(v);\n            this.gl.uniform2iv(this.location, v);\n        };\n\n        FUNCS[gl.INT_VEC3] = function (v) {\n            var cached = true;\n            for (var i = 0, len = this.length; i < len; ++i) {\n                if (this.value[i] !== v[i]) {\n                    cached = false;\n                    break;\n                }\n            }\n\n            if (cached) {\n                return;\n            }\n            \n            this.value.set(v);\n            this.gl.uniform3iv(this.location, v);\n        };\n\n        FUNCS[gl.INT_VEC4] = function (v) {\n            var cached = true;\n            for (var i = 0, len = this.length; i < len; ++i) {\n                if (this.value[i] !== v[i]) {\n                    cached = false;\n                    break;\n                }\n            }\n\n            if (cached) {\n                return;\n            }\n            \n            this.value.set(v);\n            this.gl.uniform4iv(this.location, v);\n        };\n\n        FUNCS[gl.FLOAT] = function (v) {\n            var cached = true;\n\n            if (this.length === 1) {\n                if (this.value[0] !== v) {\n                    cached = false;\n                } \n            } else {\n                for (var i = 0, len = this.length; i < len; ++i) {\n                    if (this.value[i] !== v[i]) {\n                        cached = false;\n                        break;\n                    }\n                }\n            }\n            \n\n            if (cached) {\n                return;\n            }\n            \n            if (this.length === 1) {\n                this.value[0] = v;\n            } else {\n                this.value.set(v);\n            }\n            \n            this.gl.uniform1fv(this.location, this.value);\n        };\n\n        FUNCS[gl.FLOAT_VEC2] = function (v) {\n            var cached = true;\n            for (var i = 0, len = this.length; i < len; ++i) {\n                if (this.value[i] !== v[i]) {\n                    cached = false;\n                    break;\n                }\n            }\n\n            if (cached) {\n                return;\n            }\n            \n            this.value.set(v);\n            this.gl.uniform2fv(this.location, v);\n        };\n\n        FUNCS[gl.FLOAT_VEC3] = function (v) {\n            var cached = true;\n            for (var i = 0, len = this.length; i < len; ++i) {\n                if (this.value[i] !== v[i]) {\n                    cached = false;\n                    break;\n                }\n            }\n\n            if (cached) {\n                return;\n            }\n            \n            this.value.set(v);\n            this.gl.uniform3fv(this.location, v);\n        };\n\n        FUNCS[gl.FLOAT_VEC4] = function (v) {\n            var cached = true;\n            for (var i = 0, len = this.length; i < len; ++i) {\n                if (this.value[i] !== v[i]) {\n                    cached = false;\n                    break;\n                }\n            }\n\n            if (cached) {\n                return;\n            }\n            \n            this.value.set(v);\n            this.gl.uniform4fv(this.location, v);\n        };\n\n        FUNCS[gl.FLOAT_MAT2] = function (v) {\n            var cached = true;\n            for (var i = 0, len = this.length; i < len; ++i) {\n                if (this.value[i] !== v[i]) {\n                    cached = false;\n                    break;\n                }\n            }\n\n            if (cached) {\n                return;\n            }\n\n            this.value.set(v);\n            this.gl.uniformMatrix2fv(this.location, false, v);\n        };\n\n\n        FUNCS[gl.FLOAT_MAT3] =function (v) {\n            var cached = true;\n            for (var i = 0, len = this.length; i < len; ++i) {\n                if (this.value[i] !== v[i]) {\n                    cached = false;\n                    break;\n                }\n            }\n\n            if (cached) {\n                return;\n            }\n\n            this.value.set(v);\n            this.gl.uniformMatrix3fv(this.location, false, v);\n        };\n\n        FUNCS[gl.FLOAT_MAT4] =function (v) {\n            var cached = true;\n            for (var i = 0, len = this.length; i < len; ++i) {\n                if (this.value[i] !== v[i]) {\n                    cached = false;\n                    break;\n                }\n            }\n\n            if (cached) {\n                return;\n            }\n\n            this.value.set(v);\n            this.gl.uniformMatrix4fv(this.location, false, v);\n        };\n\n        return FUNCS;\n    })();\n\n    SceneJS._webgl.Uniform = function (gl, type, size, location) {\n        // This is just an integer key for caching the uniform's value, more efficient than caching by name.\n        this.gl = gl;\n        this.location = location;\n        this.value = getCache(gl, type, size);\n        this.length = this.value.length;\n        this.setValue = SET_VALUE_FUNCS[type];\n    };\n\n\n    SceneJS._webgl.Uniform.prototype.getLocation = function() {\n        return this.location;\n    };\n\n    function getCache(gl, type, size) {\n        if (type === gl.BOOL) {\n            return new Array(size);\n        } else if (type === gl.BOOL_VEC2) {\n            return new Array(size * 2);\n        } else if (type === gl.BOOL_VEC3) {\n            return new Array(size * 3);\n        } else if (type === gl.BOOL_VEC4) {\n            return new Array(size * 4);\n        } else if (type === gl.INT) {\n            return new Uint32Array(size);\n        } else if (type === gl.INT_VEC2) {\n            return new Uint32Array(size * 2);\n        } else if (type === gl.INT_VEC3) {\n            return new Uint32Array(size * 3);\n        } else if (type === gl.INT_VEC4) {\n            return new Uint32Array(size * 4);\n        } else if (type === gl.FLOAT) {\n            return new Float32Array(size);\n        } else if (type === gl.FLOAT_VEC2) {\n            return new Float32Array(size * 2);\n        } else if (type === gl.FLOAT_VEC3) {\n            return new Float32Array(size * 3);\n        } else if (type === gl.FLOAT_VEC4) {\n            return new Float32Array(size * 4);\n        } else if (type === gl.FLOAT_MAT2) {\n            return new Float32Array(size * 4);\n        } else if (type === gl.FLOAT_MAT3) {\n            return new Float32Array(size * 9);\n        } else if (type === gl.FLOAT_MAT4) {\n            return new Float32Array(size * 16);\n        } else {\n            throw \"Unsupported shader uniform type: \" + type;\n        }\n    }\n})();\n\n\n\n\n\n\n\n\n;/**\n * @class Holds state for one or more {@link SceneJS.Node}s.\n *\n * <p>Each {@link SceneJS.Node} has a state core to hold its state, and the core may be shared by other\n * {@link SceneJS.Nodes}s of the same type.</p>\n *\n * <p>The state held by core is rendered by a {@link SceneJS_Chunk}  \n *\n * @private\n */\n\n(function () {\n    \"use strict\";\n\n    var SceneJS_Core = window.SceneJS_Core = function(type) {\n\n        /**\n         * The state core type, which will be the same value as the type property on the {@link SceneJS.Node}s that use the core\n         * @type String\n         * @see SceneJS.Node#type\n         */\n        this.type = type;\n\n        /**\n         * The state core ID, unique within the scene. This ID may be either a string assigned by the application layer via\n         * scene node configs, or a number that is automatically generated by the {@link SceneJS_CoreFactory} managing\n         * this core instance.\n         * @type String|Number\n         */\n        this.coreId = null;\n\n        /**\n         * Uniquely identifies this state core within a {@link SceneJS_Display}.\n         *\n         * This ID is used by a {@link SceneJS_Display} to reduce redundant state changes when rendering a sequence of cores, \n         * where as a {@link SceneJS_Display} renders a frame it avoids applying consecutive cores that have the\n         * same value for this ID.\n         *\n         * @type Number\n         */\n        this.stateId = null;\n\n        /**\n         * Count of {@link SceneJS.Node} instances this core holds state for\n         */\n        this.useCount = 0;\n    };\n\n})();\n;// accept a single array or separate arguments\nfunction ColorFresnel(args) {\n    // center, edge, centerBias, edgeBias, power\n    var params = [[1,1,1],[1,1,1],1,0,1]; // default\n    if (arguments.length === 5) {\n        params = Array.prototype.slice.call(arguments);\n    } else if (Array.isArray(args)){\n        params = args;\n    }\n    this.isColorFresnel = true;\n    this.center = params[0]; // [number, number, number]\n    this.edge = params[1]; // [number, number, number]\n    this.centerBias = params[2];\n    this.edgeBias = params[3];\n    this.power = params[4];\n}\n\n// use as static function on the prototype\nColorFresnel.prototype.isEqual = function(colorFresnel1, colorFresnel2) {\n    var centerEqual = colorFresnel1.center.reduce(function(equal, channel, idx){\n        return equal && channel === colorFresnel2.center[idx];\n    }, true);\n\n    var edgeEqual = colorFresnel1.edge.reduce(function(equal, channel, idx){\n        return equal && channel === colorFresnel2.edge[idx];\n    }, true);\n\n    var edgeBiasEqual = colorFresnel1.edgeBias === colorFresnel2.edgeBias;\n    var centerBiasEqual = colorFresnel1.centerBias === colorFresnel2.centerBias;\n    var powerEqual = colorFresnel1.power === colorFresnel2.power;\n\n    return centerEqual && edgeEqual && edgeBiasEqual && centerBiasEqual && powerEqual;\n}\n;function ScalarFresnel(args) {\n    // center, edge, centerBias, edgeBias, power\n    var params = [1,1,1,0,1]; // default\n    if (arguments.length === 5) {\n        params = Array.prototype.slice.call(arguments);\n    } else if (Array.isArray(args)){\n        params = args;\n    }\n    this.isScalarFresnel = true;\n    this.center = params[0]; // [number, number, number]\n    this.edge = params[1]; // [number, number, number]\n    this.centerBias = params[2];\n    this.edgeBias = params[3];\n    this.power = params[4];\n}\n\n// use as static function on the prototype\nScalarFresnel.prototype.isEqual = function(fresnel1, fresnel2) {\n    var centerEqual = fresnel1.center === fresnel2.center;\n\n    var edgeEqual = fresnel1.edge == fresnel2.edge;\n\n    var edgeBiasEqual = fresnel1.edgeBias === fresnel2.edgeBias;\n    var centerBiasEqual = fresnel1.centerBias === fresnel2.centerBias;\n    var powerEqual = fresnel1.power === fresnel2.power;\n\n    return centerEqual && edgeEqual && edgeBiasEqual && centerBiasEqual && powerEqual;\n}\n;/**\n * @class Holds state for one or more {@link SceneJS.Node}s.\n *\n * <p>Each {@link SceneJS.Node} has a state core to hold its state, and the core may be shared by other\n * {@link SceneJS.Nodes}s of the same type.</p>\n *\n * <p>The state held by core is rendered by a {@link SceneJS_Chunk}\n *\n * @private\n */\n(function() {\n    \"use strict\";\n    \n    var KD_TREE_MAX_DEPTH = SceneJS.KD_TREE_MAX_DEPTH;\n    var KD_TREE_MIN_TRIANGLES = SceneJS.KD_TREE_MIN_TRIANGLES;\n\n    var SceneJS_GeometryCore = window.SceneJS_GeometryCore = function() {\n\n        /**\n         * The state core type, which will be the same value as the type property on the {@link SceneJS.Node}s that use the core\n         * @type String\n         * @see SceneJS.Node#type\n         */\n        this.type = \"xform\";\n\n        /**\n         * The state core ID, unique within the scene. This ID may be either a string assigned by the application layer via\n         * scene node configs, or a number that is automatically generated by the {@link SceneJS_CoreFactory} managing\n         * this core instance.\n         * @type String|Number\n         */\n        this.coreId = null;\n\n        /**\n         * Uniquely identifies this state core within a {@link SceneJS_Display}.\n         *\n         * This ID is used by a {@link SceneJS_Display} to reduce redundant state changes when rendering a sequence of cores,\n         * where as a {@link SceneJS_Display} renders a frame it avoids applying consecutive cores that have the\n         * same value for this ID.\n         *\n         * @type Number\n         */\n        this.stateId = null;\n\n        this.kdTree = null;\n        this.kdTreeDirty = true;\n    };\n\n    // Lazy-build tangents, only when needed as rendering\n    SceneJS_GeometryCore.prototype.getTangents = function (uvLayerIdx) {\n\n        // We're only allowed one normal map per drawable, but we'll\n        // cache tangents for each UV layer. In practice the cache would\n        // only contain one array of tangents, for the UV layer that\n        // happens to be used for normal mapping.\n\n        if (!this.tangentBufs) {\n            this.tangentBufs = [];\n        }\n        if (this.tangentBufs[uvLayerIdx]) {\n            return this.tangentBufs[uvLayerIdx];\n        }\n        var arrays = this.arrays;\n        var tangents = this.arrays.tangents[uvLayerIdx];\n        var gl = this._engine.canvas.gl;\n        if (!tangents) {\n            // Retaining tangents data after WebGL context recovery\n            if (arrays.positions && arrays.uvs && arrays.uvs[uvLayerIdx]) {\n                tangents = SceneJS_math_buildTangents(arrays.positions, arrays.indices, arrays.uvs[uvLayerIdx],\n                            this.positionDecodeMat, this.compressedUVs && this.uvDecodeMats[uvLayerIdx]); // Build tangents array;\n                this._engine.stats.memory.tangents += tangents.length * tangents.constructor.BYTES_PER_ELEMENT;\n            }\n        }\n        if (tangents) {\n            this.tangentBufs[uvLayerIdx] = new SceneJS._webgl.ArrayBuffer(gl, gl.ARRAY_BUFFER, tangents, tangents.length, 3, gl.STATIC_DRAW);\n            this.arrays.tangents[uvLayerIdx] = true; // Don't need array anymore.\n            return this.tangentBufs[uvLayerIdx];\n        } else {\n            return null;\n        }\n    };\n\n    // Buffers for primitive-pick rendering\n\n    SceneJS_GeometryCore.prototype.getPickPositions = function () {\n        if (this.pickPositionsBuf) {\n            return this.pickPositionsBuf;\n        }\n\n        createPickArrays(this);\n\n        return this.pickPositionsBuf;\n    };\n\n    SceneJS_GeometryCore.prototype.getPickColors = function () {\n        if (this.pickColorsBuf) {\n            return this.pickColorsBuf;\n        }\n\n        createPickArrays(this);\n\n        return this.pickColorsBuf;\n    };\n\n    SceneJS_GeometryCore.prototype.getKdTree = function () {\n        if (!this.kdTree) {\n            this.buildKdTree();\n        }\n        \n        return this.kdTree;\n    };\n\n    // k-d tree nodes have the following structure: \n    //   {\n    //       triangles: [NUMBER, NUMBER, ...],    // Indices of triangles in this leaf node (null if not leaf node)\n    //       left: kdTreeNode,                    // Left subtree (null if leaf node)\n    //       right: kdTreeNode,                   // Right subtree (null if leaf node)\n    //       leaf: BOOLEAN,                       // Is this a leaf node?\n    //       splitDim: 0,                         // Dimension split on at this node (0 = x, 1 = y, 2 = z)\n    //       bb: {                                // Bounding box of triangles in this node and its subtrees.\n    //           min: VEC3,\n    //           max: VEC3\n    //       }\n    //   }\n    // \n    SceneJS_GeometryCore.prototype.buildKdTree = function () {\n        if (!this.kdTreeDirty) {\n            return;\n        }\n\n        var positions = this.arrays.positions;\n        var indices = this.arrays.indices;\n\n        if (!positions) {\n            return;\n        }\n\n        var numTris;\n\n        if (indices) {\n            numTris = indices.length / 3;\n        } else {\n            numTris = positions.length / 9;\n        }\n        var triangles = new Array(numTris);\n        for (var i = 0; i < numTris; ++i) {\n            triangles[i] = i;\n        }\n        this.kdTree = buildKdTreeNode(triangles, indices, positions, this.positionDecodeMat, 0, 0);\n        this.kdTreeDirty = false;\n    };\n\n    function createPickArrays(core) {\n        var gl = core._engine.canvas.gl;\n\n        var pickArrays, pickPositions, pickColors;\n\n        if (core.arrays.positions) {\n            pickArrays = SceneJS_math_getPickPrimitives(core.arrays.positions, core.arrays.indices, core.compressedPositions);\n            pickPositions = pickArrays.positions;\n            pickColors = pickArrays.colors;\n            core.pickPositionsBuf = new SceneJS._webgl.ArrayBuffer(gl, gl.ARRAY_BUFFER, pickPositions, pickPositions.length, 3, gl.STATIC_DRAW);\n            core._engine.stats.memory.pickPositions += pickPositions.length * pickPositions.constructor.BYTES_PER_ELEMENT;\n            core._engine.stats.memory.pickColors += pickColors.length * pickColors.constructor.BYTES_PER_ELEMENT;\n        } else {\n            pickColors = SceneJS_math_getPickColors(core.arrays.indices);\n            core._engine.stats.memory.pickColors += pickColors.length * pickColors.constructor.BYTES_PER_ELEMENT;\n        }\n\n        core.pickColorsBuf = new SceneJS._webgl.ArrayBuffer(gl, gl.ARRAY_BUFFER, pickColors, pickColors.length, 4, gl.STATIC_DRAW, true);\n    }\n\n    var position = vec3.create();\n\n    function buildKdTreeNode(triangles, indices, positions, decompress, dim, depth) {\n        var min = vec3.create();\n        var max = vec3.create();\n\n        var node = {\n            triangles: null,\n            left: null,\n            right: null,\n            bb: {\n                min: min,\n                max: max\n            }\n        };\n\n        min[0] = min[1] = min[2] = Number.POSITIVE_INFINITY;\n        max[0] = max[1] = max[2] = Number.NEGATIVE_INFINITY;\n\n        var t, len;\n        \n        for (t = 0, len = triangles.length; t < len; ++t) {\n            var ii = triangles[t] * 3;\n\n            for (var j = 0; j < 3; ++j) {\n                var pi;\n                if (indices) {\n                    pi = indices[ii + j] * 3;\n                } else {\n                    pi = (ii + j) * 3;\n                }\n                \n                position[0] = positions[pi];\n                position[1] = positions[pi + 1];\n                position[2] = positions[pi + 2];\n\n                if (decompress) {\n                    SceneJS_math_decompressPosition(position, position, decompress);\n                }\n\n                if (position[0] < min[0]) {\n                    min[0] = position[0]\n                } \n\n                if (position[0] > max[0]) {\n                    max[0] = position[0]\n                }\n\n                if (position[1] < min[1]) {\n                    min[1] = position[1]\n                } \n\n                if (position[1] > max[1]) {\n                    max[1] = position[1]\n                }\n\n                if (position[2] < min[2]) {\n                    min[2] = position[2]\n                } \n\n                if (position[2] > max[2]) {\n                    max[2] = position[2]\n                }\n            }\n        }\n\n        if (depth > KD_TREE_MAX_DEPTH) {\n            node.triangles = triangles;\n            return node;\n        }\n\n\n        var mid = (min[dim] + max[dim]) / 2;\n        var left = new Array(triangles.length);\n        var numLeft = 0;\n        var right = new Array(triangles.length);\n        var numRight = 0;\n\n        for (t = 0, len = triangles.length; t < len; ++t) {\n            var ii = triangles[t] * 3;\n\n            var i0, i1, i2;\n            if (indices) {\n                i0 = indices[ii];\n                i1 = indices[ii + 1];\n                i2 = indices[ii + 2];\n            } else {\n                i0 = ii;\n                i1 = ii + 1;\n                i2 = ii + 2;\n            }\n            \n\n            var pi0 = i0 * 3;\n            var pi1 = i1 * 3;\n            var pi2 = i2 * 3;\n\n            var v1 = positions[pi0 + dim];\n            var v2 = positions[pi1 + dim];\n            var v3 = positions[pi2 + dim];\n\n            if (decompress) {\n                var scale = decompress[dim * 5];\n                var translate = decompress[dim + 12]\n                v1 = v1 * scale + translate;\n                v2 = v2 * scale + translate;\n                v3 = v3 * scale + translate;\n            }\n\n            if (v1 <= mid || v2 <= mid || v3 <= mid) {\n                left[numLeft++] = triangles[t];\n            } else {\n                right[numRight++] = triangles[t];\n            }\n        }\n\n        if (numLeft < KD_TREE_MIN_TRIANGLES || numRight < KD_TREE_MIN_TRIANGLES) {\n            node.triangles = triangles;\n            return node;\n        }\n\n        left.length = numLeft;\n        right.length = numRight;\n\n        node.left = buildKdTreeNode(left, indices, positions, decompress, (dim + 1) % 3, depth + 1);\n        node.right = buildKdTreeNode(right, indices, positions, decompress, (dim + 1) % 3, depth + 1);\n\n        return node;\n    }\n\n})();\n;/**\n * @class Holds state for one or more {@link SceneJS.Node}s.\n *\n * <p>Each {@link SceneJS.Node} has a state core to hold its state, and the core may be shared by other\n * {@link SceneJS.Nodes}s of the same type.</p>\n *\n * <p>The state held by core is rendered by a {@link SceneJS_Chunk}\n *\n * @private\n */\n(function () {\n    \"use strict\";\n\n    var FLAGS = SceneJS.PROPERTY_FLAGS;\n    var DEPTH_TEST_FLAGS = SceneJS.DEPTH_TEST_FLAGS;\n\n    var SceneJS_PropertiesCore = window.SceneJS_PropertiesCore = function() {\n\n\n        /**\n         * The state core type, which will be the same value as the type property on the {@link SceneJS.Node}s that use the core\n         * @type String\n         * @see SceneJS.Node#type\n         */\n        this.type = \"properties\";\n\n        /**\n         * The state core ID, unique within the scene. This ID may be either a string assigned by the application layer via\n         * scene node configs, or a number that is automatically generated by the {@link SceneJS_CoreFactory} managing\n         * this core instance.\n         * @type String|Number\n         */\n        this.coreId = null;\n\n        /**\n         * Uniquely identifies this state core within a {@link SceneJS_Display}.\n         *\n         * This ID is used by a {@link SceneJS_Display} to reduce redundant state changes when rendering a sequence of cores,\n         * where as a {@link SceneJS_Display} renders a frame it avoids applying consecutive cores that have the\n         * same value for this ID.\n         *\n         * @type Number\n         */\n        this.stateId = null;\n\n        /**\n         * Count of {@link SceneJS.Node} instances this core holds state for\n         */\n        this.useCount = 0;\n\n        this.xrayParams = new Float32Array([0.4, 0.8]); // x = glassfactor, y = murkiness, z = opacity\n        // this.colorParams = new Float32Array([0, 1, 0, 1]); // x = saturation, y = contrast, z = brightness, w = opacity\n        this.solidColor = new Float32Array([1.0, 1.0, 1.0]); // RGB = solidColor, A = Clipping\n        this.colorModifiers = []; // {applyTo:\"brightness|contrast|saturation|tintColor\",value:<FLOAT>,(colorRange):{}}\n        this.colorModRange = false;\n        this.opacityModifiers = [];\n        this.opacityModRange = false;\n        this.name = null;              // Picking name\n        this.flags = FLAGS.PICKING | FLAGS.ENABLED | FLAGS.REFLECTIVE | FLAGS.CCW | FLAGS.CLIPPING;\n        this.transparent = false;\n        this.partiallyOpaque = false;\n        this.stochasticAlpha = false;\n        this.blend = false;\n        this.fragmentShaderHeader = null;\n        this.fragmentShaderFooter = null;\n        this.depthTest = DEPTH_TEST_FLAGS.ENABLED;\n\n        this.hash = \"refl;;;;;;;\";\n    };\n\n    SceneJS_PropertiesCore.prototype.getFlag = function(flag) {\n        return !!(this.flags & flag);\n    };\n\n    SceneJS_PropertiesCore.prototype.setFlag = function(flag, value) {\n        this.flags = value ? (this.flags | flag) : (this.flags & ~flag);\n    };\n\n    SceneJS_PropertiesCore.prototype.resetTransparency = function() {\n        var opacityModifiers = this.opacityModifiers;\n        var opacityModified = false;\n        var opacityRangeModified = false;\n        var omi = 0;\n        for(omi = 0; omi < opacityModifiers.length; omi++) {\n            if (opacityModifiers[omi].value < 1) {\n                opacityModified = true;\n                break;\n            }\n        }\n        for(omi = 0; omi < opacityModifiers.length; omi++) {\n            if (opacityModifiers[omi].range) {\n                opacityRangeModified = true;\n                break;\n            }\n        }\n        this.stochasticAlpha = this.getFlag(FLAGS.STOCHASTIC_ALPHA);\n        this.transparent = this.getFlag(FLAGS.FORCE_TRANSPARENT) ||\n            (!this.stochasticAlpha &&\n            (opacityModified || this.getFlag(FLAGS.XRAY)));\n        this.partiallyOpaque = this.getFlag(FLAGS.PARTIALLY_OPAQUE) ||\n            (opacityModified && opacityRangeModified && !this.getFlag(FLAGS.XRAY));\n    };\n\n})();\n;/**\n * @class Manages creation, recycle and destruction of {@link SceneJS_Core} instances\n * @private\n */\n\n(function () {\n    \"use strict\";\n\n    var SceneJS_CoreFactory = window.SceneJS_CoreFactory = function () {\n\n        this._stateMap = new SceneJS_Map(null, SceneJS._baseStateId);  // For creating unique state IDs for cores\n\n        this._cores = {}; // Map of cores for each type\n    };\n\n    SceneJS_CoreFactory.coreConstructors = {\n        geometry: SceneJS_GeometryCore,\n        properties: SceneJS_PropertiesCore,\n        default: SceneJS_Core\n    };\n\n    /**\n     * Gets a core of the given type from this factory. Reuses any existing existing core of the same type and ID.\n     *\n     * The caller (a scene node) will then augment the core with type-specific attributes and methods.\n     *\n     * @param {String} type Type name of core, e.g. \"material\", \"texture\"\n     * @param {String} coreId ID for the core, unique among all cores of the given type within this factory\n     * @returns {Core} The core\n     */\n    SceneJS_CoreFactory.prototype.getCore = function (type, coreId) {\n\n        var cores = this._cores[type];\n\n        if (!cores) {\n            cores = this._cores[type] = {};\n        }\n\n        var core;\n\n        if (coreId) { // Attempt to reuse a core\n\n            core = cores[coreId];\n\n            if (core) {\n                core.useCount++;\n                return core;\n            }\n        }\n\n        var Core = SceneJS_CoreFactory.coreConstructors[type] || SceneJS_CoreFactory.coreConstructors.default;\n\n        core = new Core(type);\n        core.useCount = 1;  // One user so far\n\n        core.stateId = this._stateMap.addItem(core);\n        core.coreId = (coreId != undefined && coreId != null) ? coreId : core.stateId; // Use state ID as core ID by default\n\n        cores[core.coreId] = core;\n\n        return core;\n    };\n\n\n    /**\n     * Tests if a core of the given type and ID currently exists within this factory.\n     *\n     * @param {String} type Type name of core, e.g. \"material\", \"texture\"\n     * @param {String} coreId ID for the core, unique among all cores of the given type within this factory\n     * @returns {Boolean} True if the core exists\n     */\n    SceneJS_CoreFactory.prototype.hasCore = function (type, coreId) {\n        var cores = this._cores[type];\n        return cores && cores[coreId];\n    };\n\n    /**\n     * Releases a state core back to this factory, destroying it if the core's use count is then zero.\n     * @param {Core} core Core to release\n     */\n    SceneJS_CoreFactory.prototype.putCore = function (core) {\n\n        if (core.useCount == 0) {\n            return; // In case of excess puts\n        }\n\n        if (--core.useCount <= 0) {                    // Release shared core if use count now zero\n\n            var cores = this._cores[core.type];\n\n            delete cores[core.coreId];\n\n            this._stateMap.removeItem(core.stateId);  // Release state ID for reuse\n        }\n    };\n\n    /**\n     * Reallocates WebGL resources for cores within this factory\n     */\n    SceneJS_CoreFactory.prototype.webglRestored = function () {\n\n        var cores;\n        var core;\n\n        for (var type in this._cores) {\n            if (this._cores.hasOwnProperty(type)) {\n\n                cores = this._cores[type];\n\n                if (cores) {\n\n                    for (var coreId in cores) {\n                        if (cores.hasOwnProperty(coreId)) {\n\n                            core = cores[coreId];\n\n                            if (core && core.webglRestored) { // Method augmented on core by user\n                                core.webglRestored();\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n})();\n;/**\n * @class The basic scene graph node type\n */\n\n(function() {\n    \"use strict\";\n\n    SceneJS.Node = function () {\n    };\n\n    /**\n     * @class Basic scene graph node\n     */\n    SceneJS.Node.prototype.constructor = SceneJS.Node;\n\n    /**\n     * Called by SceneJS_Engine after it has instantiated the node\n     *\n     * @param {SceneJS_Engine} engine The engine which will manage this node\n     * @param {SceneJS_Core} core The core which will hold state for this node, may be shared with other nodes of the same type\n     * @param cfg Configuration for this node\n     * @param {String} cfg.id ID for the node, unique among all nodes in the scene\n     * @param {String} cfg.type type Type of this node (eg. \"material\", \"texture\" etc)\n     * @param {Object} cfg.data Optional arbitrary JSON object to attach to node\n     * @param {String} nodeId Optional ID for node\n     */\n    SceneJS.Node.prototype._construct = function (engine, core, cfg, nodeId) {\n\n        /**\n         * Engine that manages this node\n         * @type SceneJS_Engine\n         */\n        this._engine = engine;\n\n        /**\n         * The core which holds state for this node, may be shared with other nodes of the same type\n         * @type SceneJS_Core\n         */\n        this._core = core;\n\n        /**\n         * The core ID\n         * @type {String|Number}\n         */\n        this.coreId = core.coreId;\n\n        /**\n         * ID of this node, unique within its scene. The ID is a string if it was defined by the application\n         * via the node's JSON configuration, otherwise it is a number if it was left to SceneJS to automatically create.\n         * @type String|Number\n         */\n        this.id = cfg.id || cfg.nodeId || nodeId;\n\n        /**\n         * Type of this node (eg. \"material\", \"texture\" etc)\n         * @type String\n         */\n        this.type = cfg.type || \"node\";\n\n        /**\n         * Optional arbitrary JSON object attached to this node\n         * @type JSON\n         */\n        this.data = cfg.data;\n\n        /**\n         * Parent node\n         * @type SceneJS.Node\n         */\n        this.parent = null;\n\n        /**\n         * Child nodes\n         * @type SceneJS.Node[]\n         */\n        this.nodes = [];\n\n        /**\n         *\n         */\n        this.dirty = false;\n\n        this.disabled = false;\n\n        /**\n         *\n         */\n        this.branchDirty = false;\n\n        if (this._init) {\n            this._init(cfg);\n        }\n    };\n\n    SceneJS.Node.prototype.disable = function () {\n        if (!this.disabled) {\n            this.disabled = true;\n            this._engine.branchDirty(this);\n        }\n    };\n\n    SceneJS.Node.prototype.enable = function () {\n        if (this.disabled) {\n            this.disabled = false;\n            this._engine.branchDirty(this);\n        }\n    };\n\n    /**\n     * Logs a message in the context of this node\n     * @param {String} [channel] Logging channel - \"error\", \"warn\" or \"info\" (default)\n     * @param {String} msg Message to log\n     */\n    SceneJS.Node.prototype.log = function () {\n        var channel;\n        var msg;\n        if (arguments.length == 1) {\n            channel = \"info\";\n            msg = arguments[0];\n        } else if (arguments.length == 2) {\n            channel = arguments[0];\n            msg = arguments[1];\n        }\n        switch (channel) {\n            case \"warn\":\n                msg = \"WARN;  [SceneJS.Node type=\" + this.type + \", id=\" + this.id + \"] : \" + msg;\n                break;\n            case \"error\":\n                msg = \"ERROR; [SceneJS.Node type=\" + this.type + \", id=\" + this.id + \"] : \" + msg;\n                break;\n            default:\n                msg = \"INFO;  [SceneJS.Node type=\" + this.type + \", id=\" + this.id + \"] : \" + msg;\n                break;\n        }\n\n        if (console[channel]) {\n            console[channel](msg);\n        } else {\n            console.log(msg);\n        }\n    };\n\n    /**\n     * Returns this node's {@link SceneJS.Scene}\n     */\n    SceneJS.Node.prototype.getScene = function () {\n        return this._engine.scene;\n    };\n\n    /**\n     * Returns the ID of this node's core\n     */\n    SceneJS.Node.prototype.getCoreId = function () {\n        return this._core.coreId;\n    };\n\n    /**\n     * Get the node's ID\n     *\n     */\n    SceneJS.Node.prototype.getID = function () {\n        return this.id;\n    };\n\n    /**\n     * Alias for getID\n     *  @function\n     */\n    SceneJS.Node.prototype.getId = function () {\n        return this.id;\n    };\n\n    /**\n     * Alias for getID\n     *  @function\n     */\n    SceneJS.Node.prototype.getNodeId = function () {\n        return this.id;\n    };\n\n\n    /**\n     * Returns the node's type. For the Node base class, it is \"node\", overridden in sub-classes.\n     */\n    SceneJS.Node.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Returns the data object attached to this node.\n     */\n    SceneJS.Node.prototype.getData = function () {\n        return this.data;\n    };\n\n    /**\n     * Sets a data object on this node.\n     */\n    SceneJS.Node.prototype.setData = function (data) {\n        this.data = data;\n        return this;\n    };\n\n    /**\n     * Returns the number of child nodes\n     */\n    SceneJS.Node.prototype.getNumNodes = function () {\n        return this.nodes.length;\n    };\n\n    /** Returns child nodes\n     * @returns {Array} Child nodes\n     */\n    SceneJS.Node.prototype.getNodes = function () {\n        return this.nodes.slice(0);\n    };\n\n    /** Returns child node at given index. Returns null if no node at that index.\n     * @param {Number} index The child index\n     * @returns {Node} Child node, or null if not found\n     */\n    SceneJS.Node.prototype.getNodeAt = function (index) {\n        if (index < 0 || index >= this.nodes.length) {\n            return null;\n        }\n        return this.nodes[index];\n    };\n\n    /** Returns first child node. Returns null if no child nodes.\n     * @returns {Node} First child node, or null if not found\n     */\n    SceneJS.Node.prototype.getFirstNode = function () {\n        if (this.nodes.length == 0) {\n            return null;\n        }\n        return this.nodes[0];\n    };\n\n    /** Returns last child node. Returns null if no child nodes.\n     * @returns {Node} Last child node, or null if not found\n     */\n    SceneJS.Node.prototype.getLastNode = function () {\n        if (this.nodes.length == 0) {\n            return null;\n        }\n        return this.nodes[this.nodes.length - 1];\n    };\n\n    /** Returns child node with the given ID.\n     * Returns null if no such child node found.\n     */\n    SceneJS.Node.prototype.getNode = function (id) {\n        for (var i = 0; i < this.nodes.length; i++) {\n            if (this.nodes[i].id == id) {\n                return this.nodes[i];\n            }\n        }\n        return null;\n    };\n\n    /** Disconnects the child node at the given index from its parent node\n     * @param {int} index Child node index\n     * @returns {Node} The disconnected child node if located, else null\n     */\n    SceneJS.Node.prototype.disconnectNodeAt = function (index) {\n        var r = this.nodes.splice(index, 1);\n        if (r.length > 0) {\n            r[0]._disconnectFromScene();\n            r[0].parent = null;\n            this._engine.branchDirty(this);\n            return r[0];\n        } else {\n            return null;\n        }\n    };\n\n    /** Disconnects the child node from its parent, given as a node object\n     * @param {String | Node} id The target child node, or its ID\n     * @returns {Node} The removed child node if located\n     */\n    SceneJS.Node.prototype.disconnect = function () {\n        if (this.parent) {\n            for (var i = 0; i < this.parent.nodes.length; i++) {\n                if (this.parent.nodes[i] === this) {\n                    var node = this.parent.disconnectNodeAt(i);\n                    this._disconnectFromScene();\n                    this.parent = null;\n                    return node;\n                }\n            }\n            this._disconnectFromScene();\n            this.parent = null;\n        }\n        return null;\n    };\n\n    /**\n     * Connection callback that can be overridden in\n     * specific node types\n     */\n    SceneJS.Node.prototype._connectToScene = function () {\n        for (var i = 0, len = this.nodes.length; i < len; i++) {\n            this.nodes[i]._connectToScene();\n        }\n    };\n\n    /**\n     * Disconnection callback that can be overridden in\n     * specific node types\n     */\n    SceneJS.Node.prototype._disconnectFromScene = function () {\n        for (var i = 0, len = this.nodes.length; i < len; i++) {\n            this.nodes[i]._disconnectFromScene();\n        }\n    };\n\n    /** Removes the child node at the given index\n     * @param {int} index Child node index\n     */\n    SceneJS.Node.prototype.removeNodeAt = function (index) {\n        var child = this.disconnectNodeAt(index);\n        if (child) {\n            child.destroy();\n        }\n    };\n\n    /** Removes the child node, given as either a node object or an ID string.\n     * @param {String | Node} id The target child node, or its ID\n     * @returns {Node} The removed child node if located\n     */\n    SceneJS.Node.prototype.removeNode = function (node) {\n\n        if (!node) {\n            SceneJS_error.fatalError(\n                SceneJS.errors.ILLEGAL_NODE_CONFIG,\n                \"Node#removeNode - node argument undefined\");\n        }\n\n        if (!node._compile) {\n            if (typeof node == \"string\") {\n                var gotNode = this._engine.findNode(node);\n                if (!gotNode) {\n                    SceneJS_error.fatalError(\n                        SceneJS.errors.NODE_NOT_FOUND,\n                        \"Node#removeNode - node not found anywhere: '\" + node + \"'\");\n                }\n                node = gotNode;\n            }\n        }\n\n        if (node._compile) { //  instance of node\n            for (var i = 0; i < this.nodes.length; i++) {\n                if (this.nodes[i] === node) {\n                    var removedNode = this.removeNodeAt(i);\n                    return removedNode;\n                }\n            }\n        }\n\n        SceneJS_error.fatalError(\n            SceneJS.errors.NODE_NOT_FOUND,\n            \"Node#removeNode - child node not found: \" + (node._compile ? \": \" + node.id : node));\n    };\n\n    /** Disconnects all child nodes from their parent node and returns them in an array.\n     */\n    SceneJS.Node.prototype.disconnectNodes = function () {\n        var len = this.nodes.length;\n        for (var i = 0; i < len; i++) {  // Unlink nodes from this\n            this.nodes[i]._disconnectFromScene();\n            this.nodes[i].parent = null;\n        }\n        var nodes = this.nodes;\n        this.nodes = [];\n        this._engine.branchDirty(this);\n        return nodes;\n    };\n\n    /** Removes all child nodes and returns them in an array.\n     */\n    SceneJS.Node.prototype.removeNodes = function () {\n        var nodes = this.disconnectNodes();\n        for (var i = 0; i < nodes.length; i++) {\n            nodes[i].destroy();\n        }\n    };\n\n    /** Destroys this node and moves children up to parent, inserting them where this node resided.\n     */\n    SceneJS.Node.prototype.splice = function () {\n\n        var i, len;\n\n        if (this.parent == null) {\n            return null;\n        }\n        var parent = this.parent;\n        var nodes = this.disconnectNodes();\n        for (i = 0, len = nodes.length; i < len; i++) {  // Link this node's nodes to new parent\n            nodes[i].parent = this.parent;\n            nodes[i]._connectToScene();\n        }\n        for (i = 0, len = parent.nodes.length; i < len; i++) { // Replace node on parent's nodes with this node's nodes\n            if (parent.nodes[i] === this) {\n\n                parent.nodes.splice.apply(parent.nodes, [i, 1].concat(nodes));\n\n                this.nodes = [];\n                this._disconnectFromScene();\n                this.parent = null;\n\n                this.destroy();\n\n                this._engine.branchDirty(parent);\n\n                return parent;\n            }\n        }\n    };\n\n    /** Appends multiple child nodes\n     */\n    SceneJS.Node.prototype.addNodes = function (nodes) {\n        if (!nodes) {\n            return null;\n        }\n        for (var i = nodes.length - 1; i >= 0; i--) {\n            this.addNode(nodes[i]);\n        }\n    };\n\n    /** Appends a child node\n     */\n    SceneJS.Node.prototype.addNode = function (node, ok) {\n\n        node = node || {};\n\n        // Graft node object\n        if (node._compile) {\n            if (node.parent != null) {\n                SceneJS_error.fatalError(\n                    SceneJS.errors.ILLEGAL_NODE_CONFIG,\n                    \"Node#addNode - node argument is still attached to another parent\");\n            }\n            this.nodes.push(node);\n            node.parent = this;\n            node._connectToScene();\n            this._engine.branchDirty(node);\n            if (ok) {\n                ok(node);\n            }\n            return node;\n        }\n\n        // Graft node object by ID reference\n        if (typeof node == \"string\") {\n            var gotNode = this._engine.findNode(node);\n            if (!gotNode) {\n                SceneJS_error.fatalError(\n                    SceneJS.errors.ILLEGAL_NODE_CONFIG,\n                    \"Node#addNode - node not found: '\" + node + \"'\");\n            }\n            node = gotNode;\n            if (node.parent != null) {\n                SceneJS_error.fatalError(\n                    SceneJS.errors.ILLEGAL_NODE_CONFIG,\n                    \"Node#addNode - node argument is still attached to another parent\");\n            }\n            this.nodes.push(node);\n            node.parent = this;\n            node._connectToScene();\n            this._engine.branchDirty(node);\n            if (ok) {\n                ok(node);\n            }\n            return node;\n        }\n\n        // Create node\n\n        node.type = node.type || \"node\";\n\n        if (node.type == \"node\" || this._engine.hasNodeType(node.type)) {\n\n            // Root node's type is already loaded, so we are able\n            // to create the root synchronously. When the caller\n            // is creating a core node type, then by this contract\n            // it can rely on the return value\n\n            node = this._engine.createNode(node);\n            this.nodes.push(node);\n            node.parent = this;\n            node._connectToScene();\n            this._engine.branchDirty(node);\n            if (ok) {\n                ok(node);\n            }\n            return node;\n\n        } else {\n\n            // Otherwise the root node's type needs to be loaded,\n            // so we need to create it asynchronously. By this contract,\n            // the Caller would not rely on synchronous creation of\n            // non-core types.\n            var self = this;\n            this._engine.createNode(node,\n                function (node) {\n                    self.nodes.push(node);\n                    node.parent = self;\n                    node._connectToScene();\n                    self._engine.branchDirty(node);\n                    if (ok) {\n                        ok(node);\n                    }\n                });\n            return null;\n        }\n    };\n\n    /** Inserts a subgraph into child nodes\n     * @param {Node} node Child node\n     * @param {int} i Index for new child node\n     * @return {Node} The child node\n     */\n    SceneJS.Node.prototype.insertNode = function (node, i) {\n\n        if (!node) {\n            SceneJS_error.fatalError(\n                SceneJS.errors.ILLEGAL_NODE_CONFIG,\n                \"SceneJS.Node#insertNode - node argument is undefined\");\n        }\n\n        if (!node._compile) { // JSON node definition\n            node = this._engine.createNode(node); // Create node\n        }\n\n        if (!node._compile) {\n            SceneJS_error.fatalError(\n                SceneJS.errors.ILLEGAL_NODE_CONFIG,\n                \"SceneJS.Node#insertNode - node argument is not a SceneJS.Node\");\n        }\n\n        if (node.parent != null) {\n            SceneJS_error.fatalError(\n                SceneJS.errors.ILLEGAL_NODE_CONFIG,\n                \"SceneJS.Node#insertNode - node argument is still attached to another parent\");\n        }\n\n        if (i === undefined || i === null) {\n            node.addNodes(this.disconnectNodes());\n            this.addNode(node);\n\n        } else if (i < 0) {\n\n            SceneJS_error.fatalError(\n                SceneJS.errors.ILLEGAL_NODE_CONFIG,\n                \"SceneJS.Node#insertNode - node index out of range: -1\");\n\n        } else if (i >= this.nodes.length) {\n            this.nodes.push(node);\n        } else {\n            this.nodes.splice(i, 0, node);\n        }\n\n        node.parent = this;\n        node._connectToScene();\n        return node;\n    };\n\n    /** Calls the given function on each node in the subgraph rooted by this node, including this node.\n     * The callback takes each node as it's sole argument and traversal stops as soon as the function returns\n     * true and returns the node.\n     * @param {function(Node)} func The function\n     */\n    SceneJS.Node.prototype.mapNodes = function (func) {\n        if (func(this)) {\n            return this;\n        }\n        var result;\n        for (var i = 0; i < this.nodes.length; i++) {\n            result = this.nodes[i].mapNodes(func);\n            if (result) {\n                return result;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Returns the parent node\n     * @return {SceneJS.Node}\n     */\n    SceneJS.Node.prototype.getParent = function (type) {\n        return this.parent;\n    };\n\n    /**\n     * Finds the first node of given type on path to root.\n     * @param {String} type Parent type to find on path to root\n     * @return {SceneJS.Node}\n     */\n    SceneJS.Node.prototype.getParentOfType = function (type) {\n        var parent = this.parent;\n        while (parent && parent.type != type) {\n            parent = parent.parent;\n        }\n        return parent;\n    };\n\n    /**\n     * Iterates over parent nodes on the path from the selected node to the root, executing a function\n     * for each.\n     * If the function returns true at any node, then traversal stops and a selector is\n     * returned for that node.\n     * @param {Function(node, index)} fn Function to execute on each instance node\n     * @return {Object} Selector for selected node, if any\n     */\n    SceneJS.Node.prototype.eachParent = function (fn) {\n\n        if (!fn) {\n            throw \"SceneJS.Node.eachParent param 'fn' is null or undefined\";\n        }\n\n        var count = 0;\n        var node = this;\n\n        while (node.parent) {\n            if (fn.call(node.parent, count++) === true) {\n                return node.parent;\n            }\n            node = node.parent;\n        }\n\n        return null;\n    };\n\n    /** Returns true if a child node matching given ID or index exists on this node\n     * @param {Number|String} node Child node index or ID\n     */\n    SceneJS.Node.prototype.hasNode = function (node) {\n\n        if (node === null || node === undefined) {\n            throw \"SceneJS.Node.hasNode param 'node' is null or undefined\";\n        }\n\n        var type = typeof node;\n        var nodeGot;\n\n        if (type == \"number\") {\n            nodeGot = this.getNodeAt(node);\n\n        } else if (type == \"string\") {\n            nodeGot = this.getNode(node);\n\n        } else {\n            throw \"SceneJS.Node.hasNode param 'node' should be either an index number or an ID string\";\n        }\n\n        return (nodeGot != undefined && nodeGot != null);\n    };\n\n    /** Selects a child node matching given ID or index\n     * @param {Number|String} node Child node index or ID\n     */\n    SceneJS.Node.prototype.node = function (node) {\n\n        if (node === null || node === undefined) {\n            throw \"SceneJS.Node.node param 'node' is null or undefined\";\n        }\n\n        var type = typeof node;\n        var nodeGot;\n\n        if (type == \"number\") {\n            nodeGot = this.getNodeAt(node);\n\n        } else if (type == \"string\") {\n            nodeGot = this.getNode(node);\n\n        } else {\n            throw \"SceneJS.Node.node param 'node' should be either an index number or an ID string\";\n        }\n\n        if (!nodeGot) {\n            throw \"SceneJS.Node.node - node not found: '\" + node + \"'\";\n        }\n\n        return nodeGot;\n    };\n\n    /**\n     * Iterates over sub-nodes of the selected node, executing a function\n     * for each. With the optional options object we can configure is depth-first or breadth-first order.\n     * If neither, then only the child nodes are iterated.\n     * If the function returns true at any node, then traversal stops and a selector is\n     * returned for that node.\n     * @param {Function(index, node)} fn Function to execute on each child node\n     * @return {Object} Selector for selected node, if any\n     */\n    SceneJS.Node.prototype.eachNode = function (fn, options) {\n\n        if (!fn) {\n            throw \"SceneJS.Node.eachNode param 'fn' is null or undefined\";\n        }\n\n        if (typeof fn != \"function\") {\n            throw \"SceneJS.Node.eachNode param 'fn' should be a function\";\n        }\n\n        var stoppedNode;\n        options = options || {};\n        var count = 0;\n\n        if (options.andSelf) {\n            if (fn.call(this, count++) === true) {\n                return this;\n            }\n        }\n\n        if (!options.depthFirst && !options.breadthFirst) {\n            stoppedNode = this._iterateEachNode(fn, this, count);\n\n        } else if (options.depthFirst) {\n            stoppedNode = this._iterateEachNodeDepthFirst(fn, this, count, false); // Not below root yet\n\n        } else {\n            // TODO: breadth-first\n        }\n\n        if (stoppedNode) {\n            return stoppedNode;\n        }\n\n        return undefined; // IDE happy now\n    };\n\n    SceneJS.Node.prototype.numNodes = function () {\n        return this.nodes.length;\n    };\n\n    SceneJS.Node.prototype._iterateEachNode = function (fn, node, count) {\n\n        var len = node.nodes.length;\n        var child;\n\n        for (var i = 0; i < len; i++) {\n            child = node.nodes[i];\n\n            if (fn.call(child, count++) === true) {\n                return child;\n            }\n        }\n\n        return null;\n    };\n\n    SceneJS.Node.prototype._iterateEachNodeDepthFirst = function (fn, node, count, belowRoot) {\n\n        if (belowRoot) {\n\n            /* Visit this node - if we are below root, because entry point visits the root\n             */\n            if (fn.call(node, count++) === true) {\n                return node;\n            }\n        }\n\n        belowRoot = true;\n\n        /* Iterate nodes\n         */\n        var len = node.nodes.length;\n        var child;\n        for (var i = 0; i < len; i++) {\n            child = this._iterateEachNodeDepthFirst(fn, node.nodes[i], count, belowRoot);\n            if (child) {\n                return child;\n            }\n        }\n\n        return null;\n    };\n\n    /** Returns either all child or all sub-nodes of the given type, depending on whether search is recursive or not.\n     */\n    SceneJS.Node.prototype.findNodesByType = function (type, recursive) {\n        return this._findNodesByType(type, [], recursive);\n    };\n\n    SceneJS.Node.prototype._findNodesByType = function (type, list, recursive) {\n        var i;\n        for (i = 0; i < this.nodes.length; i++) {\n            var node = this.nodes[i];\n            if (node.type == type) {\n                list.push(node);\n            }\n        }\n        if (recursive) {\n            for (i = 0; i < this.nodes.length; i++) {\n                this.nodes[i]._findNodesByType(type, list, recursive);\n            }\n        }\n        return list;\n    };\n\n    /** Finds the first node on path up to root whose type equals that given\n     */\n    SceneJS.Node.prototype.findParentByType = function (type) {\n        var parent = this.parent;\n        while (parent && parent.type != type) {\n            parent = parent.parent;\n        }\n        return parent;\n    };\n\n    /**\n     * Returns an object containing the attributes that were given when creating the node. Obviously, the map will have\n     * the current values, plus any attributes that were later added through set/add methods on the node\n     *\n     */\n    SceneJS.Node.prototype.getJSON = function () {\n        return this;\n    };\n\n\n    SceneJS.Node.prototype._compile = function (ctx) {\n        if (this.preCompile) {\n            this.preCompile();\n        }\n        this._compileNodes(ctx);\n        if (this.postCompile) {\n            this.postCompile();\n        }\n    };\n\n    SceneJS.Node.prototype._compileNodes = function (ctx) {\n\n        var renderSubs = !!this.onRendered;\n\n        var child;\n\n        for (var i = 0, len = this.nodes.length; i < len; i++) {\n\n            child = this.nodes[i];\n\n            child.branchDirty = child.branchDirty || this.branchDirty; // Compile subnodes if scene branch dirty\n\n            if (child.dirty || child.branchDirty || this._engine.sceneDirty) {  // Compile nodes that are flagged dirty\n                if (child.disabled) {\n                    child._compileNodes(ctx);\n                } else {\n                    child._compile(ctx);\n                }\n                child.dirty = false;\n                child.branchDirty = false;\n            }\n        }\n    };\n\n\n\n    /**\n     * Destroys this node. It is marked for destruction; when the next scene traversal begins (or the current one ends)\n     * it will be destroyed and removed from it's parent.\n     */\n    SceneJS.Node.prototype.destroy = function () {\n\n        if (!this.destroyed) {\n\n            if (this.parent) {\n\n                // Remove from parent's child node list\n\n                var parentNodes = this.parent.nodes;\n                var len = parentNodes.length;\n                for (var i = 0; i < len; i++) {\n                    if (parentNodes[i].id === this.id) {\n                        parentNodes.splice(i, 1);\n                        break;\n                    }\n                }\n            }\n\n            // Remove publication\n            this._engine.scene.unpublish(\"nodes/\" + this.id);\n\n            /* Recusrsively destroy child nodes without\n             * bothering to remove them from their parents\n             */\n            this._destroyTree();\n\n            /* Need object list recompilation on display\n             */\n            this._engine.display.objectListDirty = true;\n        }\n\n        return this;\n    };\n\n    SceneJS.Node.prototype._destroyTree = function () {\n\n        this.destroyed = true;\n\n        this._engine.destroyNode(this); // Release node object\n\n        var childNode;\n        for (var i = 0, len = this.nodes.length; i < len; i++) {\n            childNode = this.nodes[i];\n            this._engine.scene.unpublish(\"nodes/\" + childNode.id);\n            childNode._destroyTree();\n        }\n    };\n\n    /**\n     * Performs the actual destruction of this node, calling the node's optional template destroy method\n     */\n    SceneJS.Node.prototype._doDestroy = function () {\n\n        if (this._destroy) {  // Call destruction handler for each node subclass\n            this._destroy();\n        }\n\n        return this;\n    };\n\n})();\n;/**\n * @class Manages creation, recycle and destruction of {@link SceneJS.Node} instances\n * @private\n */\n\n(function () {\n    \"use strict\";\n\n    var SceneJS_NodeFactory = window.SceneJS_NodeFactory = function () {\n        this.nodes = new SceneJS_Map({});\n    };\n\n    SceneJS_NodeFactory.nodeTypes = {};\n\n    SceneJS_NodeFactory.createNodeType = function (typeName) {\n        if (SceneJS_NodeFactory.nodeTypes[typeName]) {\n            throw \"Node type already defined: \" + typeName;\n        }\n        var nodeType = function () { // Create the class\n            SceneJS.Node.apply(this, arguments);\n            this.type = typeName;\n        };\n        nodeType.prototype = new SceneJS.Node();            // Inherit from base class\n        nodeType.prototype.constructor = nodeType;\n        SceneJS_NodeFactory.nodeTypes[typeName] = nodeType;\n        return nodeType;\n    };\n\n    SceneJS_NodeFactory.prototype.getNode = function (engine, json, core) {\n        json.type = json.type || \"node\";\n        var nodeType;\n        if (json.type === \"node\") {\n            nodeType = SceneJS.Node;\n        } else {\n            nodeType = SceneJS_NodeFactory.nodeTypes[json.type];\n            if (!nodeType) {\n                console.error(\"Unknown node type: \" + json.type + \" - can't create - making a SceneJS.Node by default\");\n                nodeType = SceneJS.Node;\n            }\n        }\n        var node = new nodeType();\n        var id = json.id || json.nodeId;\n        if (id) {\n            this.nodes.addItem(id, node);\n        } else {\n            id = this.nodes.addItem(node);\n        }\n        node._construct(engine, core, json, id); // Instantiate node\n        return node;\n    };\n\n    SceneJS_NodeFactory.prototype.putNode = function (node) {\n        this.nodes.removeItem(node.id);\n    };\n\n})();\n;(function () {\n    \"use strict\";\n\n    var FLAGS = SceneJS.PROPERTY_FLAGS;\n    var COLOR_MOD_FLAGS = SceneJS.COLOR_MOD_FLAGS;\n    var DEPTH_TEST_FLAGS = SceneJS.DEPTH_TEST_FLAGS;\n\n    var STRING_TO_MOD_FLAG = {\n        saturation: COLOR_MOD_FLAGS.SATURATION,\n        brightness: COLOR_MOD_FLAGS.BRIGHTNESS,\n        contrast: COLOR_MOD_FLAGS.CONTRAST,\n        tintColor: COLOR_MOD_FLAGS.TINT\n    };\n\n    var STRING_TO_DEPTH_TEST_FLAG = {\n        enabled: DEPTH_TEST_FLAGS.ENABLED,\n        disabled: DEPTH_TEST_FLAGS.DISABLED,\n        alwaysPass: DEPTH_TEST_FLAGS.ALWAYS_PASS\n    };\n\n    var DEPTH_TEST_FLAG_TO_STRING = {};\n    for (var key in STRING_TO_DEPTH_TEST_FLAG) {\n        var flag = STRING_TO_DEPTH_TEST_FLAG[key];\n        DEPTH_TEST_FLAG_TO_STRING[flag] = key;\n    }\n\n    /**\n     * The default state core singleton for {@link SceneJS.Properties} nodes\n     */\n    var defaultCore = new SceneJS_PropertiesCore();\n    defaultCore.stateId = SceneJS._baseStateId++;\n\n    var coreStack = [];\n    var stackLen = 0;\n\n    SceneJS_events.addListener(\n        SceneJS_events.SCENE_COMPILING,\n        function (params) {\n            params.engine.display.properties = defaultCore;\n            stackLen = 0;\n        });\n\n    /**\n     * @class Scene graph node which sets rendering mode properties for its subgraph\n     * @extends SceneJS.Node\n     */\n    SceneJS.Properties = SceneJS_NodeFactory.createNodeType(\"properties\");\n\n    SceneJS.Properties.prototype._init = function (params) {\n\n        if (this._core.useCount == 1) {         // This node is first to reference the state core, so sets it up\n            if (params.properties) {                  // 'properties' property is actually optional in the node definition\n                this.setProperties(params.properties);\n            }\n        }\n    };\n\n    SceneJS.Properties.prototype.setProperties = function (properties) {\n\n        var core = this._core;\n\n        if (properties.picking != undefined) {\n            core.setFlag(FLAGS.PICKING, properties.picking);\n            this._engine.display.imageDirty = true;\n        }\n\n        if (properties.solidColor != undefined) {\n            var defaultClippingParams = defaultCore.solidColor;\n            var color = properties.solidColor;\n            core.solidColor[0] = color.r != undefined ? color.r : defaultClippingParams[0];\n            core.solidColor[1] = color.g != undefined ? color.g : defaultClippingParams[1];\n            core.solidColor[2] = color.b != undefined ? color.b : defaultClippingParams[2];\n            this._engine.display.imageDirty = true;\n        }\n\n        if (properties.clipping != undefined) {\n            core.setFlag(FLAGS.CLIPPING, properties.clipping);\n            this._engine.branchDirty(this);\n        }\n\n        if (properties.enabled != undefined) {\n            core.setFlag(FLAGS.ENABLED, properties.enabled);\n            this._engine.display.objectListDirty = true;\n        }\n\n        if (properties.frontface != undefined) {\n            core.setFlag(FLAGS.CCW, properties.frontface === \"ccw\");\n            this._engine.display.imageDirty = true;\n        }\n\n        if (properties.reflective != undefined) {\n            core.setFlag(FLAGS.REFLECTIVE, properties.reflective);\n            this._engine.branchDirty(this);\n        }\n\n        if (properties.solid != undefined) {\n            core.setFlag(FLAGS.SOLID, properties.solid);\n            this._engine.branchDirty(this);\n        }\n\n        if (properties.skybox != undefined) {\n            core.setFlag(FLAGS.SKYBOX, properties.skybox);\n            this._engine.branchDirty(this);\n        }\n\n        if (properties.billboard != undefined) {\n            core.setFlag(FLAGS.BILLBOARD, properties.billboard);\n            this._engine.branchDirty(this);\n        }\n\n        if (properties.colorModifiers) {\n            var applyTo, applyVal;\n            core.colorModifiers.length = properties.colorModifiers.length;\n            core.colorModRange = false;\n            for (var cmi = 0, cmLen = properties.colorModifiers.length; cmi < cmLen; cmi++) {\n                var cm = properties.colorModifiers[cmi];\n                applyTo = STRING_TO_MOD_FLAG[cm.applyTo] || cm.applyTo;\n                applyVal = cm.value;\n\n                if (!applyVal.isScalarFresnel && !applyVal.isColorFresnel) {\n                    if (applyTo === COLOR_MOD_FLAGS.CONTRAST && !cm.normalized) {\n                        applyVal = cm.value + 1; // normalize\n                    }\n                }\n\n                // assign\n                core.colorModifiers[cmi] = {\n                    applyTo: applyTo,\n                    value: applyVal,\n                    range: null\n                };\n\n                if (applyTo === COLOR_MOD_FLAGS.CONTRAST) {\n                    core.colorModifiers[cmi].normalized = true;\n                }\n\n                // optional range value\n                if (cm.range) {\n                    core.colorModRange = true;\n                    core.colorModifiers[cmi].range = {\n                        center: new Float32Array(cm.range.center),\n                        radius: new Float32Array([cm.range.minRadius, cm.range.maxRadius - cm.range.minRadius])\n                    };\n                }\n\n            }\n        }\n\n        if (properties.name != undefined) {\n            core.name = properties.name;\n        }\n\n        if (properties.xray != undefined) {\n            var wasTransparent = core.transparent;\n            core.setFlag(FLAGS.XRAY, properties.xray);\n            core.resetTransparency();\n            if (core.transparent !== wasTransparent) {\n                this._engine.display.objectListDirty = true;\n            }\n            this._engine.display.imageDirty = true;\n        }\n\n        if (properties.glassFactor != undefined) {\n            core.xrayParams[0] = properties.glassFactor;\n            this._engine.display.imageDirty = true;\n        }\n\n        if (properties.murkiness != undefined) {\n            core.xrayParams[1] = properties.murkiness;\n            this._engine.display.imageDirty = true;\n        }\n\n        if (properties.opacityModifiers) {\n            var wasTransparent = core.transparent;\n            var applyVal;\n            var om, len = properties.opacityModifiers.length;\n            core.opacityModifiers.length = len;\n            core.opacityModRange = false;\n            for (var omi = 0; omi < len; ++omi) {\n                om = properties.opacityModifiers[omi];\n                applyVal = om.value;\n\n                // assign\n                core.opacityModifiers[omi] = {\n                    value: applyVal,\n                    range: null\n                }\n\n                // optional range value\n                if (om.range) {\n                    core.opacityModRange = true;\n                    core.opacityModifiers[omi].range = {\n                        center: new Float32Array(om.range.center),\n                        radius: new Float32Array([om.range.minRadius, om.range.maxRadius - om.range.minRadius])\n                    };\n                }\n            }\n            core.resetTransparency();\n            if (core.transparent !== wasTransparent) {\n                this._engine.display.objectListDirty = true;\n            }\n            this._engine.display.imageDirty = true;\n        }\n\n        if (properties.noDepthMask != undefined) {\n            core.setFlag(FLAGS.NO_DEPTH_MASK, properties.noDepthMask);\n            this._engine.display.imageDirty = true;\n        }\n\n        if (properties.partiallyOpaque != undefined) {\n            var wasPartiallyOpaque = core.partiallyOpaque;\n            core.setFlag(FLAGS.PARTIALLY_OPAQUE, properties.partiallyOpaque);\n            core.resetTransparency();\n            if (core.partiallyOpaque !== wasPartiallyOpaque) {\n                this._engine.branchDirty(this);\n            }\n            this._engine.display.imageDirty = true;\n        }\n\n        if (properties.forceTransparent != undefined) {\n            var wasTransparent = core.transparent;\n            core.setFlag(FLAGS.FORCE_TRANSPARENT, properties.forceTransparent);\n            core.resetTransparency();\n            if (core.transparent !== wasTransparent) {\n                this._engine.display.objectListDirty = true;\n            }\n            this._engine.display.imageDirty = true;\n        }\n\n        if (properties.stochasticAlpha != undefined) {\n            var wasTransparent = core.transparent;\n            core.setFlag(FLAGS.STOCHASTIC_ALPHA, properties.stochasticAlpha);\n            core.resetTransparency();\n            this._engine.branchDirty(this);\n            this._engine.display.imageDirty = true;\n        }\n\n        if (properties.roundPoints != undefined) {\n            core.setFlag(FLAGS.ROUND_POINTS, properties.roundPoints);\n            this._engine.branchDirty(this);\n            this._engine.display.imageDirty = true;\n        }\n\n        if (properties.perspectivePoints != undefined) {\n            core.setFlag(FLAGS.PERSPECTIVE_POINTS, properties.perspectivePoints);\n            this._engine.branchDirty(this);\n            this._engine.display.imageDirty = true;\n        }\n\n        if (properties.fragmentShaderHeader != undefined) {\n            core.fragmentShaderHeader = properties.fragmentShaderHeader;\n            this._engine.branchDirty(this);\n            this._engine.display.imageDirty = true;\n        }\n\n        if (properties.fragmentShaderFooter != undefined) {\n            core.fragmentShaderFooter = properties.fragmentShaderFooter;\n            this._engine.branchDirty(this);\n            this._engine.display.imageDirty = true;\n        }\n\n        if (properties.depthTest != undefined) {\n            core.depthTest = STRING_TO_DEPTH_TEST_FLAG[properties.depthTest] || properties.depthTest;\n            this._engine.display.imageDirty = true;\n        }\n\n        var oldHash = core.hash;\n        core.hash = getHash(core);\n        if (core.hash !== oldHash) {\n            this._engine.branchDirty(this);\n        }\n        this._engine.display.imageDirty = true;\n\n        return this;\n    };\n\n    SceneJS.Properties.prototype.getProperties = function () {\n        var core = this._core;\n        return {\n            picking: core.getFlag(FLAGS.PICKING),\n            clipping: core.getFlag(FLAGS.CLIPPING),\n            enabled: core.getFlag(FLAGS.ENABLED),\n            frontface: core.getFlag(FLAGS.CCW) ? \"ccw\" : \"cw\",\n            reflective: core.getFlag(FLAGS.REFLECTIVE),\n            solid: core.getFlag(FLAGS.SOLID),\n            solidColor: core.solidColor,\n            skybox: core.getFlag(FLAGS.SKYBOX),\n            billboard: core.getFlag(FLAGS.BILLBOARD),\n            fullyTransparent: core.getFlag(FLAGS.FULLY_TRANSPARENT),\n            roundPoints: core.getFlag(FLAGS.ROUND_POINTS),\n            perspectivePoints: core.getFlag(FLAGS.PERSPECTIVE_POINTS),\n            xray: core.getFlag(FLAGS.XRAY),\n            glassFactor: core.xrayParams[0],\n            murkiness: core.xrayParams[1],\n            colorModifiers: core.colorModifiers,\n            opacityModifier: core.opacityModifiers,\n            pointPerspectiveDistance: core.pointPerspectiveDistance,\n            fragmentShaderHeader: core.fragmentShaderHeader,\n            fragmentShaderFooter: core.fragmentShaderFooter,\n            depthTest: DEPTH_TEST_FLAG_TO_STRING[core.depthTest] || \"enabled\"\n        };\n    };\n\n    SceneJS.Properties.prototype.setPicking = function (picking) {\n        picking = !!picking;\n        if (this._core.getFlag(FLAGS.PICKING) !== picking) {\n            this._core.setFlag(FLAGS.PICKING, picking);\n            this._engine.display.imageDirty = true;\n        }\n        return this;\n    };\n\n    SceneJS.Properties.prototype.getPicking = function () {\n        return this._core.getFlag(FLAGS.PICKING);\n    };\n\n    SceneJS.Properties.prototype.setClipping = function (clipping) {\n        this.setProperties({clipping: clipping})\n        return this;\n    };\n\n    SceneJS.Properties.prototype.getClipping = function () {\n        return !!this.solidColor[3];\n    };\n\n    SceneJS.Properties.prototype.setEnabled = function (enabled) {\n        return this.setProperties({enabled: enabled});\n    };\n\n    SceneJS.Properties.prototype.getEnabled = function () {\n        return this._core.getFlag(FLAGS.ENABLED);\n    };\n\n    SceneJS.Properties.prototype.setFrontface = function (frontface) {\n        var ccw = frontface === \"ccw\";\n        if (this._core.getFlag(FLAGS.CCW) !== ccw) {\n            this._core.setFlag(FLAGS.CCW, ccw);\n            this._engine.display.imageDirty = true;\n        }\n        return this;\n    };\n\n    SceneJS.Properties.prototype.getFrontface = function () {\n        return this._core.getFlag(FLAGS.CCW) ? \"ccw\" : \"cw\";\n    };\n\n    SceneJS.Properties.prototype.setReflective = function (reflective) {\n        reflective = !!reflective;\n        if (this._core.getFlag(FLAGS.REFLECTIVE) != reflective) {\n            this._core.setFlag(FLAGS.REFLECTIVE, reflective);\n            this._core.hash = getHash(this._core);\n            this._engine.branchDirty(this);\n            this._engine.display.imageDirty = true;\n        }\n        return this;\n    };\n\n    SceneJS.Properties.prototype.getReflective = function () {\n        return this._core.getFlag(FLAGS.REFLECTIVE);\n    };\n\n    SceneJS.Properties.prototype.setSolid = function (solid) {\n        solid = !!solid;\n        if (this._core.getFlag(FLAGS.SOLID) != solid) {\n            this._core.setFlag(FLAGS.SOLID, solid);\n            this._core.hash = getHash(this._core);\n            this._engine.branchDirty(this);\n            this._engine.display.imageDirty = true;\n        }\n        return this;\n    };\n\n    SceneJS.Properties.prototype.getSolid = function () {\n        return this._core.getFlag(FLAGS.SOLID);\n    };\n\n    SceneJS.Properties.prototype.setSolidColor = function (color) {\n        this.setProperties({solidColor: color})\n        return this;\n    };\n\n    SceneJS.Properties.prototype.getSolidColor = function () {\n        return {\n            r: this._core.solidColor[0],\n            g: this._core.solidColor[1],\n            b: this._core.solidColor[2]\n        };\n    };\n\n    SceneJS.Properties.prototype.setSkybox = function (skybox) {\n        skybox = !!skybox;\n        if (this._core.getFlag(FLAGS.SKYBOX) != skybox) {\n            this._core.setFlag(FLAGS.SKYBOX, skybox);\n            this._core.hash = getHash(this._core);\n            this._engine.branchDirty(this);\n            this._engine.display.imageDirty = true;\n        }\n        return this;\n    };\n\n    SceneJS.Properties.prototype.getSkybox = function () {\n        return this._core.getFlag(FLAGS.SKYBOX);\n    };\n\n    SceneJS.Properties.prototype.setName = function (name) {\n        this._core.name = name;\n    };\n\n    SceneJS.Properties.prototype.getName = function () {\n        return this._core.name;\n    };\n\n    SceneJS.Properties.prototype.setFullyTransparent = function (ft) {\n        ft = !!ft;\n        if (this._core.getFlag(FLAGS.FULLY_TRANSPARENT) !== ft) {\n            this._core.setFlag(FLAGS.FULLY_TRANSPARENT, ft);\n            this._engine.display.imageDirty = true;\n        }\n        return this;\n    };\n\n    SceneJS.Properties.prototype.getFullyTransparent = function () {\n        return this._core.getFlag(FLAGS.FULLY_TRANSPARENT);\n    };\n\n    SceneJS.Properties.prototype.setRoundPoints = function (roundPoints) {\n        roundPoints = !!roundPoints;\n        if (this._core.getFlag(FLAGS.ROUND_POINTS) != roundPoints) {\n            this._core.setFlag(FLAGS.ROUND_POINTS, roundPoints);\n            this._core.hash = getHash(this._core);\n            this._engine.branchDirty(this);\n            this._engine.display.imageDirty = true;\n        }\n        return this;\n    };\n\n    SceneJS.Properties.prototype.getRoundPoints = function () {\n        return this._core.getFlag(FLAGS.ROUND_POINTS);\n    };\n\n    SceneJS.Properties.prototype._compile = function (ctx) {\n        this._engine.display.properties = coreStack[stackLen++] = this._core;\n        this._compileNodes(ctx);\n        this._engine.display.properties = (--stackLen > 0) ? coreStack[stackLen - 1] : defaultCore;\n        coreStack[stackLen] = null; // Release memory\n    };\n\n    function getColorModificationHash(core) {\n        var hash = \"\";\n        var cmi = 0, cmlen = core.colorModifiers.length;\n        for (cmi = 0; cmi < cmlen; cmi++) {\n\n            var colorModifier = core.colorModifiers[cmi];\n            var applyTo = colorModifier.applyTo;\n            var range = colorModifier.range;\n            var value = colorModifier.value;\n\n            // hash on apply to\n            if (applyTo === COLOR_MOD_FLAGS.BRIGHTNESS) {\n                hash += \"b\";\n            } else if (applyTo === COLOR_MOD_FLAGS.CONTRAST) {\n                hash += \"c\";\n            } else if (applyTo === COLOR_MOD_FLAGS.SATURATION) {\n                hash += \"s\";\n            } else if (applyTo === COLOR_MOD_FLAGS.TINT) {\n                hash += \"t\";\n            }\n\n            // hash on modifier-range\n            if (range) {\n                hash += \"r\";\n            }\n\n            // hash on value\n            if (value.isScalarFresnel) {\n                hash += \"sf\";\n            } else if (value.isColorFresnel) {\n                hash += \"cf\";\n            } else {\n                hash += \"nv\"; // \"number value\"\n            }\n        }\n        return hash;\n    }\n\n    function getOpacityModificationHash(core) {\n        var hash = \"\";\n        var omi = 0, len = core.opacityModifiers.length;\n        for (omi = 0; omi < len; omi++) {\n            var opacityModifier = core.opacityModifiers[omi];\n            var range = opacityModifier.range;\n            var value = opacityModifier.value;\n            // hash on modifier-range\n            if (range) {\n                hash += \"r\";\n            } else {\n                hash += \"o\";\n            }\n            // hash on value\n            if (value.isScalarFresnel) {\n                hash += \"sf\";\n            } else {\n                hash += \"nv\"; // \"number value\"\n            }\n        }\n        return hash;\n    }\n\n    function getHash(core) {\n        return (core.getFlag(FLAGS.REFLECTIVE) ? \"refl\" : \"\") + \";\" +\n            (core.getFlag(FLAGS.SKYBOX) ? \"sky\" : \"\") + \";\" +\n            (core.getFlag(FLAGS.SOLID) ? \"s\" : \"\") + \";\" +\n            (core.getFlag(FLAGS.ROUND_POINTS) ? \"rpt\" : \"\") + \";\" +\n            (core.getFlag(FLAGS.PERSPECTIVE_POINTS) ? \"ppt\" : \"\") + \";\" +\n            (core.getFlag(FLAGS.BILLBOARD) ? \"b\" : \"\") + \";\" +\n            (core.getFlag(FLAGS.STOCHASTIC_ALPHA) ? \"sa\" : \"\") + \";\" +\n            getColorModificationHash(core) + \";\" +\n            getOpacityModificationHash(core) + \";\" +\n            (core.fragmentShaderHeader || \"\") + \";\" +\n            (core.fragmentShaderFooter || \"\") + \";\";\n    }\n\n})();\n;(function () {\n    \"use strict\";\n\n    /**\n     * @class Scene graph node that defines geometry.\n     * @extends SceneJS.Node\n     * When this node is at a leaf, it defines a scene object which inherits the state set up by all the nodes above it\n     * on the path up to the root. These nodes can be nested, so that child geometries inherit arrays\n     * defined by parent geometries.\n     */\n    SceneJS.Geometry = SceneJS_NodeFactory.createNodeType(\"geometry\");\n\n    SceneJS.Geometry.prototype._init = function (params) {\n\n        if (this._core.useCount == 1) { // This node defines the core\n\n            this._initNodeCore(params, {\n                origin: params.origin,\n                scale: params.scale,\n                autoNormals: params.normals == \"auto\"\n            });\n\n            this._buildNodeCore(this._engine.canvas.gl, this._core);\n\n            this._boundary = {\n                xmin: Number.POSITIVE_INFINITY,\n                ymin: Number.POSITIVE_INFINITY,\n                zmin: Number.POSITIVE_INFINITY,\n                xmax: Number.NEGATIVE_INFINITY,\n                ymax: Number.NEGATIVE_INFINITY,\n                zmax: Number.NEGATIVE_INFINITY\n            };\n\n            this._boundaryDirty = true;\n\n            this.backfaces = params.backfaces !== false;\n            \n            // Weird to put these here, but want it to be per\n            // renderable object.\n            this.addBlend = params.addBlend === true;\n            this.layer = params.layer || 0;\n            this.onObjectCreate = params.onObjectCreate || null;\n\n            this._core.webglRestored = getContextRestoredCallback(this);\n\n            this._engine.stats.geometry.meshes++;\n        }\n    };\n\n    /**\n     * Convert JSON arrays into typed arrays,\n     * apply optional baked Model-space transforms to positions\n     */\n    SceneJS.Geometry.prototype._initNodeCore = function (data, options) {\n\n        var self = this;\n\n        options = options || {};\n\n        var primitive = data.primitive || \"triangles\";\n        var core = this._core;\n        var IndexArrayType = SceneJS.WEBGL_INFO.SUPPORTED_EXTENSIONS[\"OES_element_index_uint\"] ? Uint32Array : Uint16Array;\n\n        core._engine = this._engine;\n        core.primitive = this._getPrimitiveType(primitive);\n        core.primitiveName = primitive;\n        core.pointSize = data.pointSize || 1;\n        core.pointUVScale = data.pointUVScale || new Float32Array([1.0, 1.0]);\n        core.compressedPositions = false;\n        core.compressedNormals = false;\n        core.compressedUVs = false;\n\n        // Generate normals\n        if (data.normals) {\n            if (primitive == \"triangles\") {\n                if (data.normals === \"auto\" || data.normals === true) {\n                    if (data.positions && data.indices) {\n                        this._buildNormals(data); // Auto normal generation - build normals array\n                    }\n                }\n            }\n        }\n\n        // Create typed arrays, apply any baked transforms\n        core.arrays = {};\n\n        if (data.positions) {\n            if (data.positionDecodeMat) {\n                core.arrays.positions = data.positions;\n\n\n                core.positionDecodeMat = data.positionDecodeMat;\n                core.compressedPositions = true;\n            } else {\n                if (data.positions.constructor != Float32Array) {\n                    data.positions = new Float32Array(data.positions);\n                }\n\n                if (options.scale || options.origin) {\n                    this._applyOptions(data.positions, options)\n                }\n\n                core.arrays.positions = data.positions;\n            }\n            this._engine.stats.geometry.vertices += data.positions.length / 3;\n            this._engine.stats.memory.positions += data.positions.length * data.positions.constructor.BYTES_PER_ELEMENT;\n        }\n\n        if (data.normals) {\n            if (data.normals.constructor == Int8Array) {\n                core.arrays.normals = data.normals;\n\n                core.compressedNormals = true;\n            } else {\n                if (data.normals.constructor != Float32Array) {\n                    data.normals = new Float32Array(data.normals);\n                }\n\n                core.arrays.normals = data.normals;\n            }\n\n            this._engine.stats.memory.normals += data.normals.length * data.normals.constructor.BYTES_PER_ELEMENT;\n        }\n\n        var uvs, uv;\n        if (data.uvDecodeMats) {\n            uvs = data.uvs;\n            uv;\n            for (var i = 0, len = uvs.length; i < len; i++) {\n                uv = uvs[i];\n                if (uv.constructor != Uint16Array) {\n                    uvs[i] = new Uint16Array(uvs[i]);\n                }\n                this._engine.stats.memory.uvs += uv.length * uv.constructor.BYTES_PER_ELEMENT;\n            }\n            core.arrays.uvs = uvs;\n            core.uvDecodeMats = data.uvDecodeMats;\n            core.compressedUVs = true;\n        } else if (data.uvs) {\n            uvs = data.uvs;\n            uv;\n            for (var i = 0, len = uvs.length; i < len; i++) {\n                uv = uvs[i];\n                if (uv.constructor != Float32Array) {\n                    uvs[i] = new Float32Array(uvs[i]);\n                }\n                this._engine.stats.memory.uvs += uv.length * uv.constructor.BYTES_PER_ELEMENT;\n            }\n            core.arrays.uvs = uvs;\n        }\n\n        // ---------------- Backward-compatibility -------------------\n\n        if (data.uv) {\n            if (data.uv.constructor != Float32Array) {\n                data.uv = new Float32Array(data.uv);\n            }\n            if (!core.arrays.uvs) {\n                core.arrays.uvs = [];\n            }\n            core.arrays.uvs[0] = data.uv;\n            this._engine.stats.memory.uvs += data.uv.length * data.uv.constructor.BYTES_PER_ELEMENT;\n        }\n\n        if (data.uv1) {\n            if (data.uv1.constructor != Float32Array) {\n                data.uv1 = new Float32Array(data.uv1);\n            }\n            if (!core.arrays.uvs) {\n                core.arrays.uvs = [];\n            }\n            core.arrays.uvs[1] = data.uv1;\n            this._engine.stats.memory.uvs += data.uv1.length * data.uv1.constructor.BYTES_PER_ELEMENT;\n        }\n\n        if (data.uv2) {\n            if (data.uv2.constructor != Float32Array) {\n                data.uv2 = new Float32Array(data.uv2);\n            }\n            if (!core.arrays.uvs) {\n                core.arrays.uvs = [];\n            }\n            core.arrays.uvs[2] = data.uv2;\n            this._engine.stats.memory.uvs += data.uv2.length * data.uv2.constructor.BYTES_PER_ELEMENT;\n        }\n\n        if (data.uv3) {\n            if (data.uv3.constructor != Float32Array) {\n                data.uv3 = new Float32Array(data.uv3);\n            }\n            if (!core.arrays.uvs) {\n                core.arrays.uvs = [];\n            }\n            core.arrays.uvs[3] = data.uv3;\n            this._engine.stats.memory.uvs += data.uv3.length * data.uv3.constructor.BYTES_PER_ELEMENT;\n        }\n\n        // ----------------------------------------------------------\n\n        if (core.arrays.normals && core.arrays.uvs) {\n            core.arrays.tangents = [];\n        }\n\n        if (data.colors) {\n            if (data.colors.constructor != Uint8Array) {\n                data.colors = new Uint8Array(data.colors);\n            }\n\n            core.arrays.colors = data.colors;\n            this._engine.stats.memory.colors += data.colors.length * data.colors.constructor.BYTES_PER_ELEMENT;\n        }\n\n        if (data.indices) {\n            if (data.indices.constructor != Uint8Array &&\n                data.indices.constructor != Uint16Array &&\n                data.indices.constructor != Uint32Array)\n            {\n                data.indices = new IndexArrayType(data.indices);\n            }\n\n            core.arrays.indices = data.indices;\n            this._engine.stats.geometry.triangles += data.indices.length / 3;\n            this._engine.stats.memory.indices += data.indices.length * data.indices.constructor.BYTES_PER_ELEMENT;\n        }\n\n        if (data.pointScaleRotations) {\n            if (data.pointScaleRotations.constructor != Float32Array) {\n                data.pointScaleRotations = new Float32Array(data.pointScaleRotations);\n            }\n\n            core.arrays.pointScaleRotations = data.pointScaleRotations;\n            this._engine.stats.memory.pointScaleRotations += data.pointScaleRotations.length * data.pointScaleRotations.constructor.BYTES_PER_ELEMENT;\n        }\n\n        if (data.pointUVTranslates) {\n            if (data.pointUVTranslates.constructor != Float32Array) {\n                data.pointUVTranslates = new Float32Array(data.pointUVTranslates);\n            }\n\n            core.arrays.pointUVTranslates = data.pointUVTranslates;\n            this._engine.stats.memory.pointUVTranslates += data.pointUVTranslates.length * data.pointUVTranslates.constructor.BYTES_PER_ELEMENT;\n        }\n    };\n\n\n    /**\n     * Returns WebGL constant for primitive name\n     */\n    SceneJS.Geometry.prototype._getPrimitiveType = function (primitive) {\n\n        var gl = this._engine.canvas.gl;\n\n        switch (primitive) {\n\n            case \"points\":\n                return gl.POINTS;\n\n            case \"lines\":\n                return gl.LINES;\n\n            case \"line-loop\":\n                return gl.LINE_LOOP;\n\n            case \"line-strip\":\n                return gl.LINE_STRIP;\n\n            case \"triangles\":\n                return gl.TRIANGLES;\n\n            case \"triangle-strip\":\n                return gl.TRIANGLE_STRIP;\n\n            case \"triangle-fan\":\n                return gl.TRIANGLE_FAN;\n\n            default:\n                SceneJS_error.fatalError(\n                    SceneJS.errors.ILLEGAL_NODE_CONFIG,\n                    \"geometry primitive unsupported: '\" +\n                    primitive +\n                    \"' - supported types are: 'points', 'lines', 'line-loop', \" +\n                    \"'line-strip', 'triangles', 'triangle-strip' and 'triangle-fan'\");\n        }\n    };\n\n    /**\n     * Apply baked Model-space transformations to give position array\n     */\n    SceneJS.Geometry.prototype._applyOptions = function (positions, options) {\n\n        if (options.scale) {\n\n            var scaleX = options.scale.x != undefined ? options.scale.x : 1.0;\n            var scaleY = options.scale.y != undefined ? options.scale.y : 1.0;\n            var scaleZ = options.scale.z != undefined ? options.scale.z : 1.0;\n\n            for (var i = 0, len = positions.length; i < len; i += 3) {\n                positions[i] *= scaleX;\n                positions[i + 1] *= scaleY;\n                positions[i + 2] *= scaleZ;\n            }\n        }\n\n        if (options.origin) {\n\n            var originX = options.origin.x != undefined ? options.origin.x : 0.0;\n            var originY = options.origin.y != undefined ? options.origin.y : 0.0;\n            var originZ = options.origin.z != undefined ? options.origin.z : 0.0;\n\n            for (var i = 0, len = positions.length; i < len; i += 3) {\n                positions[i] -= originX;\n                positions[i + 1] -= originY;\n                positions[i + 2] -= originZ;\n            }\n        }\n\n        return positions;\n    };\n\n    function getContextRestoredCallback(node) {\n        return function () {\n\n            // Ensure that we recreate these in subsequent calls to\n            // core.getTangents and core.getPickPositions\n            node._core.tangentBufs = null;\n            node._core.pickPositionsBuf = null;\n\n            if (node._core.arrays.tangents) {\n                node._core.arrays.tangents = [];\n            }\n\n            node._buildNodeCore(node._engine.canvas.gl, node._core);\n        }\n    }\n\n    /**\n     * Destroy vertex buffers associated with given core\n     */\n    var destroyBuffers = function (core) {\n        if (core.vertexBuf) {\n            core.vertexBuf.destroy();\n            core.vertexBuf = null;\n        }\n\n        if (core.normalBuf) {\n            core.normalBuf.destroy();\n            core.normalBuf = null;\n        }\n\n        if (core.uvBufs) {\n            var uvBufs = core.uvBufs;\n            var uvBuf;\n            for (var i = 0, len = uvBufs.length; i < len; i++) {\n                uvBuf = uvBufs[i];\n                if (uvBuf) {\n                    uvBuf.destroy();\n                }\n            }\n            core.uvBufs = null;\n        }\n\n        if (core.colorBuf) {\n            core.colorBuf.destroy();\n            core.colorBuf = null;\n        }\n\n        if (core.pointScaleRotationBuf) {\n            core.pointScaleRotationBuf.destroy();\n            core.pointScaleRotationBuf = null;\n        }\n\n        if (core.pointUVTranslateBuf) {\n            core.pointUVTranslateBuf.destroy();\n            core.pointUVTranslateBuf = null;\n        }\n\n        if (core.tangentBufs) {\n            var tangentBufs = core.tangentBufs;\n            var tangentBuf;\n            for (var j = 0, lenj = tangentBufs.length; j < lenj; j++) {\n                tangentBuf = tangentBufs[j];\n                if (tangentBuf) {\n                    tangentBuf.destroy();\n                }\n            }\n            core.tangentBufs = null;\n        }\n\n        if (core.indexBuf) {\n            core.indexBuf.destroy();\n            core.indexBuf = null;\n        }\n    };\n\n    /**\n     * Allocates WebGL buffers for geometry arrays\n     *\n     * In addition to initially allocating those, this is called to reallocate them after\n     * WebGL context is regained after being lost.\n     */\n    SceneJS.Geometry.prototype._buildNodeCore = function (gl, core) {\n\n        try { // TODO: Modify usage flags in accordance with how often geometry is evicted\n            buildCore(gl, core);\n        } catch (e) { // Allocation failure - delete whatever buffers got allocated\n            destroyBuffers(core);\n            SceneJS_error.fatalError(\n                SceneJS.errors.ERROR,\n                \"Failed to allocate geometry: \" + e);\n        }\n    };\n\n    SceneJS.Geometry.prototype._updateArray = function (array, items, offset) {\n\n        var arrayLen = array.length;\n        var itemsLen = items.length;\n\n        if (itemsLen + offset > arrayLen) {\n            itemsLen -= (itemsLen + offset) - arrayLen;\n        }\n\n        for (var i = offset, j = 0; j < itemsLen; i++, j++) {\n            array[i] = items[j];\n        }\n\n    };\n\n    /** Builds normal vectors from positions and indices\n     * @private\n     */\n    SceneJS.Geometry.prototype._buildNormals = function (data) {\n\n        var positions = data.positions;\n        var indices = data.indices;\n        var nvecs = new Array(positions.length / 3);\n        var j0;\n        var j1;\n        var j2;\n        var v1;\n        var v2;\n        var v3;\n\n        for (var i = 0, len = indices.length - 3; i < len; i += 3) {\n            j0 = indices[i + 0];\n            j1 = indices[i + 1];\n            j2 = indices[i + 2];\n\n            v1 = [positions[j0 * 3 + 0], positions[j0 * 3 + 1], positions[j0 * 3 + 2]];\n            v2 = [positions[j1 * 3 + 0], positions[j1 * 3 + 1], positions[j1 * 3 + 2]];\n            v3 = [positions[j2 * 3 + 0], positions[j2 * 3 + 1], positions[j2 * 3 + 2]];\n\n            v2 = vec4.subtract(vec4.create(), v2, v1);\n            v3 = vec4.subtract(vec4.create(), v3, v1);\n\n            var n = vec4.normalize(vec4.create(), SceneJS_math_cross3Vec4(v2, v3, [0, 0, 0, 0]));\n\n            if (!nvecs[j0]) nvecs[j0] = [];\n            if (!nvecs[j1]) nvecs[j1] = [];\n            if (!nvecs[j2]) nvecs[j2] = [];\n\n            nvecs[j0].push(n);\n            nvecs[j1].push(n);\n            nvecs[j2].push(n);\n        }\n\n        var normals = new Float32Array(positions.length);\n\n        // now go through and average out everything\n        for (var i = 0, len = nvecs.length; i < len; i++) {\n            var nvec = nvecs[i];\n            if (!nvec) {\n                continue;\n            }\n            var count = nvec.length;\n            var x = 0;\n            var y = 0;\n            var z = 0;\n            for (var j = 0; j < count; j++) {\n                x += nvec[j][0];\n                y += nvec[j][1];\n                z += nvec[j][2];\n            }\n            normals[i * 3 + 0] = (x / count);\n            normals[i * 3 + 1] = (y / count);\n            normals[i * 3 + 2] = (z / count);\n        }\n\n        data.normals = normals;\n        this._engine.stats.memory.normals += normals.length / 3;\n    };\n\n    SceneJS.Geometry.prototype.setSource = function (sourceConfigs) {\n        this._sourceConfigs = sourceConfigs;\n        var source = this._source;\n        if (source && source.configure) {\n            source.configure(sourceConfigs);\n        }\n    };\n\n    SceneJS.Geometry.prototype.getSource = function () {\n        return this._sourceConfigs || {};\n    };\n\n    SceneJS.Geometry.prototype.getBackfaces = function () {\n        return this.backfaces;\n    };\n\n    SceneJS.Geometry.prototype.setBackfaces = function (bf) {\n        this.backfaces = bf;\n        var object = this.getObject();\n        if (object) {\n            object.backfaces = bf;\n        }\n        this._engine.display.imageDirty = true;\n    };\n\n    SceneJS.Geometry.prototype.getAddBlend = function () {\n        return this.addBlend;\n    };\n\n    SceneJS.Geometry.prototype.setAddBlend = function (ab) {\n        this.addBlend = ab;\n        var object = this.getObject();\n        if (object) {\n            object.addBlend = ab;\n        }\n        this._engine.display.imageDirty = true;\n    };\n\n    SceneJS.Geometry.prototype.getLayer = function () {\n        return this.layer;\n    };\n\n    SceneJS.Geometry.prototype.setLayer = function (l) {\n        this.layer = l;\n        var object = this.getObject();\n        if (object) {\n            object.layer = l;\n        }\n        this._engine.display.objectListDirty = true;\n    };\n\n    SceneJS.Geometry.prototype.setPositions = function (positions) {\n        if (positions && this._core.vertexBuf) {\n            this._boundaryDirty = true;\n            var core = this._core;\n            core.vertexBuf.bind();\n            core.vertexBuf.setData(positions);\n            core.arrays.positions.set(positions);\n            core.kdTreeDirty = true;\n            this._engine.display.imageDirty = true;\n        }\n    };\n\n    SceneJS.Geometry.prototype.getPositions = function () {\n        return this._core.arrays ? this._core.arrays.positions : null;\n    };\n\n    SceneJS.Geometry.prototype.getPositionDecodeMat = function () {\n        return this._core.positionDecodeMat || null;\n    };\n\n    SceneJS.Geometry.prototype.setNormals = function (normals) {\n        if (normals && this._core.normalBuf) {\n            var core = this._core;\n            core.normalBuf.bind();\n            core.normalBuf.setData(normals);\n            core.arrays.normals.set(normals);\n            this._engine.display.imageDirty = true;\n        }\n    };\n\n    SceneJS.Geometry.prototype.getNormals = function () {\n        return this._core.arrays ? this._core.arrays.normals : null;\n    };\n\n    SceneJS.Geometry.prototype.setColors = function (colors) {\n        if (colors && this._core.colorBuf) {\n            var core = this._core;\n            core.colorBuf.bind();\n            core.colorBuf.setData(colors);\n            core.arrays.colors.set(colors);\n            this._engine.display.imageDirty = true;\n        }\n    };\n\n    SceneJS.Geometry.prototype.getColors = function () {\n        return this._core.arrays ? this._core.arrays.colors : null;\n    };\n\n    SceneJS.Geometry.prototype.setIndices = function (indices) {\n        if (indices && this._core.indexBuf) {\n            this._boundaryDirty = true;\n            var core = this._core;\n            core.indexBuf.bind();\n\n            // Make sure indices remain of the same type.\n            if (indices.constructor != core.arrays.indices.constructor) {\n                indices = new core.arrays.indices.constructor(indices);\n            }\n            core.indexBuf.setData(indices);\n            core.arrays.indices.set(indices);\n            core.kdTreeDirty = true;\n            this._engine.display.imageDirty = true;\n        }\n    };\n\n    SceneJS.Geometry.prototype.getIndices = function () {\n        return this._core.arrays ? this._core.arrays.indices : null;\n    };\n\n    SceneJS.Geometry.prototype.getUVs = function () {\n        return this._core.arrays ? this._core.arrays.uvs : null;\n    };\n\n    SceneJS.Geometry.prototype.getUV = function () {\n        return this._core.arrays ? this._core.arrays.uvs[0] : null;\n    };\n\n    SceneJS.Geometry.prototype.getUVDecodeMat = function (i) {\n        return this._core.uvDecodeMats[i || 0] || null;\n    };\n\n    SceneJS.Geometry.prototype.getUV2 = function () {\n        return this._core.arrays ? this._core.arrays.uvs[1] : null;\n    };\n\n    SceneJS.Geometry.prototype.getUV2 = function () {\n        return this._core.arrays ? this._core.arrays.uvs[2] : null;\n    };\n\n    SceneJS.Geometry.prototype.getUv3 = function () {\n        return this._core.arrays ? this._core.arrays.uvs[3] : null;\n    };\n\n    SceneJS.Geometry.prototype.setUV = function (i, data) {\n        if (data && this._core.uvBufs && this._core.uvBufs[i]) {\n            var core = this._core;\n            core.uvBufs[i].bind();\n            core.uvBufs[i].setData(data);\n            core.arrays.uvs[i].set(data);\n            this._engine.display.imageDirty = true;\n        }\n    };\n\n    SceneJS.Geometry.prototype.hasCompressedPositions = function () {\n        return !!this._core.compressedPositions;\n    };\n\n    SceneJS.Geometry.prototype.hasCompressedNormals = function () {\n        return !!this._core.compressedNormals;\n    };\n\n    SceneJS.Geometry.prototype.hasCompressedUVs = function () {\n        return !!this._core.compressedUVs;\n    };\n\n    SceneJS.Geometry.prototype.getPrimitive = function () {\n        return this.primitive;\n    };\n\n    SceneJS.Geometry.prototype.getPointSize = function () {\n        return this._core.pointSize;\n    };\n\n    SceneJS.Geometry.prototype.setPointSize = function (size) {\n        if (size && this._core.pointSize !== size) {\n            this._core.pointSize = size;\n            this._engine.display.imageDirty = true;\n        }\n    };\n\n    SceneJS.Geometry.prototype.getPointUVScale = function () {\n        return this._core.pointUVScale;\n    };\n\n    SceneJS.Geometry.prototype.setPointUVScale = function (uvScale) {\n        if (uvScale && this._core.pointUVScale !== uvScale) {\n            this._core.pointUVScale = uvScale;\n            this._engine.display.imageDirty = true;\n        }\n    };\n\n    SceneJS.Geometry.prototype.setPointScaleRotations = function (pointScaleRotations) {\n        if (pointScaleRotations && this._core.pointScaleRotationBuf) {\n            var core = this._core;\n            core.pointScaleRotationBuf.bind();\n            core.pointScaleRotationBuf.setData(pointScaleRotations);\n            core.arrays.pointScaleRotations.set(pointScaleRotations);\n            this._engine.display.imageDirty = true;\n        }\n    };\n\n    SceneJS.Geometry.prototype.getPointScaleRotations = function () {\n        return this._core.arrays ? this._core.arrays.pointScaleRotations : null;\n    };\n\n    SceneJS.Geometry.prototype.setPointUVTranslates = function (pointUVTranslates) {\n        if (pointUVTranslates && this._core.pointUVTranslateBuf) {\n            var core = this._core;\n            core.pointUVTranslateBuf.bind();\n            core.pointUVTranslateBuf.setData(pointUVTranslates);\n            core.arrays.pointUVTranslates.set(pointUVTranslates);\n            this._engine.display.imageDirty = true;\n        }\n    };\n\n    SceneJS.Geometry.prototype.getPointUVTranslates = function () {\n        return this._core.arrays ? this._core.arrays.pointUVTranslates : null;\n    };\n\n    SceneJS.Geometry.prototype.getKdTree = function () {\n        var object = this.getObject();\n        if (object) {\n            return object.getKdTree();\n        } else {\n            return this._core.getKdTree();\n        }\n    };\n\n    SceneJS.Geometry.prototype.getObject = function() {\n        return this._engine.display._objects[this.id] || null;\n    };\n\n    /** Returns the Model-space boundary of this geometry\n     *\n     * @returns {*}\n     */\n    SceneJS.Geometry.prototype.getBoundary = function () {\n        if (!this._boundaryDirty) {\n            return this._boundary;\n        }\n\n        var arrays = this._core.arrays;\n\n        if (!arrays) {\n            return null;\n        }\n\n        var positions = arrays.positions;\n\n        if (!positions) {\n            return null;\n        }\n\n        this._boundary.xmin = Number.POSITIVE_INFINITY;\n        this._boundary.ymin = Number.POSITIVE_INFINITY;\n        this._boundary.zmin = Number.POSITIVE_INFINITY;\n        this._boundary.xmax = Number.NEGATIVE_INFINITY;\n        this._boundary.ymax = Number.NEGATIVE_INFINITY;\n        this._boundary.zmax = Number.NEGATIVE_INFINITY;\n\n        var x, y, z;\n\n        for (var i = 0, len = positions.length - 2; i < len; i += 3) {\n\n            x = positions[i];\n            y = positions[i + 1];\n            z = positions[i + 2];\n\n            if (x < this._boundary.xmin) {\n                this._boundary.xmin = x;\n            }\n            if (y < this._boundary.ymin) {\n                this._boundary.ymin = y;\n            }\n            if (z < this._boundary.zmin) {\n                this._boundary.zmin = z;\n            }\n            if (x > this._boundary.xmax) {\n                this._boundary.xmax = x;\n            }\n            if (y > this._boundary.ymax) {\n                this._boundary.ymax = y;\n            }\n            if (z > this._boundary.zmax) {\n                this._boundary.zmax = z;\n            }\n        }\n\n        this._boundaryDirty = false;\n\n        return this._boundary;\n    };\n\n    SceneJS.Geometry.prototype._compile = function (ctx) {\n\n        if (this._core._loading) { // TODO: Breaks with asynch loaded cores - this node needs to recompile when target core is loaded\n            this._compileNodes(ctx);\n            return;\n        }\n\n        var core = this._core;\n\n        var parts = [                           // Safe to build geometry hash here - geometry is immutable\n            core.normalBuf ? \"t\" : \"f\",\n            core.arrays && core.arrays.tangents ? \"t\" : \"f\",\n            core.colorBuf ? \"t\" : \"f\",\n            core.primitive,\n            core.compressedPositions ? \"t\" : \"f\",\n            core.compressedNormals ? \"t\" : \"f\",\n            core.compressedUVs ? \"t\" : \"f\",\n            core.pointScaleRotationBuf ? \"t\" : \"f\",\n            core.pointUVTranslateBuf ? \"t\" : \"f\"\n        ];\n\n        // Hash parts for UVs\n\n        parts.push(\";uvs\");\n        var uvBufs = core.uvBufs;\n        if (uvBufs) {\n            for (var i = 0, len = uvBufs.length; i < len; i++) {\n                parts.push(uvBufs[i] ? \"t\" : \"f\");\n            }\n        }\n\n        core.hash = parts.join(\"\");\n\n        core.stateId = this._core.stateId;\n        core.type = \"geometry\";\n\n        this._engine.display.geometry = core;\n\n        SceneJS_events.fireEvent(SceneJS_events.OBJECT_COMPILING, { // Pull in state updates from scenes nodes\n            display: this._engine.display\n        });\n\n        this._engine.display.buildObject(this.id, { backfaces: this.backfaces, addBlend: this.addBlend, layer: this.layer } );\n\n        if (this.onObjectCreate) {\n            this.onObjectCreate(this.getObject());\n        }\n\n        this._compileNodes(ctx);\n    };\n\n    SceneJS.Geometry.prototype._destroy = function () {\n\n        this._engine.display.removeObject(this.id);\n\n        /* Destroy core if no other references\n         */\n        if (this._core.useCount == 1) {\n\n            this._destroyNodeCore();\n\n            if (this._source && this._source.destroy) {\n                this._source.destroy();\n            }\n\n            this._engine.stats.geometry.meshes--;\n        }\n    };\n\n    SceneJS.Geometry.prototype._disconnectFromScene = function () {\n        this._engine.display.removeObject(this.id);\n    };\n\n\n    SceneJS.Geometry.prototype._destroyNodeCore = function () {\n\n        if (document.getElementById(this._engine.canvas.canvasId)) { // Context won't exist if canvas has disappeared\n            destroyBuffers(this._core);\n        }\n\n        var arrays = this._core.arrays;\n\n        if (arrays.positions) {\n            this._engine.stats.memory.positions -= arrays.positions.length / 3;\n        }\n        if (arrays.normals) {\n            this._engine.stats.memory.normals -= arrays.normals.length / 3;\n        }\n        if (arrays.colors) {\n            this._engine.stats.memory.colors -= arrays.colors.length / 3;\n        }\n        if (arrays.uvs && arrays.uvs.length > 0) {\n            this._engine.stats.memory.uvs -= arrays.uvs.length * (arrays.uvs[0].length / 2);\n        }\n        if (arrays.indices) {\n            this._engine.stats.memory.indices -= arrays.indices.length;\n        }\n        if (arrays.pointScaleRotations) {\n            this._engine.stats.memory.pointScaleRotations -= arrays.pointScaleRotations.length / 2;\n        }\n        if (arrays.pointUVTranslates) {\n            this._engine.stats.memory.pointUVTranslates -= arrays.pointUVTranslates.length / 2;\n        }\n    };\n\n    function buildCore(gl, core) {\n        var usage = gl.STATIC_DRAW;\n        var arrays = core.arrays;\n        var compressed = core.compressedPositions || core.compressedNormals || core.compressedUVs;\n        var dataLength = 0;\n\n        core.transparent = !!arrays.colors;\n\n        if (arrays.positions) {\n            core.vertexBuf = new SceneJS._webgl.ArrayBuffer(gl, gl.ARRAY_BUFFER, arrays.positions, arrays.positions.length, 3, usage);\n        }\n\n        if (core.compressedNormals) {\n            // Note: Oct-encoded normal buffer has to be normalized.\n            core.normalBuf = new SceneJS._webgl.ArrayBuffer(gl, gl.ARRAY_BUFFER, arrays.normals, arrays.normals.length, 2, usage, true);\n        } else if (arrays.normals) {\n            core.normalBuf = new SceneJS._webgl.ArrayBuffer(gl, gl.ARRAY_BUFFER, arrays.normals, arrays.normals.length, 3, usage);\n        }\n\n        if (arrays.uvs) {\n\n            var uvs = arrays.uvs;\n            var offsets;\n            var i;\n            var len;\n            var uv;\n\n            core.uvBufs = [];\n\n            for (i = 0, len = uvs.length; i < len; i++) {\n                uv = arrays.uvs[i];\n                if (uv.length > 0) {\n                    core.uvBufs.push(new SceneJS._webgl.ArrayBuffer(gl, gl.ARRAY_BUFFER, uv, uv.length, 2, usage));\n                }\n            }\n        }\n\n        if (arrays.colors) {\n            core.colorBuf = new SceneJS._webgl.ArrayBuffer(gl, gl.ARRAY_BUFFER, arrays.colors, arrays.colors.length, 4, usage, true);\n        }\n\n        if (arrays.indices) {\n            core.indexBuf = new SceneJS._webgl.ArrayBuffer(gl, gl.ELEMENT_ARRAY_BUFFER, arrays.indices, arrays.indices.length, 1, usage);\n        }\n\n        if (arrays.pointScaleRotations) {\n            core.pointScaleRotationBuf = new SceneJS._webgl.ArrayBuffer(gl, gl.ARRAY_BUFFER, arrays.pointScaleRotations, arrays.pointScaleRotations.length, 2, usage, true);\n        }\n\n        if (arrays.pointUVTranslates) {\n            core.pointUVTranslateBuf = new SceneJS._webgl.ArrayBuffer(gl, gl.ARRAY_BUFFER, arrays.pointUVTranslates, arrays.pointUVTranslates.length, 2, usage, true);\n        }\n    }\n\n})();\n;/**\n * @class Scene graph node which assigns nodes in its subgraph to a library\n * @extends SceneJS.Node\n */\n(function () {\n    \"use strict\";\n    \n    SceneJS.Library = SceneJS_NodeFactory.createNodeType(\"library\");\n    SceneJS.Library.prototype._compile = function(ctx) { // Bypass child nodes\n    };\n})();\n\n\n\n;/*\n\n TODO: material system from virtualworldframework:\n\n \"color\":\n \"ambient\":\n \"specColor\":\n \"shininess\":\n \"reflect\":\n \"specular\":\n \"emit\":\n \"alpha\":\n \"binaryAlpha\":\n */\n(function () {\n    \"use strict\";\n        \n    /**\n     * @class Scene graph node which defines surface material properties for the {@link SceneJS.Geometry}s within its subgraph\n     * @extends SceneJS.Node\n     */\n    SceneJS.Material = SceneJS_NodeFactory.createNodeType(\"material\");\n\n    /**\n     * Blinn-Phong workflow ID.\n     */\n    SceneJS.Material.PHONG = 0;\n\n    /**\n     * Metallic-roughness workflow ID.\n     */\n    SceneJS.Material.METALLIC = 1;\n\n    /**\n     * The default state core singleton for {@link SceneJS.Material} nodes\n     */\n    var defaultCore = {\n        type:\"material\",\n\n        stateId:SceneJS._baseStateId++,\n\n        workflow: SceneJS.Material.PHONG,\n\n        baseColor:new Float32Array([ 1.0, 1.0, 1.0, 1.0 ]), // phong & metalRough\n        specularColor:new Float32Array([ 1.0, 1.0, 1.0, 1.0 ]), // phong\n        emitColor:new Float32Array([ 1.0, 1.0, 1.0, 0.0 ]), // phong & metalRough\n        shine:70.0, // phong\n        metalRoughspecularf0: new Float32Array([ 1.0, 1.0, 0.1, 0.0 ]) // Packed metalRough params: metallic, roughness and specularf0\n    };\n\n    var coreStack = [];\n    var stackLen = 0;\n\n    SceneJS_events.addListener(\n        SceneJS_events.SCENE_COMPILING,\n        function (params) {\n            params.engine.display.material = defaultCore;\n            stackLen = 0;\n        });\n\n    SceneJS.Material.prototype._init = function (params) {\n        if (this._core.useCount == 1) {\n            this._core.baseColor = new Float32Array(defaultCore.baseColor);\n            this._core.specularColor = new Float32Array(defaultCore.specularColor);\n            this._core.emitColor = new Float32Array(defaultCore.emitColor);\n            this._core.shine = defaultCore.shine;\n            this._core.metalRoughspecularf0 = new Float32Array(defaultCore.metalRoughspecularf0);\n            if (params.color || params.baseColor) {\n                this.setBaseColor(params.color || params.baseColor);\n            }\n            if (params.specularColor) {\n                this.setSpecularColor(params.specularColor);\n            }\n            if (params.emitColor) {\n                this.setEmitColor(params.emitColor);\n            }\n            if (params.specular != undefined) {\n                this.setSpecular(params.specular);\n            }\n            if (params.shine != undefined) {\n                this.setShine(params.shine);\n            }\n            if (params.emit != undefined) {\n                this.setEmit(params.emit);\n            }\n            if (params.alpha != undefined) {\n                this.setAlpha(params.alpha);\n            }\n            if (params.metallic != undefined) {\n                this.setMetallic(params.metallic);\n            }\n            if (params.roughness != undefined) {\n                this.setRoughness(params.roughness);\n            }\n            if (params.specularf0 != undefined) {\n                this.setspecularf0(params.specularf0);\n            }\n            this.setWorkflow(params.workflow);\n        }\n    };\n\n    SceneJS.Material.prototype.setWorkflow = function (workflow) {\n        workflow = workflow || \"phong\";\n        if (workflow === \"phong\") {\n            this._core.workflow = SceneJS.Material.PHONG;\n        } else if (workflow === \"metallic\") {\n            this._core.workflow = SceneJS.Material.METALLIC;\n        } else {\n            console.error(\"Unsupported SceneJS material workflow: \" + workflow);\n            this._core.workflow = SceneJS.Material.PHONG;\n        }\n        this._engine.display.imageDirty = true;\n        return this;\n    };\n\n    SceneJS.Material.prototype.getWorkflow = function () {\n        switch (this._core.workflow) {\n            case  SceneJS.Material.PHONG:\n                return \"phong\";\n            case  SceneJS.Material.METALLIC:\n                return \"metallic\";\n        }\n    };\n\n    /**\n     * @deprecated\n     * @param color\n     * @return {*}\n     */\n    SceneJS.Material.prototype.setBaseColor = function (color) {\n        var defaultBaseColor = defaultCore.baseColor;\n        this._core.baseColor[0] = color.r != undefined ? color.r : defaultBaseColor[0];\n        this._core.baseColor[1] = color.g != undefined ? color.g : defaultBaseColor[1];\n        this._core.baseColor[2] = color.b != undefined ? color.b : defaultBaseColor[2];\n        this._engine.display.imageDirty = true;\n        return this;\n    };\n\n    SceneJS.Material.prototype.setColor = SceneJS.Material.prototype.setBaseColor;\n\n    /**\n     * @deprecated\n     * @return {Object}\n     */\n    SceneJS.Material.prototype.getBaseColor = function () {\n        return {\n            r:this._core.baseColor[0],\n            g:this._core.baseColor[1],\n            b:this._core.baseColor[2]\n        };\n    };\n\n    SceneJS.Material.prototype.getColor = SceneJS.Material.prototype.getBaseColor;\n\n    SceneJS.Material.prototype.setSpecularColor = function (color) {\n        var defaultSpecularColor = defaultCore.specularColor;\n        this._core.specularColor[0] = color.r != undefined ? color.r : defaultSpecularColor[0];\n        this._core.specularColor[1] = color.g != undefined ? color.g : defaultSpecularColor[1];\n        this._core.specularColor[2] = color.b != undefined ? color.b : defaultSpecularColor[2];\n        this._engine.display.imageDirty = true;\n        return this;\n    };\n\n    SceneJS.Material.prototype.getSpecularColor = function () {\n        return {\n            r:this._core.specularColor[0],\n            g:this._core.specularColor[1],\n            b:this._core.specularColor[2]\n        };\n    };\n\n    SceneJS.Material.prototype.setEmitColor = function (color) {\n        var defaultEmitColor = defaultCore.emitColor;\n        this._core.emitColor[0] = color.r != undefined ? color.r : defaultEmitColor[0];\n        this._core.emitColor[1] = color.g != undefined ? color.g : defaultEmitColor[1];\n        this._core.emitColor[2] = color.b != undefined ? color.b : defaultEmitColor[2];\n        this._engine.display.imageDirty = true;\n        return this;\n    };\n\n    SceneJS.Material.prototype.getEmitColor = function () {\n        return {\n            r:this._core.emitColor[0],\n            g:this._core.emitColor[1],\n            b:this._core.emitColor[2]\n        };\n    };\n\n    SceneJS.Material.prototype.setSpecular = function (specular) {\n        this._core.specularColor[3] = (specular != undefined && specular != null) ? specular : defaultCore.specularColor[3];\n        this._engine.display.imageDirty = true;\n        return this;\n    };\n\n    SceneJS.Material.prototype.getSpecular = function () {\n        return this._core.specularColor[3];\n    };\n\n    SceneJS.Material.prototype.setShine = function (shine) {\n        this._core.shine = (shine != undefined) ? shine : defaultCore.shine;\n        this._engine.display.imageDirty = true;\n        return this;\n    };\n\n    SceneJS.Material.prototype.getShine = function () {\n        return this._core.shine;\n    };\n\n    SceneJS.Material.prototype.setEmit = function (emit) {\n        this._core.emitColor[3] = (emit != undefined) ? emit : defaultCore.emitColor[3];\n        this._engine.display.imageDirty = true;\n        return this;\n    };\n\n    SceneJS.Material.prototype.getEmit = function () {\n        return this._core.emitColor[3];\n    };\n\n    SceneJS.Material.prototype.setAlpha = function (alpha) {\n        var wasTrasparent = this._core.baseColor[3] < 1;\n        this._core.baseColor[3] = (alpha != undefined) ? alpha : defaultCore.baseColor[3];\n        this._core.transparent = this._core.baseColor[3] < 1;\n        this._engine.display.imageDirty = true;\n\n        if (wasTrasparent !== this._core.transparent) {\n            this._engine.display.objectListDirty = true;\n        }\n\n        return this;\n    };\n\n    SceneJS.Material.prototype.getAlpha = function () {\n        return this._core.baseColor[3];\n    };\n\n    SceneJS.Material.prototype.setMetallic = function (metallic) {\n        this._core.metalRoughspecularf0[0] = (metallic != undefined) ? metallic : defaultCore.metalRoughspecularf0[0];\n        this._engine.display.imageDirty = true;\n        return this;\n    };\n\n    SceneJS.Material.prototype.getMetallic = function () {\n        return this._core.metalRoughspecularf0[0];\n    };\n\n    SceneJS.Material.prototype.setRoughness = function (roughness) {\n        this._core.metalRoughspecularf0[1] = (roughness != undefined) ? roughness : defaultCore.metalRoughspecularf0[1];\n        this._engine.display.imageDirty = true;\n        return this;\n    };\n\n    SceneJS.Material.prototype.getRoughness = function () {\n        return this._core.metalRoughspecularf0[1];\n    };\n\n    SceneJS.Material.prototype.setspecularf0 = function (specularf0) {\n        this._core.metalRoughspecularf0[2] = (specularf0 != undefined) ? specularf0 : defaultCore.metalRoughspecularf0[2];\n        this._engine.display.imageDirty = true;\n        return this;\n    };\n\n    SceneJS.Material.prototype.getspecularf0 = function () {\n        return this._core.metalRoughspecularf0[2];\n    };\n\n    SceneJS.Material.prototype._compile = function (ctx) {\n        this._engine.display.material = coreStack[stackLen++] = this._core;\n        this._compileNodes(ctx);\n        this._engine.display.material = (--stackLen > 0) ? coreStack[stackLen - 1] : defaultCore;\n        coreStack[stackLen] = null; // Release memory\n    };\n\n})();\n;(function () {\n    \"use strict\";\n    \n    var KD_TREE_MAX_DEPTH = SceneJS.KD_TREE_MAX_DEPTH;\n    var KD_TREE_MIN_TRIANGLES = SceneJS.KD_TREE_MIN_TRIANGLES;\n\n    /**\n     * The default state core singleton for {@link SceneJS.MorphGeometry} nodes\n     */\n    var defaultCore = {\n        type: \"morphGeometry\",\n        stateId: SceneJS._baseStateId++,\n        hash: \"\",\n        //         empty: true,\n        morph: null\n    };\n\n    var coreStack = [];\n    var stackLen = 0;\n\n    SceneJS_events.addListener(\n        SceneJS_events.SCENE_COMPILING,\n        function (params) {\n            params.engine.display.morphGeometry = defaultCore;\n            stackLen = 0;\n        });\n\n    /**\n     * @class Scene graph node which defines morphing behaviour for the {@link SceneJS.Geometry}s within its subgraph\n     * @extends SceneJS.Node\n     */\n    SceneJS.MorphGeometry = SceneJS_NodeFactory.createNodeType(\"morphGeometry\");\n\n    SceneJS.MorphGeometry.prototype._init = function (params) {\n\n        if (this._core.useCount == 1) { // This node defines the resource\n\n            this._pickPositionsDirty = true;\n\n            this._buildNodeCore(params);\n\n            this._core.webglRestored = function () {\n                //self._buildNodeCore(self._engine.canvas.gl, self._core);\n            };\n\n            var self = this;\n\n            // For the morph target at the given index,\n            // returns a positions VBO for triangle-picking,\n            // lazy-generated from the given indices if not yet existing.\n\n            this._core.getPickPositions = function (index, indices) {\n                if (self._pickPositionsDirty) {\n                    self._buildPickPositions(indices);\n                }\n                return self._core.targets[index].pickPositionsBuf;\n            };\n\n            // For the morph target at the given index,\n            // returns tangents for normal mapping\n            // lazy-generated from the given indices if not yet existing.\n\n            this._core.getTangents = function (index, indices, uv, positionDecodeMat, uvDecodeMat) {\n                var core = self._core;\n                var target = core.targets[index];\n                if (target.tangentBuf) {\n                    return target.tangentBuf;\n                }\n                var positions = target.positions;\n                var positionDecodeMat = target.positionDecodeMat || positionDecodeMat;\n                uv = target.uv || uv;\n                if (positions && indices && uv) {\n                    var gl = self._engine.canvas.gl;\n                    var tangents = SceneJS_math_buildTangents(positions, indices, uv, positionDecodeMat, uvDecodeMat);\n                    target.tangents = tangents;\n                    var usage = gl.STATIC_DRAW;\n                    target.tangentBuf = new SceneJS._webgl.ArrayBuffer(gl, gl.ARRAY_BUFFER, tangents, tangents.length, 3, usage);\n                    return target.tangentBuf;\n                }\n            };\n\n            this.setFactor(params.factor);\n        }\n\n        this._core.factor = params.factor || 0;\n        this._core.clamp = !!params.clamp;\n    };\n\n    SceneJS.MorphGeometry.prototype._buildNodeCore = function (data) {\n\n        try {\n            buildCore(this, data);\n        } catch (e) {\n\n            /* Allocation failure - deallocate target VBOs\n             */\n            for (var i = 0, len = this._core.targets.length; i < len; i++) {\n\n                target = core.targets[i];\n\n                if (target.vertexBuf) {\n                    target.vertexBuf.destroy();\n                }\n                if (target.normalBuf) {\n                    target.normalBuf.destroy();\n                }\n                if (target.uvBuf) {\n                    target.uvBuf.destroy();\n                }\n                if (target.uvBuf2) {\n                    target.uvBuf2.destroy();\n                }\n            }\n\n            SceneJS_error.fatalError(\n                SceneJS.errors.ERROR,\n                \"Failed to allocate VBO(s) for morphGeometry: \" + e);\n        }\n\n    };\n\n    SceneJS.MorphGeometry.prototype._buildPickPositions = function (indices) {\n\n        var core = this._core;\n        var target = null;\n        var pickPositions;\n        var gl = this._engine.canvas.gl;\n        var usage = gl.STATIC_DRAW;\n\n        // On each morph target, build a positions array for\n        // color-indexed triangle-picking.\n\n        for (var i = 0, len = core.targets.length; i < len; i++) {\n\n            target = core.targets[i];\n\n            if (target.positions) {\n\n                if (target.pickPositionsBuf) {\n                    target.pickPositionsBuf.destroy();\n                    target.pickPositionsBuf = null;\n                }\n\n                pickPositions = SceneJS_math_getPickPositions(target.positions, indices);\n\n                target.pickPositionsBuf = new SceneJS._webgl.ArrayBuffer(gl, gl.ARRAY_BUFFER, pickPositions, pickPositions.length, 3, usage);\n            }\n        }\n\n        this._pickPositionsDirty = false;\n    };\n\n    SceneJS.MorphGeometry.prototype.setFactor = function (factor) {\n        factor = factor || 0.0;\n\n        var core = this._core;\n\n        var keys = core.keys;\n        var key1 = core.key1;\n        var key2 = core.key2;\n\n        var oldFactor = core.factor;\n\n        if (factor < keys[0]) {\n            key1 = 0;\n            key2 = 1;\n\n        } else if (factor > keys[keys.length - 1]) {\n            key1 = keys.length - 2;\n            key2 = key1 + 1;\n\n        } else {\n            while (keys[key1] > factor) {\n                key1--;\n                key2--;\n            }\n            while (keys[key2] < factor) {\n                key1++;\n                key2++;\n            }\n        }\n\n        var frameUpdate = key1 != core.key1;\n\n        /* Normalise factor to range [0.0..1.0] for the target frame\n         */\n        core.factor = (factor - keys[key1]) / (keys[key2] - keys[key1]);\n\n        this._factor = factor;\n\n        var morphUpdate = frameUpdate || oldFactor != core.factor;\n\n        core.key1 = key1;\n        core.key2 = key2;\n\n        if (morphUpdate) {\n            var currentFrame = this.getCurrentFrame();\n            if (this.onUpdate) {\n                this.onUpdate(currentFrame);\n            }\n            if (frameUpdate && this.onFrameUpdate) {\n                this.onFrameUpdate(currentFrame);\n            }\n        }\n\n        this._engine.display.imageDirty = true;\n    };\n\n    SceneJS.MorphGeometry.prototype.getFactor = function () {\n        return this._factor;\n    };\n\n    SceneJS.MorphGeometry.prototype.getKeys = function () {\n        return this._core.keys;\n    };\n\n    SceneJS.MorphGeometry.prototype.getTargets = function () {\n        return this._core.targets;\n    };\n\n    SceneJS.MorphGeometry.prototype.getCurrentFrame = function () {\n        var core = this._core;\n        var key1 = core.key1;\n        var key2 = core.key2;\n        return {\n            key1: key1,\n            key2: key2,\n            factor: core.factor,\n            target1: core.targets[key1],\n            target2: core.targets[key2]\n        }\n    };\n\n    SceneJS.MorphGeometry.prototype._compile = function (ctx) {\n\n        if (!this._core.hash) {\n            this._makeHash();\n        }\n\n        this._engine.display.morphGeometry = coreStack[stackLen++] = this._core;\n        this._compileNodes(ctx);\n        this._engine.display.morphGeometry = (--stackLen > 0) ? coreStack[stackLen - 1] : defaultCore;\n        coreStack[stackLen] = null; // Release memory\n    };\n\n    SceneJS.MorphGeometry.prototype._makeHash = function () {\n        var core = this._core;\n        if (core.targets.length > 0) {\n            var target0 = core.targets[0];  // All targets have same arrays\n            var t = \"t\";\n            var f = \"f\";\n            core.hash = ([\n                target0.vertexBuf ? t : f,\n                target0.normalBuf ? t : f,\n                target0.uvBuf ? t : f,\n                target0.uvBuf2 ? t : f\n            ]).join(\"\");\n        } else {\n            core.hash = \"\";\n        }\n    };\n\n    SceneJS.MorphGeometry.prototype._destroy = function () {\n        if (this._core.useCount == 1) { // Destroy core if no other references\n            if (document.getElementById(this._engine.canvas.canvasId)) { // Context won't exist if canvas has disappeared\n                var core = this._core;\n                var target;\n                for (var i = 0, len = core.targets.length; i < len; i++) {\n                    target = core.targets[i];\n                    if (target.vertexBuf) {\n                        target.vertexBuf.destroy();\n                    }\n                    if (target.pickPositionsBuf) {\n                        target.pickPositionsBuf.destroy();\n                    }\n                    if (target.normalBuf) {\n                        target.normalBuf.destroy();\n                    }\n                    if (target.uvBuf) {\n                        target.uvBuf.destroy();\n                    }\n                    if (target.uvBuf2) {\n                        target.uvBuf2.destroy();\n                    }\n                }\n            }\n        }\n    };\n\n    function buildCore(node, data) {\n        var targetsData = data.targets || [];\n        if (targetsData.length < 2) {\n            SceneJS_error.fatalError(\n                SceneJS.errors.ILLEGAL_NODE_CONFIG,\n                \"morphGeometry node should have at least two targets\");\n        }\n\n        var keysData = data.keys || [];\n        if (keysData.length != targetsData.length) {\n            SceneJS_error.fatalError(\n                SceneJS.errors.ILLEGAL_NODE_CONFIG,\n                \"morphGeometry node mismatch in number of keys and targets\");\n        }\n\n        var core = node._core;\n        var gl = node._engine.canvas.gl;\n        var usage = gl.STATIC_DRAW; //var usage = (!arrays.fixed) ? gl.STREAM_DRAW : gl.STATIC_DRAW;\n\n        core.keys = keysData;\n        core.targets = [];\n        core.key1 = 0;\n        core.key2 = 1;\n\n        /* First target's arrays are defaults for where not given on previous and subsequent targets.\n         * When target does have array, subsequent targets without array inherit it.\n         */\n\n        var positions;\n        var normals;\n        var uv;\n        var uv2;\n\n        var targetData;\n\n        for (var i = 0, len = targetsData.length; i < len; i++) {\n            targetData = targetsData[i];\n\n            if (!positions && targetData.positions) {\n                positions = targetData.positions;\n            }\n            if (!normals && targetData.normals) {\n                normals = targetData.normals;\n            }\n            if (!uv && targetData.uv) {\n                uv = targetData.uv;\n            }\n            if (!uv2 && targetData.uv2) {\n                uv2 = targetData.uv2;\n            }\n        }\n\n        var target;\n        var arry;\n\n        for (var i = 0, len = targetsData.length; i < len; i++) {\n            targetData = targetsData[i];\n            target = {};\n\n            arry = targetData.positions || positions;\n            if (arry) {\n                if (targetData.positionDecodeMat) {\n                    target.positions = arry;\n                    target.positionDecodeMat = targetData.positionDecodeMat;\n                    core.compressedPositions = true;\n                } else {\n                    target.positions = (arry.constructor == Float32Array) ? arry : new Float32Array(arry);\n                }\n\n                target.vertexBuf = new SceneJS._webgl.ArrayBuffer(gl, gl.ARRAY_BUFFER, target.positions, arry.length, 3, usage);\n\n                positions = arry;\n                node._engine.stats.memory.morphPositions += target.positions.length * target.positions.constructor.BYTES_PER_ELEMENT;\n            }\n\n            arry = targetData.normals || normals;\n            if (arry) {\n                if (arry.constructor == Int8Array) {\n                    target.normals = arry;\n                    core.compressedNormals = true;\n                    target.normalBuf = new SceneJS._webgl.ArrayBuffer(gl, gl.ARRAY_BUFFER, target.normals, arry.length, 2, usage, true);\n                } else {\n                    target.normals = (arry.constructor == Float32Array) ? arry : new Float32Array(arry);\n                    target.normalBuf = new SceneJS._webgl.ArrayBuffer(gl, gl.ARRAY_BUFFER, target.normals, arry.length, 3, usage);\n                }\n                normals = arry;\n                node._engine.stats.memory.morphNormals += target.normals.length * target.normals.constructor.BYTES_PER_ELEMENT;\n            }\n\n            arry = targetData.uv || uv;\n            if (arry) {\n                target.uv = (arry.constructor == Float32Array) ? arry : new Float32Array(arry);\n                target.uvBuf = new SceneJS._webgl.ArrayBuffer(gl, gl.ARRAY_BUFFER, target.uv, arry.length, 2, usage);\n                uv = arry;\n            }\n\n            arry = targetData.uv2 || uv2;\n            if (arry) {\n                target.uv2 = (arry.constructor == Float32Array) ? arry : new Float32Array(arry);\n                target.uvBuf2 = new SceneJS._webgl.ArrayBuffer(gl, gl.ARRAY_BUFFER, target.uv2, arry.length, 2, usage);\n                uv2 = arry;\n            }\n\n            core.targets.push(target);  // We'll iterate this to destroy targets when we recover from error\n        }\n\n        core.kdTree = null;\n        core.kdTreeDirty = true;\n\n        core.getKdTree = function (indices) {\n            if (!this.kdTreeDirty) {\n                return this.kdTree;\n            }\n\n            var numTris = indices.length / 3;\n            var triangles = new Array(numTris);\n            for (var i = 0; i < numTris; ++i) {\n                triangles[i] = i;\n            }\n            this.kdTree = buildKdTreeNode(triangles, indices, this.targets, 0, 0);\n            this.kdTreeDirty = false;\n\n            return this.kdTree;\n        };\n\n        node._pickPositionsDirty = true;\n    }\n\n    var position1 = vec3.create();\n    var position2 = vec3.create();\n    var position = vec3.create();\n\n    function buildKdTreeNode(triangles, indices, targets, dim, depth) {\n        var min = vec3.create();\n        var max = vec3.create();\n\n        var node = {\n            triangles: null,\n            left: null,\n            right: null,\n            bb: {\n                min: min,\n                max: max\n            }\n        };\n\n        min[0] = min[1] = min[2] = Number.POSITIVE_INFINITY;\n        max[0] = max[1] = max[2] = Number.NEGATIVE_INFINITY;\n\n        var t, len;\n        var numTargets = targets.length;\n        \n        for (t = 0, len = triangles.length; t < len; ++t) {\n            var ii = triangles[t] * 3;\n\n            for (var j = 0; j < 3; ++j) {\n                var pi = indices[ii + j] * 3;\n\n                for (var k = 0; k < numTargets; ++k) {\n                    var positions = targets[k].positions;\n                    var decompress = targets[k].positionDecodeMat;\n\n                    position[0] = positions[pi];\n                    position[1] = positions[pi + 1];\n                    position[2] = positions[pi + 2];\n\n                    if (decompress) {\n                        SceneJS_math_decompressPosition(position, position, decompress);\n                    }\n\n                    if (position[0] < min[0]) {\n                        min[0] = position[0]\n                    } \n\n                    if (position[0] > max[0]) {\n                        max[0] = position[0]\n                    }\n\n                    if (position[1] < min[1]) {\n                        min[1] = position[1]\n                    } \n\n                    if (position[1] > max[1]) {\n                        max[1] = position[1]\n                    }\n\n                    if (position[2] < min[2]) {\n                        min[2] = position[2]\n                    } \n\n                    if (position[2] > max[2]) {\n                        max[2] = position[2]\n                    }\n                }\n            }\n        }\n\n        if (depth > KD_TREE_MAX_DEPTH) {\n            node.triangles = triangles;\n            return node;\n        }\n\n        var mid = (min[dim] + max[dim]) / 2;\n        var left = new Array(triangles.length);\n        var numLeft = 0;\n        var right = new Array(triangles.length);\n        var numRight = 0;\n\n        for (t = 0, len = triangles.length; t < len; ++t) {\n            var ii = triangles[t] * 3;\n            var i0 = indices[ii];\n            var i1 = indices[ii + 1];\n            var i2 = indices[ii + 2];\n\n            var pi0 = i0 * 3;\n            var pi1 = i1 * 3;\n            var pi2 = i2 * 3;\n\n            var splitRight = true;\n\n            for (var k = 0; k < numTargets; ++k) {\n                var positions = targets[k].positions;\n                var decompress = targets[k].positionDecodeMat;\n\n                var v1 = positions[pi0 + dim];\n                var v2 = positions[pi1 + dim];\n                var v3 = positions[pi2 + dim];\n\n                if (decompress) {\n                    var scale = decompress[dim * 5];\n                    var translate = decompress[dim + 12]\n                    v1 = v1 * scale + translate;\n                    v2 = v2 * scale + translate;\n                    v3 = v3 * scale + translate;\n                }\n\n                if (v1 < mid || v2 < mid || v3 < mid) {\n                    splitRight = false;\n                    break; \n                }\n            }\n\n            if (splitRight) {\n                right[numRight++] = triangles[t];\n            } else {\n                left[numLeft++] = triangles[t];\n            }\n        }\n\n        if (numLeft < KD_TREE_MIN_TRIANGLES || numRight < KD_TREE_MIN_TRIANGLES ) {\n            node.triangles = triangles;\n            return node;\n        }\n\n        left.length = numLeft;\n        right.length = numRight;\n\n        node.left = buildKdTreeNode(left, indices, targets, (dim + 1) % 3, depth + 1);\n        node.right = buildKdTreeNode(right, indices, targets, (dim + 1) % 3, depth + 1);\n\n        return node;\n    }\n})();\n;/**\n * @class The root node of a scenegraph\n * @extends SceneJS.Node\n *\n */\n\n(function () {\n    \"use strict\";\n\n    SceneJS.Scene = SceneJS_NodeFactory.createNodeType(\"scene\");\n\n    SceneJS.Scene.prototype._init = function (params) {\n\n        /**\n         * Set false when canvas is to be transparent.\n         * @type {boolean}\n         */\n        this.transparent = (params.transparent === true);\n\n        /**\n         * Tracks statistics within this engine, such as numbers of\n         * scenes, textures, geometries etc.\n         *\n         * @property stats\n         * @type {*}\n         * @final\n         */\n        this.stats = this._engine.stats;\n\n        // Pub/sub support\n        this._handleMap = new SceneJS_Map(); // Subscription handle pool\n        this._topicSubs = {}; // A [handle -> callback] map for each topic name\n        this._handleTopics = {}; // Maps handles to topic names\n        this._topicPubs = {}; // Maps topics to publications\n    };\n\n\n    /**\n     * Simulate a lost WebGL context for testing purposes.\n     * Only works if the simulateWebGLLost was given as an option to {@link SceneJS.createScene}.\n     */\n    SceneJS.Scene.prototype.loseWebGLContext = function () {\n        this._engine.loseWebGLContext();\n    };\n\n\n    /**\n     * Returns the HTML canvas for this scene\n     * @return {HTMLCanvas} The canvas\n     */\n    SceneJS.Scene.prototype.getCanvas = function () {\n        return this._engine.canvas.canvas;\n    };\n\n    SceneJS.Scene.prototype.setTransparencyMode = function (mode) {\n        this._engine.display.setTransparencyMode(mode);\n        this._engine.branchDirty(this);\n    };\n\n    SceneJS.Scene.prototype.setDepthSort = function (sort) {\n        this._engine.display.depthSort = sort;\n        this._engine.display.objectListDirty = true;\n    };\n\n    /**\n     * Returns the WebGL context for this scene\n     */\n    SceneJS.Scene.prototype.getGL = function () {\n        return this._engine.canvas.gl;\n    };\n\n    SceneJS.Scene.prototype.getGPUTimer = function () {\n        return this._engine.gpuTimer;\n    };\n\n    SceneJS.Scene.prototype.getGPUTimerQuery = function () {\n        return this._engine.gpuTimerQuery;\n    };\n\n    /**\n     * True if WebGL 2 is supported\n     */\n    SceneJS.Scene.prototype.getWebGL2Supported = function () {\n        return this._engine.canvas.webgl2;\n    };\n\n    /** Returns the Z-buffer depth in bits of the webgl context that this scene is to bound to.\n     */\n    SceneJS.Scene.prototype.getZBufferDepth = function () {\n        var gl = this._engine.canvas.gl;\n        return gl.getParameter(gl.DEPTH_BITS);\n    };\n\n    /**\n     * Set canvas size multiplier for supersample anti-aliasing\n     */\n    SceneJS.Scene.prototype.setResolutionScaling = function (resolutionScaling) {\n        return this._engine.canvas.setResolutionScaling(resolutionScaling);\n    };\n\n    SceneJS.Scene.prototype.setProjection = function (p) {\n        var display = this._engine.display;\n        var type = p.type;\n        if (!type) {\n            if (display.projection) {\n                type = display.projection.type;\n            }\n        }\n\n        type = type || \"perspective\";\n        if (type == \"ortho\") {\n            display.projection = SceneJS._applyIf(SceneJS_math_ORTHO_OBJ, {\n                type: type,\n                left: p.left,\n                bottom: p.bottom,\n                near: p.near,\n                right: p.right,\n                top: p.top,\n                far: p.far\n            });\n        } else if (type == \"frustum\") {\n            display.projection = {\n                type: type,\n                left: p.left || -1.0,\n                bottom: p.bottom || -1.0,\n                near: p.near || 0.1,\n                right: p.right || 1.00,\n                top: p.top || 1.0,\n                far: p.far || 10000.0\n            };\n        } else if (type == \"perspective\") {\n            if (p.fovy != undefined) {\n                p.fov = p.fovy;\n            }\n\n            display.projection = {\n                type: type,\n                fov: p.fov || 60.0,\n                aspect: p.aspect == undefined ? 1.0 : p.aspect,\n                near: p.near || 0.1,\n                far: p.far || 10000.0\n            };\n        }\n\n        display.projection.pan = p.pan;\n        display.buildProjectionMatrix();\n        display.imageDirty = true;\n    };\n\n    SceneJS.Scene.prototype.getProjection = function () {\n        return this._engine.display.projection;\n    };\n\n    SceneJS.Scene.prototype.setCamera = function (p) {\n        var display = this._engine.display;\n        if (p.eye) {\n            display.camera.eye.set(p.eye);\n        }\n        if (p.look) {\n            display.camera.look.set(p.look);\n        }\n        if (p.up) {\n            display.camera.up.set(p.up);\n        }\n        if (p.deviceMatrix) {\n            display.hasDeviceMatrix = true;\n            display.deviceMatrix.set(p.deviceMatrix);\n        }\n        display.buildViewMatrix();\n        display.imageDirty = true;\n    };\n\n    SceneJS.Scene.prototype.setLights = function(lights) {\n        lights = lights || [];\n\n        var display = this._engine.display;\n        display.lights.length = lights.length;\n        var hash = \"\";\n\n        display._ambientColor[0] = 0;\n        display._ambientColor[1] = 0;\n        display._ambientColor[2] = 0;\n\n        var numLights = 0;\n        for (var i = 0, len = lights.length; i < len; ++i) {\n            display.lights[numLights] = display.lights[numLights] || {};\n\n            var light = display.lights[numLights];\n            var cfg = lights[i];\n\n            var mode = cfg.mode || \"dir\";\n            if (mode != \"dir\" && mode != \"point\" && mode != \"ambient\" && mode != \"spot\") {\n                SceneJS_error.fatalError(\n                    SceneJS.errors.ILLEGAL_NODE_CONFIG,\n                    \"Light mode not supported - should be 'dir' or 'point' or 'spot' or 'ambient'\");\n            }\n\n            var pos = cfg.pos;\n            var dir = cfg.dir;\n\n            var color = cfg.color;\n            light.color = new Float32Array([\n                    color.r != undefined ? color.r : 1.0,\n                    color.g != undefined ? color.g : 1.0,\n                    color.b != undefined ? color.b : 1.0\n            ]);\n\n            if (mode === \"ambient\") {\n                display._ambientColor[0] = light.color[0];\n                display._ambientColor[1] = light.color[1];\n                display._ambientColor[2] = light.color[2];\n                continue;\n            }\n\n            // Ambient lights hardwired to contribute to diffuse lighting\n            light.mode = mode;\n            light.diffuse = (mode == \"ambient\") ? true : ((cfg.diffuse != undefined) ? cfg.diffuse : true);\n            light.specular = (mode == \"ambient\") ? false : ((cfg.specular != undefined) ? cfg.specular : true);\n            light.pos = new Float32Array(cfg.pos ? [pos.x || 0, pos.y || 0, pos.z || 0 ] : [0, 0, 0]);\n            light.dir = new Float32Array(cfg.dir ? [dir.x || 0, dir.y || 0, dir.z || 0] : [0, 0, 1]);\n            light.innerCone = cfg.innerCone != undefined ? cfg.innerCone : 0.25;\n            light.outerCone = cfg.outerCone != undefined ? cfg.outerCone : 0;\n            light.attenuation = new Float32Array([\n                    cfg.constantAttenuation != undefined ? cfg.constantAttenuation : 0.0,\n                    cfg.linearAttenuation || 0.0,\n                    cfg.quadraticAttenuation || 0.0\n            ]);\n\n            light.space = cfg.space || \"world\";\n\n            ++numLights;\n\n            hash += light.mode;\n            if (light.specular) {\n                hash += \"s\";\n            }\n            if (light.diffuse) {\n                hash += \"d\";\n            }\n            hash += (light.space === \"world\" ? \"w\" : \"v\");\n\n            if (i < len - 1) {\n                hash += \"/\";\n            }\n        }\n\n        display.lights.length = numLights;\n\n        if (display.lightHash !== hash) {\n            display.lightHash = hash;\n            this._engine.branchDirty(this);\n        } else {\n            display.imageDirty = true;\n        }\n\n    };\n\n    SceneJS.Scene.prototype.setClips = function(clipCfg) {\n        var display = this._engine.display;\n        var clips = display.clips;\n        var hash = \"\";\n\n        clips.clips.length = clipCfg.length;\n        clips.enabled = false;\n        for (var i = 0, len = clipCfg.length; i < len; ++i) {\n            var cfg = clipCfg[i];\n            var clip = clips.clips[i] || (clips.clips[i] = {\n                normalAndDist: vec4.create(),\n                fade: false,\n                fadeDistance: 0\n            });\n\n            // Define the plane: Normal and Distance or Normal and Point on plane\n            var n = cfg.n;\n            vec3.normalize(n, n);\n            var d = 0;\n            if (cfg.d){\n                d = cfg.d;\n            } else if (cfg.p) {\n                d = -vec3.dot(n, cfg.p);\n            }\n            clip.normalAndDist.set(n);\n            clip.normalAndDist[3] = d;\n\n            clip.fade = !!cfg.fade;\n            clip.fadeDistance = 0;\n            if (clip.fade) {\n                // only add offset if needed for clip effect\n                clips.clipFade = true;\n                clip.fadeDistance = cfg.fadeDistance; // distance along plane normal at which to end effect. DO NOT SET TO ZERO\n            } else {\n                clips.clipDiscard = true;\n            }\n\n            hash += clip.fade ? \"f\" : \"c\";\n        }   \n\n        if (hash === display.clipsHash) {\n            display.imageDirty = true;\n        } else {\n            this._engine.branchDirty(this);\n            display.clipsHash = hash;\n        }\n    };\n\n    SceneJS.Scene.prototype.createReflection = function(id, cfg) {\n        var display = this._engine.display;\n        var reflections = display.reflections;\n        var reflection = reflections.reflections[id];\n        if (reflection) {\n            console.error(\"Reflection already exists: \" + id);\n            return;\n        }\n        reflection = new SceneJS.GlobalCubemap(this, id, cfg);\n        reflections.reflections[id] = reflection;\n    };\n\n    SceneJS.Scene.prototype.activateReflection = function(id) {\n        var reflections = this._engine.display.reflections;\n        var reflection = reflections.reflections[id];\n        if (!reflection) {\n            console.error(\"Reflection not found: \" + id);\n            return;\n        }\n        reflections.activeReflection = reflection;\n        this._updateReflectionsHash();\n    };\n\n    SceneJS.Scene.prototype._updateReflectionsHash = function() {\n        var display = this._engine.display;\n        var activeReflection = display.reflections.activeReflection;\n        var hash = display.reflections.activeReflection ? activeReflection.hash : \";\";\n        if (hash === display.reflectionsHash) {\n            display.imageDirty = true;\n        } else {\n            this._engine.branchDirty(this);\n            display.reflectionsHash = hash;\n        }\n    };\n\n    SceneJS.Scene.prototype.deactivateReflection = function() {\n        var reflections = this._engine.display.reflections;\n        if (reflections.activeReflection) {\n            reflections.activeReflection = null;\n            this._updateReflectionsHash();\n        }\n    };\n\n    SceneJS.Scene.prototype.destroyReflection = function(id) {\n        var display = this._engine.display;\n        var reflections = display.reflections;\n        var reflection = reflections.reflections[id];\n        if (!reflection) {\n            console.error(\"Reflection not found: \" + id);\n            return;\n        }\n        if (reflections.activeReflection && reflections.activeReflection.id === reflection.id) {\n            this.deactivateReflection();\n        }\n        reflection.destroy();\n        delete reflections.reflections[id];\n    };\n\n    SceneJS.Scene.prototype.destroyAllReflections = function() {\n        var ids = Object.keys(this._engine.display.reflections.reflections);\n        for (var i = 0, len = ids.length; i < len; i++) {\n            this.destroyReflection(ids[i]);\n        }\n    };\n\n    SceneJS.Scene.prototype.createLightmap = function(id, cfg) {\n        var display = this._engine.display;\n        var lightmaps = display.lightmaps;\n        var lightmap = lightmaps.lightmaps[id];\n        if (lightmap) {\n            console.error(\"Lightmap already exists: \" + id);\n            return;\n        }\n        lightmap = new SceneJS.GlobalCubemap(this, id, cfg);\n        lightmaps.lightmaps[id] = lightmap;\n    };\n\n    SceneJS.Scene.prototype.activateLightmap = function(id) {\n        var lightmaps = this._engine.display.lightmaps;\n        var lightmap = lightmaps.lightmaps[id];\n        if (!lightmap) {\n            console.error(\"Lightmap not found: \" + id);\n            return;\n        }\n        lightmaps.activeLightmap = lightmap;\n        this._updateLightmapsHash();\n    };\n\n    SceneJS.Scene.prototype._updateLightmapsHash = function() {\n        var display = this._engine.display;\n        var activeLightmap = display.lightmaps.activeLightmap;\n        var hash = display.lightmaps.activeLightmap ? activeLightmap.hash : \";\";\n        if (hash === display.lightmapsHash) {\n            display.imageDirty = true;\n        } else {\n            this._engine.branchDirty(this);\n            display.lightmapsHash = hash;\n        }\n    };\n\n    SceneJS.Scene.prototype.deactivateLightmap = function() {\n        var lightmaps = this._engine.display.lightmaps;\n        if (lightmaps.activeLightmap) {\n            lightmaps.activeLightmap = null;\n            this._updateLightmapsHash();\n        }\n    };\n\n    SceneJS.Scene.prototype.destroyLightmap = function(id) {\n        var display = this._engine.display;\n        var lightmaps = display.lightmaps;\n        var lightmap = lightmaps.lightmaps[id];\n        if (!lightmap) {\n            console.error(\"Lightmap not found: \" + id);\n            return;\n        }\n        if (lightmaps.activeLightmap && lightmaps.activeLightmap.id === lightmap.id) {\n            this.deactivateLightmap();\n        }\n        lightmap.destroy();\n        delete lightmaps.lightmaps[id];\n    };\n\n    SceneJS.Scene.prototype.destroyAllLightmaps = function() {\n        var ids = Object.keys(this._engine.display.lightmaps.lightmaps);\n        for (var i = 0, len = ids.length; i < len; i++) {\n            this.destroyLightmap(ids[i]);\n        }\n    };\n\n    SceneJS.Scene.prototype.setDeviceMatrix = function (mat) {\n        var display = this._engine.display;\n        display.hasDeviceMatrix = !!mat;\n        if (mat) {\n            display.deviceMatrix.set(mat);\n        }\n        display.imageDirty = true;\n    };\n\n    SceneJS.Scene.prototype.getCamera = function () {\n        return this._engine.display.camera;\n    };\n\n    SceneJS.Scene.prototype.getViewMatrix = function() {\n        return this._engine.display.viewMatrix;\n    };\n\n    SceneJS.Scene.prototype.getProjectionMatrix = function() {\n        return this._engine.display.projectionMatrix;\n    };\n\n    SceneJS.Scene.prototype.setFogDensity = function(d) {\n        this._engine.display.fogDensity = d;\n        this._engine.display.imageDirty = true;\n    };\n\n    SceneJS.Scene.prototype.setFogStart = function(s) {\n        this._engine.display.fogParams[0] = s;\n        this._engine.display.imageDirty = true;\n    };\n\n    SceneJS.Scene.prototype.setFogEnd = function(e) {\n        this._engine.display.fogParams[1] = e;\n        this._engine.display.imageDirty = true;\n    };\n\n    SceneJS.Scene.prototype.setFogMin = function(min) {\n        this._engine.display.fogParams[2] = min;\n        this._engine.display.imageDirty = true;\n    };\n\n    SceneJS.Scene.prototype.setFogMax = function(max) {\n        this._engine.display.fogParams[3] = max;\n        this._engine.display.imageDirty = true;\n    };\n\n    SceneJS.Scene.prototype.setFogColor = function(r, g, b) {\n        this._engine.display.fogColor[0] = r;\n        this._engine.display.fogColor[1] = g;\n        this._engine.display.fogColor[2] = b;\n        this._engine.display.imageDirty = true;\n    };\n\n    SceneJS.Scene.prototype.setFogDensity = function(d) {\n        this._engine.display.fogColor[3] = d;\n        this._engine.display.imageDirty = true;\n    };\n\n    SceneJS.Scene.prototype.setFogMode = function(mode) {\n        this._engine.display.fogMode = mode;\n        this._engine.branchDirty(this);\n        this._engine.display.imageDirty = true;\n    };\n\n    SceneJS.Scene.prototype.setFogEnabled = function(enabled) {\n        this._engine.display.fogEnabled = enabled;\n        this._engine.branchDirty(this);\n        this._engine.display.imageDirty = true;\n    };\n\n    SceneJS.Scene.prototype.setXrayColor = function(r, g, b) {\n        this._engine.display.xrayColor[0] = r;\n        this._engine.display.xrayColor[1] = g;\n        this._engine.display.xrayColor[2] = b;\n        this._engine.display.imageDirty = true;\n    };\n\n    SceneJS.Scene.prototype.mainFramebufferParams = function(params) {\n        this._engine.display.mainFramebufferParams = params || null;\n    }; \n\n    SceneJS.Scene.prototype.createFramebuffer = function (id, cfg) {\n        this._engine.display.createFramebuffer(id, cfg);\n    };\n\n    SceneJS.Scene.prototype.destroyFramebuffer = function (id) {\n        this._engine.display.destroyFramebuffer(id);\n    };\n\n    SceneJS.Scene.prototype.getPostProcessStage = function (id) {\n        return this._engine.display.getPostProcessStage(id);\n    };\n\n    SceneJS.Scene.prototype.createPostProcessType = function (type, src, options) {\n        this._engine.display.createPostProcessType(type, src, options);\n    };\n\n    SceneJS.Scene.prototype.postProcessOpaque = function (cfg) {\n        this._engine.display.postProcessOpaque(cfg);\n    };\n\n    SceneJS.Scene.prototype.postProcessFinal = function (cfg) {\n        this._engine.display.postProcessFinal(cfg);\n    };\n\n    /**\n     * Sets the number of times this scene is drawn on each render.\n     * <p>This is useful for when we need to do things like render for left and right eyes.\n     * @param {Number} numPasses The number of times the scene is drawn on each frame.\n     */\n    SceneJS.Scene.prototype.setNumPasses = function (numPasses) {\n        this._engine.setNumPasses(numPasses);\n    };\n\n    /**\n     *  When doing multiple passes per frame, specifies whether to clear the\n     * canvas before each pass (true) or just before the first pass (false).\n     *\n     * <p>This is useful for when we need to do things like render a separate pass to a stereo framebuffer for left and right eyes,\n     * where we want to clear the buffer before each pass.</p>\n     *\n     * @param {Boolean} clearEachPass Tryu to clear before each pass (default is false).\n     */\n    SceneJS.Scene.prototype.setClearEachPass = function (clearEachPass) {\n        this._engine.setClearEachPass(clearEachPass);\n    };\n\n    SceneJS.Scene.prototype.setViewport = function (xmin, ymin, width, height) {\n        this._engine.display.setViewport(xmin, ymin, width, height);\n    };\n\n    /**\n     * Render a single frame if new frame pending, or force a new frame\n     * Returns true if frame rendered\n     */\n    SceneJS.Scene.prototype.render = function (params) {\n        return this._engine.render(params);\n    };\n\n    /**\n     * Prevent re-compilation of scene graph.\n     */\n    SceneJS.Scene.prototype.pauseCompilation = function () {\n        return this._engine.pauseCompilation();\n    };\n\n    /**\n     * Resume re-compilation of scene graph.\n     */\n    SceneJS.Scene.prototype.resumeCompilation = function () {\n        return this._engine.resumeCompilation();\n    };\n\n    /**\n     * Force compilation of the scene graph.\n     */\n    SceneJS.Scene.prototype.compile = function () {\n        return this._engine.compile();\n    };\n\n    /**\n     * Signals that a new frame will be needed\n     * @param params\n     */\n    SceneJS.Scene.prototype.needFrame = function () {\n        this._engine.display.imageDirty = true;\n    };\n\n    /**\n     * Starts the render loop for this scene\n     */\n    SceneJS.Scene.prototype.start = function (params) {\n        this._engine.start(params);\n    };\n\n    /**\n     *\n     */\n    SceneJS.Scene.prototype.pick = function () {\n\n        // Backwards compatibility with pick(canvasX, canvasY, params)\n        var params;\n        if (SceneJS._isNumeric(arguments[0])) {\n            var canvasX = arguments[0];\n            var canvasY = arguments[1];\n            params = arguments[2] || {};\n            params.canvasPos = new Float32Array([canvasX, canvasY])\n        } else {\n            params = arguments[0] || {};\n        }\n\n        var result = this._engine.pick(params);\n        this.render({force: true}); // HACK: canvas blanks after picking\n        if (result) {\n            this.publish(\"pick\", result);\n            return result;\n        } else {\n            this.publish(\"nopick\");\n        }\n    };\n\n\n    /**\n     * Reads colors of pixels from the last rendered frame.\n     *\n     * <p>Call this method like this:</p>\n     *\n     * <pre>\n     *\n     * // Ignore transparent pixels (default is false)\n     * var opaqueOnly = true;\n     *\n     * #readPixels([\n     *      { x: 100, y: 22,  r: 0, g: 0, b: 0 },\n     *      { x: 120, y: 82,  r: 0, g: 0, b: 0 },\n     *      { x: 12,  y: 345, r: 0, g: 0, b: 0 }\n     * ], 3, opaqueOnly);\n     * </pre>\n     *\n     * Then the r,g,b components of the entries will be set to the colors at those pixels.\n     */\n    SceneJS.Scene.prototype.readPixels = function (entries, size, opaqueOnly) {\n        return this._engine.readPixels(entries, size, opaqueOnly);\n    };\n\n    /**\n     * Scene node's destroy handler, called by {@link SceneJS_node#destroy}\n     * @private\n     */\n    SceneJS.Scene.prototype._destroy = function () {\n        if (!this.destroyed) {\n            delete SceneJS._engines[this.id];  // HACK: circular dependency\n            SceneJS._engineIds.removeItem(this.id); // HACK: circular dependency\n            this.destroyed = true;\n        }\n    };\n\n    /**\n     * Returns true if scene active, ie. not destroyed. A destroyed scene becomes active again\n     * when you render it.\n     */\n    SceneJS.Scene.prototype.isActive = function () {\n        return !this._engine.destroyed;\n    };\n\n    /**\n     * Stops current render loop that was started with {@link #start}. After this, {@link #isRunning} will return false.\n     */\n    SceneJS.Scene.prototype.stop = function () {\n        this._engine.stop();\n    };\n\n    /** Determines if node exists in this scene\n     * @deprecated\n     */\n    SceneJS.Scene.prototype.containsNode = function (nodeId) {\n        return !!this._engine.findNode(nodeId);\n    };\n\n    /**\n     * Finds nodes in this scene that have nodes IDs matching the given regular expression\n     *\n     * @param {String} nodeIdRegex Regular expression to match on node IDs\n     * @return {[SceneJS.Node]} Array of nodes whose IDs match the given regex\n     */\n    SceneJS.Scene.prototype.findNodes = function (nodeIdRegex) {\n        return this._engine.findNodes(nodeIdRegex);\n    };\n\n    /**\n     * Finds the node with the given ID in this scene\n     * @deprecated\n     * @param {String} nodeId Node ID\n     * @return {SceneJS.Node} The node if found, else null\n     */\n    SceneJS.Scene.prototype.findNode = function (nodeId) {\n        return this.getNode(nodeId);\n    };\n\n    /**\n     * @function Finds the node with the given ID in this scene\n     * @param {String} nodeId Node ID\n     * @return {SceneJS.Node} The node if found, else null\n     */\n    SceneJS.Scene.prototype.getNode = function (nodeId) {\n        return this._engine.findNode(nodeId);\n    };\n\n    /**\n     * Tests whether a node core of the given ID exists for the given node type\n     * @param {String} type Node type\n     * @param {String} coreId\n     * @returns Boolean\n     */\n    SceneJS.Scene.prototype.hasCore = function (type, coreId) {\n        return this._engine.hasCore(type, coreId);\n    };\n\n    /**\n     * Publishes to a topic on this node.\n     *\n     * Immediately notifies existing subscriptions to that topic, and unless the \"forget' parameter is\n     * true, retains the publication to give to any subsequent notifications on that topic as they are made.\n     *\n     * @param {String} topic Publication topic\n     * @param {Object} pub The publication\n     * @param {Boolean} [forget] When true, the publication will be sent to subscribers then forgotten, so that any\n     * subsequent subscribers will not receive it\n     */\n    SceneJS.Scene.prototype.publish = function (topic, pub, forget) {\n        if (!forget) {\n            this._topicPubs[topic] = pub; // Save notification\n        }\n        if (this._topicSubs[topic]) { // Notify subscriptions\n            var subsForTopic = this._topicSubs[topic];\n            for (var handle in subsForTopic) {\n                if (subsForTopic.hasOwnProperty(handle)) {\n                    subsForTopic[handle].call(this, pub);\n                }\n            }\n        }\n    };\n\n    /**\n     * Removes a topic publication\n     *\n     * Immediately notifies existing subscriptions to that topic, sending them each a null publication.\n     *\n     * @param topic Publication topic\n     * @private\n     */\n    SceneJS.Scene.prototype.unpublish = function (topic) {\n        var subsForTopic = this._topicSubs[topic];\n        if (subsForTopic) { // Notify subscriptions\n            for (var handle in subsForTopic) {\n                if (subsForTopic.hasOwnProperty(handle)) {\n                    subsForTopic[handle].call(this, null);\n                }\n            }\n        }\n        delete this._topicPubs[topic];\n    };\n\n\n    /**\n     * Listen for data changes at a particular location on this node\n     *\n     * <p>Your callback will be triggered for\n     * the initial data and again whenever the data changes. Use {@link #off} to stop receiving updates.</p>\n     *\n     * <p>The callback is be called with this node as scope.</p>\n     *\n     * @param {String} location Publication location\n     * @param {Function(data)} callback Called when fresh data is available at the location\n     * @return {String} Handle to the subscription, which may be used to unsubscribe with {@link #off}.\n     */\n    SceneJS.Scene.prototype.on = function (topic, callback) {\n        var subsForTopic = this._topicSubs[topic];\n        if (!subsForTopic) {\n            subsForTopic = {};\n            this._topicSubs[topic] = subsForTopic;\n        }\n        var handle = this._handleMap.addItem(); // Create unique handle\n        subsForTopic[handle] = callback;\n        this._handleTopics[handle] = topic;\n        var pub = this._topicPubs[topic];\n        if (pub) { // A publication exists, notify callback immediately\n            callback.call(this, pub);\n        }\n        if (topic == \"rendered\") {\n            this._engine.branchDirty(this);\n        }\n        return handle;\n    };\n\n    /**\n     * Unsubscribes from a publication on this node that was previously made with {@link #on}.\n     * @param handle Publication handle\n     */\n    SceneJS.Scene.prototype.off = function (handle) {\n        var topic = this._handleTopics[handle];\n        if (topic) {\n            delete this._handleTopics[handle];\n            var topicSubs = this._topicSubs[topic];\n            if (topicSubs) {\n                delete topicSubs[handle];\n            }\n            this._handleMap.removeItem(handle); // Release handle\n            if (topic == \"rendered\") {\n                this._engine.branchDirty(this);\n            }\n        }\n    //    else {\n    //        this._engine.scene.off(handle);\n    //    }\n    };\n\n    /**\n     * Listens for exactly one data update at the specified location on this node, and then stops listening.\n     * <p>This is equivalent to calling {@link #on}, and then calling {@link #off} inside the callback function.</p>\n     * @param {String} location Data location to listen to\n     * @param {Function(data)} callback Called when fresh data is available at the location\n     */\n    SceneJS.Scene.prototype.once = function (topic, callback) {\n        var self = this;\n        var sub = this.on(topic,\n            function (pub) {\n                self.off(sub);\n                callback(pub);\n            });\n    };\n\n})();\n\n;/**\n * @class Scene graph node which defines textures to apply to the objects in its subgraph\n * @extends SceneJS.Node\n */\n /*\n    Compressed texture code based on Brandon Jones' Texture Format Tester\n    http://toji.github.io/texture-tester/\n */\n(function () {\n    \"use strict\";\n\n    // The default state core singleton for {@link SceneJS.Texture} nodes\n    var defaultCore = {\n        type: \"texture\",\n        stateId: SceneJS._baseStateId++,\n        empty: true,\n        hash: \"\"\n    };\n\n    SceneJS_events.addListener(\n        SceneJS_events.SCENE_COMPILING,\n        function (params) {\n            params.engine.display.texture = defaultCore;\n            stackLen = 0;\n        });\n\n    var coreStack = [];\n    var stackLen = 0;\n\n    // Set up compressed texture constants\n    var GL_CONSTANTS = null;\n    var DDS_CONSTANTS = null;\n    var PVR_CONSTANTS = null;\n    var KTX_CONSTANTS = null;\n\n    var FLAGS = SceneJS.TEXTURE_FLAGS;\n\n    /**\n     * @class Scene graph node which defines one or more textures to apply to the {@link SceneJS.Geometry} nodes in its subgraph\n     * @extends SceneJS.Node\n     */\n    SceneJS.TextureMap = SceneJS_NodeFactory.createNodeType(\"texture\");\n\n    SceneJS.TextureMap.prototype._init = function (params) {\n\n        var self = this;\n\n        if (this._core.useCount == 1) { // This node is the resource definer\n\n            var applyFrom = params.applyFrom || \"uv\";\n            if (applyFrom.substring(0,2) !== \"uv\") {\n                    SceneJS_error.fatalError(\n                        SceneJS.errors.NODE_CONFIG_EXPECTED,\n                        \"texture applyFrom value is unsupported - should be 'uv<index>'\");\n            }\n            var uvLayerIdx = 0;\n            if (applyFrom !== \"uv\") {\n                uvLayerIdx = parseInt(applyFrom.substring(2));\n                if (isNaN(uvLayerIdx)) {\n                    SceneJS_error.fatalError(\n                        SceneJS.errors.NODE_CONFIG_EXPECTED,\n                        \"texture applyFrom value invalid - should be 'uv<index>'\");\n                }\n            }\n\n            if (params.applyTo) {\n\n                var applyTo = params.applyTo;\n\n                if (applyTo != \"baseColor\" && // Colour map (deprecated)\n                    applyTo != \"color\" && // Colour map\n                    applyTo != \"occlusion\" && // Ambient occlusion map\n                    applyTo != \"specular\" && // Specular map\n                    applyTo != \"emit\" && // Emission map\n                    applyTo != \"alpha\" && // Alpha map\n                    applyTo != \"normals\" && // Normal map\n                    applyTo != \"shine\" && //\n                    applyTo != \"transparency\" && // Transparency map\n                    applyTo != \"metallic\" && // Metallic map\n                    applyTo != \"roughness\" && // Roughness map\n                    applyTo != \"metallicRoughness\" // Combined metallic & roughness map\n                  ) { // Shininess map\n\n                    SceneJS_error.fatalError(\n                        SceneJS.errors.NODE_CONFIG_EXPECTED,\n                        \"texture applyTo value is unsupported: \" + applyTo);\n                }\n            }\n\n            if (params.blendMode) {\n                if (params.blendMode != \"add\" && params.blendMode != \"multiply\" && params.blendMode != \"over\" && params.blendMode != \"conditionalAlpha\") {\n                    SceneJS_error.fatalError(\n                        SceneJS.errors.NODE_CONFIG_EXPECTED,\n                        \"texture layer blendMode value is unsupported - \" +\n                        \"should be either 'add' or 'multiply'\");\n                }\n            }\n\n            if (params.applyTo == \"color\") {\n                params.applyTo = \"baseColor\";\n            }\n\n            var flags = FLAGS[params.applyTo || \"baseColor\"] | FLAGS[params.blendMode || \"multiply\"];\n\n            if (params.swizzledNormals) {\n                flags |= FLAGS[\"swizzledNormals\"];\n            }\n\n            SceneJS._apply({\n                    waitForLoad: params.waitForLoad == undefined ? true : params.waitForLoad,\n                    texture: null,\n                    minFilter: params.minFilter,\n                    magFilter: params.magFilter,\n                    wrapS: params.wrapS,\n                    wrapT: params.wrapT,\n                    flipY: params.flipY,\n                    uvLayerIdx: uvLayerIdx,\n                    isNormalMap: params.applyTo === \"normals\",\n                    isAlphaMap: params.applyTo === \"alpha\",\n                    isTransparencyMap: params.applyTo === \"transparency\",\n                    flags: flags,\n                    blendFactor: (params.blendFactor != undefined && params.blendFactor != null) ? params.blendFactor : 1.0,\n                },\n                this._core);\n            this._initTexture(params.preloadColor);\n            if (params.compressedImage) {\n                this.setCompressedImage(params.compressedImage, params.containerFormat, params.compressedSrc);\n            } else if (params.compressedSrc) {\n                this._core.compressedSrc = params.compressedSrc;  // Can be used for context recovery if provided.\n                var parseFunction;\n                if (params.containerFormat === \"dds\") {\n                    parseFunction = this._parseDDS;\n                } else if (params.containerFormat === \"pvr\") {\n                    parseFunction = this._parsePVR;\n                } else if (params.containerFormat === \"ktx\") {\n                    parseFunction = this._parseKTX;\n                } else {\n                    SceneJS_error.fatalError(\n                        SceneJS.errors.NODE_CONFIG_EXPECTED,\n                        \"Compressed textures require containerFormat parameter to be 'dds' or 'pvr'\");\n                }\n                SceneJS._loadBinary(params.compressedSrc, parseFunction.bind(this));\n            } else if (params.image) { // Create from image\n                this._setTextureImage(params.image);\n            } else if (params.src) { // Load from URL\n                this._core.src = params.src;\n                this._loadTexture(params.src, params.preloadSrc);\n            }\n\n            this._core.mipMapLevels = 0;\n            this._core.drawTexture = params.drawTexture || false;\n            this._core.webglRestored = getContextRestoredCallback(this, this._core, params.preloadColor, params.containerFormat);\n\n        }\n    };\n\n    function getContextRestoredCallback(node, core, preloadColor, containerFormat) {\n        return function () {\n            if (core.compressedSrc) {\n                node._initTexture(preloadColor);\n                var parseFunction;\n                if (containerFormat === \"dds\") {\n                    parseFunction = node._parseDDS;\n                } else if (containerFormat === \"pvr\") {\n                    parseFunction = node._parsePVR;\n                }\n                SceneJS._loadBinary(core.compressedSrc, parseFunction.bind(this));\n            } else if (core.image) {\n                node._initTexture(preloadColor);\n                node._setTextureImage(core.image);\n            } else if (core.src) {\n                node._initTexture(preloadColor);\n                node._loadTexture(core.src);\n            }\n        };\n    }\n\n    SceneJS.TextureMap.prototype._initTexture = function (preloadColor) {\n        var gl = this._engine.canvas.gl;\n\n        preloadColor = preloadColor || { r: 0.57735, g: 0.57735, b: 0.57735 };\n        preloadColor.a = preloadColor.a === undefined ? 1 : preloadColor.a;\n\n        preloadColor = new Uint8Array([\n            Math.floor(preloadColor.r * 255),\n            Math.floor(preloadColor.g * 255),\n            Math.floor(preloadColor.b * 255),\n            Math.floor(preloadColor.a * 255)\n        ]);\n\n        this._core.width = 1;\n        this._core.height = 1;\n\n        var texture = gl.createTexture();\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, preloadColor);\n        this._setCoreTexture(texture);\n    };\n\n    SceneJS.TextureMap.prototype._loadTexture = function (src, preloadSrc) {\n        var self = this;\n        var image = new Image();\n        var loaded = false;\n        var taskFinished = false;\n\n        if (preloadSrc) {\n            var preloadImage = new Image();\n\n            preloadImage.onload = function () {\n                if (!loaded) {\n                    self._setTextureImage(preloadImage);\n                    taskFinished = true;\n                    self._engine.display.imageDirty = true;\n                }\n            };\n\n            preloadImage.src = preloadSrc;\n        }\n\n        image.onload = function () {\n            self._setTextureImage(image);\n            loaded = true;\n            self._engine.display.imageDirty = true;\n        };\n        image.src = src;\n    };\n\n    SceneJS.TextureMap.prototype._setTextureImage = function (image) {\n\n        var gl = this._engine.canvas.gl;\n        var core = this._core;\n        var texture = core.texture && core.texture.texture ? core.texture.texture : gl.createTexture();\n\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n\n        core.width = image.width;\n        core.height = image.height;\n        this._setCoreTexture(texture);\n\n        // Note(Tarek): Assumes mip maps are generated.\n        this._gatherStats(image.width, image.height, image.width * image.height * 4);\n    };\n\n    SceneJS.TextureMap.prototype._setCompressedTextureImage = function (data, extension, internalFormat, width, height, mipMapLevels, imageSizePrefix) {\n\n        var gl = this._engine.canvas.gl;\n        var core = this._core;\n        var texture = core.texture && core.texture.texture ? core.texture.texture : gl.createTexture();\n\n        var ext = SceneJS._getExtension(gl, extension);\n\n        if (!ext) {\n            SceneJS_error.fatalError(\n                SceneJS.errors.ILLEGAL_NODE_CONFIG,\n                \"Compressed texture format \" + extension + \"not available.\");\n        }\n\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n\n        var offset = 0;\n\n        this._core.width = width;\n        this._core.height = height;\n        this._core.mipMapLevels = mipMapLevels;\n        this._core.compressed = true;\n\n        var sizeFunction = GL_CONSTANTS.SIZE_FUNCTIONS[internalFormat];\n\n        var levelWidth = width;\n        var levelHeight = height;\n\n        for (var i = 0; i < mipMapLevels; ++i) {\n            var levelSize = 0;\n\n            if (imageSizePrefix) {\n                // For KTX\n                levelSize = data[offset] + (data[offset + 1] << 8) + (data[offset + 2] << 16) + (data[offset + 3] << 24);\n                offset += 4;\n            } else {\n                levelSize = sizeFunction(levelWidth, levelHeight);\n            }\n\n            var image = new Uint8Array(data.buffer, data.byteOffset + offset, levelSize);\n\n            gl.compressedTexImage2D(gl.TEXTURE_2D, i, internalFormat, levelWidth, levelHeight, 0, image);\n\n            levelWidth = levelWidth / 2;\n            levelHeight = levelHeight / 2;\n\n            offset += levelSize;\n        }\n\n        this._setCoreTexture(texture);\n\n        this._gatherStats(width, height, data.byteLength);\n    };\n\n    SceneJS.TextureMap.prototype._gatherStats = function (width, height, mem) {\n        this._engine.stats.memory.textures += mem;\n\n        var textureStats = this._engine.stats.textures;\n        var dimensions = width + \"x\" + height;\n\n        var applyTo = this._getTextureTarget();\n        var textureTargetStats = textureStats[applyTo] = textureStats[applyTo] || {};\n        textureTargetStats[dimensions] = (textureTargetStats[dimensions] || 0) + 1;\n        textureTargetStats.memory = (textureTargetStats.memory || 0) + mem;\n    };\n\n    SceneJS.TextureMap.prototype._setCoreTexture = function (texture) {\n        var gl = this._engine.canvas.gl;\n        var pot = SceneJS_math_isPOT(this._core.width) & SceneJS_math_isPOT(this._core.height);\n\n        var defaultWrap = pot ? gl.REPEAT : gl.CLAMP_TO_EDGE;\n        var defaultMinFilter = this._core.mipMapLevels === 1 || !pot ? gl.LINEAR : gl.LINEAR_MIPMAP_NEAREST;\n\n        this._core.texture = new SceneJS._webgl.Texture2D(gl, {\n            texture: texture, // WebGL texture object\n            minFilter: this._getGLOption(\"minFilter\", defaultMinFilter),\n            magFilter: this._getGLOption(\"magFilter\", gl.LINEAR),\n            wrapS: this._getGLOption(\"wrapS\", defaultWrap),\n            wrapT: this._getGLOption(\"wrapT\", defaultWrap),\n            compressed: this._core.compressed,\n            flipY: this._core.flipY,\n            update: null\n        });\n\n        if (this.destroyed) { // Node was destroyed while loading\n            this._core.texture.destroy();\n        }\n\n        this._engine.display.imageDirty = true;\n    };\n\n    SceneJS.TextureMap.prototype._getTextureTarget = function () {\n        var flags = this._core.flags;\n\n        if (flags & FLAGS.baseColor) {\n            return \"baseColor\";\n        }\n\n        if (flags & FLAGS.occlusion) {\n            return \"occlusion\";\n        }\n\n        if (flags & FLAGS.normals) {\n            return \"normals\";\n        }\n\n        if (flags & FLAGS.alpha) {\n            return \"alpha\";\n        }\n\n        if (flags & FLAGS.specular) {\n            return \"specular\";\n        }\n\n        if (flags & FLAGS.emit) {\n            return \"emit\";\n        }\n\n        if (flags & FLAGS.shine) {\n            return \"shine\";\n        }\n\n        if (flags & FLAGS.transparency) {\n            return \"transparency\";\n        }\n\n        if (flags & FLAGS.metallic) {\n            return \"metallic\";\n        }\n\n        if (flags & FLAGS.roughness) {\n            return \"roughness\";\n        }\n\n        if (flags & FLAGS.metallicRoughness) {\n            return \"metallicRoughness\";\n        }\n    };\n\n    SceneJS.TextureMap.prototype._getGLOption = function (name, defaultVal) {\n        var gl = this._engine.canvas.gl;\n        var value = this._core[name];\n        if (value == undefined) {\n            return defaultVal;\n        }\n        var glName = SceneJS._webgl.enumMap[value];\n        if (glName == undefined) {\n            SceneJS_error.fatalError(\n                SceneJS.errors.ILLEGAL_NODE_CONFIG,\n                \"Unrecognised value for texture node property '\" + name + \"' value: '\" + value + \"'\");\n        }\n        return gl[glName];\n    };\n\n    SceneJS.TextureMap.prototype._getOption = function (value, defaultVal) {\n        return (value == undefined) ? defaultVal : value;\n    };\n\n    SceneJS.TextureMap.prototype.setSrc = function (src) {\n        this._core.image = null;\n        this._core.src = src;\n        this._core.target = null;\n        this._loadTexture(src);\n    };\n\n    SceneJS.TextureMap.prototype.setImage = function (image) {\n        this._core.src = null;\n        this._core.target = null;\n        this._setTextureImage(image);\n    };\n\n    SceneJS.TextureMap.prototype.setCompressedImage = function (image, container, src) {\n        this._core.src = null;\n        this._core.image = null;\n        this._core.target = null;\n        this._core.compressedSrc = src;  // Can be used for context recovery if provided.\n        if (container === \"dds\") {\n            this._parseDDS(image);\n        } else if (container === \"pvr\") {\n            this._parsePVR(image);\n        } else {\n            this._parseKTX(image);\n        }\n    };\n\n    SceneJS.TextureMap.prototype.setTarget = function (target) {\n        if (target.type != \"colorTarget\" && target.type != \"depthTarget\") {\n            console.log(\"Target node type not compatible: \" + target.type);\n            return;\n        }\n        delete this._core.src;\n        this._core.target = target;\n        this._core.src = null;\n        this._core.image = null;\n        this._core.texture = target._core.renderBuf.getTexture(); // TODO: what happens when the target is destroyed?\n        this._core.texture.bufType = target._core.bufType;\n        this._engine.display.imageDirty = true;\n    };\n\n    /**\n     * Sets the texture's blend factor with respect to other active textures.\n     * @param {number} blendFactor The blend factor, in range [0..1]\n     */\n    SceneJS.TextureMap.prototype.setBlendFactor = function (blendFactor) {\n        this._core.blendFactor = blendFactor;\n        this._engine.display.imageDirty = true;\n    };\n\n    SceneJS.TextureMap.prototype.getBlendFactor = function () {\n        return this._core.blendFactor;\n    };\n\n    SceneJS.TextureMap.prototype.setTranslate = function (t) {\n        if (!this._core.translate) {\n            this._core.translate = {x: 0, y: 0};\n        }\n        this._core.translate.x = t.x;\n        this._core.translate.y = t.y;\n        this._core._matrixDirty = true;\n        this._engine.display.imageDirty = true;\n    };\n\n    SceneJS.TextureMap.prototype.getTranslate = function () {\n        return this._core.translate;\n    };\n\n    SceneJS.TextureMap.prototype.setScale = function (s) {\n        if (!this._core.scale) {\n            this._core.scale = {x: 0, y: 0};\n        }\n        this._core.scale.x = s.x;\n        this._core.scale.y = s.y;\n        this._core._matrixDirty = true;\n        this._engine.display.imageDirty = true;\n    };\n\n    SceneJS.TextureMap.prototype.getScale = function () {\n        return this._core.scale;\n    };\n\n    SceneJS.TextureMap.prototype.setRotate = function (angle) {\n        this._core.rotate = angle;\n        this._core._matrixDirty = true;\n        this._engine.display.imageDirty = true;\n    };\n\n    SceneJS.TextureMap.prototype.getRotate = function () {\n        return this._core.rotate;\n    };\n\n    SceneJS.TextureMap.prototype.getMatrix = function () {\n        if (this._core._matrixDirty) {\n            this._core.buildMatrix.call(this.core)()\n        }\n        return this.core.matrix;\n    };\n\n    SceneJS.TextureMap.prototype._compile = function (ctx) {\n        if (!this.__core) {\n            this.__core = this._engine._coreFactory.getCore(\"texture\");\n            this.__core.transparent = false;\n            this.__core.drawLayer = -1; //Layer index of texture used for draw operations\n        }\n        var parentCore = this._engine.display.texture;\n        if (!this._core.empty) {\n            this.__core.layers = (parentCore && parentCore.layers) ? parentCore.layers.concat([this._core]) : [this._core];\n            this.__core.transparent = this._core.isAlphaMap || this._core.isTransparencyMap || parentCore.transparent;\n            if (this._core.drawTexture) {\n                this.__core.drawLayerIndex = this.__core.layers.length - 1;\n            }\n        }\n        this._makeHash(this.__core);\n        coreStack[stackLen++] = this.__core;\n        this._engine.display.texture = this.__core;\n        this._compileNodes(ctx);\n        this._engine.display.texture = (--stackLen > 0) ? coreStack[stackLen - 1] : defaultCore;\n        coreStack[stackLen] = null; // Release memory\n    };\n\n    SceneJS.TextureMap.prototype._makeHash = function (core) {\n        var hashParts = [];\n        if (core.layers && core.layers.length > 0) {\n            var layers = core.layers;\n            var texLayer;\n            for (var i = 0, len = layers.length; i < len; i++) {\n                texLayer = layers[i];\n                hashParts.push(\"/\");\n                hashParts.push(texLayer.uvLayerIdx);\n                hashParts.push(\"/\");\n                hashParts.push(texLayer.flags);\n                if (texLayer.matrix) {\n                    hashParts.push(\"/anim\");\n                }\n                if (texLayer.compressed) {\n                    hashParts.push(\"/comp\");\n                }\n                if (texLayer.applyTo === \"normals\") {\n                    if (SceneJS.WEBGL_INFO.standardDerivativesSupported) {\n                        hashParts.push(\"/gt\"); // Generate tangents in fragment shader\n                    }\n                }\n            }\n        }\n        var hash = hashParts.join(\"\");\n        if (core.hash != hash) {\n            core.hash = hash;\n        }\n    };\n\n    SceneJS.TextureMap.prototype._destroy = function () {\n        if (this._core.useCount == 1) { // Last core user\n            if (this._core.texture && !this._core.target) { // Don't wipe out target texture\n                this._core.texture.destroy();\n                this._core.texture = null;\n            }\n            this._engine.stats.memory.textures--;\n        }\n\n    };\n\n    SceneJS.TextureMap.prototype._parseDDS = function(buffer) {\n\n        if (!DDS_CONSTANTS) {\n            SceneJS_error.fatalError(\n                SceneJS.errors.ILLEGAL_NODE_CONFIG,\n                \"DXT compressed textures not supported on this platform.\");\n        }\n\n        var header = new Uint32Array(buffer, 0, DDS_CONSTANTS.HEADER_LENGTH);\n\n        if (header[DDS_CONSTANTS.MAGIC_NUMBER_INDEX] != DDS_CONSTANTS.MAGIC_NUMBER) {\n            SceneJS_error.fatalError(\n                SceneJS.errors.ILLEGAL_NODE_CONFIG,\n                \"Invalid DDS File: Magic number invalid.\");\n        }\n\n        if (header[DDS_CONSTANTS.PIXEL_FORMAT_FLAGS_INDEX] & DDS_CONSTANTS.PIXEL_FORMAT_FOURCC_FLAG === 0) {\n            SceneJS_error.fatalError(\n                SceneJS.errors.ILLEGAL_NODE_CONFIG,\n                \"Invalid DDS File: FourCC required.\");\n        }\n\n        var internalFormat = DDS_CONSTANTS.FOURCC_MAP[header[DDS_CONSTANTS.PIXEL_FORMAT_FOURCC_INDEX]];\n        var extension = DDS_CONSTANTS.EXTENSION_MAP[header[DDS_CONSTANTS.PIXEL_FORMAT_FOURCC_INDEX]];\n\n        var mipMapLevels = 1;\n        if (header[DDS_CONSTANTS.FLAGS_INDEX] & DDS_CONSTANTS.MIPMAPCOUNT_FLAG) {\n            mipMapLevels = header[DDS_CONSTANTS.MIPMAPCOUNT_INDEX];\n        }\n\n        var width = header[DDS_CONSTANTS.WIDTH_INDEX];\n        var height = header[DDS_CONSTANTS.HEIGHT_INDEX];\n\n        var data = new Uint8Array(buffer, DDS_CONSTANTS.DATA_OFFSET);\n\n        this._setCompressedTextureImage(data, extension, internalFormat, width, height, mipMapLevels);\n    }\n\n    SceneJS.TextureMap.prototype._parsePVR = function(buffer) {\n\n        var header = new Uint32Array(buffer, 0, PVR_CONSTANTS.HEADER_LENGTH);\n\n        if (header[PVR_CONSTANTS.MAGIC_NUMBER_INDEX] != PVR_CONSTANTS.MAGIC_NUMBER) {\n            SceneJS_error.fatalError(\n                SceneJS.errors.ILLEGAL_NODE_CONFIG,\n                \"Invalid PVR File: Magic number invalid.\");\n        }\n\n        var pvrFormat = header[PVR_CONSTANTS.PIXEL_FORMAT_INDEX]\n\n        var extension = PVR_CONSTANTS.EXTENSION_MAP[pvrFormat];\n        var internalFormat = PVR_CONSTANTS.FORMAT_MAP[pvrFormat];\n\n        var mipMapLevels = header[PVR_CONSTANTS.MIPMAPCOUNT_INDEX];\n\n        var width = header[PVR_CONSTANTS.WIDTH_INDEX];\n        var height = header[PVR_CONSTANTS.HEIGHT_INDEX];\n\n        var dataOffset = PVR_CONSTANTS.HEADER_SIZE + header[PVR_CONSTANTS.METADATA_SIZE_INDEX];\n\n        var data = new Uint8Array(buffer, dataOffset);\n\n        this._setCompressedTextureImage(data, extension, internalFormat, width, height, mipMapLevels);\n    }\n\n    SceneJS.TextureMap.prototype._parseKTX = function(buffer) {\n\n        var header = new Uint32Array(buffer, 0, KTX_CONSTANTS.HEADER_LENGTH);\n\n        for (var i = 0; i < KTX_CONSTANTS.IDENTIFIER_LENGTH; ++i) {\n            if (header[i] != KTX_CONSTANTS.IDENTIFIER[i]) {\n                SceneJS_error.fatalError(\n                    SceneJS.errors.ILLEGAL_NODE_CONFIG,\n                    \"Invalid KTX File: Identifier invalid.\");\n            }\n        }\n\n        var internalFormat = header[KTX_CONSTANTS.INTERNAL_FORMAT_INDEX];\n        var extension = KTX_CONSTANTS.EXTENSION_MAP[internalFormat];\n\n        var mipMapLevels = header[KTX_CONSTANTS.MIPMAPCOUNT_INDEX];\n\n        var width = header[KTX_CONSTANTS.WIDTH_INDEX];\n        var height = header[KTX_CONSTANTS.HEIGHT_INDEX];\n\n        var dataOffset = KTX_CONSTANTS.HEADER_SIZE + header[KTX_CONSTANTS.KEY_VALUE_SIZE_INDEX];\n\n        var data = new Uint8Array(buffer, dataOffset);\n\n        this._setCompressedTextureImage(data, extension, internalFormat, width, height, mipMapLevels, true);\n    }\n\n    // Builds a numeric code for a given fourCC DDS file string\n    function parseFourCC(value) {\n      return value.charCodeAt(0) +\n            (value.charCodeAt(1) << 8) +\n            (value.charCodeAt(2) << 16) +\n            (value.charCodeAt(3) << 24);\n    }\n\n    // https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_pvrtc/\n    function pvrtc2bppSize(width, height) {\n        var width = Math.max(width, 16);\n        var height = Math.max(height, 8);\n\n        return width * height / 4;\n    }\n\n    // https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_pvrtc/\n    function pvrtc4bppSize(width, height) {\n        var width = Math.max(width, 8);\n        var height = Math.max(height, 8);\n\n        return width * height / 2;\n    }\n\n    // https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_s3tc/\n    // https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_etc1/\n    // Also size for RGB ATC\n    function dxt1etc1Size(width, height) {\n        return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 8;\n    }\n\n    // https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_s3tc/\n    // Also size for both alpha ATC formats\n    function dxt35Size(width, height) {\n        return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 16;\n    }\n\n    (function() {\n        var canvas = document.createElement(\"canvas\");\n\n        if (!canvas) {\n            return;\n        }\n\n        var gl = canvas.getContext(\"webgl\") || canvas.getContext(\"experimental-webgl\");\n\n        if (!gl) {\n            return;\n        }\n\n        GL_CONSTANTS = getGLConstants(gl);\n        DDS_CONSTANTS = getDDSConstants();\n        PVR_CONSTANTS = getPVRConstants();\n        KTX_CONSTANTS = getKTXConstants();\n\n        function getGLConstants(gl) {\n            var pvrtc = SceneJS._getExtension(gl, \"WEBGL_compressed_texture_pvrtc\");\n            var etc1 = SceneJS._getExtension(gl, \"WEBGL_compressed_texture_etc1\");\n            var dxt = SceneJS._getExtension(gl, \"WEBGL_compressed_texture_s3tc\");\n\n            var CONSTANTS = {\n                PVRTC_SUPPORTED: !!pvrtc,\n                ETC1_SUPPORTED: !!etc1,\n                DXT_SUPPORTED: !!dxt,\n                FORMAT_ENUMS: {},\n                SIZE_FUNCTIONS: {}\n            }\n\n            if (CONSTANTS.PVRTC_SUPPORTED) {\n                CONSTANTS.FORMAT_ENUMS.COMPRESSED_RGB_PVRTC_2BPPV1_IMG = pvrtc.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n                CONSTANTS.FORMAT_ENUMS.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = pvrtc.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n                CONSTANTS.FORMAT_ENUMS.COMPRESSED_RGB_PVRTC_4BPPV1_IMG = pvrtc.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n                CONSTANTS.FORMAT_ENUMS.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = pvrtc.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n\n                CONSTANTS.SIZE_FUNCTIONS[pvrtc.COMPRESSED_RGB_PVRTC_2BPPV1_IMG] = pvrtc2bppSize;\n                CONSTANTS.SIZE_FUNCTIONS[pvrtc.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG] = pvrtc2bppSize;\n                CONSTANTS.SIZE_FUNCTIONS[pvrtc.COMPRESSED_RGB_PVRTC_4BPPV1_IMG] = pvrtc4bppSize;\n                CONSTANTS.SIZE_FUNCTIONS[pvrtc.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG] = pvrtc4bppSize;\n            }\n\n            if (CONSTANTS.ETC1_SUPPORTED) {\n                CONSTANTS.FORMAT_ENUMS.COMPRESSED_RGB_ETC1_WEBGL = etc1.COMPRESSED_RGB_ETC1_WEBGL;\n\n                CONSTANTS.SIZE_FUNCTIONS[etc1.COMPRESSED_RGB_ETC1_WEBGL] = dxt1etc1Size;\n            }\n\n            if (CONSTANTS.DXT_SUPPORTED) {\n                CONSTANTS.FORMAT_ENUMS.COMPRESSED_RGB_S3TC_DXT1_EXT = dxt.COMPRESSED_RGB_S3TC_DXT1_EXT;\n                CONSTANTS.FORMAT_ENUMS.COMPRESSED_RGBA_S3TC_DXT3_EXT = dxt.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n                CONSTANTS.FORMAT_ENUMS.COMPRESSED_RGBA_S3TC_DXT5_EXT = dxt.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\n                CONSTANTS.SIZE_FUNCTIONS[dxt.COMPRESSED_RGB_S3TC_DXT1_EXT] = dxt1etc1Size;\n                CONSTANTS.SIZE_FUNCTIONS[dxt.COMPRESSED_RGBA_S3TC_DXT3_EXT] = dxt35Size;\n                CONSTANTS.SIZE_FUNCTIONS[dxt.COMPRESSED_RGBA_S3TC_DXT5_EXT] = dxt35Size;\n            }\n\n            return CONSTANTS;\n        }\n\n        function getDDSConstants() {\n\n            // http://msdn.microsoft.com/en-us/library/bb943991.aspx/\n            var CONSTANTS = {\n                MAGIC_NUMBER: 0x20534444,\n                MIPMAPCOUNT_FLAG: 0x20000,\n                PIXEL_FORMAT_FOURCC_FLAG: 0x4,\n\n                HEADER_LENGTH: 31,\n\n                MAGIC_NUMBER_INDEX: 0,\n\n                SIZE_INDEX: 1,\n                FLAGS_INDEX: 2,\n                HEIGHT_INDEX: 3,\n                WIDTH_INDEX: 4,\n\n                MIPMAPCOUNT_INDEX: 7,\n\n                PIXEL_FORMAT_FLAGS_INDEX: 20,\n                PIXEL_FORMAT_FOURCC_INDEX: 21,\n\n                DATA_OFFSET: 128,\n\n                FOURCC_MAP: {},\n                EXTENSION_MAP: {}\n            };\n\n            if (GL_CONSTANTS.DXT_SUPPORTED) {\n                var dxt1 = parseFourCC(\"DXT1\");\n                var dxt3 = parseFourCC(\"DXT3\");\n                var dxt5 = parseFourCC(\"DXT5\");\n\n                CONSTANTS.FOURCC_MAP[dxt1] = GL_CONSTANTS.FORMAT_ENUMS.COMPRESSED_RGB_S3TC_DXT1_EXT;\n                CONSTANTS.FOURCC_MAP[dxt3] = GL_CONSTANTS.FORMAT_ENUMS.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n                CONSTANTS.FOURCC_MAP[dxt5] = GL_CONSTANTS.FORMAT_ENUMS.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\n                CONSTANTS.EXTENSION_MAP[dxt1] = \"WEBGL_compressed_texture_s3tc\";\n                CONSTANTS.EXTENSION_MAP[dxt3] = \"WEBGL_compressed_texture_s3tc\";\n                CONSTANTS.EXTENSION_MAP[dxt5] = \"WEBGL_compressed_texture_s3tc\";\n            }\n\n            if (GL_CONSTANTS.ETC1_SUPPORTED) {\n                var etc1 = parseFourCC(\"ETC1\");\n\n                CONSTANTS.FOURCC_MAP[etc1] = GL_CONSTANTS.FORMAT_ENUMS.COMPRESSED_RGB_ETC1_WEBGL;\n\n                CONSTANTS.EXTENSION_MAP[etc1] = \"WEBGL_compressed_texture_etc1\";\n            }\n\n            return CONSTANTS;\n        }\n\n        function getPVRConstants() {\n\n            // http://cdn.imgtec.com/sdk-documentation/PVR+File+Format.Specification.pdf\n            var CONSTANTS = {\n                MAGIC_NUMBER: 0x03525650,\n                HEADER_LENGTH: 13,\n                HEADER_SIZE: 52,\n                MAGIC_NUMBER_INDEX: 0,\n                PIXEL_FORMAT_INDEX: 2,\n                HEIGHT_INDEX: 6,\n                WIDTH_INDEX: 7,\n                MIPMAPCOUNT_INDEX: 11,\n                METADATA_SIZE_INDEX: 12,\n                EXTENSION_MAP: {\n                    0: \"WEBGL_compressed_texture_pvrtc\",\n                    1: \"WEBGL_compressed_texture_pvrtc\",\n                    2: \"WEBGL_compressed_texture_pvrtc\",\n                    3: \"WEBGL_compressed_texture_pvrtc\",\n                    6: \"WEBGL_compressed_texture_etc1\",\n                    7: \"WEBGL_compressed_texture_s3tc\",\n                    9: \"WEBGL_compressed_texture_s3tc\",\n                    11: \"WEBGL_compressed_texture_s3tc\"\n                },\n                FORMAT_MAP: {}\n            };\n\n            if (GL_CONSTANTS.PVRTC_SUPPORTED) {\n                CONSTANTS.FORMAT_MAP[0] = GL_CONSTANTS.FORMAT_ENUMS.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n                CONSTANTS.FORMAT_MAP[1] = GL_CONSTANTS.FORMAT_ENUMS.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n                CONSTANTS.FORMAT_MAP[2] = GL_CONSTANTS.FORMAT_ENUMS.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n                CONSTANTS.FORMAT_MAP[3] = GL_CONSTANTS.FORMAT_ENUMS.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n            }\n\n            if (GL_CONSTANTS.ETC1_SUPPORTED) {\n                CONSTANTS.FORMAT_MAP[6] = GL_CONSTANTS.FORMAT_ENUMS.COMPRESSED_RGB_ETC1_WEBGL;\n            }\n\n            if (GL_CONSTANTS.DXT_SUPPORTED) {\n                CONSTANTS.FORMAT_MAP[7] = GL_CONSTANTS.FORMAT_ENUMS.COMPRESSED_RGB_S3TC_DXT1_EXT;\n                CONSTANTS.FORMAT_MAP[9] = GL_CONSTANTS.FORMAT_ENUMS.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n                CONSTANTS.FORMAT_MAP[11] = GL_CONSTANTS.FORMAT_ENUMS.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n            }\n\n            return CONSTANTS;\n        }\n\n        function getKTXConstants() {\n            var BYTE_IDENTIFIER = new Uint8Array([0xAB, 0x4B, 0x54, 0x58, 0x20, 0x31, 0x31, 0xBB, 0x0D, 0x0A, 0x1A, 0x0A]);\n\n            // https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/\n            var CONSTANTS = {\n                IDENTIFIER: new Uint32Array(BYTE_IDENTIFIER.buffer),\n                IDENTIFIER_LENGTH: 3,\n                HEADER_LENGTH: 16,\n                HEADER_SIZE: 64,\n                INTERNAL_FORMAT_INDEX: 7,\n                WIDTH_INDEX: 9,\n                HEIGHT_INDEX: 10,\n                MIPMAPCOUNT_INDEX: 14,\n                KEY_VALUE_SIZE_INDEX: 15,\n                EXTENSION_MAP: {}\n            };\n\n            if (GL_CONSTANTS.DXT_SUPPORTED) {\n                CONSTANTS.EXTENSION_MAP[GL_CONSTANTS.FORMAT_ENUMS.COMPRESSED_RGB_S3TC_DXT1_EXT ] = \"WEBGL_compressed_texture_s3tc\";\n                CONSTANTS.EXTENSION_MAP[GL_CONSTANTS.FORMAT_ENUMS.COMPRESSED_RGBA_S3TC_DXT3_EXT] = \"WEBGL_compressed_texture_s3tc\";\n                CONSTANTS.EXTENSION_MAP[GL_CONSTANTS.FORMAT_ENUMS.COMPRESSED_RGBA_S3TC_DXT5_EXT] = \"WEBGL_compressed_texture_s3tc\";\n            }\n\n            if (GL_CONSTANTS.ETC1_SUPPORTED) {\n                CONSTANTS.EXTENSION_MAP[GL_CONSTANTS.FORMAT_ENUMS.COMPRESSED_RGB_ETC1_WEBGL] = \"WEBGL_compressed_texture_etc1\";\n            }\n\n            return CONSTANTS;\n        }\n    })();\n\n\n})();\n;/**\n * @class Scene graph node which defines fresnels to apply to the objects in its subgraph\n * @extends SceneJS.Node\n */\n(function () {\n    \"use strict\";\n\n    var FLAGS = SceneJS.TEXTURE_FLAGS;\n\n    // The default state core singleton for {@link SceneJS.Fresnel} nodes\n    var defaultCore = {\n        type: \"fresnel\",\n        stateId: SceneJS._baseStateId++,\n        power: 1.0,\n        centerColor: new Float32Array([ 1.0, 1.0, 1.0, 1.0 ]),\n        edgeColor: new Float32Array([ 0.0, 0.0, 0.0, 0.0 ]),\n        blendFactor: 1.0,\n        blendMode: FLAGS.multiply,\n        empty: true,\n        hash: \"\"\n    };\n\n    SceneJS_events.addListener(\n        SceneJS_events.SCENE_COMPILING,\n        function (params) {\n            params.engine.display.fresnel = defaultCore;\n            stackLen = 0;\n        });\n\n    var coreStack = [];\n    var stackLen = 0;\n\n    /**\n     * @class Scene graph node which defines a fresnel to apply to the {@link SceneJS.Geometry} nodes in its subgraph\n     * @extends SceneJS.Node\n     */\n    SceneJS.Fresnel = SceneJS_NodeFactory.createNodeType(\"fresnel\");\n\n    SceneJS.Fresnel.prototype._init = function (params) {\n\n        if (this._core.useCount == 1) { // This node is the resource definer\n\n            if (params.applyTo) {\n                if (params.applyTo != \"color\" &&\n                    params.applyTo != \"specular\" &&\n                    params.applyTo != \"alpha\" &&\n                    params.applyTo != \"reflect\" &&\n                    params.applyTo != \"emit\" &&\n                    params.applyTo != \"fragment\" &&\n                    params.applyTo != \"transparency\") {\n\n                    SceneJS_error.fatalError(\n                        SceneJS.errors.NODE_CONFIG_EXPECTED,\n                        \"fresnel applyTo value is unsupported - should be either 'color', 'specular', 'alpha', 'reflect', 'emit' or 'fragment'\");\n                }\n            }\n\n            this._core.applyTo = params.applyTo;\n\n            if (params.blendMode) {\n                if (params.blendMode != \"add\" && params.blendMode != \"multiply\") {\n                    SceneJS_error.fatalError(\n                        SceneJS.errors.NODE_CONFIG_EXPECTED,\n                        \"texture layer blendMode value is unsupported - \" +\n                        \"should be either 'add' or 'multiply'\");\n                }\n            }\n\n            this._core.blendMode = FLAGS[params.blendMode || \"multiply\"];\n\n            this._core.centerColor = new Float32Array(defaultCore.centerColor);\n            this._core.edgeColor = new Float32Array(defaultCore.edgeColor);\n            this._core.power = defaultCore.power;\n\n            if (params.centerBias != undefined) {\n                this.setCenterBias(params.centerBias);\n            }\n            if (params.edgeBias != undefined) {\n                this.setEdgeBias(params.edgeBias);\n            }\n            if (params.power != undefined) {\n                this.setPower(params.power);\n            }\n            if (params.centerColor != undefined) {\n                this.setCenterColor(params.centerColor);\n            }\n            if (params.edgeColor != undefined) {\n                this.setEdgeColor(params.edgeColor);\n            }\n        }\n    };\n\n    SceneJS.Fresnel.prototype.getApplyTo = function () {\n        return this._core.applyTo;\n    };\n\n    SceneJS.Fresnel.prototype.setCenterBias = function (centerBias) {\n        this._core.centerColor[3] = (centerBias !== undefined) ? centerBias : defaultCore.centerColor[3];\n        this._engine.display.imageDirty = true;\n    };\n\n    SceneJS.Fresnel.prototype.getCenterBias = function () {\n        return this._core.centerColor[3];\n    };\n\n    SceneJS.Fresnel.prototype.setEdgeBias = function (edgeBias) {\n        this._core.edgeColor[3] = (edgeBias !== undefined) ? edgeBias : defaultCore.edgeColor[3];\n        this._engine.display.imageDirty = true;\n    };\n\n    SceneJS.Fresnel.prototype.getEdgeBias = function () {\n        return this._core.edgeColor[3];\n    };\n\n    SceneJS.Fresnel.prototype.setPower = function (power) {\n        this._core.power = (power !== undefined) ? power : defaultCore.power;\n        this._engine.display.imageDirty = true;\n    };\n\n    SceneJS.Fresnel.prototype.getPower = function () {\n        return this._core.power;\n    };\n\n    SceneJS.Fresnel.prototype.setCenterColor = function (color) {\n        var defaultCenterColor = defaultCore.centerColor;\n        this._core.centerColor[0] = color.r != undefined ? color.r : defaultCenterColor[0];\n        this._core.centerColor[1] = color.g != undefined ? color.g : defaultCenterColor[1];\n        this._core.centerColor[2] = color.b != undefined ? color.b : defaultCenterColor[2];\n        this._engine.display.imageDirty = true;\n        return this;\n    };\n\n    SceneJS.Fresnel.prototype.getCenterColor = function () {\n        return {\n            r:this._core.centerColor[0],\n            g:this._core.centerColor[1],\n            b:this._core.centerColor[2]\n        };\n    };\n\n    SceneJS.Fresnel.prototype.setEdgeColor = function (color) {\n        var defaultEdgeColor = defaultCore.edgeColor;\n        this._core.edgeColor[0] = color.r != undefined ? color.r : defaultEdgeColor[0];\n        this._core.edgeColor[1] = color.g != undefined ? color.g : defaultEdgeColor[1];\n        this._core.edgeColor[2] = color.b != undefined ? color.b : defaultEdgeColor[2];\n        this._engine.display.imageDirty = true;\n        return this;\n    };\n\n    SceneJS.Fresnel.prototype.getEdgeColor = function () {\n        return {\n            r:this._core.edgeColor[0],\n            g:this._core.edgeColor[1],\n            b:this._core.edgeColor[2]\n        };\n    };\n\n    SceneJS.Fresnel.prototype._compile = function (ctx) {\n\n        if (!this.__core) {\n            this.__core = this._engine._coreFactory.getCore(\"fresnel\");\n            this.__core.transparent = false;\n            this.__core.partiallyOpaque = false;\n        }\n\n        var parentCore = this._engine.display.fresnel;\n\n        if (!this._core.empty) {\n            this.__core.diffuse = this._core.applyTo == \"color\" ? this._core : parentCore.diffuse;\n            this.__core.specular = this._core.applyTo == \"specular\" ? this._core : parentCore.specular;\n            this.__core.alpha = this._core.applyTo == \"alpha\" ? this._core : parentCore.alpha;\n            this.__core.reflect = this._core.applyTo == \"reflect\" ? this._core : parentCore.reflect;\n            this.__core.emit = this._core.applyTo == \"emit\" ? this._core : parentCore.emit;\n            this.__core.fragment = this._core.applyTo == \"fragment\" ? this._core : parentCore.fragment;\n            this.__core.transparency = this._core.applyTo == \"transparency\" ? this._core : parentCore.transparency;\n            this.__core.transparent  = parentCore.transparent;\n            this.__core.partiallyOpaque  = parentCore.partiallyOpaque;\n\n            if (this._core.applyTo == \"alpha\" || this._core.applyTo == \"transparency\") {\n                this.__core.transparent = true;\n                if (this._core.centerColor[0] >= 1 || this._core.edgeColor[0] >= 1) {\n                    this.__core.partiallyOpaque = true;\n                }\n            }\n        }\n\n        this._makeHash(this.__core);\n\n        coreStack[stackLen++] = this.__core;\n\n        this._engine.display.fresnel = this.__core;\n        this._compileNodes(ctx);\n        this._engine.display.fresnel = (--stackLen > 0) ? coreStack[stackLen - 1] : defaultCore;\n        coreStack[stackLen] = null; // Release memory\n    };\n\n    SceneJS.Fresnel.prototype._makeHash = function (core) {\n        var hash = [];\n        if (core.diffuse) {\n            hash.push(\"d\" + core.diffuse.blendMode + \";\")\n        }\n        if (core.specular) {\n            hash.push(\"s\" + core.specular.blendMode + \";\")\n        }\n        if (core.alpha) {\n            hash.push(\"a\" + core.alpha.blendMode + \";\")\n        }\n        if (core.reflect) {\n            hash.push(\"r\" + core.reflect.blendMode + \";\")\n        }\n        if (core.emit) {\n            hash.push(\"e\" + core.emit.blendMode + \";\")\n        }\n        if (core.fragment) {\n            hash.push(\"f\" + core.fragment.blendMode + \";\")\n        }\n        if (core.transparency) {\n            hash.push(\"t\" + core.transparency.blendMode + \";\");\n        }\n        hash.push(core.blendMode + \";\");\n        hash = hash.join(\"\");\n\n        if (core.hash != hash) {\n            core.hash = hash;\n        }\n    };\n\n    SceneJS.Fresnel.prototype._destroy = function () {\n    };\n\n})();\n;(function () {\n    \"use strict\";\n\n    // The default state core singleton for {@link SceneJS.ColorBuf} nodes\n    var defaultCore = {\n        type: \"cubemap\",\n        stateId: SceneJS._baseStateId++,\n        empty: true,\n        texture: null,\n        space: \"world\",\n        hash: \"\"\n    };\n\n    var coreStack = [];\n    var stackLen = 0;\n\n    SceneJS_events.addListener(\n        SceneJS_events.SCENE_COMPILING,\n        function (params) {\n            params.engine.display.cubemap = defaultCore;\n            stackLen = 0;\n        });\n\n    /**\n     * @class Scene graph node which configures the color buffer for its subgraph\n     * @extends SceneJS.Node\n     */\n    SceneJS.Cubemap = SceneJS_NodeFactory.createNodeType(\"cubemap\");\n\n    SceneJS.Cubemap.prototype._init = function (params) {\n        if (this._core.useCount === 1) { // This node is first to reference the state core, so sets it up\n            this._core.hash = \"y\";\n\n            if (params.blendMode) {\n                if (params.blendMode !== \"add\" && params.blendMode !== \"multiply\") {\n                    SceneJS_error.fatalError(\n                        SceneJS.errors.NODE_CONFIG_EXPECTED,\n                            \"cubemap blendMode value is unsupported - \" +\n                            \"should be either 'add' or 'multiply'\");\n                }\n            }\n            var applyTo = params.applyTo || \"reflect\";\n            if (applyTo !== \"reflect\" && applyTo !== \"light\") {\n                SceneJS_error.fatalError(\n                    SceneJS.errors.NODE_CONFIG_EXPECTED,\n                    \"cubemap applyTo value is unsupported - should be either 'reflect' or 'light'\");\n            }\n\n            this._core.blendMode = params.blendMode || \"multiply\";\n            this._core.intensity = (params.intensity != undefined && params.intensity != null) ? params.intensity : 1.0;\n            this._core.applyTo = SceneJS.CUBEMAP_FLAGS[applyTo];\n\n            var space = params.space || \"world\";\n            if (space !== \"view\" && space !== \"world\") {\n                SceneJS_error.fatalError(\n                    SceneJS.errors.ILLEGAL_NODE_CONFIG,\n                    \"cubemap 'space' value is unsupported: '\" + space + \"' - should be 'view' or 'world'\");\n            }\n\n            if (space === \"view\" && applyTo === \"reflect\") {\n                // View-space reflection mapping not supported - defaulting to World-space\n                space = \"world;\"\n            }\n\n            this._core.space = space;\n\n            var self = this;\n\n            var gl = this._engine.canvas.gl;\n            var texture = gl.createTexture();\n\n            var faces = [\n                gl.TEXTURE_CUBE_MAP_POSITIVE_X,\n                gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\n                gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\n                gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n                gl.TEXTURE_CUBE_MAP_POSITIVE_Z,\n                gl.TEXTURE_CUBE_MAP_NEGATIVE_Z\n            ];\n\n            var images = new Array(6);\n            var loadFailed = false;\n\n            var imagesToLoad = 6;\n            for (var i = 0; i < faces.length; i++) {\n\n                var image = new Image();\n\n                image.onload = (function(index) {\n\n                    var _image = image;\n\n                    return function () {\n\n                        if (loadFailed) {\n                            return;\n                        }\n\n                        images[index] = _image;\n\n                        if (--imagesToLoad === 0) {\n\n                            gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture);\n                            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n\n                            for (var j = 0, lenj = images.length; j < lenj; j++) {\n                                gl.texImage2D(faces[j], 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, images[j]);\n                            }\n\n                            self._core.texture = new SceneJS._webgl.Texture2D(gl, {\n                                texture: texture,\n                                target: gl.TEXTURE_CUBE_MAP,\n                                minFilter: gl.LINEAR_MIPMAP_LINEAR,\n                                magFilter: gl.LINEAR,\n                                wrapS: gl.CLAMP_TO_EDGE,\n                                wrapT: gl.CLAMP_TO_EDGE\n                            });\n\n                            var minDim = Math.min(_image.width, _image.height);\n                            self._core.mipLevels = SceneJS_math_log2(minDim);\n\n                            self._engine.display.imageDirty = true;\n                        }\n                    };\n                })(i);\n\n                image.onerror = function () {\n                    loadFailed = true;\n                };\n\n                image.src = params.src[i];\n            }\n        }\n    };\n\n    SceneJS.Cubemap.prototype._compile = function (ctx) {\n        if (!this.__core) {\n            this.__core = this._engine._coreFactory.getCore(\"cubemap\");\n        }\n        var parentCore = this._engine.display.cubemap;\n        if (!this._core.empty) {\n            this.__core.layers = (parentCore && parentCore.layers) ? parentCore.layers.concat([this._core]) : [this._core];\n        }\n        this._makeHash(this.__core);\n        coreStack[stackLen++] = this.__core;\n        this._engine.display.cubemap = this.__core;\n        this._compileNodes(ctx);\n        this._engine.display.cubemap = (--stackLen > 0) ? coreStack[stackLen - 1] : defaultCore;\n        coreStack[stackLen] = null; // Release memory\n    };\n\n    SceneJS.Cubemap.prototype._makeHash = function (core) {\n        var hash;\n        if (core.layers && core.layers.length > 0) {\n            var layers = core.layers;\n            var hashParts = [];\n            var texLayer;\n            for (var i = 0, len = layers.length; i < len; i++) {\n                texLayer = layers[i];\n                hashParts.push(\"/\");\n                hashParts.push(texLayer.applyTo);\n                hashParts.push(\"/\");\n                hashParts.push(texLayer.space);\n                hashParts.push(\"/\");\n                hashParts.push(texLayer.blendMode);\n            }\n            hash = hashParts.join(\"\");\n        } else {\n            hash = \"\";\n        }\n        if (core.hash != hash) {\n            core.hash = hash;\n        }\n    };\n\n    SceneJS.Cubemap.prototype._destroy = function () {\n        if (this._core.useCount == 1) { // Last resource user\n            if (this._core.texture) {\n                this._core.texture.destroy();\n                this._core.texture = null;\n            }\n        }\n    }\n\n})();\n;/**\n * @class Scene graph node which defines textures to apply to the objects in its subgraph\n * @extends SceneJS.Node\n */\n(function () {\n    \"use strict\";\n\n    // The default state core singleton for {@link SceneJS.RegionMap} nodes\n    var defaultCore = {\n        type: \"regionMap\",\n        stateId: SceneJS._baseStateId++,\n        empty: true,\n        texture: null,\n        regionColor:[ -1.0, -1.0, -1.0 ],    // Highlight off by default\n        highlightFactor:[ 1.5, 1.5, 0.0 ],\n        hideAlpha: 0.0,\n        regionData: [],\n        mode: \"info\",\n        hash: \"\"\n    };\n\n    SceneJS_events.addListener(\n        SceneJS_events.SCENE_COMPILING,\n        function (params) {\n            params.engine.display.regionMap = defaultCore;\n            stackLen = 0;\n        });\n\n    var stackLen = 0;\n    var validModes = {\n        info: true,\n        highlight: true,\n        hide: true,\n        isolate: true\n    };\n\n    /**\n     * @class Scene graph node which defines a color-coded region map\n     * @extends SceneJS.Node\n     */\n    SceneJS.RegionMap = SceneJS_NodeFactory.createNodeType(\"regionMap\");\n\n    SceneJS.RegionMap.prototype._init = function (params) {\n\n        var self = this;\n\n        if (this._core.useCount == 1) { // This node is the resource definer\n\n            SceneJS._apply({\n                    regionMap: null\n                },\n                this._core);\n\n            // Index of UV layer for this region map\n\n            var applyFrom = params.applyFrom || \"uv\";\n            if (applyFrom.substring(0,2) !== \"uv\") {\n                SceneJS_error.fatalError(\n                    SceneJS.errors.NODE_CONFIG_EXPECTED,\n                    \"texture applyFrom value is unsupported - should be 'uv<index>'\");\n            }\n            var uvLayerIdx = 0;\n            if (applyFrom !== \"uv\") {\n                uvLayerIdx = applyFrom.substring(2);\n                if (isNaN(uvLayerIdx)) {\n                    SceneJS_error.fatalError(\n                        SceneJS.errors.NODE_CONFIG_EXPECTED,\n                        \"texture applyFrom value invalid - should be 'uv<index>'\");\n                }\n            }\n            this._core.uvLayerIdx = uvLayerIdx;\n\n            if (params.src) {\n\n                // Load from URL\n\n                this._initTexture();\n                this._core.src = params.src;\n                this._loadTexture(params.src);\n\n            } else if (params.image) {\n\n                // Create from image\n\n                this._initTexture(params.preloadColor);\n                this._core.image = params.image;\n                this._setTextureImage(params.image);\n            }\n\n            this._core.webglRestored = function () {\n\n                if (self._core.image) {\n                    self._initTexture();\n                    self._setTextureImage(self._core.image);\n\n                } else if (self._core.src) {\n                    self._initTexture();\n                    self._loadTexture(self._core.src);\n\n                } else if (self._core.target) {\n                    // Don't need to rebind anything for targets\n                }\n            };\n\n            this.setRegionColor(params.regionColor);\n            this.setHighlightFactor(params.highlightFactor);\n            this.setHideAlpha(params.hideAlpha);\n            this.setRegionData(params.regionData);\n            this.setMode(params.mode);\n        }\n    };\n\n    SceneJS.RegionMap.prototype._initTexture = function () {\n\n        var gl = this._engine.canvas.gl;\n\n        // Keep this for a little bit for debugging\n        var preloadColor = {r: 0.57735, g: 0.57735, b: 0.57735};\n        preloadColor.a = preloadColor.a === undefined ? 1 : preloadColor.a;\n        preloadColor = new Uint8Array([\n            Math.floor(preloadColor.r * 255),\n            Math.floor(preloadColor.g * 255),\n            Math.floor(preloadColor.b * 255),\n            Math.floor(preloadColor.a * 255)\n        ]);\n\n        var texture = gl.createTexture();\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, preloadColor);\n        this._setCoreTexture(texture);\n    };\n\n    SceneJS.RegionMap.prototype._loadTexture = function (src) {\n        var self = this;\n        var image = new Image();\n        var loaded = false;\n        var taskFinished = false;\n\n        image.onload = function () {\n            self._setTextureImage(image);\n            loaded = true;\n            self._engine.display.imageDirty = true;\n        };\n\n        this._fetchImage(image, src);\n    };\n\n    SceneJS.RegionMap.prototype._fetchImage = function (image, src) {\n        if (src.indexOf(\"data\") == 0) {  // Image data\n            image.src = src;\n        } else { // Image file\n            image.crossOrigin = \"Anonymous\";\n            image.src = src;\n        }\n    };\n\n    SceneJS.RegionMap.prototype._setTextureImage = function (image) {\n        var gl = this._engine.canvas.gl;\n        var texture = this._core.texture ? this._core.texture.texture : gl.createTexture();\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n        this._core.image = image;\n        this._setCoreTexture(texture);\n    };\n\n    SceneJS.RegionMap.prototype._setCoreTexture = function (texture) {\n        var gl = this._engine.canvas.gl;\n\n        this._core.texture = new SceneJS._webgl.Texture2D(gl, {\n            texture: texture, // WebGL texture object\n            minFilter: this._getGLOption(\"minFilter\", gl.NEAREST_MIPMAP_NEAREST),  // Don't want any interpolation\n            magFilter: this._getGLOption(\"magFilter\", gl.NEAREST),\n            wrapS: this._getGLOption(\"wrapS\", gl.REPEAT),\n            wrapT: this._getGLOption(\"wrapT\", gl.REPEAT),\n            isDepth: this._getOption(this._core.isDepth, false),\n            depthMode: this._getGLOption(\"depthMode\", gl.LUMINANCE),\n            depthCompareMode: this._getGLOption(\"depthCompareMode\", gl.COMPARE_R_TO_TEXTURE),\n            depthCompareFunc: this._getGLOption(\"depthCompareFunc\", gl.LEQUAL),\n            flipY: this._getOption(this._core.flipY, true),\n            width: this._getOption(this._core.width, 1),\n            height: this._getOption(this._core.height, 1),\n            internalFormat: this._getGLOption(\"internalFormat\", gl.ALPHA),\n            sourceFormat: this._getGLOption(\"sourceFormat\", gl.ALPHA),\n            sourceType: this._getGLOption(\"sourceType\", gl.UNSIGNED_BYTE),\n            update: null\n        });\n\n        if (this.destroyed) { // Node was destroyed while loading\n            this._core.texture.destroy();\n        }\n\n        this._engine.display.imageDirty = true;\n    };\n\n    SceneJS.RegionMap.prototype._getGLOption = function (name, defaultVal) {\n        var gl = this._engine.canvas.gl;\n        var value = this._core[name];\n        if (value == undefined) {\n            return defaultVal;\n        }\n        var glName = SceneJS._webgl.enumMap[value];\n        if (glName == undefined) {\n            SceneJS_error.fatalError(\n                SceneJS.errors.ILLEGAL_NODE_CONFIG,\n                \"Unrecognised value for texture node property '\" + name + \"' value: '\" + value + \"'\");\n        }\n        return gl[glName];\n    };\n\n    SceneJS.RegionMap.prototype._getOption = function (value, defaultVal) {\n        return (value == undefined) ? defaultVal : value;\n    };\n\n    SceneJS.RegionMap.prototype.setSrc = function (src) {\n        this._core.image = null;\n        this._core.src = src;\n        this._core.target = null;\n        this._loadTexture(src);\n    };\n\n    SceneJS.RegionMap.prototype.setImage = function (image) {\n        this._core.image = image;\n        this._core.src = null;\n        this._core.target = null;\n        this._setTextureImage(image);\n    };\n\n    SceneJS.RegionMap.prototype.setTarget = function (target) {\n        if (target.type != \"colorTarget\" && target.type != \"depthTarget\") {\n            console.log(\"Target node type not compatible: \" + target.type);\n            return;\n        }\n        delete this._core.src;\n        this._core.target = target;\n        this._core.src = null;\n        this._core.image = null;\n        this._core.texture = target._core.renderBuf.getTexture(); // TODO: what happens when the target is destroyed?\n        this._core.texture.bufType = target._core.bufType;\n        this._engine.display.imageDirty = true;\n    };\n\n    SceneJS.RegionMap.prototype.setRegionColor = function (color) {\n        var defaultHighlightColor = defaultCore.regionColor;\n        this._core.regionColor = color ? [\n            color.r != undefined && color.r != null ? color.r : defaultHighlightColor[0],\n            color.g != undefined && color.g != null ? color.g : defaultHighlightColor[1],\n            color.b != undefined && color.b != null ? color.b : defaultHighlightColor[2]\n        ] : defaultCore.regionColor;\n        this._engine.display.imageDirty = true;\n        return this;\n    };\n\n    SceneJS.RegionMap.prototype.setHighlightFactor = function (color) {\n        var defaultHighlightFactor = defaultCore.highlightFactor;\n        this._core.highlightFactor = color ? [\n            color.r != undefined && color.r != null ? color.r : defaultHighlightFactor[0],\n            color.g != undefined && color.g != null ? color.g : defaultHighlightFactor[1],\n            color.b != undefined && color.b != null ? color.b : defaultHighlightFactor[2]\n        ] : defaultCore.highlightFactor;\n        this._engine.display.imageDirty = true;\n        return this;\n    };\n\n    SceneJS.RegionMap.prototype.setHideAlpha = function (hideAlpha) {\n        this._core.hideAlpha = hideAlpha != undefined ? hideAlpha : defaultCore.hideAlpha;\n        this._engine.display.imageDirty = true;\n        return this;\n    };\n\n    SceneJS.RegionMap.prototype.setMode = function (mode) {\n        var wasTransparent = !!this._core.transparent;\n        this._core.mode = mode && validModes[mode] ? mode : defaultCore.mode;\n        this._core.transparent = this._core.mode === \"hide\" || this._core.mode === \"isolate\";\n        if (wasTransparent !== this._core.transparent) {\n            this._engine.display.objectListDirty = true;\n        }\n        this._engine.branchDirty(this);\n        this._engine.display.imageDirty = true;\n        this._core.hash = \"reg-\" + mode;\n        return this;\n    };\n\n    SceneJS.RegionMap.prototype.setRegionData = function (data) {\n        this._core.regionData = data ? data : defaultCore.regionData;\n        return this;\n    };\n\n\n    SceneJS.RegionMap.prototype._compile = function (ctx) {\n        var parentCore = this._engine.display.regionMap;\n        this._engine.display.regionMap = this._core;\n        this._compileNodes(ctx);\n        this._engine.display.regionMap = parentCore;\n    };\n\n    SceneJS.RegionMap.prototype._destroy = function () {\n        if (this._core.useCount == 1) { // Last core user\n            if (this._core.texture && !this._core.target) { // Don't wipe out target texture\n                this._core.texture.destroy();\n                this._core.texture = null;\n            }\n        }\n    };\n\n})();\n;(function () {\n    \"use strict\";\n\n    SceneJS.GlobalCubemap = function (scene, id, cfg) {\n        this.scene = scene;\n        this.id = id;\n        this.intensity = (cfg.intensity !== undefined && cfg.intensity !== null) ? cfg.intensity : 1.0;\n\n        var space = cfg.space || \"world\";\n        if (space !== \"view\" && space !== \"world\") {\n            console.error(\"cubemap 'space' value is unsupported: '\" + space + \"' - should be 'view' or 'world' - defaulting to 'world'\");\n            space = \"world\";\n        }\n\n        this.space = space;\n        this.hash = [this.space].join(\"\");\n\n        var self = this;\n\n        var gl = scene._engine.canvas.gl;\n        var texture = gl.createTexture();\n        var faces = [\n            gl.TEXTURE_CUBE_MAP_POSITIVE_X, gl.TEXTURE_CUBE_MAP_NEGATIVE_X, gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\n            gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, gl.TEXTURE_CUBE_MAP_POSITIVE_Z, gl.TEXTURE_CUBE_MAP_NEGATIVE_Z\n        ];\n        var images = new Array(6);\n        var loadFailed = false;\n        var imagesToLoad = 6;\n        for (var i = 0; i < faces.length; i++) {\n            var image = new Image();\n            image.onload = (function (index) {\n                var _image = image;\n                return function () {\n                    if (loadFailed) {\n                        return;\n                    }\n                    images[index] = _image;\n                    if (--imagesToLoad === 0) {\n                        gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture);\n                        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n                        for (var j = 0, lenj = images.length; j < lenj; j++) {\n                            gl.texImage2D(faces[j], 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, images[j]);\n                        }\n                        self.texture = new SceneJS._webgl.Texture2D(gl, {\n                            texture: texture,\n                            target: gl.TEXTURE_CUBE_MAP,\n                            minFilter: gl.LINEAR_MIPMAP_LINEAR,\n                            magFilter: gl.LINEAR,\n                            wrapS: gl.CLAMP_TO_EDGE,\n                            wrapT: gl.CLAMP_TO_EDGE\n                        });\n                        var minDim = Math.min(_image.width, _image.height);\n                        self.mipLevels = SceneJS_math_log2(minDim);\n                        scene._engine.display.imageDirty = true;\n                    }\n                };\n            })(i);\n            image.onerror = function () {\n                loadFailed = true;\n            };\n            image.src = cfg.src[i];\n        }\n    };\n\n    SceneJS.GlobalCubemap.prototype.destroy = function () {\n        if (this.texture) {\n            this.texture.destroy();\n            this.texture = null;\n        }\n    };\n})();\n;/**\n * @class Scene graph node which defines the modelling transform to apply to the objects in its subgraph\n * @extends SceneJS.Node\n */\n\n(function () {\n    \"use strict\";\n\n    var coreStack = [];\n    var stackLen = 0;\n\n    var defaultCore = {\n        type:\"xform\",\n\n        stateId: SceneJS._baseStateId++,\n        matrix: mat4.create(),\n        normalMatrix: mat4.create()\n    };\n\n    SceneJS.XForm = SceneJS_NodeFactory.createNodeType(\"xform\");\n\n    SceneJS_events.addListener(\n        SceneJS_events.SCENE_COMPILING,\n        function (params) {\n            params.engine.display.modelTransform = defaultCore;\n            stackLen = 0;\n        });\n\n    SceneJS.XForm.prototype._init = function (params) {\n\n        if (this._core.useCount == 1) { // This node is the resource definer\n\n            this._core.matrix = mat4.create();\n            this._core.normalMatrix = mat4.create();\n\n            if (params.elements) {\n                this.setElements(params.elements);\n            }\n        }\n    };\n\n    /**\n     * Get Model matrix\n     * @return {*}\n     */\n    SceneJS.XForm.prototype.getMatrix = function() {\n        return this._core.matrix;\n    };\n\n    SceneJS.XForm.prototype.setElements = function (elements) {\n\n        if (elements.length != 16) {\n            SceneJS_error.fatalError(\n                SceneJS.errors.ILLEGAL_NODE_CONFIG,\n                \"SceneJS.XForm elements should number 16\");\n        }\n\n        var core = this._core;\n\n        core.matrix.set(elements);\n\n        mat4.invert(core.normalMatrix, core.matrix);\n        mat4.transpose(core.normalMatrix, core.normalMatrix);\n        \n        this._engine.display.imageDirty = true;\n\n        return this;\n    };\n\n    SceneJS.XForm.prototype.getElements = function () {\n        return this._core.matrix;\n    };\n\n    SceneJS.XForm.prototype._compile = function (ctx) {\n        this._engine.display.modelTransform = coreStack[stackLen++] = this._core;\n        this._compileNodes(ctx);\n        this._engine.display.modelTransform = (--stackLen > 0) ? coreStack[stackLen - 1] : defaultCore;\n        coreStack[stackLen] = null; // Release memory\n    };\n\n})();\n\n;/**\n * Container for custom node types\n */\n\n(function () {\n    \"use strict\";\n\n    SceneJS.Types = new (function () {\n\n        /**\n         * Installs a node type\n         * @param typeName\n         * @param methods\n         */\n        this.addType = function (typeName, methods) {\n            var type = SceneJS_NodeFactory.createNodeType(typeName);\n            var method;\n            for (var methodName in methods) {\n                if (methods.hasOwnProperty(methodName)) {\n                    method = methods[methodName];\n                    switch (methodName) {\n                        case \"init\": // Deprecated\n                        case \"construct\":\n                            (function () {\n                                var _method = methods[methodName];\n                                type.prototype._init = function (params) {\n                                    _method.call(this, params);\n                                };\n\n                                // Mark node type as a plugin\n                                type.prototype._fromPlugin = true;\n                            })();\n                            break;\n                        case \"destroy\": // Deprecated\n                        case \"destruct\":\n                            type.prototype._destroy = method;\n                            break;\n                        default:\n                            type.prototype[methodName] = method;\n                    }\n                }\n            }\n        };\n\n        /**\n         * Tests if given node type is installed\n         * @param typeName\n         */\n        this.hasType = function (typeName) {\n            return !!SceneJS_NodeFactory.nodeTypes[typeName];\n        };\n    })();\n})();\n\n\n\n;/**\n * @class Display compiled from a {@link SceneJS.Scene}, providing methods to render and pick.\n * @private\n *\n * <p>A Display is a container of {@link SceneJS_Object}s which are created (or updated) by a depth-first\n * <b>compilation traversal</b> of a {@link SceneJS.Scene}.</b>\n *\n * <h2>Rendering Pipeline</h2>\n *\n * <p>Conceptually, a Display implements a pipeline with the following stages:</p>\n *\n * <ol>\n * <li>Create or update {@link SceneJS_Object}s during scene compilation</li>\n * <li>Organise the {@link SceneJS_Object} into an <b>object list</b></li>\n * <li>Determine the GL state sort order for the object list</li>\n * <li>State sort the object list</li>\n * <li>Create a <b>draw list</b> containing {@link SceneJS_Chunk}s belonging to the {@link SceneJS_Object}s in the object list</li>\n * <li>Render the draw list to draw the image</li>\n * </ol>\n *\n * <p>An update to the scene causes the pipeline to be re-executed from one of these stages, and SceneJS is designed\n * so that the pipeline is always re-executed from the latest stage possible to avoid redoing work.</p>\n *\n * <p>For example:</p>\n *\n * <ul>\n * <li>when an object is created or updated, we need to (re)do stages 2, 3, 4, 5 and 6</li>\n * <li>when an object is made invisible, we need to redo stages 5 and 6</li>\n * <li>when an object is assigned to a different scene render layer (works like a render bin), we need to redo\n *   stages 3, 4, 5, and 6</li>\n *<li>when the colour of an object changes, or maybe when the viewpoint changes, we simplt redo stage 6</li>\n * </ul>\n *\n * <h2>Object Creation</h2>\n * <p>The object soup (stage 1) is constructed by a depth-first traversal of the scene graph, which we think of as\n * \"compiling\" the scene graph into the Display. As traversal visits each scene node, the node's state core is\n * set on the Display (such as {@link #flags}, {@link #layer}, {@link #renderer} etc), which we think of as the\n * cores that are active at that instant during compilation. Each of the scene's leaf nodes is always\n * a {@link SceneJS.Geometry}, and when traversal visits one of those it calls {@link #buildObject} to create an\n * object in the soup. For each of the currently active cores, the object is given a {@link SceneJS_Chunk}\n * containing the WebGL calls for rendering it.</p>\n *\n * <p>The object also gets a shader (implemented by {@link SceneJS_Program}), taylored to render those state cores.</p>\n *\n * <p>Limited re-compilation may also be done on portions of a scene that have been added or sufficiently modified. When\n * traversal visits a {@link SceneJS.Geometry} for which an object already exists in the display, {@link #buildObject}\n * may update the {@link SceneJS_Chunk}s on the object as required for any changes in the core soup since the\n * last time the object was built. If differences among the cores require it, then {@link #buildObject} may also replace\n * the object's {@link SceneJS_Program} in order to render the new core soup configuration.</p>\n *\n * <p>So in summary, to each {@link SceneJS_Object} it builds, {@link #buildObject} creates a list of\n * {@link SceneJS_Chunk}s to render the set of node state cores that are currently set on the {@link SceneJS_Display}.\n * When {@link #buildObject} is re-building an existing object, it may replace one or more {@link SceneJS_Chunk}s\n * for state cores that have changed from the last time the object was built or re-built.</p>\n\n * <h2>Object Destruction</h2>\n * <p>Destruction of a scene graph branch simply involves a call to {@link #removeObject} for each {@link SceneJS.Geometry}\n * in the branch.</p>\n *\n * <h2>Draw List</h2>\n * <p>The draw list is actually comprised of two lists of state chunks: a \"pick\" list to render a pick buffer\n * for colour-indexed GPU picking, along with a \"draw\" list for normal image rendering. The chunks in these lists\n * are held in the state-sorted order of their objects in #_objectList, with runs of duplicate states removed.</p>\n *\n * <p>After a scene update, we set a flag on the display to indicate the stage we will need to redo from. The pipeline is\n * then lazy-redone on the next call to #render or #pick.</p>\n */\n\n(function() {\n    \"use strict\";\n\n    var SceneJS_Display = window.SceneJS_Display = function (stats, cfg) {\n\n        // Collects runtime statistics\n        this.stats = stats || {};\n\n        // Display is bound to the lifetime of an HTML5 canvas\n        this._canvas = cfg.canvas;\n\n        // Factory which creates and recycles {@link SceneJS_Program} instances\n        this._programFactory = new SceneJS_ProgramFactory(this.stats, {\n            canvas: cfg.canvas\n        });\n\n        // Factory which creates and recycles {@link SceneJS.Chunk} instances\n        this._chunkFactory = new SceneJS_ChunkFactory();\n\n        /**\n         * True when the background is to be transparent\n         * @type {boolean}\n         */\n        this.transparent = cfg.transparent === true;\n\n        /**\n         * Depth sort mode. Default to only sorting transparent objects.\n         */\n        this.depthSort = cfg.depthSort === true;\n\n        /**\n         * Set true when shader should attempt to auto-generate tangents if OES_standard_derivatives is supported.\n         * @type {boolean}\n         */\n        this.autoTangents = cfg.autoTangents === true;\n\n        /**\n         * Set true when shader should convert Phong textures from sRGB to linear space.\n         * @type {boolean}\n         */\n        this.gammaInputPhong = cfg.gammaInputPhong === true;\n\n        /**\n         * Node state core for the last {@link SceneJS.Flags} visited during scene graph compilation traversal\n         * @type Object\n         */\n        this.properties = null;\n\n        /**\n         * Node state core for the last {@link SceneJS.Material} visited during scene graph compilation traversal\n         * @type Object\n         */\n        this.material = null;\n\n        /**\n         * Node state core for the last {@link SceneJS.Texture} visited during scene graph compilation traversal\n         * @type Object\n         */\n        this.texture = null;\n\n        /**\n         * Node state core for the last {@link SceneJS.Fresnel} visited during scene graph compilation traversal\n         * @type Object\n         */\n        this.fresnel = null;\n\n        /**\n         * Node state core for the last {@link SceneJS.Cubemap} visited during scene graph compilation traversal\n         * @type Object\n         */\n        this.cubemap = null;\n\n        /**\n         * Node state core for the last {@link SceneJS.XForm} visited during scene graph compilation traversal\n         * @type Object\n         */\n        this.modelTransform = null;\n\n        /**\n         * Node state core for the last {@link SceneJS.RegionMap} visited during scene graph compilation traversal\n         * @type Object\n         */\n        this.regionMap = null;\n\n        /**\n         * Node state core for the last {@link SceneJS.MorphGeometry} visited during scene graph compilation traversal\n         * @type Object\n         */\n        this.morphGeometry = null;\n\n        /**\n         * Node state core for the last {@link SceneJS.Geometry} visited during scene graph compilation traversal\n         * @type Object\n         */\n        this.geometry = null;\n\n        /**\n         * The objects in the display\n         */\n        this._objects = {};\n\n        /**\n         * Ambient color, which must be given to gl.clearColor before draw list iteration\n         */\n        this._ambientColor = [0.7, 0.7, 0.8];\n\n        this.projection = {\n            type: \"perspective\",\n            fov: 60.0,\n            aspect: 1.0,\n            near: 0.1,\n            far: 500.0,\n            pan: 0\n        };\n\n        this.projectionMatrix = mat4.create();\n\n        this.buildProjectionMatrix();\n\n        this.camera = {\n            eye: new Float32Array([0, 0, 10]),\n            look: new Float32Array([0, 0, 0]),\n            up: new Float32Array([0, 1, 0])\n        };\n\n        this.viewMatrix = mat4.create();\n        this.hasDeviceMatrix = false;\n        this.deviceMatrix = mat4.create();\n\n        this.buildViewMatrix();\n\n        this.lights = [\n            {\n                mode: \"dir\",\n                color: new Float32Array([1.0, 1.0, 1.0 ]),\n                diffuse: true,\n                specular: true,\n                dir: new Float32Array([-0.5, -0.5, -1.0 ]),\n                space: \"view\"\n            },\n            {\n                mode: \"dir\",\n                color: new Float32Array([1.0, 1.0, 1.0 ]),\n                diffuse: false,\n                specular: true,\n                dir: new Float32Array([1.0, -0.9, -0.7 ]),\n                space: \"view\"\n            }\n        ];\n        this.lightHash = \"dirsdv/dirsv/\";\n\n        this.clips = {\n            clips : [],\n            clipFade: false,\n            clipDiscard: false,\n            enabled: false\n        };\n        this.clipsHash = \"\";\n\n        this.reflections = {\n            reflections: {},\n            activeReflection: null\n        };\n        this.reflectionsHash = \"\";\n\n        this.lightmaps = {\n            lightmaps: {},\n            activeLightmap: null\n        };\n        this.lightmapsHash = \"\";\n\n        this.highlightColor = new Float32Array([1.5, 1.5, 0.5]);\n        this.desatParams = new Float32Array([0.9, 0.3]);\n        this.fogParams = new Float32Array([0, 1000, 0, 1]);\n        this.fogColor = new Float32Array([1, 1, 1, 0.01]);\n        this.fogEnabled = false;\n        this.xrayColor = new Float32Array([0.0, 0.0, 0.1]);\n        this.fogMode = SceneJS.DISPLAY_FLAGS.FOG_LINEAR;\n        this.viewport = new Float32Array([0, 0, this._canvas.canvas.width, this._canvas.canvas.height]);\n\n        /**\n         * The object list, containing all elements of #_objects, kept in GL state-sorted order\n         */\n\n        this._opaqueObjects = [];\n        this._numOpaqueObjects = 0;\n\n        this._transparentObjects = [];\n        this._numTransparentObjects = 0;\n\n        this._pickLookup = [];\n\n        /* The frame context holds state shared across a single render of the draw list, along with any results of\n         * the render, such as pick hits\n         */\n        this._frameCtx = {\n            regionData: [],\n            canvas: this._canvas,           // The canvas\n            VAO: null                       // Vertex array object extension\n        };\n\n        /*-------------------------------------------------------------------------------------\n         * Flags which schedule what the display is to do when #render is next called.\n         *------------------------------------------------------------------------------------*/\n        \n        /**\n         * Flags the object list as needing to be rebuilt from existing objects on the next call to {@link #render} or {@link #pick}.\n         * Setting this will cause the rendering pipeline to be executed from stage #2 (see class comment),\n         * causing object list rebuild, state order determination, state sort, draw list construction and image render.\n         * @type Boolean\n         */\n        this.objectListDirty = true;\n\n        /**\n         * Flags the image as needing to be redrawn from the draw list on the next call to {@link #render} or {@link #pick}.\n         * Setting this will cause the rendering pipeline to be executed from stage #6 (see class comment),\n         * causing the image render.\n         * @type Boolean\n         */\n        this.imageDirty = true;\n\n        this._nextProgramId = 0;\n\n        this.postProcessPipelineOpaque = [];\n        this.postProcessPipelineTransparent = [];\n        this.postProcessPipelineFinal = [];\n\n        this._postProcessTypes = {};\n        this._postProcesses = {};\n        this.framebuffers = {};\n\n        this.mainFramebuffer = null;\n        this.mainFramebufferParams = null;\n        this.oitAccumulateFramebuffer = null;\n        this.oitPostprocessType = null;\n        this.oitPostprocess = null;\n        this.blitPostprocessType = null;\n        this.blitPostprocess = null;\n\n        this.transparencyMode = SceneJS.TRANSPARENCY_FLAGS.ALPHA;\n        this.depthSort = false;\n\n        this.postProcessInitialized = false;\n        this.oitInitialized = false;\n    };\n\n    SceneJS_Display.prototype.initPostProcess = function() {\n        if (this.postProcessInitialized) {\n            return;\n        }\n\n        this.mainFramebuffer = this.createFramebuffer(\"__MAIN\", this.mainFramebufferParams);\n\n        this.blitPostprocessType = this.createPostProcessType(\"__BLIT\", [\n           \"precision highp float;\",\n           \"varying vec2 vUV;\",\n           \"uniform sampler2D uTexture;\",\n           \"void main() {\",\n           \"    gl_FragColor = texture2D(uTexture, vUV);\",\n           \"}\"\n        ].join(\"\\n\"));\n\n        this.blitPostprocess = new SceneJS_PostProcessStage(this, {\n            type: \"__BLIT\",\n            textures: {\n                uTexture: {\n                    framebuffer: \"__MAIN\",\n                    target: \"color\"\n                }\n            }\n        });\n\n        this.postProcessInitialized = true;\n    };\n\n    SceneJS_Display.prototype.initOIT = function() {\n        if (this.oitInitialized) {\n            return;\n        }\n\n        this.initPostProcess();\n\n        this.oitAccumulateFramebuffer = this.createFramebuffer(\"__OIT_ACCUMULATE\", {\n            colorAttachments: [\n                {\n                    type: \"FLOAT\"\n                }\n            ],\n            sharedDepthBuffer: this.mainFramebuffer\n        });\n\n        this.oitDepthBuffer = this.createFramebuffer(\"__OIT_DEPTH\", {\n            colorAttachments: 0\n        });\n\n        this.oitPostprocessType = this.createPostProcessType(\"__OIT\", [\n           \"precision highp float;\",\n           \"varying vec2 vUV;\",\n           \"uniform vec2 uTexelOffset;\",\n           \"uniform sampler2D uAccumulate;\",\n           \"#define THRESH 0.1176\",\n           \"float edgeFilter(vec2 center, vec2 a0, vec2 a1, vec2 a2, vec2 a3){\", \n           \"    vec4 luminance = vec4(a0.x, a1.x , a2.x, a3.x);\",\n           \"    vec4 w = 1.0 - step(THRESH, abs(luminance - center.x));\", \n           \"    float W = w.x + w.y + w.z + w.w;\",\n           \"    w.x = W == 0.0 ? 1.0 : w.x;\",  \n           \"    W = W == 0.0 ? 1.0 : W;\",  \n           \"    return (w.x * a0.y + w.y * a1.y + w.z * a2.y + w.w * a3.y) / W;\",\n           \"}\",\n           \"void main() {\",\n           \"    vec4 accum = texture2D(uAccumulate, vUV);\",\n           \"    vec4 a0 = texture2D(uAccumulate, vUV + vec2(uTexelOffset.x, 0.0));\",\n           \"    vec4 a1 = texture2D(uAccumulate, vUV - vec2(uTexelOffset.x, 0.0));\",\n           \"    vec4 a2 = texture2D(uAccumulate, vUV + vec2(0.0, uTexelOffset.y));\",\n           \"    vec4 a3 = texture2D(uAccumulate, vUV - vec2(0.0, uTexelOffset.y));\",\n           \"    accum.rg /= max(accum.b, 0.001);\",     \n           \"    a0.rg /= max(a0.b, 0.001);\",     \n           \"    a1.rg /= max(a1.b, 0.001);\",     \n           \"    a2.rg /= max(a2.b, 0.001);\",     \n           \"    a3.rg /= max(a3.b, 0.001);\",     \n           \"    vec3 ycocg = vec3(accum.rg, edgeFilter(accum.rg, a0.rg, a1.rg, a2.rg, a3.rg));\",\n           \"    bool checkerboard = mod(gl_FragCoord.x, 2.0) == mod(gl_FragCoord.y, 2.0);\",\n           \"    ycocg.gb = checkerboard ? ycocg.gb : ycocg.bg;\",\n           \"    vec3 rgb = vec3(ycocg.r + ycocg.g - ycocg.b, ycocg.r + ycocg.b, ycocg.r - ycocg.g - ycocg.b);\",\n           \"    float a = 1.0 - accum.a;\",\n           \"    gl_FragColor = vec4(a * rgb, a);\",\n           \"}\"\n        ].join(\"\\n\"));\n\n        this.oitPostprocess = new SceneJS_PostProcessStage(this, {\n            type: \"__OIT\",\n            uniforms: {\n                uTexelOffset: new Float32Array([1 / window.innerWidth, 1 / window.innerHeight])\n            },\n            textures: {\n                uAccumulate: {\n                    framebuffer: \"__OIT_ACCUMULATE\",\n                    target: \"color\"\n                }\n            }\n        });\n\n        this.oitInitialized = true;\n    };\n\n    SceneJS_Display.prototype.setTransparencyMode = function (mode) {\n        this.transparencyMode = mode;\n\n        if (mode === SceneJS.TRANSPARENCY_FLAGS.WEIGHTED_OIT) {\n            this.initOIT();\n        }\n\n        this.objectListDirty = true;\n    };\n\n    SceneJS_Display.prototype.createFramebuffer = function (id, cfg) {\n        if (this.framebuffers[id]) {\n            this.framebuffers[id].destroy();\n        }\n\n        cfg = cfg || {};\n        cfg.canvas = this._canvas;\n        this.framebuffers[id] = new SceneJS._webgl.Framebuffer(cfg);\n\n        return this.framebuffers[id];\n    };\n\n    SceneJS_Display.prototype.destroyFramebuffer = function (id) {\n        if (this.framebuffers[id]) {\n            this.framebuffers[id].destroy();\n        }\n\n        delete this.framebuffers[id];\n    };\n\n    SceneJS_Display.prototype.getPostProcessStage = function (id) {\n        return this._postProcesses[id];\n    };\n\n    SceneJS_Display.prototype.createPostProcessType = function (type, src, option) {\n        this._postProcessTypes[type] = new SceneJS_PostProcess(this.stats, this._canvas.gl, src, option);\n        return this._postProcessTypes[type];\n    };\n\n    SceneJS_Display.prototype.postProcessOpaque = function (cfg) {\n        var i, len;\n        cfg = cfg || [];\n\n        if (cfg.length > 0) {\n            this.initPostProcess();\n        }\n\n\n        for (i = 0, len = this.postProcessPipelineOpaque.length; i < len; ++i) {\n            var pp = this.postProcessPipelineOpaque[i];\n            delete this._postProcesses[pp.id];\n            pp.destroy();\n        }\n\n        this.postProcessPipelineOpaque.length = 0;\n\n        for (i = 0, len = cfg.length; i < len; ++i) {\n            var stage = cfg[i];\n            var id = stage.id;\n\n            this._postProcesses[id] = new SceneJS_PostProcessStage(this, stage);\n            this.postProcessPipelineOpaque.push(this._postProcesses[id]);\n        }\n\n        this.imageDirty = true;\n    };\n\n    SceneJS_Display.prototype.postProcessFinal = function (cfg) {\n        var i, len;\n        cfg = cfg || [];\n\n        if (cfg.length > 0) {\n            this.initPostProcess();\n        }\n\n        for (i = 0, len = this.postProcessPipelineFinal.length; i < len; ++i) {\n            var pp = this.postProcessPipelineFinal[i];\n            delete this._postProcesses[pp.id];\n            pp.destroy();\n        }\n\n        this.postProcessPipelineFinal.length = 0;\n\n        for (i = 0, len = cfg.length; i < len; ++i) {\n            var stage = cfg[i];\n            var id = stage.id;\n\n            this._postProcesses[id] = new SceneJS_PostProcessStage(this, stage);\n            this.postProcessPipelineFinal.push(this._postProcesses[id]);\n        }\n\n        this.imageDirty = true;\n    };\n\n    /**\n     * Reallocates WebGL resources for objects within this display\n     */\n    SceneJS_Display.prototype.webglRestored = function () {\n        this._programFactory.webglRestored();// Reallocate programs\n        this._chunkFactory.webglRestored(); // Recache shader var locations\n        var gl = this._canvas.gl;\n        if (this.pickBuf) {\n            this.pickBuf.webglRestored(gl);          // Rebuild pick buffers\n        }\n\n        for (var fb in this.framebuffers) {\n            this.framebuffers[fb].webglRestored(gl);\n        }\n\n        for (var pp in this._postProcessTypes) {\n            this._postProcessTypes[pp].webglRestored(gl);\n        }\n\n        this.imageDirty = true;             // Need redraw\n    };\n\n    SceneJS_Display.prototype.setViewport = function (xmin, ymin, width, height) {\n        this.viewport[0] = xmin;\n        this.viewport[1] = ymin;\n        this.viewport[2] = width;\n        this.viewport[3] = height;\n        this.imageDirty = true;\n    };\n\n\n    SceneJS_Display.prototype.buildProjectionMatrix = function () {\n        var projection = this.projection;\n        var projectionMatrix = this.projectionMatrix;\n\n        if (projection.type == \"ortho\") {\n            mat4.ortho(\n                projectionMatrix,\n                projection.left,\n                projection.right,\n                projection.bottom,\n                projection.top,\n                projection.near,\n                projection.far);\n\n        } else if (projection.type == \"frustum\") {\n            mat4.frustum(\n                projectionMatrix,\n                projection.left,\n                projection.right,\n                projection.bottom,\n                projection.top,\n                projection.near,\n                projection.far);\n\n        } else if (projection.type == \"perspective\") {\n            var fov = projection.fov;\n\n            fov = Math.min(fov, 120);\n\n            mat4.perspective(\n                projectionMatrix,\n                fov * Math.PI / 180.0,\n                projection.aspect,\n                projection.near,\n                projection.far);\n        }\n\n        if (projection.pan) {\n            // Post-multiply a screen-space pan\n            var pan = projection.pan;\n            var panMatrix = mat4.fromTranslation(mat4.create(), [pan.x || 0, pan.y || 0, pan.z || 0]);\n            mat4.multiply(projectionMatrix, panMatrix, projectionMatrix);\n        }\n    };\n\n    SceneJS_Display.prototype.buildViewMatrix = function () {\n        var camera = this.camera;\n        var viewMatrix = this.viewMatrix;\n        mat4.lookAt(viewMatrix, camera.eye, camera.look, camera.up);\n        if (this.hasDeviceMatrix) {\n            var tempmatrix = mat4.create();\n            mat4.multiply(tempmatrix, this.deviceMatrix, viewMatrix); // Post-multiply the device matrix by the lookat matrix\n            viewMatrix.set(tempmatrix);\n        }\n    };\n\n    /**\n     * Internally creates (or updates) a {@link SceneJS_Object} of the given ID from whatever node state cores are currently set\n     * on this {@link SceneJS_Display}. The object is created if it does not already exist in the display, otherwise it is\n     * updated with the current state cores, possibly replacing cores already referenced by the object.\n     *\n     * @param {String} objectId ID of object to create or update\n     */\n    SceneJS_Display.prototype.buildObject = function (objectId, params) {\n\n        var object = this._objects[objectId];\n\n        if (!object) { // Create object\n            object = this._objects[objectId] = new SceneJS_Object(objectId);\n        }\n\n        object.modelTransform = this.modelTransform;\n        object.viewMatrix = this.viewMatrix;\n        object.projectionMatrix = this.projectionMatrix;\n        object.texture = this.texture;\n        object.cubemap = this.cubemap;\n        object.geometry = this.geometry;\n        object.morphGeometry = this.morphGeometry;\n        object.properties = this.properties;\n        object.material = this.material;\n        object.fresnel = this.fresnel;\n        object.regionMap = this.regionMap;\n        object.backfaces = params.backfaces;\n        object.addBlend = params.addBlend;\n        object.layer = params.layer;\n\n        var hash = ([                   // Build current state hash\n            this.geometry.hash,\n            this.morphGeometry.hash,\n            this.texture.hash,\n            this.fresnel.hash,\n            this.cubemap.hash,\n            this.lightHash,\n            this.clipsHash,\n            this.reflectionsHash,\n            this.lightmapsHash,\n            this.properties.hash,\n            ((this.transparencyMode & SceneJS.TRANSPARENCY_FLAGS.TWO_PASS) && object.isPartiallyOpaque()) ? \"pt\" : \"\",\n            this.regionMap.hash,\n            this.fogEnabled ? (\"f\" + this.fogMode) : \"\",\n        ]).join(\";\");\n\n        if (!object.program || hash != object.hash) {\n            // Get new program for object if no program or hash mismatch\n            if (object.program) {\n                this._programFactory.putProgram(object.program.draw);\n                this._programFactory.putProgram(object.program.xray);\n                this._programFactory.putProgram(object.program.pick);\n                this._programFactory.putProgram(object.program.pickTriangle);\n                this._programFactory.putProgram(object.program.depth);\n                this._programFactory.putProgram(object.program.drawTexture);\n                SceneJS_ProgramSourceFactory.putSource(object.hash);\n            }\n\n            var source = SceneJS_ProgramSourceFactory.getSource(hash, this, object);\n\n            object.program = {\n                draw: this._programFactory.getProgram(hash + \"-draw\", source.drawVertexSrc, source.drawFragmentSrc),\n                xray: this._programFactory.getProgram(hash + \"-xray\", source.xrayVertexSrc, source.xrayFragmentSrc),\n                pick: this._programFactory.getProgram(hash + \"-pick\", source.pickVertexSrc, source.pickFragmentSrc),\n                pickTriangle: this._programFactory.getProgram(hash + \"-pickTriangle\", source.pickTriangleVertexSrc, source.pickTriangleFragmentSrc),\n                depth: this._programFactory.getProgram(hash + \"-depth\", source.depthVertexSrc, source.depthFragmentSrc),\n                drawTexture: this._programFactory.getProgram(hash + \"-drawTexture\", source.drawTextureVertexSrc, source.drawTextureFragmentSrc),\n                id: this._nextProgramId++,\n                gl: this._canvas.gl\n            };\n            object.hash = hash;\n            object.sortKey = (object.program.id + 1) * 100000 + object.texture.stateId;\n        }\n\n        // Build draw chunks for object\n        this._setChunk(object, \"draw\", 0, \"program\"); // Must be first\n        this._setChunk(object, \"draw\", 1, \"object\", [this.properties, this.modelTransform]);\n        this._setChunk(object, \"draw\", 2, \"material\", [this.material, this.texture, this.fresnel, this.cubemap]);\n        this._setChunk(object, \"draw\", 3, \"regionMap\", [this.regionMap]);\n        this._setChunk(object, \"draw\", 4, \"geometry\", [this.morphGeometry, this.geometry]);\n        this._setChunk(object, \"draw\", 5, \"draw\", [this.geometry]); // Must be last\n\n        this._setChunk(object, \"xray\", 0, \"program\"); // Must be first\n        this._setChunk(object, \"xray\", 1, \"object\", [this.properties, this.modelTransform]);\n        this._setChunk(object, \"xray\", 2, \"geometry\", [this.morphGeometry, this.geometry]);\n        this._setChunk(object, \"xray\", 3, \"draw\", [this.geometry]); // Must be last\n\n        this._setChunk(object, \"pick\", 0, \"program\"); // Must be first\n        this._setChunk(object, \"pick\", 1, \"object\", [this.properties, this.modelTransform]);\n        this._setChunk(object, \"pick\", 2, \"regionMap\", [this.regionMap]);\n        this._setChunk(object, \"pick\", 3, \"geometry\", [this.morphGeometry, this.geometry]);\n        this._setChunk(object, \"pick\", 4, \"draw\", [this.geometry]); // Must be last\n\n        this._setChunk(object, \"pickTriangle\", 0, \"program\"); // Must be first\n        this._setChunk(object, \"pickTriangle\", 1, \"object\", [this.properties, this.modelTransform]);\n        this._setChunk(object, \"pickTriangle\", 2, \"geometry\", [this.morphGeometry, this.geometry]);\n        this._setChunk(object, \"pickTriangle\", 3, \"draw\", [this.geometry]); // Must be last\n\n        this._setChunk(object, \"depth\", 0, \"program\"); // Must be first\n        this._setChunk(object, \"depth\", 1, \"object\", [this.properties, this.modelTransform]);\n        this._setChunk(object, \"depth\", 2, \"geometry\", [this.morphGeometry, this.geometry]);\n        this._setChunk(object, \"depth\", 3, \"draw\", [this.geometry]); // Must be last\n\n        this._setChunk(object, \"drawTexture\", 0, \"program\"); // Must be first\n        this._setChunk(object, \"drawTexture\", 1, \"object\", [this.properties, this.modelTransform]);\n        this._setChunk(object, \"drawTexture\", 2, \"material\", [this.material, this.texture, this.fresnel, this.cubemap]);\n        this._setChunk(object, \"drawTexture\", 3, \"geometry\", [this.morphGeometry, this.geometry]);\n        this._setChunk(object, \"drawTexture\", 4, \"draw\", [this.geometry]); // Must be last\n\n        // At the very least, the object sort order\n        // will need be recomputed\n\n        this.objectListDirty = true;\n    };\n\n\n    SceneJS_Display.prototype._setChunk = function (object, renderMode, order, chunkType, cores, core2) {\n\n        var chunkId;\n        var chunkClass = this._chunkFactory.chunkTypes[chunkType];\n\n        if (object.chunkSets[renderMode] === undefined) {\n            object.chunkSets[renderMode] = [];\n        }\n\n        var chunkSet = object.chunkSets[renderMode];\n\n        if (cores) {\n\n            var allEmpty = true;\n            for (var i = 0, len = cores.length; i < len; ++i) {\n                if (!cores[i].empty) {\n                    allEmpty = false;\n                    break;\n                }\n            }\n            if (allEmpty) { // Only set default cores for state types that have them\n                var oldChunk = chunkSet[order];\n                if (oldChunk) {\n                    this._chunkFactory.putChunk(oldChunk); // Release previous chunk to pool\n                }\n                chunkSet[order] = null;\n                return;\n            }\n\n            // Note that core.stateId can be either a number or a string, that's why we make\n            // chunkId a string here.\n            // TODO: Would it be better if all were numbers?\n            chunkId = 'p' + object.program.id;\n\n            for (var i = 0, len = cores.length; i < len; ++i) {\n                chunkId += '_' + cores[i].stateId\n            }\n        } else {\n\n            // No core supplied, probably a program.\n            // Only one chunk of this type per program.\n            chunkId = 'p' + object.program.id;\n        }\n\n        // This is needed so that chunkFactory can distinguish between draw and geometry\n        // chunks with the same core.\n        chunkId = order + '__' + chunkId;\n\n        var oldChunk = chunkSet[order];\n\n        if (oldChunk) {\n            if (oldChunk.id == chunkId) { // Avoid needless chunk reattachment\n                return;\n            }\n            this._chunkFactory.putChunk(oldChunk); // Release previous chunk to pool\n        }\n\n        chunkSet[order] = this._chunkFactory.getChunk(chunkId, chunkType, object.program, cores); // Attach new chunk\n    };\n\n    /**\n     * Removes an object from this display\n     *\n     * @param {String} objectId ID of object to remove\n     */\n    SceneJS_Display.prototype.removeObject = function (objectId) {\n        var object = this._objects[objectId];\n        if (!object) {\n            return;\n        }\n        this._programFactory.putProgram(object.program);\n        object.program = null;\n        object.hash = null;\n        for (var chunkSet in object.chunkSets) {\n            var chunks = object.chunkSets[chunkSet];\n            var chunk;\n            for (var i = 0, len = chunks.length; i < len; i++) {\n                chunk = chunks[i];\n                if (chunk) {\n                    this._chunkFactory.putChunk(chunk);\n                }\n            }\n        }\n\n        delete this._objects[objectId];\n        this.objectListDirty = true;\n    };\n\n    /**\n     * Render this display. What actually happens in the method depends on what flags are set.\n     *\n     */\n    SceneJS_Display.prototype.prepareScene = function () {\n        if (this.objectListDirty) {\n            this._buildObjectList();          // Build object render bin\n            this.objectListDirty = false;\n            this.imageDirty = true;\n        }\n    };\n\n    /**\n     * Render this display. What actually happens in the method depends on what flags are set.\n     *\n     */\n    SceneJS_Display.prototype.render = function (params) {\n\n        params = params || {};\n\n        if (this._canvas.canvas.width == 0 || this._canvas.canvas.height == 0) {\n            // Canvas hidden\n            return;\n        }\n\n        if (this.imageDirty || params.force) {\n            this._doDrawList({ // Render, no pick\n                clear: (params.clear !== false), // Clear buffers by default\n                opaqueOnly: params.opaqueOnly,\n                pass: params.pass,\n                custom: params.custom\n            });\n            this.imageDirty = false;\n            this.pickBufDirty = true;       // Pick buff will now need rendering on next pick\n        }\n    };\n\n    SceneJS_Display.prototype._buildObjectList = function () {\n        var lastOpaqueIndex = this._numOpaqueObjects;\n        var lastTransparentIndex = this._numTransparentObjects;\n        var objectId, i;\n        var ENABLED_FLAG = SceneJS.PROPERTY_FLAGS.ENABLED;\n        var twoPass = !!(this.transparencyMode & SceneJS.TRANSPARENCY_FLAGS.TWO_PASS);\n\n\n        this._numOpaqueObjects = 0;\n        this._numTransparentObjects = 0;\n        for (objectId in this._objects) {\n            var object = this._objects[objectId];\n            if (object.properties.flags & ENABLED_FLAG) {\n                if (object.isTransparent()) {\n                    this._transparentObjects[this._numTransparentObjects++] = object;\n                    if (twoPass  && object.isPartiallyOpaque()) {\n                        this._opaqueObjects[this._numOpaqueObjects++] = object;\n                    }\n                } else {\n                    this._opaqueObjects[this._numOpaqueObjects++] = object;\n                }\n            }\n        }\n\n        // Release memory\n        this._opaqueObjects.length = this._numOpaqueObjects;\n        this._opaqueObjects.sort(sortObjects);\n        \n        this._transparentObjects.length = this._numTransparentObjects;  \n        if (this.transparencyMode & SceneJS.TRANSPARENCY_FLAGS.ORDER_DEPENDENT) {\n            this._transparentObjects.sort(sortLayers);\n        } else {\n            this._transparentObjects.sort(sortObjects);\n        }\n    };\n\n    function sortObjects(o1, o2) {\n        return o1.sortKey - o2.sortKey;\n    }\n\n    function sortLayers(o1, o2) {\n        return (o1.layer - o2.layer) \n            || (o1.properties.stateId - o2.properties.stateId)  \n            || (o1.sortTieBreaker - o2.sortTieBreaker);\n    }\n\n    function sortDepth(o1, o2) {\n        return (o1.layer - o2.layer) || (o2.getDepth() - o1.getDepth());\n    }\n\n    (function () {\n\n        var localRayOrigin = vec3.create();\n        var localRayDir = vec3.create();\n\n        var pickViewMatrix = mat4.create();\n        var pickProjMatrix = mat4.frustum(mat4.create(), -1, 1, -1, 1, 0.1, 10000);\n\n        var a = vec3.create();\n        var b = vec3.create();\n        var c = vec3.create();\n\n        var na = vec3.create();\n        var nb = vec3.create();\n        var nc = vec3.create();\n\n        var uva = vec3.create();\n        var uvb = vec3.create();\n        var uvc = vec3.create();\n\n        // for lerp\n        var a1 = vec3.create();\n        var b1 = vec3.create();\n        var c1 = vec3.create();\n        var a2 = vec3.create();\n        var b2 = vec3.create();\n        var c2 = vec3.create();\n\n        var tempMat4 = mat4.create();\n        var tempMat4b = mat4.create();\n\n        var tempVec4 = vec4.create();\n        var tempVec4b = vec4.create();\n\n        var tempVec3 = vec3.create();\n        var tempVec3b = vec3.create();\n        var tempVec3c = vec3.create();\n        var tempVec3d = vec3.create();\n\n        var tempVec2 = vec2.create();\n        var tempVec2b = vec2.create();\n        var tempVec2c = vec2.create();\n        var tempVec2d = vec2.create();\n\n\n        // Transforms canvas coordinates into a Local-space ray\n\n        var canvasPosToLocalRay = (function () {\n\n            var vmMat = mat4.create();\n            var pvMat = mat4.create();\n            var pvMatInv = mat4.create();\n            var a  = vec4.create(); // Local-space ray endpoints\n            var b = vec4.create();\n\n            return function (canvas, object, canvasPos, localRayOrigin, localRayDir) {\n\n                var modelMat = object.modelTransform.matrix;\n                var viewMat = object.viewMatrix;\n                var projMat = object.projectionMatrix;\n\n                mat4.multiply(vmMat, viewMat, modelMat);\n                mat4.multiply(pvMat, projMat, vmMat);\n                mat4.invert(pvMatInv, pvMat);\n\n                var canvasWidth = canvas.width;\n                var canvasHeight = canvas.height;\n\n                var clipX = (canvasPos[0] - canvasWidth / 2) / (canvasWidth / 2);  // Calculate clip space coordinates\n                var clipY = -(canvasPos[1] - canvasHeight / 2) / (canvasHeight / 2);\n\n                vec4.transformMat4(a, [clipX, clipY, -1, 1], pvMatInv);\n                vec3.scale(a, a, 1 / a[3]);\n\n                vec4.transformMat4(b, [clipX, clipY, 1, 1], pvMatInv);\n                vec3.scale(b, b, 1 / b[3]);\n\n                localRayOrigin[0] = a[0];\n                localRayOrigin[1] = a[1];\n                localRayOrigin[2] = a[2];\n\n                vec3.subtract(localRayDir, b, a);\n                vec3.normalize(localRayDir, localRayDir)\n            };\n        })();\n\n        // Transforms a World-space ray into Local-space ray\n\n        var worldRayToLocalRay = (function () {\n\n            var modelMatInv = mat4.create();\n            var a = vec4.create();\n            var b = vec4.create();\n\n            return function (object, worldRayOrigin, worldRayDir, localRayOrigin, localRayDir) {\n\n                var modelMat = object.modelTransform.matrix;\n\n                mat4.invert(modelMatInv, modelMat);\n\n                a[0] = worldRayOrigin[0];\n                a[1] = worldRayOrigin[1];\n                a[2] = worldRayOrigin[2];\n                a[3] = 1;\n\n                vec4.transformMat4(b, a, modelMatInv);\n\n                localRayOrigin[0] = b[0];\n                localRayOrigin[1] = b[1];\n                localRayOrigin[2] = b[2];\n\n                vec3.transformMat4(localRayDir, worldRayDir, modelMatInv);\n            };\n        })();\n\n        /**\n         * Performs a pick on the display graph and returns info on the result.\n         * @param {*} params\n         * @returns {*}\n         */\n        SceneJS_Display.prototype.pick = function (params) {\n\n            if (!params.canvasPos && (params.rayPick && (!params.origin || !params.direction))) {\n                console.warn(\"Incomplete pick parameters\");\n                return;\n            }\n\n            if (this._canvas.canvas.width == 0 || this._canvas.canvas.height == 0) {\n                // Canvas hidden\n                return;\n            }\n\n            var canvas = this._canvas.canvas;\n            var resolutionScaling = this._canvas.resolutionScaling;\n            var canvasPos = params.canvasPos;\n            if (canvasPos) {\n                canvasPos = new Float32Array([canvasPos[0] * resolutionScaling, canvasPos[1] * resolutionScaling]);\n            }\n\n            var pickBuf = this.pickBuf;\n            var hit = null;\n            var object;\n            var i;\n            var len;\n\n            // Lazy-create pick buffer\n            if (!pickBuf) {\n                pickBuf = this.pickBuf = new SceneJS._webgl.Framebuffer({\n                    canvas: this._canvas\n                });\n            }\n\n            var worldRayPicking = !params.canvasPos; // Picking with ray given as origin->direction\n\n            var worldRayOrigin;\n            var worldRayDir;\n\n            var pickBufX;\n            var pickBufY;\n\n            if (worldRayPicking) {\n\n                worldRayOrigin = params.origin || new Float32Array([0, 0, 0]);\n                worldRayDir = params.direction || new Float32Array([0, 0, 1]);\n\n                var look = vec3.add(tempVec3, worldRayOrigin, worldRayDir);\n                var up = new Float32Array([0, 1, 0]); // TODO: derive from ray?\n\n                mat4.lookAt(pickViewMatrix, worldRayOrigin, look, up);\n\n                pickBufX = canvas.clientWidth * 0.5; // Sample center of pick buffer\n                pickBufY = canvas.clientHeight * 0.5;\n\n            } else {\n\n                pickBufX = canvasPos[0];\n                pickBufY = canvasPos[1];\n            }\n\n            this.prepareScene();\n            this.render(); // Do any pending visible render\n\n            //------------------------------------------------------------------\n            // Pick an object using color-indexed render\n            //------------------------------------------------------------------\n\n            pickBuf.bind();\n\n            pickBuf.clear();\n\n            this._doDrawList({\n                pickObject: true,\n                clear: true,\n                pickViewMatrix: worldRayPicking ? pickViewMatrix : null,\n                pickProjMatrix: worldRayPicking ? pickProjMatrix : null\n            });\n\n            this._canvas.gl.finish();\n\n            // Read pixel color in pick buffer at given coordinates,\n            // convert to an index into the pick name list\n\n            var pix = pickBuf.read(pickBufX, pickBufY);\n\n            var pickedColorIndex = pix[0] + (pix[1] * 256) + (pix[2] * 256 * 256) + (pix[3] * 256 * 256 * 256);\n\n            var objectIndex = this._pickLookup[pickedColorIndex - 1];\n\n            if (objectIndex >= 0) {\n\n                if (objectIndex < this._numOpaqueObjects) {\n                    object = this._opaqueObjects[objectIndex];\n                } else {\n                    object = this._transparentObjects[objectIndex - this._numOpaqueObjects];\n                }\n                \n\n                hit = {\n                    canvasPos: canvasPos,\n                    objectId: object.id\n                };\n\n                var properties = object.properties;\n\n                if (properties) {\n                    hit.name = properties.name;\n                    hit.nodeId = properties.nodeId;\n                }\n            }\n\n            if (params.pickRegion) {\n\n                //------------------------------------------------------------------\n                // Pick a region\n                // Region picking is independent of having picked an object\n                //------------------------------------------------------------------\n\n                pickBuf.clear();\n\n                this._doDrawList({\n                    pickRegion: true,\n                    object: object,\n                    pickViewMatrix: worldRayPicking ? pickViewMatrix: null,\n                    pickProjMatrix: worldRayPicking ? pickProjMatrix: null,\n                    clear: true\n                });\n\n                pix = pickBuf.read(pickBufX, pickBufY);\n\n                if (pix[0] !== 0 || pix[1] !== 0 || pix[2] !== 0 || pix[3] !== 0) {\n\n                    hit = hit || {\n                            canvasPos: canvasPos\n                        };\n\n                    var regionColor = {r: pix[0] / 255, g: pix[1] / 255, b: pix[2] / 255, a: pix[3] / 255};\n                    var regionData = this._frameCtx.regionData;\n                    var tolerance = 0.01;\n                    var data = {};\n                    var color, delta;\n\n                    for (i = 0, len = regionData.length; i < len; i++) {\n                        color = regionData[i].color;\n                        if (regionColor && regionData[i].data) {\n                            delta = Math.max(\n                                Math.abs(regionColor.r - color.r),\n                                Math.abs(regionColor.g - color.g),\n                                Math.abs(regionColor.b - color.b),\n                                Math.abs(regionColor.a - (color.a === undefined ? regionColor.a : color.a))\n                            );\n\n                            if (delta < tolerance) {\n                                data = regionData[i].data;\n                                break;\n                            }\n                        }\n                    }\n\n                    hit.color = regionColor;\n                    hit.regionData = data;\n                }\n            }\n\n            if (params.pickTriangle && object) {\n\n                //------------------------------------------------------------------\n                // Pick a triangle on the picked object\n                //------------------------------------------------------------------\n\n                pickBuf.clear();\n\n                this._doDrawList({\n                    pickTriangle: true,\n                    object: object,\n                    pickViewMatrix: worldRayPicking ? pickViewMatrix: null,\n                    pickProjMatrix: worldRayPicking ? pickProjMatrix: null,\n                    clear: true\n                });\n\n                pix = pickBuf.read(pickBufX, pickBufY);\n                var primitiveIndex = pix[0] + (pix[1] * 256) + (pix[2] * 256 * 256) + (pix[3] * 256 * 256 * 256);\n                primitiveIndex *= 3; // Convert from triangle number to first vertex in indices\n\n                hit.primitiveIndex = primitiveIndex;\n                if (object.geometry.primitiveName === \"triangles\") {\n\n                    // Triangle picked; this only happens when the\n                    // GameObject has a Geometry that has primitives of type \"triangle\"\n\n                    hit.primitive = \"triangle\";\n\n                    // Find the local-space ray to test for intersection with the triangle\n                    if (worldRayPicking) { // Convert world-space picking ray to local-space ray\n                        worldRayToLocalRay(object, worldRayOrigin, worldRayDir, localRayOrigin, localRayDir);\n                    } else  { // Convert canvas pos to local-space ray\n                        canvasPosToLocalRay(canvas, object, canvasPos, localRayOrigin, localRayDir);\n                    }\n\n                    // Get hit face vertex indices\n                    hit.indices = vec3.create();\n                    object.getTriangleIndices(primitiveIndex, hit.indices);\n\n                    // Get hit face vertex positions in local-space: a, b, c\n                    object.getTrianglePositionOnSurface(primitiveIndex, a, b, c);\n\n                    // Get hit position in local-space\n                    hit.position = vec3.create();\n                    SceneJS_math_rayPlaneIntersect(localRayOrigin, localRayDir, a, b, c, hit.position);\n\n                    // get barycentric coordinate of hit position\n                    hit.barycentric = vec3.create();\n                    object.cartesianToBarycentric(primitiveIndex, hit.position, hit.barycentric);\n\n                    // get hit normal\n                    hit.normal = vec3.create();\n                    object.normalFromBarycentric(primitiveIndex, hit.barycentric, hit.normal);\n\n                    // get hit position in world-space\n                    hit.worldPos = vec3.create();\n                    object.getPointInWorldSpace(hit.position, hit.worldPos);\n\n                    // get hit uv coordinates (for each uv layer)\n                    hit.uvs = []; // TODO: Optimize for GC\n                    object.uvFromBarycentric(primitiveIndex, hit.barycentric, hit.uvs);\n                    if (hit.uvs.length > 0) {\n                        hit.uv = hit.uvs[0]; // Backward compatibility\n                    }\n                }\n            }\n\n            pickBuf.unbind();\n\n            return hit;\n        };\n    })();\n\n    /** Renders either the draw or pick list.\n     *\n     * @param {*} params\n     * @param {Boolean} params.clear Set true to clear the color, depth and stencil buffers first\n     * @param {*} params.object Object to render chunks of, for pickTriangle or pickRegion modes\n     * @param {Number} [params.pass=0] Which rendering pass we're drawing for (eg. left vs right eye)\n     * @param {Boolean} params.pickObject Set true to render for object-picking, using per-object indexed color\n     * @param {Boolean} params.pickTriangle Set true to render for triangle-picking, using per-triangle indexed color\n     * @param {Boolean} params.pickRegion Set true to render for region-picking\n     * @param {Boolean} params.transparent Set false to only render opaque objects\n     * @private\n     */\n    SceneJS_Display.prototype._doDrawList = (function() {\n\n        var chunkCaches = {};\n        var screenTexelOffset = new Float32Array(2);\n\n        function resetChunkCache(renderMode) {\n            if (!chunkCaches[renderMode]) {\n                chunkCaches[renderMode] = new Int32Array(8);\n            }\n\n            var lastChunkId = chunkCaches[renderMode];\n            for (var i = 0, len = lastChunkId.length; i < len; ++i) {\n                lastChunkId[i] = -1;\n            }\n        }\n\n        function drawObject(frameCtx, object, renderMode) {\n            var gl = frameCtx.gl;\n            var chunks = object.chunkSets[renderMode];\n            var lastChunkId = chunkCaches[renderMode];\n            var chunk;\n\n            if (frameCtx.backfaces != object.backfaces) {\n                if (object.backfaces) {\n                    gl.disable(gl.CULL_FACE);\n                } else {\n                    gl.enable(gl.CULL_FACE);\n                }\n                frameCtx.backfaces = object.backfaces;\n            }\n\n            if (frameCtx.addBlend != object.addBlend) {\n                if(object.addBlend) {\n                    gl.blendFunc(gl.ONE, gl.ONE);\n                } else {\n                    gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n                }\n                frameCtx.addBlend = object.addBlend;\n            }\n\n            for (var j = 0, lenj = chunks.length; j < lenj; j++) {\n                chunk = chunks[j];\n                if (chunk) {\n                    if (chunk.unique || lastChunkId[j] !== chunk.numericId) {\n                        chunk.draw(renderMode, frameCtx);\n                        lastChunkId[j] = chunk.numericId;\n                    }\n                }\n            }\n        }\n\n        return function (params) {\n\n            var gl = this._canvas.gl;\n\n            var frameCtx = this._frameCtx;\n\n            frameCtx.gl = gl;\n            frameCtx.pass = params.pass || 0;\n            frameCtx.targetIndex = 0;\n            frameCtx.viewMatrix = this.viewMatrix;\n            frameCtx.cameraEye = this.camera.eye;\n            frameCtx.modelMat = null;\n            frameCtx.cameraMat = null;\n            frameCtx.projectionMatrix = this.projectionMatrix;\n            frameCtx.lights = this.lights;\n            frameCtx.clips = this.clips;\n            frameCtx.reflection = this.reflections.activeReflection;\n            frameCtx.lightmap = this.lightmaps.activeLightmap;\n            frameCtx.highlightColor = this.highlightColor;\n            frameCtx.desatParams = this.desatParams;\n            frameCtx.fogParams = this.fogParams;\n            frameCtx.fogColor = this.fogColor;\n            frameCtx.fogMode = this.fogMode;\n            frameCtx.fogEnabled = this.fogEnabled;\n            frameCtx.xrayColor = this.xrayColor;\n            frameCtx.scissorTestEnabled = false;\n            frameCtx.depthTest = SceneJS.DEPTH_TEST_FLAGS.ENABLED;\n            frameCtx.backfaces = true;\n            frameCtx.frontface = SceneJS.PROPERTY_FLAGS.CCW;\n            frameCtx.picking = !!params.pickObject || !!params.pickTriangle || !!params.pickRegion;\n            frameCtx.pickObject = !!params.pickObject;\n            frameCtx.pickTriangle = !!params.pickTriangle;\n            frameCtx.pickRegion = !!params.pickRegion;\n            frameCtx.pickIndex = 1;\n            frameCtx.textureUnit = 0;\n            frameCtx.lineWidth = 1;\n            frameCtx.transparent = 0;\n            frameCtx.ambientColor = this._ambientColor;\n            frameCtx.canvasResolution = frameCtx.canvasResolution || new Float32Array(2);\n            frameCtx.canvasResolution[0] = this._canvas.canvas.width;\n            frameCtx.canvasResolution[1] = this._canvas.canvas.height;\n            frameCtx.aspect = this._canvas.canvas.width / this._canvas.canvas.height;\n            frameCtx.texture = null;\n            frameCtx.hasNormalMap = false;\n            frameCtx.regionMapUVLayerIdx = -1;\n            frameCtx.drawElements = 0;\n            frameCtx.drawArrays = 0;\n            frameCtx.useProgram = 0;\n            frameCtx.bindTexture = 0;\n            frameCtx.bindArray = 0;\n            frameCtx.pickViewMatrix = params.pickViewMatrix;\n            frameCtx.pickProjMatrix = params.pickProjMatrix;\n            frameCtx.discardOpaque = false;\n            frameCtx.outputFormat = 0;\n            frameCtx.depthBuffer = null;\n            frameCtx.addBlend = false;\n\n            var VAO = gl.getExtension(\"OES_vertex_array_object\");\n            frameCtx.VAO = (VAO) ? VAO : null;\n\n            if (SceneJS.WEBGL_INFO.SUPPORTED_EXTENSIONS[\"OES_standard_derivatives\"]) { // For normal mapping w/o precomputed tangents\n                gl.getExtension(\"OES_standard_derivatives\");\n            }\n\n            gl.viewport(this.viewport[0], this.viewport[1], frameCtx.canvasResolution[0], frameCtx.canvasResolution[1]);\n\n            gl.enable(gl.DEPTH_TEST);\n            gl.frontFace(gl.CCW);\n            gl.disable(gl.CULL_FACE);\n            gl.depthMask(true);\n\n            if (this.transparent || frameCtx.picking) {\n                gl.clearColor(0, 0, 0, 0);\n            } else {\n                gl.clearColor(this._ambientColor[0], this._ambientColor[1], this._ambientColor[2], 1.0);\n            }\n\n            var i;\n            var len;\n            var object;\n\n            if (params.custom) {\n                var renderMode = params.custom.renderMode;\n                var objects = params.custom.objects;\n                resetChunkCache(renderMode);\n                for(i = 0; i < objects.length; i++) {\n                    object = objects[i];\n                    drawObject(frameCtx, object, renderMode);\n                }\n            } else if (params.pickObject) {\n                resetChunkCache(\"pick\");\n\n                var pickListLen = 0;\n\n                if (params.clear) {\n                    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);\n                }\n\n                for (i = 0, len = this._numOpaqueObjects; i < len; i++) {\n                    object = this._opaqueObjects[i];\n                    if (object.properties.getFlag(SceneJS.PROPERTY_FLAGS.PICKING)) {\n                        this._pickLookup[pickListLen++] = i;\n                        drawObject(frameCtx, object, \"pick\");\n                    }\n                }\n\n                for (i = 0, len = this._numTransparentObjects; i < len; i++) {\n                    object = this._transparentObjects[i];\n                    if (object.properties.getFlag(SceneJS.PROPERTY_FLAGS.PICKING)) {\n                        this._pickLookup[pickListLen++] = this._numOpaqueObjects + i;\n                        drawObject(frameCtx, object, \"pick\");\n                    }\n                }\n\n            } else if (params.pickTriangle && params.object) {\n                if (params.clear) {\n                    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);\n                }\n\n                resetChunkCache(\"pickTriangle\");\n                drawObject(frameCtx, params.object, \"pickTriangle\");\n            }  else if (params.pickRegion) {\n                resetChunkCache(\"pick\");\n\n                if (params.clear) {\n                    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);\n                }\n\n                if (params.object) {\n                    drawObject(frameCtx, params.object, \"pick\");\n                } else {\n                    var pickListLen = 0;\n                    if (params.pickRegion) {\n                        for (i = 0, len = this._numOpaqueObjects; i < len; i++) {\n                            object = this._opaqueObjects[i];\n                            if (object.properties.getFlag(SceneJS.PROPERTY_FLAGS.PICKING)) {\n                                this._pickLookup[pickListLen++] = i;\n                                drawObject(frameCtx, object, \"pick\");\n                            }\n                        }\n\n                        for (i = 0, len = this._numTransparentObjects; i < len; i++) {\n                            object = this._transparentObjects[i];\n                            if (object.properties.getFlag(SceneJS.PROPERTY_FLAGS.PICKING)) {\n                                this._pickLookup[pickListLen++] = this._numOpaqueObjects + i;\n                                drawObject(frameCtx, object, \"pick\");\n                            }\n                        }\n                    }\n                }\n\n            } else { // Render scene\n                resetChunkCache(\"draw\");\n                resetChunkCache(\"xray\");\n\n                var startTime = Date.now();\n                var opaqueOnly = params.opaqueOnly;\n\n                var postProcessing = (this.transparencyMode === SceneJS.TRANSPARENCY_FLAGS.WEIGHTED_OIT &&\n                    this._numTransparentObjects > 0) ||\n                    this.postProcessPipelineOpaque.length > 0 || \n                    this.postProcessPipelineFinal.length > 0;\n\n                \n                if (postProcessing) {\n                    this.mainFramebuffer.bind();\n                }\n\n                if (params.clear) {\n                    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);\n                }\n\n                for (i = 0, len = this._numOpaqueObjects; i < len; i++) { // Render opaque objects\n                    var object = this._opaqueObjects[i];\n\n                    if (object.properties.flags & SceneJS.PROPERTY_FLAGS.XRAY) {\n                        drawObject(frameCtx, object, \"xray\");\n                    } else {\n                        drawObject(frameCtx, object, \"draw\");\n                    }\n                }\n\n                if (postProcessing) {\n                    this.mainFramebuffer.unbind();\n                }\n\n                if (this.postProcessPipelineOpaque.length > 0) {\n                    gl.disable(gl.DEPTH_TEST);\n                    gl.frontFace(gl.CCW);\n                    gl.disable(gl.CULL_FACE);\n                }\n\n                for (var i = 0, len = this.postProcessPipelineOpaque.length; i < len; ++i) {\n                    var pp = this.postProcessPipelineOpaque[i];\n\n                    if (pp.framebuffer) {\n                        pp.framebuffer.bind();\n                    }\n\n                    pp.draw(frameCtx);\n\n                    if (pp.framebuffer) {\n                        pp.framebuffer.unbind();\n                    }\n                }\n\n                if (this.postProcessPipelineOpaque.length > 0) {\n                    gl.enable(gl.DEPTH_TEST);\n                    gl.frontFace(gl.CCW);\n                    gl.disable(gl.CULL_FACE);\n                    frameCtx.depthTest = SceneJS.DEPTH_TEST_FLAGS.ENABLED;\n                    frameCtx.backfaces = SceneJS.PROPERTY_FLAGS.BACKFACES;\n                    frameCtx.frontface = SceneJS.PROPERTY_FLAGS.CCW;\n                    frameCtx.addBlend = false;\n                }\n\n                if (this._numTransparentObjects > 0) {\n                    resetChunkCache(\"draw\");\n                    resetChunkCache(\"xray\");\n\n                    if (postProcessing && !(this.transparencyMode === SceneJS.TRANSPARENCY_FLAGS.WEIGHTED_OIT)) {\n                        this.mainFramebuffer.bind();\n                    }\n\n                    if (this.depthSort) {\n                        this._transparentObjects.sort(sortDepth);\n                    }\n\n                    frameCtx.discardOpaque = true;\n\n                    if (this.transparencyMode & SceneJS.TRANSPARENCY_FLAGS.ALPHA_BLEND) {\n                        var modeNoDepthMask = !!(this.transparencyMode & SceneJS.TRANSPARENCY_FLAGS.ALPHA_NO_DEPTH_MASK);\n\n                        gl.enable(gl.BLEND);\n\n                        if (this.transparencyMode === SceneJS.TRANSPARENCY_FLAGS.ADD_ALPHA) {\n                            gl.blendFunc(gl.ONE, gl.ONE);\n                        } else {\n                            gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n                        }\n\n                        var NO_DEPTH_MASK_FLAG = SceneJS.PROPERTY_FLAGS.NO_DEPTH_MASK;\n\n                        if (modeNoDepthMask) {\n                            gl.depthMask(false);\n                        }\n\n                        for (i = 0; i < this._numTransparentObjects; i++) {\n                            var object = this._transparentObjects[i];\n                            var perObjectNoDepthMask = !modeNoDepthMask && (object.properties.flags & NO_DEPTH_MASK_FLAG);\n                            if (perObjectNoDepthMask) {\n                                gl.depthMask(false);\n                            }\n\n                            if (object.properties.flags & SceneJS.PROPERTY_FLAGS.XRAY) {\n                                drawObject(frameCtx, object, \"xray\");\n                            } else {\n                                drawObject(frameCtx, object, \"draw\");\n                            }\n\n                            if (perObjectNoDepthMask) {\n                                gl.depthMask(true);\n                            }\n                        }\n\n                        gl.disable(gl.BLEND);\n                        gl.depthMask(true);\n                    } else if (this.transparencyMode === SceneJS.TRANSPARENCY_FLAGS.WEIGHTED_OIT) {\n                        resetChunkCache(\"depth\");\n\n                        screenTexelOffset[0] = 1 / frameCtx.canvasResolution[0]; \n                        screenTexelOffset[1] = 1 / frameCtx.canvasResolution[1]; \n\n                        this.oitDepthBuffer.bind();\n                        gl.clear(gl.DEPTH_BUFFER_BIT);\n                        gl.colorMask(false, false, false, false);\n                        for (i = 0; i < this._numTransparentObjects; i++) {\n                            drawObject(frameCtx, this._transparentObjects[i], \"depth\");\n                        }\n                        gl.colorMask(true, true, true, true);\n                        this.oitDepthBuffer.unbind();\n\n                        gl.clearColor(0, 0, 0, 1);\n                        gl.enable(gl.BLEND);\n                        gl.blendFuncSeparate(gl.ONE, gl.ONE, gl.ZERO, gl.ONE_MINUS_SRC_ALPHA)\n                        gl.depthMask(false);\n\n                        this.oitAccumulateFramebuffer.bind();\n                        gl.clear(gl.COLOR_BUFFER_BIT);\n                        \n                        frameCtx.outputFormat = 1;\n                        frameCtx.depthBuffer = this.oitDepthBuffer.getDepthTarget();\n                        \n                        for (i = 0; i < this._numTransparentObjects; i++) {\n                            var object = this._transparentObjects[i];\n\n                            if (object.properties.flags & SceneJS.PROPERTY_FLAGS.XRAY) {\n                                drawObject(frameCtx, object, \"xray\");\n                            } else {\n                                drawObject(frameCtx, object, \"draw\");\n                            }   \n                        }\n\n                        this.oitAccumulateFramebuffer.unbind();\n\n                        gl.disable(gl.DEPTH_TEST);\n                        gl.frontFace(gl.CCW);\n                        gl.disable(gl.CULL_FACE);\n                        this.mainFramebuffer.bind();\n                        gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n                        this.oitPostprocess.setUniform(\"uTexelOffset\", screenTexelOffset);\n                        this.oitPostprocess.draw(frameCtx);\n                        this.mainFramebuffer.unbind();\n\n                        gl.disable(gl.BLEND);\n                        gl.depthMask(true);   \n                    } else if (this.transparencyMode === SceneJS.TRANSPARENCY_FLAGS.ALPHA_TO_COVERAGE) {\n                        gl.enable(gl.SAMPLE_ALPHA_TO_COVERAGE);\n\n                        for (i = 0; i < this._numTransparentObjects; i++) {\n                            var object = this._transparentObjects[i];\n\n                            if (object.properties.flags & SceneJS.PROPERTY_FLAGS.XRAY) {\n                                drawObject(frameCtx, object, \"xray\");\n                            } else {\n                                drawObject(frameCtx, object, \"draw\");\n                            }   \n                        }\n\n                        gl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);\n                    }\n\n                    if (postProcessing && !(this.transparencyMode === SceneJS.TRANSPARENCY_FLAGS.WEIGHTED_OIT)) {\n                        this.mainFramebuffer.unbind();\n                    }\n                    \n                }\n\n                if (postProcessing) {\n                    gl.disable(gl.DEPTH_TEST);\n                    gl.frontFace(gl.CCW);\n                    gl.disable(gl.CULL_FACE);\n\n                    if (this.postProcessPipelineFinal.length > 0) {\n                        for (var i = 0, len = this.postProcessPipelineFinal.length; i < len; ++i) {\n                            var pp = this.postProcessPipelineFinal[i];\n\n                            if (pp.framebuffer) {\n                                pp.framebuffer.bind();\n                            }\n\n                            pp.draw(frameCtx);\n\n                            if (pp.framebuffer) {\n                                pp.framebuffer.unbind();\n                            }\n                        }   \n                    } else {\n                        this.blitPostprocess.draw(frameCtx);\n                    }\n                }\n\n                var endTime = Date.now();\n\n                this.stats.frame.drawElements = frameCtx.drawElements;\n                this.stats.frame.drawArrays = frameCtx.drawArrays;\n                this.stats.frame.useProgram = frameCtx.useProgram;\n                this.stats.frame.bindTexture = frameCtx.bindTexture;\n                this.stats.frame.bindArray = frameCtx.bindArray;\n                this.stats.frame.drawChunks = this._drawListLen;\n            }\n\n            if (frameCtx.VAO) {\n                frameCtx.VAO.bindVertexArrayOES(null);\n                for (i = 0; i < 10; i++) {\n                    gl.disableVertexAttribArray(i);\n                }\n            }\n        };\n    })();\n\n    SceneJS_Display.prototype.readPixels = function (entries, size, opaqueOnly) {\n\n        if (this._canvas.canvas.width == 0 || this._canvas.canvas.height == 0) {\n            // Canvas hidden\n            return;\n        }\n\n        if (!this._readPixelBuf) {\n            this._readPixelBuf = new SceneJS._webgl.Framebuffer({canvas: this._canvas});\n        }\n\n        this._readPixelBuf.bind();\n\n        this._readPixelBuf.clear();\n\n        this.prepareScene();\n        this.render({\n            force: true,\n            opaqueOnly: opaqueOnly\n        });\n\n        var entry;\n        var color;\n\n        for (var i = 0; i < size; i++) {\n\n            entry = entries[i] || (entries[i] = {});\n\n            color = this._readPixelBuf.read(entry.x, entry.y);\n\n            entry.r = color[0];\n            entry.g = color[1];\n            entry.b = color[2];\n            entry.a = color[3];\n        }\n\n        this._readPixelBuf.unbind();\n    };\n\n    SceneJS_Display.prototype.destroy = function () {\n        this._programFactory.destroy();\n    };\n})();\n\n;/**\n * @class Manages creation, sharing and recycle of {@link SceneJS_ProgramSource} instances\n * @private\n */\n(function () {\n    \"use strict\";\n\n    var DISPLAY_FLAGS = SceneJS.DISPLAY_FLAGS;\n    var TEXTURE_FLAGS = SceneJS.TEXTURE_FLAGS;\n    var CUBEMAP_FLAGS = SceneJS.CUBEMAP_FLAGS;\n    var PROPERTY_FLAGS = SceneJS.PROPERTY_FLAGS;\n    var COLOR_MOD_FLAGS = SceneJS.COLOR_MOD_FLAGS;\n\n    var FRAG_HIGHP_SUPPORTED = SceneJS.WEBGL_INFO.FS_MAX_FLOAT_PRECISION === \"highp\";\n    var TEXTURE_LOD_SUPPORTED = SceneJS.WEBGL_INFO.textureLODSupported;\n\n    window.SceneJS_ProgramSourceFactory = new (function () {\n\n            var cache = {}; // Source codes are shared across all scenes\n\n            var states; // Cache rendering state\n            var object;\n            var phongMaterial;\n            var metallicMaterial;\n            var gammaInputPhong;\n            var diffuseFresnel;\n            var specularFresnel;\n            var alphaFresnel;\n            var transparencyFresnel;\n            var reflectFresnel;\n            var emitFresnel;\n            var fragmentFresnel;\n            var fresnel;\n            var texturing;// True when rendering state contains textures\n            var phongReflectionMapping;\n            var phongLightMapping;\n            var pbrReflectionMapping;\n            var pbrLightMapping;\n            var normals;// True when rendering state contains normals\n            var solid;\n            var skybox;  // True when object should be treated as a skybox\n            var billboard;\n            var normalMapping;\n            var swizzledNormalMapping;\n            var autoTangents;\n            var clipping;\n            var morphing;\n            var regionMapping;\n            var regionInteraction;\n            var points;\n            var roundPoints;\n            var perspectivePoints;\n            var scaleRotationPoints;\n            var uvTranslatePoints;\n            var quantizedPositions;\n            var octNormals;\n            var quantizedUVs;\n            var fogEnabled;\n            var fogMode;\n            var colorModRange;\n            var colorMods;\n            var colorModifiers;\n            var colorModsScalarFresnel; // Need fresnel function when this is true\n            var colorModsColorFresnel; // Need fresnel function when this is true\n            var opacityModsScalarFresnel; // Need fresnel function when this is true;\n            var opacityModRange;\n            var opacityMods;\n            var opacityModifiers;\n            var alphaTest;\n            var stochasticAlpha;\n            var fragmentShaderHeader;\n            var fragmentShaderFooter;\n            var maxPointSizeStr = Math.floor(SceneJS.WEBGL_INFO.MAX_POINT_SIZE).toFixed(1);\n\n            var src = \"\"; // Accumulates source code as it's being built\n\n            this.setMaxPointSize = function (val) {\n                val = Math.min(val, SceneJS.WEBGL_INFO.MAX_POINT_SIZE);\n                maxPointSizeStr = Math.floor(val).toFixed(1);\n            };\n\n            /**\n             * Get sourcecode for a program to render the given states\n             */\n            this.getSource = function (hash, _states, _object) {\n\n                var source = cache[hash];\n                if (source) {\n                    source.useCount++;\n                    return source;\n                }\n\n                states = _states;\n                object = _object;\n\n                phongMaterial = states.material.workflow === SceneJS.Material.PHONG;\n                metallicMaterial = states.material.workflow === SceneJS.Material.METALLIC;\n                gammaInputPhong = _states.gammaInputPhong;\n                diffuseFresnel = states.fresnel.diffuse;\n                specularFresnel = states.fresnel.specular;\n                alphaFresnel = states.fresnel.alpha;\n                reflectFresnel = states.fresnel.reflect;\n                emitFresnel = states.fresnel.emit;\n                fragmentFresnel = states.fresnel.fragment;\n                transparencyFresnel = states.fresnel.transparency;\n                fresnel = diffuseFresnel || specularFresnel || alphaFresnel || transparencyFresnel || reflectFresnel || emitFresnel || fragmentFresnel;\n                texturing = hasTextures(states);\n                phongReflectionMapping = hasReflectionMap(states);\n                phongLightMapping = hasLightMap(states);\n                pbrReflectionMapping = hasPBRReflectionMap(states);\n                pbrLightMapping = hasPBRLightMap(states);\n                normals = hasNormals(states);\n                clipping = states.clips.clips.length > 0 && !!(states.properties.flags & PROPERTY_FLAGS.CLIPPING);\n                solid = clipping && !!(states.properties.flags & PROPERTY_FLAGS.SOLID);\n                skybox = !!(states.properties.flags & PROPERTY_FLAGS.SKYBOX);\n                billboard = !!(states.properties.flags & PROPERTY_FLAGS.BILLBOARD);\n                normalMapping = hasNormalMap(states);\n                swizzledNormalMapping = hasSwizzledNormalMap(states);\n                autoTangents = normalMapping && _states.autoTangents && SceneJS.WEBGL_INFO.standardDerivativesSupported;\n                morphing = !!states.morphGeometry.targets;\n                regionMapping = hasRegionMap();\n                regionInteraction = regionMapping && states.regionMap.mode !== \"info\";\n                points = states.geometry.primitiveName === \"points\";\n                perspectivePoints = !!(states.properties.flags & PROPERTY_FLAGS.PERSPECTIVE_POINTS);\n                scaleRotationPoints = !!(states.geometry.pointScaleRotationBuf);\n                uvTranslatePoints = !!(states.geometry.pointUVTranslateBuf);\n                roundPoints = !!(states.properties.flags & PROPERTY_FLAGS.ROUND_POINTS);\n                quantizedPositions = !!(states.geometry.compressedPositions || states.morphGeometry.compressedPositions);\n                octNormals = !!(states.geometry.compressedNormals || states.morphGeometry.compressedNormals);\n                quantizedUVs = !!(states.geometry.compressedUVs || states.morphGeometry.compressedUVs);\n                fogEnabled = states.fogEnabled;\n                fogMode = states.fogMode;\n                colorModRange = states.properties.colorModRange;\n                colorMods = states.properties.colorModifiers.length > 0;\n                colorModifiers = states.properties.colorModifiers;\n                colorModsScalarFresnel = needColorModsScalarFresnel();\n                colorModsColorFresnel = needColorModsColorFresnel();\n                opacityModsScalarFresnel = needOpacityModsScalarFresnel();\n                opacityModRange = states.properties.opacityModRange;\n                opacityMods = states.properties.opacityModifiers.length > 0;\n                opacityModifiers = states.properties.opacityModifiers;\n                alphaTest = (states.transparencyMode & SceneJS.TRANSPARENCY_FLAGS.TWO_PASS) && object.isPartiallyOpaque();\n                stochasticAlpha = !!(states.properties.flags & PROPERTY_FLAGS.STOCHASTIC_ALPHA);\n                fragmentShaderHeader = states.properties.fragmentShaderHeader || null;\n                fragmentShaderFooter = states.properties.fragmentShaderFooter || null;\n\n                source = {\n                    hash: hash,\n                    pickVertexSrc: vertexPicking(),\n                    pickFragmentSrc: fragmentPicking(),\n                    pickTriangleVertexSrc: vertexPicking(true),\n                    pickTriangleFragmentSrc: fragmentPicking(true),\n                    drawVertexSrc: vertexRendering(),\n                    drawFragmentSrc: fragmentRendering(),\n                    xrayVertexSrc: vertexXRay(),\n                    xrayFragmentSrc: fragmentXRay(),\n                    depthVertexSrc: vertexDepth(),\n                    depthFragmentSrc: fragmentDepth(),\n                    drawTextureVertexSrc: vertexDrawTexture(),\n                    drawTextureFragmentSrc: fragmentDrawTexture(),\n                    useCount: 0\n                };\n\n                cache[hash] = source;\n\n                return source;\n            };\n\n            function needColorModsScalarFresnel() {\n                var mods = states.properties.colorModifiers;\n                for (var i = 0, len = mods.length; i < len; i++) {\n                    if (mods[i].value.isScalarFresnel) {\n                        return true;\n                    }\n                }\n                return false;\n            }\n\n            function needColorModsColorFresnel() {\n                var mods = states.properties.colorModifiers;\n                for (var i = 0, len = mods.length; i < len; i++) {\n                    if (mods[i].value.isColorFresnel) {\n                        return true;\n                    }\n                }\n                return false;\n            }\n\n            function needOpacityModsScalarFresnel() {\n                var mods = states.properties.opacityModifiers;\n                for (var i = 0, len = mods.length; i < len; i++) {\n                    if (mods[i].value.isScalarFresnel) {\n                        return true;\n                    }\n                }\n                return false;\n            }\n\n\n            /**\n             * Releases program source code\n             */\n            this.putSource = function (hash) {\n                var source = cache[hash];\n                if (source) {\n                    if (--source.useCount == 0) {\n                        cache[source.hash] = null;\n                    }\n                }\n            };\n\n            function vertexPicking(triangle) {\n\n                begin();\n\n                add(\"attribute vec4 SCENEJS_aVertex;\");\n                if (triangle) {\n                    add(\"attribute vec4 SCENEJS_aTriColor;\");\n                    add(\"varying vec4 SCENEJS_vTriColor;\");\n                }\n                add(\"uniform mat4 SCENEJS_uMMatrix;\");\n                add(\"uniform mat4 SCENEJS_uVMatrix;\");\n                add(\"uniform mat4 SCENEJS_uPMatrix;\");\n\n                if (points) {\n                    add(\"uniform float SCENEJS_uPointSize;\");\n                    if (scaleRotationPoints) {\n                        add(\"attribute vec2 SCENEJS_aPointScaleRotation;\");\n                    }\n                }\n\n                if (quantizedPositions) {\n                    add(\"uniform mat4 SCENEJS_uDecodePositionMatrix;\");\n                }\n\n                add(\"varying vec4 SCENEJS_vWorldVertex;\");\n\n                if (regionMapping) {\n                    add(\"attribute vec2 SCENEJS_aRegionMapUV;\");\n                    add(\"varying vec2 SCENEJS_vRegionMapUV;\");\n                }\n\n                if (morphing) {\n                    add(\"uniform float SCENEJS_uMorphFactor;\");       // LERP factor for morph\n                    if (states.morphGeometry.targets[0].vertexBuf) {      // target2 has these arrays also\n                        add(\"attribute vec4 SCENEJS_aMorphVertex;\");\n                    }\n\n                    if (quantizedPositions) {\n                        add(\"uniform mat4 SCENEJS_uDecodeMorphPosMatrix;\");\n                    }\n                }\n\n                add(\"void main(void) {\");\n\n                if (quantizedPositions) {\n                    add(\"    vec4 modelVertex = SCENEJS_uDecodePositionMatrix * SCENEJS_aVertex;\");\n                } else {\n                    add(\"    vec4 modelVertex = SCENEJS_aVertex;\");\n                }\n\n                if (morphing) {\n                    if (states.morphGeometry.targets[0].vertexBuf) {\n                        if (quantizedPositions) {\n                            add(\"  modelVertex = mix(modelVertex, SCENEJS_uDecodeMorphPosMatrix * SCENEJS_aMorphVertex, SCENEJS_uMorphFactor); \");\n                        } else {\n                            add(\"  modelVertex = mix(modelVertex, SCENEJS_aMorphVertex, SCENEJS_uMorphFactor); \");\n                        }\n                    }\n                }\n                add(\"  SCENEJS_vWorldVertex = SCENEJS_uMMatrix * modelVertex; \");\n\n                add(\"mat4 vPosMatrix = SCENEJS_uVMatrix;\");\n\n                if (skybox) {\n                    add(\"vPosMatrix[3].xyz = vec3(0.0);\");\n                }\n\n                add(\"  vec4 viewVertex =  vPosMatrix * SCENEJS_vWorldVertex;\");\n                add(\"  gl_Position =  SCENEJS_uPMatrix * viewVertex;\");\n\n                if (regionMapping) {\n                    add(\"SCENEJS_vRegionMapUV = SCENEJS_aRegionMapUV;\");\n                }\n\n                if (triangle) {\n                    add(\"SCENEJS_vTriColor = SCENEJS_aTriColor;\");\n                }\n\n                if (points) {\n                    add(\"gl_PointSize = SCENEJS_uPointSize;\");\n                    if (perspectivePoints) {\n                        add(\"gl_PointSize *= 20.0 / length(viewVertex.xyz);\");\n                    }\n                    if (scaleRotationPoints) {\n                        add(\"gl_PointSize *= SCENEJS_aPointScaleRotation.x;\");\n                    }\n                    add(\"gl_PointSize = min(gl_PointSize, \" + maxPointSizeStr + \");\");\n                }\n\n                add(\"}\");\n\n                return end();\n            }\n\n            function fragmentPicking(triangle) {\n\n                begin();\n\n                add(\"precision \" + SceneJS.WEBGL_INFO.FS_MAX_FLOAT_PRECISION + \" float;\");\n\n                add(\"varying vec4 SCENEJS_vWorldVertex;\");\n\n                if (triangle) {\n                    add(\"varying vec4  SCENEJS_vTriColor;\");\n                } else {\n                    add(\"uniform float  SCENEJS_uPickMode;\");                   // Z-pick mode when true else colour-pick\n                    add(\"uniform vec4  SCENEJS_uPickColor;\");                   // Used in colour-pick mode\n                }\n\n                if (clipping) {\n                    for (var i = 0; i < states.clips.clips.length; i++) {\n                        add(\"uniform vec4  SCENEJS_uClipNormalAndDist\" + i + \";\");\n                        if (states.clips.clips[i].fade) {\n                            add(\"uniform float SCENEJS_uClipFadeDistance\" + i + \";\");\n                        }\n                    }\n                }\n\n                if (regionMapping) {\n                    add(\"varying vec2 SCENEJS_vRegionMapUV;\");\n                    add(\"uniform sampler2D SCENEJS_uRegionMapSampler;\");\n                }\n\n                add(\"void main(void) {\");\n\n                if (clipping) {\n\n                    if (states.clips.clipDiscard) {\n                        add(\"float distOff = 0.0;\");\n                    }\n                    if (states.clips.clipFade) {\n                        add(\"float distAlpha = 0.0;\");\n                    }\n\n                    for (var i = 0; i < states.clips.clips.length; i++) {\n                        if (states.clips.clips[i].fade) {\n                            //max obsrved normalized distance from alpha plane (normalized to max fade distance)\n                            add(\"distAlpha = max(distAlpha, (dot(SCENEJS_vWorldVertex.xyz, SCENEJS_uClipNormalAndDist\" + i + \".xyz) + SCENEJS_uClipNormalAndDist\" + i + \".w) / SCENEJS_uClipFadeDistance\" + i + \");\");\n                        } else {\n                            //max observed distance from clipping plane\n                            add(\"distOff = max(distOff, dot(SCENEJS_vWorldVertex.xyz, SCENEJS_uClipNormalAndDist\" + i + \".xyz) + SCENEJS_uClipNormalAndDist\" + i + \".w);\");\n                        }\n                    }\n\n                    if (states.clips.clipDiscard) {\n                        // discard  fragment if beyond any clip\n                        add(\"if (distOff > 0.0) { discard; }\");\n                    }\n\n                    if (states.clips.clipFade) {\n                        // set transparency proportionally to distance\n                        // TODO: Requires drawn object to be transparent flag.\n                        add(\"if (distAlpha > 1.0) { discard; }\")\n                    }\n\n                }\n                if (triangle) {\n                    add(\"gl_FragColor = SCENEJS_vTriColor;  \");\n                } else {\n                    add(\"    if  (SCENEJS_uPickMode == 0.0) {\");  // Pick object\n                    add(\"          gl_FragColor = SCENEJS_uPickColor;  \");\n                    add(\"    } else {\"); // Pick region\n                    if (regionMapping) {\n                        add(\"          gl_FragColor = texture2D(SCENEJS_uRegionMapSampler, vec2(SCENEJS_vRegionMapUV.s, SCENEJS_vRegionMapUV.t));\");\n                    } else {\n                        add(\"          gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\");\n                    }\n                    add(\"    }\");\n                }\n                add(\"}\");\n\n                return end();\n            }\n\n            function vertexDrawTexture() {\n\n                begin();\n\n                add(\"attribute vec4 SCENEJS_aVertex;\");\n                add(\"uniform mat4 SCENEJS_uMMatrix;\");\n                add(\"uniform mat4 SCENEJS_uVMatrix;\");\n                add(\"uniform mat4 SCENEJS_uPMatrix;\");\n\n                if (quantizedPositions) {\n                    add(\"uniform mat4 SCENEJS_uDecodePositionMatrix;\");\n                }\n\n                var drawUVIndex = 0;\n                var drawUVBuf = null;\n                var drawLayer = null;\n                if (texturing) {\n                    drawLayer = states.texture.layers[states.texture.drawLayerIndex];\n                    if (drawLayer) {\n                        drawUVIndex = drawLayer.uvLayerIdx || 0;\n                    }\n                    if (states.geometry.uvBufs) {\n                        drawUVBuf = states.geometry.uvBufs[drawUVIndex];\n                    }\n                    if (drawUVBuf) {\n                        add(\"varying vec2 SCENEJS_vUVCoord\" + drawUVIndex + \";\");\n                        add(\"attribute vec2 SCENEJS_aUVCoord\" + drawUVIndex + \";\");\n                        if (quantizedUVs) {\n                            add(\"uniform mat3 SCENEJS_uDecodeUVMatrix\" + drawUVIndex + \";\")\n                        }\n                    }\n                }\n\n                add(\"varying vec4 SCENEJS_vWorldVertex;\");\n\n                if (morphing) {\n                    add(\"uniform float SCENEJS_uMorphFactor;\");       // LERP factor for morph\n                    if (states.morphGeometry.targets[0].vertexBuf) {      // target2 has these arrays also\n                        add(\"attribute vec4 SCENEJS_aMorphVertex;\");\n                    }\n\n                    if (quantizedPositions) {\n                        add(\"uniform mat4 SCENEJS_uDecodeMorphPosMatrix;\");\n                    }\n                }\n\n                add(\"void main(void) {\");\n\n                if (quantizedPositions) {\n                    add(\"    vec4 modelVertex = SCENEJS_uDecodePositionMatrix * SCENEJS_aVertex;\");\n                } else {\n                    add(\"    vec4 modelVertex = SCENEJS_aVertex;\");\n                }\n\n                if (morphing) {\n                    if (states.morphGeometry.targets[0].vertexBuf) {\n                        if (quantizedPositions) {\n                            add(\"  modelVertex = mix(modelVertex, SCENEJS_uDecodeMorphPosMatrix * SCENEJS_aMorphVertex, SCENEJS_uMorphFactor); \");\n                        } else {\n                            add(\"  modelVertex = mix(modelVertex, SCENEJS_aMorphVertex, SCENEJS_uMorphFactor); \");\n                        }\n                    }\n                }\n                add(\"  SCENEJS_vWorldVertex = SCENEJS_uMMatrix * modelVertex; \");\n\n                add(\"mat4 vPosMatrix = SCENEJS_uVMatrix;\");\n\n                add(\"  vec4 viewVertex =  vPosMatrix * SCENEJS_vWorldVertex;\");\n                add(\"  gl_Position =  SCENEJS_uPMatrix * viewVertex;\");\n\n                if (texturing && drawUVBuf) {\n                    if (quantizedUVs) {\n                        add(\"SCENEJS_vUVCoord\" + drawUVIndex + \" = (SCENEJS_uDecodeUVMatrix\" + drawUVIndex + \" * vec3(SCENEJS_aUVCoord\" + drawUVIndex + \", 1.0)).xy;\");\n                    } else {\n                        add(\"SCENEJS_vUVCoord\" + drawUVIndex + \" = SCENEJS_aUVCoord\" + drawUVIndex + \";\");\n                    }\n                }\n\n                add(\"}\");\n\n                return end();\n            }\n\n            function fragmentDrawTexture() {\n\n                begin();\n\n                add(\"precision \" + SceneJS.WEBGL_INFO.FS_MAX_FLOAT_PRECISION + \" float;\");\n                var drawUVIndex = 0;\n                var drawUVBuf = null;\n                var drawLayer = null;\n                if (texturing) {\n                    drawLayer = states.texture.layers[states.texture.drawLayerIndex];\n                    if (drawLayer) {\n                        drawUVIndex = drawLayer.uvLayerIdx || 0;\n                    }\n                    if (states.geometry.uvBufs) {\n                        drawUVBuf = states.geometry.uvBufs[drawUVIndex];\n                    }\n                    if (drawUVBuf) {\n                        add(\"uniform sampler2D SCENEJS_uDrawSampler;\");\n                        add(\"varying vec2 SCENEJS_vUVCoord\" + drawUVIndex + \";\");\n                    }\n                }\n\n                add(\"void main(void) {\");\n                add(\"vec4 color = vec4(0.0);\");\n                if (texturing && drawUVBuf && drawLayer) {\n                    add(\"vec2 textureCoord;\");\n                    add(\"textureCoord = SCENEJS_vUVCoord\" + drawUVIndex + \";\");\n                    if (drawLayer.compressed) {\n                        add(\"   textureCoord.y = 1.0 - textureCoord.y;\");\n                    }\n                    add(\"if(textureCoord.x != -1.0) {\");\n                    add(\"   color = texture2D(SCENEJS_uDrawSampler, textureCoord);\");\n                    add(\"}\");\n                }\n                add(\"gl_FragColor = color;\");\n                add(\"}\");\n\n                return end();\n            }\n\n            function hasRegionMap() {\n                if (!states.regionMap.empty) {\n                    return hasUVs();\n                }\n                return false;\n            }\n\n            function hasTextures() {\n                if (states.texture.layers && states.texture.layers.length > 0) {\n                    return hasUVs();\n                }\n                return false;\n            }\n\n            function hasUVs() {\n                if (states.geometry.primitiveName === \"points\") {\n                    return true;\n                }\n                if (states.geometry.uvBufs) { // TODO only if there is at least one defined member in this array\n                    return true;\n                }\n                if (states.morphGeometry.targets && (states.morphGeometry.targets[0].uvBuf || states.morphGeometry.targets[0].uvBuf2)) {\n                    return true;\n                }\n                return false;\n            }\n\n            function hasReflectionMap(states) {\n                if (!states.properties.getFlag(PROPERTY_FLAGS.REFLECTIVE)) {\n                    return false;\n                }\n                if (!states.geometry.normalBuf) {\n                    return false;\n                }\n                if (!states.cubemap.layers) {\n                    return false;\n                }\n                for (var i = 0, len = states.cubemap.layers.length; i < len; i++) {\n                    if (states.cubemap.layers[i].applyTo === CUBEMAP_FLAGS.reflect) {\n                        return true;\n                    }\n                }\n                return false;\n            }\n\n            function hasLightMap(states) {\n                if (!states.geometry.normalBuf) {\n                    return false;\n                }\n                if (!states.cubemap.layers) {\n                    return false;\n                }\n                for (var i = 0, len = states.cubemap.layers.length; i < len; i++) {\n                    if (states.cubemap.layers[i].applyTo === CUBEMAP_FLAGS.light) {\n                        return true;\n                    }\n                }\n                return false;\n            }\n\n            function hasPBRReflectionMap(states) {\n                if (states.material.workflow !== SceneJS.Material.METALLIC) {\n                    return false;\n                }\n                if (!states.properties.getFlag(PROPERTY_FLAGS.REFLECTIVE)) {\n                    return false;\n                }\n                if (!states.geometry.normalBuf) {\n                    return false;\n                }\n                if (states.reflections.activeReflection) {\n                    return true;\n                }\n                return false;\n            }\n\n            function hasPBRLightMap(states) {\n                if (states.material.workflow !== SceneJS.Material.METALLIC) {\n                    return false;\n                }\n                if (!states.geometry.normalBuf) {\n                    return false;\n                }\n                if (states.lightmaps.activeLightmap) {\n                    return true;\n                }\n                return false;\n            }\n\n            function hasNormals(states) {\n                if (states.geometry.normalBuf) {\n                    return true;\n                }\n                if (states.morphGeometry.targets && states.morphGeometry.targets[0].normalBuf) {\n                    return true;\n                }\n                return false;\n            }\n\n            function hasNormalMap(states) {\n                if (states.texture) {\n                    var layers = states.texture.layers;\n                    if (!layers) {\n                        return false;\n                    }\n                    for (var i = 0, len = layers.length; i < len; i++) {\n                        if (layers[i].flags & TEXTURE_FLAGS.normals) {\n                            return true;\n                        }\n                    }\n                }\n                return false;\n            }\n\n            function hasSwizzledNormalMap(states) {\n                if (states.texture) {\n                    var layers = states.texture.layers;\n                    if (!layers) {\n                        return false;\n                    }\n                    for (var i = 0, len = layers.length; i < len; i++) {\n                        if (layers[i].flags & TEXTURE_FLAGS.swizzledNormals) {\n                            return true;\n                        }\n                    }\n                }\n                return false;\n            }\n\n            function vertexRendering() {\n\n                var i;\n                var uvBufs;\n\n                begin();\n\n                add(\"uniform mat4 SCENEJS_uMMatrix;\");             // Model matrix\n\n                if (FRAG_HIGHP_SUPPORTED) {\n                    add(\"uniform mat4 SCENEJS_uVMatrix;\");             // View matrix\n                } else {\n                    add(\"uniform mediump mat4 SCENEJS_uVMatrix;\");             // View matrix\n                }\n\n                add(\"uniform mat4 SCENEJS_uPMatrix;\");             // Projection matrix\n\n                add(\"attribute vec4 SCENEJS_aVertex;\");            // Model coordinates\n\n                if (FRAG_HIGHP_SUPPORTED) {\n                    add(\"uniform vec3 SCENEJS_uWorldEye;\");            // World-space eye position\n                } else {\n                    add(\"uniform mediump vec3 SCENEJS_uWorldEye;\");\n                }\n\n                add(\"varying vec3 SCENEJS_vViewEyeVec;\");          // View-space vector from origin to eye\n\n                if (points) {\n                    add(\"uniform float SCENEJS_uPointSize;\");\n                    if (scaleRotationPoints) {\n                        add(\"attribute vec2 SCENEJS_aPointScaleRotation;\");\n                        add(\"varying float SCENEJS_vPointRotation;\");\n                    }\n                    if (uvTranslatePoints) {\n                        add(\"attribute vec2 SCENEJS_aPointUVTranslate;\");\n                        // add(\"varying vec2 SCENEJS_vPointUVScale;\");\n                        add(\"varying vec2 SCENEJS_vPointUVTranslate;\");\n                    }\n                }\n\n                if (quantizedPositions) {\n                    add(\"uniform mat4 SCENEJS_uDecodePositionMatrix;\");\n                }\n\n                if (normals) {\n                    add(\"attribute vec3 SCENEJS_aNormal;\");        // Normal vectors\n                    add(\"uniform   mat4 SCENEJS_uMNMatrix;\");      // Model normal matrix\n\n                    add(\"varying   vec3 SCENEJS_vViewNormal;\");    // Output view-space vertex normal\n\n                    if (phongReflectionMapping || phongLightMapping || pbrReflectionMapping || pbrLightMapping) {\n                        add(\"varying   vec3 SCENEJS_vWorldNormal;\");    // Output view-space vertex normal\n                    }\n\n                    if (normalMapping && !autoTangents) {\n                        add(\"attribute vec3 SCENEJS_aTangent;\"); // Pass through to frag\n                        add(\"varying   vec3 SCENEJS_vTangent;\");\n                    }\n                }\n\n                if (texturing) {\n\n                    uvBufs = states.geometry.uvBufs;\n\n                    if (uvBufs) {\n                        for (var i = 0, len = uvBufs.length; i < len; i++) {\n                            if (uvBufs[i]) {\n                                add(\"attribute vec2 SCENEJS_aUVCoord\" + i + \";\");\n                                if (quantizedUVs) {\n                                    add(\"uniform mat3 SCENEJS_uDecodeUVMatrix\" + i + \";\")\n                                }\n                            }\n                        }\n                    }\n                }\n\n                if (states.geometry.colorBuf) {\n                    add(\"attribute vec4 SCENEJS_aVertexColor;\");\n                    add(\"varying vec4 SCENEJS_vColor;\");               // Varying for fragment texturing\n                }\n\n                if (clipping || normals || colorModRange || opacityModRange) {\n                    add(\"varying vec4 SCENEJS_vWorldVertex;\");         // Varying for fragment clip or world pos hook\n                }\n\n                if (stochasticAlpha) {\n                    add(\"varying vec4 SceneJS_vModelVertex;\");\n                }\n\n                add(\"varying vec4 SCENEJS_vViewVertex;\");              // Varying for fragment view clip hook\n\n                if (texturing) {                                            // Varyings for fragment texturing\n\n                    uvBufs = states.geometry.uvBufs;\n\n                    if (uvBufs) {\n                        for (i = 0, len = uvBufs.length; i < len; i++) {\n                            if (uvBufs[i]) {\n                                add(\"varying vec2 SCENEJS_vUVCoord\" + i + \";\");\n                            }\n                        }\n                    }\n                }\n\n                if (regionInteraction) {\n                    add(\"attribute vec2 SCENEJS_aRegionMapUV;\");\n                    add(\"varying vec2 SCENEJS_vRegionMapUV;\");\n                }\n\n                if (morphing) {\n                    add(\"uniform float SCENEJS_uMorphFactor;\");       // LERP factor for morph\n                    if (states.morphGeometry.targets[0].vertexBuf) {      // target2 has these arrays also\n                        add(\"attribute vec4 SCENEJS_aMorphVertex;\");\n                    }\n                    if (normals) {\n                        if (states.morphGeometry.targets[0].normalBuf) {\n                            add(\"attribute vec3 SCENEJS_aMorphNormal;\");\n                        }\n                    }\n                    if (normalMapping && !autoTangents) {\n                        //if (states.morphGeometry.targets[0].normalBuf) {\n                        add(\"attribute vec3 SCENEJS_aMorphTangent;\");\n                        // }\n                    }\n\n                    if (quantizedPositions) {\n                        add(\"uniform mat4 SCENEJS_uDecodeMorphPosMatrix;\");\n                    }\n                }\n\n                if (billboard) {\n\n                    // Billboarding function which modifies the rotation\n                    // elements of the given matrix\n\n                    add(\"void billboard(inout mat4 mat) {\");\n                    add(\"   mat[0].xyz = vec3(1.0, 0.0, 0.0);\");\n                    add(\"   mat[1].xyz = vec3(0.0, 1.0, 0.0);\");\n                    add(\"   mat[2].xyz = vec3(0.0, 0.0, 1.0);\");\n                    add(\"}\");\n                }\n\n                if (octNormals) {\n                    add(\"vec3 octDecode(vec2 oct) {\");\n                    add(\"    vec3 v = vec3(oct.xy, 1.0 - abs(oct.x) - abs(oct.y));\");\n                    add(\"    if (v.z < 0.0) {\");\n                    add(\"        v.xy = (1.0 - abs(v.yx)) * vec2(v.x >= 0.0 ? 1.0 : -1.0, v.y >= 0.0 ? 1.0 : -1.0);\");\n                    add(\"    }\");\n                    add(\"    return normalize(v);\");\n                    add(\"}\");\n                }\n\n                add(\"void main(void) {\");\n\n                if (normalMapping && !autoTangents) {\n                    add(\"vec3 modelTangent = SCENEJS_aTangent;\");\n                }\n\n\n                if (quantizedPositions) {\n                    add(\"  vec4 modelVertex = SCENEJS_uDecodePositionMatrix * SCENEJS_aVertex;\");\n                } else {\n                    add(\"  vec4 modelVertex = SCENEJS_aVertex; \");\n                }\n\n                if (octNormals) {\n                    add(\"  vec4 modelNormal = vec4(octDecode(SCENEJS_aNormal.xy), 0.0); \");\n                } else if (normals) {\n                    add(\"  vec4 modelNormal = vec4(SCENEJS_aNormal, 0.0); \");\n                }\n\n                // Morphing - morph targets are in same model space as the geometry\n                if (morphing) {\n                    if (states.morphGeometry.targets[0].vertexBuf) {\n                        if (quantizedPositions) {\n                            add(\"  modelVertex = mix(modelVertex, SCENEJS_uDecodeMorphPosMatrix * SCENEJS_aMorphVertex, SCENEJS_uMorphFactor); \");\n                        } else {\n                            add(\"  modelVertex = mix(modelVertex, SCENEJS_aMorphVertex, SCENEJS_uMorphFactor); \");\n                        }\n                    }\n                    if (normals) {\n                        if (states.morphGeometry.targets[0].normalBuf) {\n                            if (octNormals) {\n                                add(\"  modelNormal = vec4( mix(modelNormal.xyz, octDecode(SCENEJS_aMorphNormal.xy), SCENEJS_uMorphFactor), 0.0); \");\n                            } else {\n                                add(\"  modelNormal = vec4( mix(modelNormal.xyz, SCENEJS_aMorphNormal, SCENEJS_uMorphFactor), 0.0); \");\n                            }\n                        }\n                    }\n                    if (normalMapping && !autoTangents) {\n                        add(\"  modelTangent = mix(modelTangent, SCENEJS_aMorphTangent, SCENEJS_uMorphFactor); \");\n                    }\n                }\n\n                if (stochasticAlpha) {\n                    add(\"SceneJS_vModelVertex = modelVertex;;\");\n                }\n\n                add(\"mat4 modelMatrix = SCENEJS_uMMatrix;\");\n                add(\"mat4 viewMatrix = SCENEJS_uVMatrix;\");\n\n                if (normals) {\n                    add(\"mat4 modelNormalMatrix = SCENEJS_uMNMatrix;\");\n                }\n\n                add(\"vec4 worldVertex;\");\n                add(\"vec4 viewVertex;\");\n\n                if (skybox) {\n                    add(\"viewMatrix[3].xyz = vec3(0.0);\");\n                }\n\n                if (billboard) {\n\n                    // Since billboard effect is not preserved\n                    // in the product of two billboarded matrices,\n                    // we need to get the product of the model and\n                    // view matrices and billboard that\n\n                    add(\"   mat4 modelViewMatrix =  viewMatrix * modelMatrix;\");\n\n                    add(\"   billboard(modelMatrix);\");\n                    add(\"   billboard(viewMatrix);\");\n                    add(\"   billboard(modelViewMatrix);\");\n\n                    if (normals) {\n                        add(\"   billboard(modelNormalMatrix);\");\n                    }\n\n                    add(\"   worldVertex = modelMatrix * modelVertex;\");\n                    add(\"   viewVertex = modelViewMatrix * modelVertex;\");\n\n                } else {\n\n                    add(\"  worldVertex = modelMatrix * modelVertex;\");\n                    add(\"  viewVertex  = viewMatrix * worldVertex; \");\n                }\n\n                if (normals) {\n                    add(\"  vec3 worldNormal = (modelNormalMatrix * modelNormal).xyz; \");\n                    add(\"  SCENEJS_vViewNormal = (viewMatrix * vec4(worldNormal, 0.0)).xyz;\");\n                    if (phongReflectionMapping || phongLightMapping || pbrReflectionMapping || pbrLightMapping) {\n                        add(\"SCENEJS_vWorldNormal = worldNormal;\");\n                    }\n                }\n\n                if (clipping || normals || colorModRange || opacityModRange) {\n                    add(\"  SCENEJS_vWorldVertex = worldVertex;\");\n                }\n\n                add(\"  SCENEJS_vViewVertex = viewVertex;\");\n\n                add(\"  gl_Position = SCENEJS_uPMatrix * viewVertex;\");\n\n                if (normalMapping && !autoTangents) {\n                    add(\"SCENEJS_vTangent = modelTangent;\");\n                }\n\n                add(\"SCENEJS_vViewEyeVec = ((viewMatrix * vec4(SCENEJS_uWorldEye, 1.0)).xyz  - viewVertex.xyz);\");\n\n                if (texturing) {\n\n                    uvBufs = states.geometry.uvBufs;\n\n                    if (uvBufs) {\n                        for (i = 0, len = uvBufs.length; i < len; i++) {\n                            if (uvBufs[i]) {\n                                if (quantizedUVs) {\n                                    add(\"SCENEJS_vUVCoord\" + i + \" = (SCENEJS_uDecodeUVMatrix\" + i + \" * vec3(SCENEJS_aUVCoord\" + i + \", 1.0)).xy;\");\n                                } else {\n                                    add(\"SCENEJS_vUVCoord\" + i + \" = SCENEJS_aUVCoord\" + i + \";\");\n                                }\n                            }\n                        }\n                    }\n                }\n\n                if (states.geometry.colorBuf) {\n                    add(\"SCENEJS_vColor = SCENEJS_aVertexColor;\");\n                }\n\n                if (regionInteraction) {\n                    add(\"SCENEJS_vRegionMapUV = SCENEJS_aRegionMapUV;\");\n                }\n\n                if (points) {\n                    add(\"gl_PointSize = SCENEJS_uPointSize;\");\n                    if (perspectivePoints) {\n                        add(\"gl_PointSize *= 20.0 / length(viewVertex.xyz);\");\n                    }\n                    if (scaleRotationPoints) {\n                        add(\"SCENEJS_vPointRotation = SCENEJS_aPointScaleRotation.y;\");\n                        add(\"gl_PointSize *= SCENEJS_aPointScaleRotation.x;\");\n                    }\n                    if (uvTranslatePoints) {\n                        add(\"SCENEJS_vPointUVTranslate = SCENEJS_aPointUVTranslate;\");\n                    }\n                    add(\"gl_PointSize = min(gl_PointSize, \" + maxPointSizeStr + \");\");\n                }\n\n                add(\"}\");\n\n                return end();\n            }\n\n\n            /*-----------------------------------------------------------------------------------------------------------------\n             * Rendering Fragment shader\n             *---------------------------------------------------------------------------------------------------------------*/\n\n            function fragmentRendering() {\n\n                var diffuseFresnel = states.fresnel.diffuse;\n                var specularFresnel = states.fresnel.specular;\n                var alphaFresnel = states.fresnel.alpha;\n                var transparencyFresnel = states.fresnel.transparency;\n                var reflectFresnel = states.fresnel.reflect;\n                var emitFresnel = states.fresnel.emit;\n                var fragmentFresnel = states.fresnel.fragment;\n                var gammaOutput = metallicMaterial;\n\n                begin();\n\n                if ((normalMapping && autoTangents) || stochasticAlpha) {\n                    add(\"#extension GL_OES_standard_derivatives : enable\");\n                }\n\n                if (TEXTURE_LOD_SUPPORTED) {\n                    add(\"#extension GL_EXT_shader_texture_lod : enable\");\n                }\n\n                if (fragmentShaderHeader) {\n                    add(fragmentShaderHeader);\n                }\n                add(\"precision \" + SceneJS.WEBGL_INFO.FS_MAX_FLOAT_PRECISION + \" float;\");\n\n                add(\"uniform sampler2D SCENEJS_uDepthBuffer;\");\n                add(\"uniform vec2 SCENEJS_uCanvasRes;\");\n\n                //--------------------------------------------------------------------------------\n                // GAMMA INPUT CORRECTION\n                //--------------------------------------------------------------------------------\n\n                if (metallicMaterial || gammaInputPhong) {\n                    add(\"vec4 sRGBToLinear( in vec4 value ) {\");\n                    add(\"  return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\");\n                    add(\"}\");\n                }\n\n                if (alphaTest) {\n                    add(\"uniform bool SCENEJS_uDiscardOpaque;\")\n                }\n\n                if (stochasticAlpha) {\n                    add(\"float hash(vec2 v) {\");\n                    add(\"    return fract(1.0e4 * sin(17.0 * v.x + 0.1 * v.y) * (0.1 + abs(sin(13.0 * v.y + v.x))));\");\n                    add(\"}\");\n\n                    add(\"float hash3D(vec3 v) {\");\n                    add(\"    return hash(vec2(hash(v.xy), v.z));\");\n                    add(\"}\");\n                }\n\n                if (metallicMaterial) {\n\n                    //--------------------------------------------------------------------------------------------------------------\n                    // PBR Shading functions\n                    //--------------------------------------------------------------------------------------------------------------\n\n                    add(\"#define PI 3.14159265359\");\n                    add(\"#define RECIPROCAL_PI 0.31830988618\");\n                    add(\"#define RECIPROCAL_PI2 0.15915494\");\n                    add(\"#define EPSILON 1e-6\");\n\n                    add(\"#define saturate(a) clamp( a, 0.0, 1.0 )\");\n\n                    add(\"vec3 inverseTransformDirection(in vec3 dir, in mat4 matrix) {\");\n                    add(\"   return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\");\n                    add(\"}\");\n\n                    add(\"struct IncidentLight {\");\n                    add(\"   vec3 color;\");\n                    add(\"   vec3 direction;\");\n                    add(\"};\");\n\n                    add(\"struct ReflectedLight {\");\n                    add(\"   vec3 diffuse;\");\n                    add(\"   vec3 specular;\");\n                    add(\"};\");\n\n                    add(\"struct Geometry {\");\n                    add(\"   vec3 position;\");\n                    add(\"   vec3 viewNormal;\");\n                    add(\"   vec3 worldNormal;\");\n                    add(\"   vec3 viewEyeDir;\");\n                    add(\"};\");\n\n                    add(\"struct Material {\");\n                    add(\"   vec3    diffuseColor;\");\n                    add(\"   float   specularRoughness;\");\n                    add(\"   vec3    specularColor;\");\n                    add(\"   float   shine;\"); // Only used for Phong\n                    add(\"};\");\n\n                    // Metallic PBR BRDF\n\n                    if (pbrLightMapping) {\n\n                        // Light mapping function\n\n                        add(\"void computePBRLightMapping(const in samplerCube lightMap, const in float intensity, const in vec3 normal, const in Material material, inout ReflectedLight reflectedLight) {\");\n                        add(\"   reflectedLight.diffuse += (sRGBToLinear(textureCube(lightMap, normal)).rgb * PI) * (RECIPROCAL_PI * material.diffuseColor) * intensity;\");\n                        add(\"}\");\n                    }\n\n                    if (pbrReflectionMapping) {\n\n                        // Reflection mapping function\n\n                        add(\"float GGXRoughnessToBlinnExponent(const in float ggxRoughness) {\"); // Effectively \"blurs\" reflection map lookup in proportion to roughness\n                        add(\"   float r = ggxRoughness + 0.0001;\");\n                        add(\"   return (2.0 / (r * r) - 2.0);\");\n                        add(\"}\");\n\n                        add(\"float getSpecularMIPLevel(const in float blinnShininessExponent, float maxMipLevels) {\");\n                        add(\"   float desiredMIPLevel = maxMipLevels - 0.79248 - 0.5 * log2( (blinnShininessExponent * blinnShininessExponent) + 1.0 );\");\n                        add(\"   return clamp( desiredMIPLevel, 0.0, maxMipLevels );\");\n                        add(\"}\");\n\n                        add(\"vec3 getLightProbeIndirectRadiance(const in samplerCube reflectMap, const in vec3 reflectVec, const in float blinnShininessExponent, float maxMipLevels) {\");\n                        add(\"   float mipLevel = getSpecularMIPLevel(blinnShininessExponent, maxMipLevels);\"); //TODO: a random factor - fix this\n                        if (TEXTURE_LOD_SUPPORTED) {\n                            add(\"   vec3 envMapColor = sRGBToLinear(textureCubeLodEXT(reflectMap, reflectVec, mipLevel)).rgb;\");\n                        } else {\n                            add(\"   vec3 envMapColor = sRGBToLinear(textureCube(reflectMap, reflectVec, mipLevel)).rgb;\");\n                        }\n                        add(\"   return envMapColor;\");\n                        add(\"}\");\n\n                        add(\"vec3 BRDF_Specular_GGX_Environment(const in Geometry geometry, const in vec3 specularColor, const in float roughness) {\");\n                        add(\"   float dotNV = saturate(dot(geometry.viewNormal, geometry.viewEyeDir));\");\n                        add(\"   const vec4 c0 = vec4( -1, -0.0275, -0.572,  0.022);\");\n                        add(\"   const vec4 c1 = vec4(  1,  0.0425,   1.04, -0.04);\");\n                        add(\"   vec4 r = roughness * c0 + c1;\");\n                        add(\"   float a004 = min(r.x * r.x, exp2(-9.28 * dotNV)) * r.x + r.y;\");\n                        add(\"   vec2 AB    = vec2(-1.04, 1.04) * a004 + r.zw;\");\n                        add(\"   return specularColor * AB.x + AB.y;\");\n                        add(\"}\");\n\n                        add(\"void computePBRReflectionMapping(const in samplerCube reflectMap, const in float intensity, const in mat4 viewMatrix, const in Geometry geometry, const in Material material, inout ReflectedLight reflectedLight, float maxMipLevel) {\");\n                        add(\"   vec3 reflectVec             = reflect(-geometry.viewEyeDir, geometry.viewNormal);\");\n                        add(\"   reflectVec                  = inverseTransformDirection(reflectVec, viewMatrix);\");\n                        add(\"   float blinnExpFromRoughness = GGXRoughnessToBlinnExponent(material.specularRoughness);\");\n                        add(\"   vec3 radiance               = getLightProbeIndirectRadiance(reflectMap, reflectVec, blinnExpFromRoughness, maxMipLevel);\");\n                        add(\"   vec3 specularBRDFContrib    = BRDF_Specular_GGX_Environment(geometry, material.specularColor, material.specularRoughness);\");\n                        add(\"   reflectedLight.specular     += radiance * specularBRDFContrib * intensity;\");\n                        add(\"}\");\n                    }\n\n                    // Lighting function\n\n                    add(\"vec3 F_Schlick(const in vec3 specularColor, const in float dotLH) {\");\n                    add(\"   float fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\");\n                    add(\"   return ( 1.0 - specularColor ) * fresnel + specularColor;\");\n                    add(\"}\");\n\n                    add(\"float G_GGX_Smith(const in float alpha, const in float dotNL, const in float dotNV) {\");\n                    add(\"   float a2 = alpha * alpha;\");\n                    add(\"   float gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * ( dotNL * dotNL ) );\");\n                    add(\"   float gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * ( dotNV * dotNV ) );\");\n                    add(\"   return 1.0 / ( gl * gv );\");\n                    add(\"}\");\n\n                    add(\"float G_GGX_SmithCorrelated(const in float alpha, const in float dotNL, const in float dotNV) {\");\n                    add(\"   float a2 = ( alpha * alpha );\");\n                    add(\"   float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * ( dotNV * dotNV ) );\");\n                    add(\"   float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * ( dotNL * dotNL ) );\");\n                    add(\"   return 0.5 / max( gv + gl, EPSILON );\");\n                    add(\"}\");\n\n                    add(\"float D_GGX(const in float alpha, const in float dotNH) {\");\n                    add(\"   float a2 = ( alpha * alpha );\");\n                    add(\"   float denom = ( dotNH * dotNH ) * ( a2 - 1.0 ) + 1.0;\");\n                    add(\"   return RECIPROCAL_PI * a2 / ( denom * denom );\");\n                    add(\"}\");\n\n                    add(\"vec3 BRDF_Specular_GGX(const in IncidentLight incidentLight, const in Geometry geometry, const in vec3 specularColor, const in float roughness) {\");\n                    add(\"   float alpha = ( roughness * roughness );\");\n                    add(\"   vec3 halfDir = normalize( incidentLight.direction + geometry.viewEyeDir );\");\n                    add(\"   float dotNL = saturate( dot( geometry.viewNormal, incidentLight.direction ) );\");\n                    add(\"   float dotNV = saturate( dot( geometry.viewNormal, geometry.viewEyeDir ) );\");\n                    add(\"   float dotNH = saturate( dot( geometry.viewNormal, halfDir ) );\");\n                    add(\"   float dotLH = saturate( dot( incidentLight.direction, halfDir ) );\");\n                    add(\"   vec3  F = F_Schlick( specularColor, dotLH );\");\n                    add(\"   float G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\");\n                    add(\"   float D = D_GGX( alpha, dotNH );\");\n                    add(\"   return F * (G * D);\");\n                    add(\"}\");\n\n                    add(\"void computePBRLighting(const in IncidentLight incidentLight, const in Geometry geometry, const in Material material, inout ReflectedLight reflectedLight) {\");\n                    add(\"   float dotNL     = saturate(dot(geometry.viewNormal, incidentLight.direction));\");\n                    add(\"   vec3 irradiance = dotNL * incidentLight.color * PI;\");\n                    add(\"   reflectedLight.diffuse  += irradiance * (RECIPROCAL_PI * material.diffuseColor);\");\n                    add(\"   reflectedLight.specular += irradiance * BRDF_Specular_GGX(incidentLight, geometry, material.specularColor, material.specularRoughness);\");\n                    add(\"}\");\n\n                } // (metallicMaterial)\n\n                //--------------------------------------------------------------------------------------------------------------\n                // Geometry inputs\n                //--------------------------------------------------------------------------------------------------------------\n\n                if (clipping || normals || colorModRange || opacityModRange) {\n                    add(\"varying vec4 SCENEJS_vWorldVertex;\");  // World-space position\n                }\n\n                if (stochasticAlpha) {\n                    add(\"varying vec4 SceneJS_vModelVertex;\");\n                }\n\n                add(\"varying vec4 SCENEJS_vViewVertex;\");       // View-space position\n\n                if (states.geometry.colorBuf) {\n                    add(\"varying vec4 SCENEJS_vColor;\");        // Vertex color\n                }\n\n                if (texturing) {\n\n                    if (normalMapping) {\n\n                        if (autoTangents) {\n                            add(\"vec3 perturbNormal2Arb( sampler2D sampler, vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\");\n                            add(\"      vec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\");\n                            add(\"      vec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\");\n                            add(\"      vec2 st0 = dFdx( uv.st );\");\n                            add(\"      vec2 st1 = dFdy( uv.st );\");\n                            add(\"      vec3 S = normalize( q0 * st1.t - q1 * st0.t );\");\n                            add(\"      vec3 T = normalize( -q0 * st1.s + q1 * st0.s );\");\n                            add(\"      vec3 N = normalize( surf_norm );\");\n                            add(\"      vec3 mapN = texture2D( sampler, uv ).xyz * 2.0 - 1.0;\");\n                            add(\"      mat3 tsn = mat3( S, T, N );\");\n                            add(\"      return normalize( tsn * mapN );\");\n                            add(\"}\");\n\n                            if (swizzledNormalMapping) {\n                                add(\"vec3 perturbNormal2ArbSwz( sampler2D sampler, vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\");\n                                add(\"      vec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\");\n                                add(\"      vec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\");\n                                add(\"      vec2 st0 = dFdx( uv.st );\");\n                                add(\"      vec2 st1 = dFdy( uv.st );\");\n                                add(\"      vec3 S = normalize( q0 * st1.t - q1 * st0.t );\");\n                                add(\"      vec3 T = normalize( -q0 * st1.s + q1 * st0.s );\");\n                                add(\"      vec3 N = normalize( surf_norm );\");\n                                // unpacked swizzled normal data: x,y from a,g; recover z\n                                add(\"      vec3 v_norm = vec3(texture2D(sampler, uv).ag * 2.0 - 1.0, 0.0);\");\n                                add(\"      v_norm.z = sqrt(max(1.0 - dot(v_norm.xy, v_norm.xy), 0.0));\");\n                                add(\"      mat3 tsn = mat3( S, T, N );\");\n                                add(\"      return normalize( tsn * v_norm );\");\n                                add(\"}\");\n                            }\n                        } else {\n                            add(\"varying vec3 SCENEJS_vTangent;\");\n\n                            // additional variables to support swizzled normal data\n                            if (swizzledNormalMapping) {\n                                add(\"vec4 swizzledNormalMap;\");\n                                add(\"vec3 vNormal;\");\n                            }\n                        }\n                    }\n\n                    var uvBufs = states.geometry.uvBufs;        // UVs\n                    if (uvBufs) {\n                        for (var i = 0, len = uvBufs.length; i < len; i++) {\n                            if (uvBufs[i]) {\n                                add(\"varying vec2 SCENEJS_vUVCoord\" + i + \";\");\n                            }\n                        }\n                    }\n                }\n\n                //--------------------------------------------------------------------------------------------------------------\n                // Transform inputs\n                //--------------------------------------------------------------------------------------------------------------\n\n                add(\"uniform mat4 SCENEJS_uVMatrix;\");          // View matrix\n                add(\"uniform mat4 SCENEJS_uMMatrix;\");          // Model matrix\n\n                //--------------------------------------------------------------------------------------------------------------\n                // Camera / view-space inputs\n                //--------------------------------------------------------------------------------------------------------------\n\n                add(\"uniform vec3 SCENEJS_uWorldEye;\");\n                add(\"varying vec3 SCENEJS_vViewEyeVec;\");                  // Direction of world-space vertex from eye\n\n                //--------------------------------------------------------------------------------------------------------------\n                // Material inputs\n                //--------------------------------------------------------------------------------------------------------------\n\n                // Common to all material workflows:\n\n                add(\"uniform vec4  SCENEJS_uMaterialColor;\");\n                add(\"uniform vec4  SCENEJS_uMaterialEmitColor;\");\n\n                if (texturing) {\n\n                    // Texture samplers\n\n                    for (var i = 0, len = states.texture.layers.length; i < len; i++) {\n                        var layer = states.texture.layers[i];\n                        add(\"uniform sampler2D SCENEJS_uSampler\" + i + \";\");\n                        if (layer.matrix) {\n                            add(\"uniform mat4 SCENEJS_uLayer\" + i + \"Matrix;\");\n                        }\n                        add(\"uniform float SCENEJS_uLayer\" + i + \"BlendFactor;\");\n                    }\n                }\n\n                // Fresnels\n\n                if (diffuseFresnel || specularFresnel || alphaFresnel || transparencyFresnel || emitFresnel ||\n                    fragmentFresnel || reflectFresnel || colorModsScalarFresnel || colorModsColorFresnel || opacityModsScalarFresnel) {\n\n                    src.push(\"float fresnel(vec3 eyeDir, vec3 normal, float edgeBias, float centerBias, float power) {\");\n                    src.push(\"    float fr = abs(dot(eyeDir, normal));\");\n                    src.push(\"    float finalFr = clamp((fr - edgeBias) / (centerBias - edgeBias), 0.0, 1.0);\");\n                    src.push(\"    return pow(finalFr, power);\");\n                    src.push(\"}\");\n\n                    if (diffuseFresnel) {\n                        add(\"uniform vec4 SCENEJS_uDiffuseFresnelCenterColor;\");\n                        add(\"uniform vec4 SCENEJS_uDiffuseFresnelEdgeColor;\");\n                        add(\"uniform float SCENEJS_uDiffuseFresnelPower;\");\n                    }\n\n                    if (specularFresnel) {\n                        add(\"uniform vec4 SCENEJS_uSpecularFresnelCenterColor;\");\n                        add(\"uniform vec4 SCENEJS_uSpecularFresnelEdgeColor;\");\n                        add(\"uniform float SCENEJS_uSpecularFresnelPower;\");\n                    }\n\n                    if (alphaFresnel) {\n                        add(\"uniform vec4 SCENEJS_uAlphaFresnelCenterColor;\");\n                        add(\"uniform vec4 SCENEJS_uAlphaFresnelEdgeColor;\");\n                        add(\"uniform float SCENEJS_uAlphaFresnelPower;\");\n                    }\n\n                    if (transparencyFresnel) {\n                        add(\"uniform vec4 SCENEJS_uTransparencyFresnelCenterColor;\");\n                        add(\"uniform vec4 SCENEJS_uTransparencyFresnelEdgeColor;\");\n                        add(\"uniform float SCENEJS_uTransparencyFresnelPower;\");\n                    }\n\n                    if (reflectFresnel) {\n                        add(\"uniform vec4 SCENEJS_uReflectFresnelCenterColor;\");\n                        add(\"uniform vec4 SCENEJS_uReflectFresnelEdgeColor;\");\n                        add(\"uniform float SCENEJS_uReflectFresnelPower;\");\n                    }\n\n                    if (emitFresnel) {\n                        add(\"uniform vec4 SCENEJS_uEmitFresnelCenterColor;\");\n                        add(\"uniform vec4 SCENEJS_uEmitFresnelEdgeColor;\");\n                        add(\"uniform float SCENEJS_uEmitFresnelPower;\");\n                    }\n\n                    if (fragmentFresnel) {\n                        add(\"uniform vec4 SCENEJS_uFragmentFresnelCenterColor;\");\n                        add(\"uniform vec4 SCENEJS_uFragmentFresnelEdgeColor;\");\n                        add(\"uniform float SCENEJS_uFragmentFresnelPower;\");\n                    }\n                }\n\n                // Blinn-Phong material workflow:\n\n                if (phongMaterial) {\n                    add(\"uniform vec3  SCENEJS_uAmbientColor;\");\n                    add(\"uniform vec4  SCENEJS_uMaterialSpecularColor;\");\n                    add(\"uniform float SCENEJS_uMaterialShine;\");\n                }\n\n                // Metal-roughness PBR material workflow:\n\n                if (metallicMaterial) {\n                    add(\"uniform vec4 SCENEJS_uMetalRoughSpecularf0;\");\n                }\n\n                //--------------------------------------------------------------------------------------------------------------\n                // Lighting inputs\n                //--------------------------------------------------------------------------------------------------------------\n\n                if (normals) {\n\n                    add(\"uniform vec2  SCENEJS_uXrayParams;\"); // x = glassfactor, y = murkiness\n\n                    if (phongReflectionMapping || phongLightMapping) {\n\n                        // Environment map\n\n                        for (var i = 0, len = states.cubemap.layers.length; i < len; i++) {\n                            var layer = states.cubemap.layers[i];\n                            add(\"uniform samplerCube SCENEJS_uCubeMapSampler\" + i + \";\");\n                            add(\"uniform float SCENEJS_uCubeMapIntensity\" + i + \";\");\n                            add(\"uniform float SCENEJS_uCubeMapMipLevels\" + i + \";\");\n                        }\n                    }\n\n                    if (pbrReflectionMapping) {\n                        add(\"uniform samplerCube SCENEJS_uPBRReflectionMapSampler;\");\n                        add(\"uniform float SCENEJS_uPBRReflectionMapIntensity;\");\n                        add(\"uniform float SCENEJS_uPBRReflectionMapMipLevels;\");\n                    }\n\n                    if (pbrLightMapping) {\n                        add(\"uniform samplerCube SCENEJS_uPBRLightMapSampler;\");\n                        add(\"uniform float SCENEJS_uPBRLightMapIntensity;\");\n                        add(\"uniform float SCENEJS_uPBRLightMapMipLevels;\");\n                    }\n\n                    add(\"varying vec3 SCENEJS_vViewNormal;\");\n\n                    if (phongReflectionMapping || phongLightMapping || pbrReflectionMapping || pbrLightMapping) {\n                        add(\"varying vec3 SCENEJS_vWorldNormal;\");\n                    }\n\n                    for (var i = 0; i < states.lights.length; i++) {\n\n                        var light = states.lights[i];\n\n                        add(\"uniform vec3  SCENEJS_uLightColor\" + i + \";\");\n\n                        if (light.mode == \"dir\") {\n                            add(\"uniform vec3 SCENEJS_uLightDir\" + i + \";\");\n                        }\n\n                        if (light.mode == \"point\") {\n                            add(\"uniform vec3  SCENEJS_uLightAttenuation\" + i + \";\");\n                            add(\"uniform vec3 SCENEJS_uLightPos\" + i + \";\");\n                        }\n\n                        if (light.mode == \"spot\") {\n                            add(\"uniform vec3  SCENEJS_uLightAttenuation\" + i + \";\");\n                            add(\"uniform vec3 SCENEJS_uLightPos\" + i + \";\");\n                            add(\"uniform vec3 SCENEJS_uLightDir\" + i + \";\");\n                            add(\"uniform float SCENEJS_uInnerCone\" + i + \";\");\n                            add(\"uniform float SCENEJS_uOuterCone\" + i + \";\");\n                        }\n                    }\n                }\n\n                //--------------------------------------------------------------------------------------------------------------\n                // Effects inputs\n                //--------------------------------------------------------------------------------------------------------------\n\n                if (colorMods) {\n                    var cmi = 0;\n                    var cmods = states.properties.colorModifiers;\n                    var len = cmods.length;\n                    var colorMod;\n                    for (cmi = 0; cmi < len; cmi++) {\n                        colorMod = cmods[cmi];\n\n                        if (colorMod.value.isColorFresnel || colorMod.value.isScalarFresnel) {\n                            add(\"uniform vec4 SCENEJS_uColorModFresnelEdge\" + cmi + \";\");\n                            add(\"uniform vec4 SCENEJS_uColorModFresnelCenter\" + cmi + \";\");\n                            add(\"uniform float SCENEJS_uColorModFresnelPower\" + cmi + \";\");\n\n                        } else {\n                            // color modification value\n                            if (colorMod.applyTo === COLOR_MOD_FLAGS.TINT) {\n                                add(\"uniform vec3 SCENEJS_uColorModification\" + cmi + \";\");\n                            } else {\n                                add(\"uniform float SCENEJS_uColorModification\" + cmi + \";\");\n                            }\n                        }\n\n                        // per-color-modification range; [center.x, center.y, center.z, radius]\n                        if (colorMod.range) {\n                            add(\"uniform vec3 SCENEJS_uColorModCenter\" + cmi + \";\");\n                            add(\"uniform vec2 SCENEJS_uColorModRadius\" + cmi + \";\"); // x = min, y = max - min\n                        }\n                    }\n                }\n\n                if (opacityMods) {\n                    var omi = 0;\n                    var omods = states.properties.opacityModifiers;\n                    var len = omods.length;\n                    var opacityMod;\n                    for (omi = 0; omi < len; omi++) {\n                        opacityMod = omods[omi];\n\n                        // Fresnel for opacity\n                        if (opacityMod.value.isScalarFresnel) {\n                            add(\"uniform vec4 SCENEJS_uOpacityModFresnelEdge\" + omi + \";\");\n                            add(\"uniform vec4 SCENEJS_uOpacityModFresnelCenter\" + omi + \";\");\n                            add(\"uniform float SCENEJS_uOpacityModFresnelPower\" + omi + \";\");\n\n                        } else {\n                            // opacity modification value\n                            add(\"uniform float SCENEJS_uOpacityModification\" + omi + \";\");\n                        }\n\n                        // per-opacity-modification range; [center.x, center.y, center.z, radius]\n                        if (opacityMod.range) {\n                            add(\"uniform vec3 SCENEJS_uOpacityModCenter\" + omi + \";\");\n                            add(\"uniform vec2 SCENEJS_uOpacityModRadius\" + omi + \";\"); // x = min, y = max - min\n                        }\n                    }\n                }\n\n                if (fogEnabled) {\n                    add(\"uniform vec4   SCENEJS_uFogParams;\"); // x = start, y = end, z = min, w = max\n                    add(\"uniform vec4   SCENEJS_uFogColor;\"); // RGB = color, a = density\n                }\n\n                if (regionInteraction) {\n                    add(\"varying vec2 SCENEJS_vRegionMapUV;\");\n                    add(\"uniform sampler2D SCENEJS_uRegionMapSampler;\");\n                    add(\"uniform vec3 SCENEJS_uRegionMapRegionColor;\");\n                    add(\"uniform vec3 SCENEJS_uRegionMapHighlightFactor;\");\n                    add(\"uniform float SCENEJS_uRegionMapHideAlpha;\");\n                }\n\n                if (clipping) {\n                    if (solid) {\n                        add(\"uniform vec3  SCENEJS_uSolidColor;\");\n                    }\n                    for (var i = 0; i < states.clips.clips.length; i++) {\n                        add(\"uniform vec4  SCENEJS_uClipNormalAndDist\" + i + \";\");\n                        if (states.clips.clips[i].fade) {\n                            add(\"uniform float SCENEJS_uClipFadeDistance\" + i + \";\");\n                        }\n                    }\n                }\n\n                add(\"uniform float SCENEJS_uOutputFormat;\");\n\n                add(\"#define RGB_YCOCG mat3(0.25, 0.5, -0.25, 0.5, 0.0, 0.5, 0.25, -0.5, -0.25)\")\n\n                if (points) {\n                    if (scaleRotationPoints) {\n                        add(\"varying float SCENEJS_vPointRotation;\");\n                    }\n                    if (uvTranslatePoints) {\n                        add(\"uniform vec2 SCENEJS_uPointUVScale;\");\n                        add(\"varying vec2 SCENEJS_vPointUVTranslate;\");\n                    }\n                }\n\n                if (gammaOutput) {\n                    src.push(\"vec4 linearToGamma( in vec4 value, in float gammaFactor ) {\");\n                    src.push(\"    return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\");\n                    src.push(\"}\");\n                }\n\n                //--------------------------------------------------------------------------------------------------------------\n                // MAIN\n                //--------------------------------------------------------------------------------------------------------------\n\n                add(\"void main(void) {\");\n\n                // World-space arbitrary clipping planes\n                if (clipping) {\n\n                    if (states.clips.clipDiscard) {\n                        add(\"float distOff = 0.0;\");\n                    }\n                    if (states.clips.clipFade) {\n                        add(\"float distAlpha = 0.0;\");\n                    }\n\n                    for (var i = 0; i < states.clips.clips.length; i++) {\n                        if (states.clips.clips[i].fade) {\n                            //max obsrved normalized distance from alpha plane (normalized to max fade distance)\n                            add(\"distAlpha = max(distAlpha, (dot(SCENEJS_vWorldVertex.xyz, SCENEJS_uClipNormalAndDist\" + i + \".xyz) + SCENEJS_uClipNormalAndDist\" + i + \".w) / SCENEJS_uClipFadeDistance\" + i + \");\");\n                        } else {\n                            //max observed distance from clipping plane\n                            add(\"distOff = max(distOff, dot(SCENEJS_vWorldVertex.xyz, SCENEJS_uClipNormalAndDist\" + i + \".xyz) + SCENEJS_uClipNormalAndDist\" + i + \".w);\");\n                        }\n                    }\n                    if (states.clips.clipDiscard) {\n                        // discard  fragment if beyond any clip\n                        add(\"if (distOff > 0.0) { discard; }\");\n                    }\n                    if (states.clips.clipFade) {\n                        // set transparency proportionally to distance\n                        // TODO: Requires drawn object to be transparent flag.\n                        add(\"if (distAlpha > 1.0) { discard; }\")\n                    }\n\n\n                    if (solid) {\n                        add(\"if (gl_FrontFacing == false) {\");\n                        add(\"   gl_FragColor = vec4(SCENEJS_uSolidColor, 1.0);\");\n                        add(\"   return;\");\n                        add(\"}\");\n                    }\n                }\n\n                // Rounded points\n\n                if (points && roundPoints) {\n                    add(\"vec2 cxy = 2.0 * gl_PointCoord - 1.0;\");\n                    add(\"float r = dot(cxy, cxy);\");\n                    add(\"if (r > 1.0) {\");\n                    add(\"   discard;\");\n                    add(\"}\");\n                }\n\n                if (normals) {\n                    add(\"vec3 worldEyeVec = normalize(SCENEJS_uWorldEye - SCENEJS_vWorldVertex.xyz);\");            // World-space eye position\n                }\n\n                // Unpack material channels\n\n                if (states.geometry.colorBuf) {\n                    add(\"  vec3  color   = SCENEJS_vColor.rgb;\");\n                    add(\"  float colorAlpha  = SCENEJS_vColor.a;\");\n                } else {\n                    add(\"  vec3  color   = SCENEJS_uMaterialColor.rgb;\")\n                }\n                add(\"  float alpha = SCENEJS_uMaterialColor.a;\");\n\n                add(\"  float emit          = SCENEJS_uMaterialEmitColor.a;\");\n                add(\"  vec3  emitColor     = SCENEJS_uMaterialEmitColor.rgb;\");\n                add(\"  float occlusion     = 1.0;\");\n\n                if (states.geometry.colorBuf) {\n                    add(\"alpha *= colorAlpha;\");\n                }\n\n                add(\"float transparency  = 1.0 - alpha;\");\n\n                if (phongMaterial) {\n                    add(\"  vec3  ambientColor  = SCENEJS_uAmbientColor;\");\n                    add(\"  float specular      = SCENEJS_uMaterialSpecularColor.a;\");\n                    add(\"  vec3  specularColor = SCENEJS_uMaterialSpecularColor.rgb;\");\n                    add(\"  float shine         = SCENEJS_uMaterialShine;\");\n                }\n\n                if (metallicMaterial) {\n                    add(\"  vec3  ambientColor  = vec3(0.2, 0.2, 0.2);\");  // HACK\n                    add(\"  float metallic      = SCENEJS_uMetalRoughSpecularf0.r;\");\n                    add(\"  float roughness     = SCENEJS_uMetalRoughSpecularf0.g;\");\n                    add(\"  float specularF0    = SCENEJS_uMetalRoughSpecularf0.b;\");\n                }\n\n                // Geometry\n\n                if (normals) {\n                    add(\"float attenuation = 1.0;\");\n                    if (normalMapping) {\n                        add(\"vec3 viewNormalVec = vec3(0.0, 0.0, 0.0);\");\n                    } else {\n                        add(\"vec3 viewNormalVec = normalize(SCENEJS_vViewNormal);\");\n                    }\n                    add(\"vec3 viewEyeVec = normalize(SCENEJS_vViewEyeVec);\");\n\n                    add(\"  float glassfactor = SCENEJS_uXrayParams.x;\");\n                    add(\"  float murkiness = SCENEJS_uXrayParams.y;\");\n\n                    add(\"if (transparency > 0.0) {\");\n                    add(\"  alpha = 1.0 - transparency;\");\n                    add(\"  float gf = (glassfactor  * (murkiness - abs(dot(SCENEJS_vViewNormal, vec3(0.0, 0.0, -1.0)))));\");\n                    add(\"  alpha = max(alpha, gf);\");\n                    add(\"  transparency = 1.0 - alpha;\");\n                    add(\"}\");\n                }\n\n                if (normals && normalMapping && !autoTangents) {\n                    add(\"mat3 mat =  mat3(SCENEJS_uVMatrix * SCENEJS_uMMatrix);\");\n                    add(\"vec3 n = normalize(SCENEJS_vViewNormal);\");\n                    add(\"vec3 t = normalize(mat * SCENEJS_vTangent);\");\n                    add(\"vec3 b = normalize(cross(SCENEJS_vViewNormal, mat * SCENEJS_vTangent));\");\n                    add(\"mat3 TBN = mat3(t, b, n);\");\n                }\n\n                if (texturing) {\n\n                    add(\"vec2 textureCoord;\");\n\n                    // ------------ Texture maps ------------------------------------\n\n                    var firstAlpha = true; // applies to first alpha or first transparency\n                    var firstColor = true;\n                    var firstOcclusion = true;\n                    var firstEmit = true;\n                    var firstSpecular = true;\n                    var firstShine = true;\n                    var firstMetallic = true;\n                    var firstRoughness = true;\n                    var firstMetallicRoughness = true;\n                    var firstNormal = true;\n\n                    if (points) {\n                        add(\"vec2 pointCoord = vec2(gl_PointCoord.x, 1.0 - gl_PointCoord.y);\");\n                        add(\"vec2 centerCoord = vec2(0.5);\");\n                        if (uvTranslatePoints) {\n                            add(\"centerCoord = SCENEJS_vPointUVTranslate + SCENEJS_uPointUVScale * 0.5;\");\n                            add(\"pointCoord = pointCoord * SCENEJS_uPointUVScale + SCENEJS_vPointUVTranslate;\");\n                        }\n                        if (scaleRotationPoints) {\n                            add(\"vec2 pivot = pointCoord - centerCoord;\");\n                            add(\"float c = cos(SCENEJS_vPointRotation);\");\n                            add(\"float s = sin(SCENEJS_vPointRotation);\");\n                            add(\"pointCoord.x = c * pivot.x + s * pivot.y + centerCoord.x;\");\n                            add(\"pointCoord.y = c * pivot.y - s * pivot.x + centerCoord.y;\");\n                        }\n                    }\n\n                    for (var i = 0, len = states.texture.layers.length; i < len; i++) {\n                        var layer = states.texture.layers[i];\n                        var uvLayerIndex = layer.uvLayerIdx || 0;\n                        var uvBufs = states.geometry.uvBufs;\n\n                        if (uvBufs && uvBufs[uvLayerIndex]) {\n                            add(\"textureCoord = SCENEJS_vUVCoord\" + uvLayerIndex + \";\");\n                        } else if (points) {\n                            add(\"textureCoord = pointCoord;\");\n                        } else {\n                            SceneJS.log.warn(\"Texture layer applyTo='uv' but geometry has no UV coordinates for layer \" + uvLayerIndex);\n                            continue;\n                        }\n\n                        if (layer.matrix) {\n                            add(\"textureCoord=(SCENEJS_uLayer\" + i + \"Matrix * vec4(textureCoord, 1.0, 1.0)).xy;\");\n                        }\n\n                        if (layer.compressed) {\n                            add(\"textureCoord.y = 1.0 - textureCoord.y;\");\n                        }\n\n                        /* Alpha from Texture\n                         * Operations must be done in 'alpha' space, but true alpha is stored in transparency variable (alpha = 1.0 - transparency).\n                         * Convert to alpha before doing opteration. Convert back to transparency after operation;\n                         */\n                        if (layer.flags & TEXTURE_FLAGS.alpha) {\n                            if (firstAlpha) {\n                                add(\"transparency = mix(transparency, 1.0 - texture2D(SCENEJS_uSampler\" + i + \", textureCoord).r, SCENEJS_uLayer\" + i + \"BlendFactor);\");\n                                firstAlpha = false;\n                            } else if (layer.flags & TEXTURE_FLAGS.multiply) {\n                                add(\"alpha = 1.0 - transparency;\");\n                                add(\"alpha *= 1.0 - SCENEJS_uLayer\" + i + \"BlendFactor * (1.0 - texture2D(SCENEJS_uSampler\" + i + \", textureCoord).r);\");\n                                add(\"transparency = 1.0 - alpha;\");\n                            } else if (layer.flags & TEXTURE_FLAGS.add) {\n                                add(\"alpha = 1.0 - transparency;\");\n                                add(\"alpha += SCENEJS_uLayer\" + i + \"BlendFactor * (texture2D(SCENEJS_uSampler\" + i + \", textureCoord).r);\");\n                                add(\"transparency = 1.0 - alpha;\");\n                            } else if (layer.flags & TEXTURE_FLAGS.over) {\n                                add(\"alpha = 1.0 - transparency;\");\n                                add(\"alpha = mix(alpha, texture2D(SCENEJS_uSampler\" + i + \", textureCoord).r, SCENEJS_uLayer\" + i + \"BlendFactor);\");\n                                add(\"transparency = 1.0 - alpha;\");\n                            }\n                        }\n\n                        if (layer.flags & TEXTURE_FLAGS.transparency) {\n                            if (firstAlpha) {\n                                add(\"transparency = mix(transparency, texture2D(SCENEJS_uSampler\" + i + \", textureCoord).r, SCENEJS_uLayer\" + i + \"BlendFactor);\");\n                                firstAlpha = false;\n                            } else if (layer.flags & TEXTURE_FLAGS.multiply) {\n                                add(\"transparency *= 1.0 - SCENEJS_uLayer\" + i + \"BlendFactor * (1.0 - texture2D(SCENEJS_uSampler\" + i + \", textureCoord).r);\");\n                            } else if (layer.flags & TEXTURE_FLAGS.add) {\n                                add(\"transparency += SCENEJS_uLayer\" + i + \"BlendFactor * (texture2D(SCENEJS_uSampler\" + i + \", textureCoord).r);\");\n                            } else if (layer.flags & TEXTURE_FLAGS.over) {\n                                add(\"transparency = mix(transparency, texture2D(SCENEJS_uSampler\" + i + \", textureCoord).r, SCENEJS_uLayer\" + i + \"BlendFactor);\");\n                            }\n                        }\n\n                        if (layer.flags & TEXTURE_FLAGS.occlusion) {\n                            if (firstOcclusion) {\n                                add(\"occlusion = mix(occlusion, texture2D(SCENEJS_uSampler\" + i + \", textureCoord).r, SCENEJS_uLayer\" + i + \"BlendFactor);\");\n                                firstOcclusion = false;\n                            } else if (layer.flags & TEXTURE_FLAGS.multiply) {\n                                add(\"occlusion *= 1.0 - SCENEJS_uLayer\" + i + \"BlendFactor * (1.0 - texture2D(SCENEJS_uSampler\" + i + \", textureCoord).r);\");\n                            } else if (layer.flags & TEXTURE_FLAGS.add) {\n                                add(\"occlusion += SCENEJS_uLayer\" + i + \"BlendFactor * texture2D(SCENEJS_uSampler\" + i + \", textureCoord).r;\")\n                            } else if (layer.flags & TEXTURE_FLAGS.over) {\n                                add(\"occlusion = mix(occlusion, texture2D(SCENEJS_uSampler\" + i + \", textureCoord).r, SCENEJS_uLayer\" + i + \"BlendFactor);\");\n                            }\n                        }\n\n                        if (phongMaterial) {\n\n                            if (gammaInputPhong) {\n\n                                if (layer.flags & TEXTURE_FLAGS.baseColor) {\n                                    if (firstColor) {\n                                        add(\"color = mix(color, sRGBToLinear(texture2D(SCENEJS_uSampler\" + i + \", textureCoord)).rgb, SCENEJS_uLayer\" + i + \"BlendFactor);\");\n                                        firstColor = false;\n                                    } else if (layer.flags & TEXTURE_FLAGS.multiply) {\n                                        add(\"color *= 1.0 - SCENEJS_uLayer\" + i + \"BlendFactor * (1.0 - sRGBToLinear(texture2D(SCENEJS_uSampler\" + i + \", textureCoord)).rgb);\");\n                                    } else if (layer.flags & TEXTURE_FLAGS.add) {\n                                        add(\"color += SCENEJS_uLayer\" + i + \"BlendFactor * sRGBToLinear(texture2D(SCENEJS_uSampler\" + i + \", textureCoord)).rgb;\")\n                                    } else if (layer.flags & TEXTURE_FLAGS.over) {\n                                        add(\"color = mix(color, sRGBToLinear(texture2D(SCENEJS_uSampler\" + i + \", textureCoord)).rgb, SCENEJS_uLayer\" + i + \"BlendFactor);\");\n                                    }\n                                }\n\n                                if (layer.flags & TEXTURE_FLAGS.emit) {\n                                    if (firstEmit) {\n                                        add(\"emitColor = mix(emitColor, sRGBToLinear(texture2D(SCENEJS_uSampler\" + i + \", textureCoord)).rgb, SCENEJS_uLayer\" + i + \"BlendFactor);\");\n                                        firstEmit = false;\n                                    } else if (layer.flags & TEXTURE_FLAGS.multiply) {\n                                        add(\"emitColor *= 1.0 - SCENEJS_uLayer\" + i + \"BlendFactor * (1.0 - sRGBToLinear(texture2D(SCENEJS_uSampler\" + i + \", textureCoord)).rgb);\");\n                                    } else if (layer.flags & TEXTURE_FLAGS.add) {\n                                        add(\"emitColor += SCENEJS_uLayer\" + i + \"BlendFactor * sRGBToLinear(texture2D(SCENEJS_uSampler\" + i + \", textureCoord)).rgb;\");\n                                    } else if (layer.flags & TEXTURE_FLAGS.over) {\n                                        add(\"emitColor = mix(emitColor, sRGBToLinear(texture2D(SCENEJS_uSampler\" + i + \", textureCoord)).rgb, SCENEJS_uLayer\" + i + \"BlendFactor);\");\n                                    }\n                                }\n\n                            } else {\n\n                                if (layer.flags & TEXTURE_FLAGS.baseColor) {\n                                    if (firstColor) {\n                                        if (layer.flags & TEXTURE_FLAGS.conditionalAlpha) {\n                                            // conditionalAlpha: blend 2 textures with the alpha channel achieved from the second texture\n                                            // only if uv.x is not -1. Use primarily for applying a draw texture.\n                                            add(\"if(textureCoord.x != -1.0) {\");\n                                            add(\"   vec4 color\" + i + \" = texture2D(SCENEJS_uSampler\" + i + \", textureCoord);\");\n                                            add(\"   color = mix(color, color\" + i + \".rgb, color\" + i + \".a * SCENEJS_uLayer\" + i + \"BlendFactor);\");\n                                            add(\"}\");\n                                        } else {\n                                            add(\"color = mix(color, texture2D(SCENEJS_uSampler\" + i + \", textureCoord).rgb, SCENEJS_uLayer\" + i + \"BlendFactor);\");\n                                        }\n                                        firstColor = false;\n                                    } else if (layer.flags & TEXTURE_FLAGS.multiply) {\n                                        add(\"color *= 1.0 - SCENEJS_uLayer\" + i + \"BlendFactor * (1.0 - texture2D(SCENEJS_uSampler\" + i + \", textureCoord).rgb);\");\n                                    } else if (layer.flags & TEXTURE_FLAGS.add) {\n                                        add(\"color += SCENEJS_uLayer\" + i + \"BlendFactor * texture2D(SCENEJS_uSampler\" + i + \", textureCoord).rgb;\")\n                                    } else if (layer.flags & TEXTURE_FLAGS.over) {\n                                        add(\"color = mix(color, texture2D(SCENEJS_uSampler\" + i + \", textureCoord).rgb, SCENEJS_uLayer\" + i + \"BlendFactor);\");\n                                    } else if (layer.flags & TEXTURE_FLAGS.conditionalAlpha) {\n                                        add(\"if(textureCoord.x != -1.0) {\");\n                                        add(\"vec4 color\" + i + \" = texture2D(SCENEJS_uSampler\" + i + \", textureCoord);\");\n                                        add(\"color = mix(color, color\" + i + \".rgb, color\" + i + \".a * SCENEJS_uLayer\" + i + \"BlendFactor);\");\n                                        add(\"}\");\n                                    }\n                                }\n\n                                if (layer.flags & TEXTURE_FLAGS.emit) {\n                                    if (firstEmit) {\n                                        add(\"emitColor = mix(emitColor, texture2D(SCENEJS_uSampler\" + i + \", textureCoord).rgb, SCENEJS_uLayer\" + i + \"BlendFactor);\");\n                                        firstEmit = false;\n                                    } else if (layer.flags & TEXTURE_FLAGS.multiply) {\n                                        add(\"emitColor *= 1.0 - SCENEJS_uLayer\" + i + \"BlendFactor * (1.0 - texture2D(SCENEJS_uSampler\" + i + \", textureCoord).rgb);\");\n                                    } else if (layer.flags & TEXTURE_FLAGS.add) {\n                                        add(\"emitColor += SCENEJS_uLayer\" + i + \"BlendFactor * texture2D(SCENEJS_uSampler\" + i + \", textureCoord).rgb;\");\n                                    } else if (layer.flags & TEXTURE_FLAGS.over) {\n                                        add(\"emitColor = mix(emitColor, texture2D(SCENEJS_uSampler\" + i + \", textureCoord).rgb, SCENEJS_uLayer\" + i + \"BlendFactor);\");\n                                    }\n                                }\n                            }\n\n                            if ((layer.flags & TEXTURE_FLAGS.specular) && normals) {\n                                if (firstSpecular) {\n                                    add(\"specular = mix(specular, texture2D(SCENEJS_uSampler\" + i + \", textureCoord).r, SCENEJS_uLayer\" + i + \"BlendFactor);\");\n                                    firstSpecular = false;\n                                } else if (layer.flags & TEXTURE_FLAGS.multiply) {\n                                    add(\"specular *= 1.0 - SCENEJS_uLayer\" + i + \"BlendFactor * (1.0 - texture2D(SCENEJS_uSampler\" + i + \", textureCoord).r);\");\n                                } else if (layer.flags & TEXTURE_FLAGS.add) {\n                                    add(\"specular += SCENEJS_uLayer\" + i + \"BlendFactor * texture2D(SCENEJS_uSampler\" + i + \", textureCoord).r;\");\n                                } else if (layer.flags & TEXTURE_FLAGS.over) {\n                                    add(\"specular = mix(specular, texture2D(SCENEJS_uSampler\" + i + \", textureCoord).r, SCENEJS_uLayer\" + i + \"BlendFactor);\");\n                                }\n                            }\n\n                            if (layer.flags & TEXTURE_FLAGS.shine) {\n                                if (firstShine) {\n                                    add(\"shine = mix((shine, texture2D(SCENEJS_uSampler\" + i + \", textureCoord).r, SCENEJS_uLayer\" + i + \"BlendFactor);\");\n                                    firstShine = false;\n                                } else if (layer.flags & TEXTURE_FLAGS.multiply) {\n                                    add(\"shine *= 1.0 - SCENEJS_uLayer\" + i + \"BlendFactor * (1.0 - texture2D(SCENEJS_uSampler\" + i + \", textureCoord).r);\");\n                                } else if (layer.flags & TEXTURE_FLAGS.add) {\n                                    add(\"shine += SCENEJS_uLayer\" + i + \"BlendFactor * texture2D(SCENEJS_uSampler\" + i + \", textureCoord).r;\");\n                                } else if (layer.flags & TEXTURE_FLAGS.over) {\n                                    add(\"shine = mix((shine, texture2D(SCENEJS_uSampler\" + i + \", textureCoord).r, SCENEJS_uLayer\" + i + \"BlendFactor);\");\n                                }\n                            }\n                        }\n\n                        if (metallicMaterial) {\n\n                            if (layer.flags & TEXTURE_FLAGS.baseColor) {\n                                if (firstColor) {\n                                    add(\"color = mix(color, sRGBToLinear(texture2D(SCENEJS_uSampler\" + i + \", textureCoord)).rgb, SCENEJS_uLayer\" + i + \"BlendFactor);\");\n                                    firstColor = false;\n                                } else if (layer.flags & TEXTURE_FLAGS.multiply) {\n                                    add(\"color *= 1.0 - SCENEJS_uLayer\" + i + \"BlendFactor * (1.0 - sRGBToLinear(texture2D(SCENEJS_uSampler\" + i + \", textureCoord)).rgb);\");\n                                } else if (layer.flags & TEXTURE_FLAGS.add) {\n                                    add(\"color += SCENEJS_uLayer\" + i + \"BlendFactor * sRGBToLinear(texture2D(SCENEJS_uSampler\" + i + \", textureCoord)).rgb;\")\n                                } else if (layer.flags & TEXTURE_FLAGS.over) {\n                                    add(\"color = mix(color, sRGBToLinear(texture2D(SCENEJS_uSampler\" + i + \", textureCoord)).rgb, SCENEJS_uLayer\" + i + \"BlendFactor);\");\n                                }\n                            }\n\n                            if (layer.flags & TEXTURE_FLAGS.emit) {\n                                if (firstEmit) {\n                                    add(\"emitColor = mix(emitColor, sRGBToLinear(texture2D(SCENEJS_uSampler\" + i + \", textureCoord)).rgb, SCENEJS_uLayer\" + i + \"BlendFactor);\");\n                                    firstEmit = false;\n                                } else if (layer.flags & TEXTURE_FLAGS.multiply) {\n                                    add(\"emitColor *= 1.0 - SCENEJS_uLayer\" + i + \"BlendFactor * (1.0 - sRGBToLinear(texture2D(SCENEJS_uSampler\" + i + \", textureCoord)).rgb);\");\n                                } else if (layer.flags & TEXTURE_FLAGS.add) {\n                                    add(\"emitColor += SCENEJS_uLayer\" + i + \"BlendFactor * sRGBToLinear(texture2D(SCENEJS_uSampler\" + i + \", textureCoord)).rgb;\");\n                                } else if (layer.flags & TEXTURE_FLAGS.over) {\n                                    add(\"emitColor = mix(emitColor, sRGBToLinear(texture2D(SCENEJS_uSampler\" + i + \", textureCoord)).rgb, SCENEJS_uLayer\" + i + \"BlendFactor);\");\n                                }\n                            }\n\n                            if (layer.flags & TEXTURE_FLAGS.metallic) {\n                                if (firstMetallic) {\n                                    add(\"metallic = mix(metallic, texture2D(SCENEJS_uSampler\" + i + \", textureCoord).r, SCENEJS_uLayer\" + i + \"BlendFactor);\");\n                                    firstMetallic = false;\n                                } else if (layer.flags & TEXTURE_FLAGS.multiply) {\n                                    add(\"metallic *= 1.0 - SCENEJS_uLayer\" + i + \"BlendFactor * (1.0 - texture2D(SCENEJS_uSampler\" + i + \", textureCoord).r);\");\n                                } else if (layer.flags & TEXTURE_FLAGS.add) {\n                                    add(\"metallic += SCENEJS_uLayer\" + i + \"BlendFactor * texture2D(SCENEJS_uSampler\" + i + \", textureCoord).r;\");\n                                } else if (layer.flags & TEXTURE_FLAGS.over) {\n                                    add(\"metallic = mix(metallic, texture2D(SCENEJS_uSampler\" + i + \", textureCoord).r, SCENEJS_uLayer\" + i + \"BlendFactor);\");\n                                }\n                            }\n\n                            if (layer.flags & TEXTURE_FLAGS.roughness) {\n                                if (firstRoughness) {\n                                    add(\"roughness = mix(roughness, texture2D(SCENEJS_uSampler\" + i + \", textureCoord).r, SCENEJS_uLayer\" + i + \"BlendFactor);\");\n                                    firstRoughness = false;\n                                } else if (layer.flags & TEXTURE_FLAGS.multiply) {\n                                    add(\"roughness *= 1.0 - SCENEJS_uLayer\" + i + \"BlendFactor * (1.0 - texture2D(SCENEJS_uSampler\" + i + \", textureCoord).r);\");\n                                } else if (layer.flags & TEXTURE_FLAGS.add) {\n                                    add(\"roughness += SCENEJS_uLayer\" + i + \"BlendFactor * texture2D(SCENEJS_uSampler\" + i + \", textureCoord).r;\");\n                                } else if (layer.flags & TEXTURE_FLAGS.over) {\n                                    add(\"roughness = mix(roughness, texture2D(SCENEJS_uSampler\" + i + \", textureCoord).r, SCENEJS_uLayer\" + i + \"BlendFactor);\");\n                                }\n                            }\n                        }\n\n                        if ((layer.flags & TEXTURE_FLAGS.normals) && normals) {\n                            var op;\n                            // support normal maps compressed with DXT5nm\n                            var layerSwizzled = layer.flags & TEXTURE_FLAGS.swizzledNormals;\n                            // SEE:\n                            //  http://wiki.polycount.com/wiki/Normal_Map_Compression#DXT5nm_Compression\n                            //  https://github.com/castano/nvidia-texture-tools/wiki/NormalMapCompression\n                            //  http://realtimecollisiondetection.net/blog/?p=28\n                            if (layer.flags & TEXTURE_FLAGS.add) {\n                                op = firstNormal ? \"=\" : \"+=\";\n\n                                if (autoTangents) {\n                                    if (layerSwizzled) {\n                                        if (layer.compressed) {\n                                            add(\"viewNormalVec \" + op + \" perturbNormal2ArbSwz( SCENEJS_uSampler\" + i + \", SCENEJS_vViewVertex.xyz, SCENEJS_vViewNormal, textureCoord ) * SCENEJS_uLayer\" + i + \"BlendFactor;\");\n                                        } else {\n                                            add(\"viewNormalVec \" + op + \" perturbNormal2ArbSwz( SCENEJS_uSampler\" + i + \", SCENEJS_vViewVertex.xyz, SCENEJS_vViewNormal, vec2(textureCoord.x, 1.0 - textureCoord.y) ) * SCENEJS_uLayer\" + i + \"BlendFactor;\");\n                                        }\n                                    } else {\n                                        add(\"viewNormalVec \" + op + \" perturbNormal2Arb( SCENEJS_uSampler\" + i + \", SCENEJS_vViewVertex.xyz, SCENEJS_vViewNormal, textureCoord ) * SCENEJS_uLayer\" + i + \"BlendFactor;\");\n                                    }\n                                } else {\n                                    if (layerSwizzled) {\n                                        // textureCoord.y may have been flipped above\n                                        if (layer.compressed) {\n                                            add(\"swizzledNormalMap = texture2D(SCENEJS_uSampler\" + i + \", textureCoord);\");\n                                        } else {\n                                            add(\"swizzledNormalMap = texture2D(SCENEJS_uSampler\" + i + \", vec2(textureCoord.x, 1.0 - textureCoord.y));\");\n                                        }\n                                        // unpack swizzled normals\n                                        // get x and y from alpha and green, scaled to [-1, 1]\n                                        add(\"vNormal = vec3(swizzledNormalMap.ag * 2.0 - 1.0, 0.0);\");\n                                        // recover z; (x^2 + y^2 + z^2 = 1)\n                                        add(\"vNormal.z = sqrt(max(1.0 - dot(vNormal.xy, vNormal.xy), 0.0));\");\n                                        add(\"viewNormalVec \" + op + \" (TBN * normalize(vNormal)) * SCENEJS_uLayer\" + i + \"BlendFactor;\");\n                                    } else {\n                                        add(\"viewNormalVec \" + op + \" (TBN * normalize(texture2D(SCENEJS_uSampler\" + i + \", textureCoord).xyz * 2.0 - 1.0)) * SCENEJS_uLayer\" + i + \"BlendFactor;\");\n                                    }\n                                }\n                            } else {\n                                if (autoTangents) {\n                                    if (layerSwizzled) {\n                                        if (layer.compressed) {\n                                            add(\"viewNormalVec \" + op + \" perturbNormal2ArbSwz( SCENEJS_uSampler\" + i + \", SCENEJS_vViewVertex.xyz, SCENEJS_vViewNormal, textureCoord ) * SCENEJS_uLayer\" + i + \"BlendFactor;\");\n                                        } else {\n                                            add(\"viewNormalVec \" + op + \" perturbNormal2ArbSwz( SCENEJS_uSampler\" + i + \", SCENEJS_vViewVertex.xyz, SCENEJS_vViewNormal, vec2(textureCoord.x, 1.0 - textureCoord.y) ) * SCENEJS_uLayer\" + i + \"BlendFactor;\");\n                                        }\n                                    } else {\n                                        add(\"viewNormalVec = mix(viewNormalVec, (perturbNormal2Arb(SCENEJS_uSampler\" + i + \", SCENEJS_vViewVertex.xyz, SCENEJS_vViewNormal, textureCoord).xyz), SCENEJS_uLayer\" + i + \"BlendFactor);\");\n                                    }\n                                } else {\n                                    if (layerSwizzled) {\n                                        // textureCoord.y may have been flipped above\n                                        if (layer.compressed) {\n                                            add(\"swizzledNormalMap = texture2D(SCENEJS_uSampler\" + i + \", textureCoord);\");\n                                        } else {\n                                            add(\"swizzledNormalMap = texture2D(SCENEJS_uSampler\" + i + \", vec2(textureCoord.x, 1.0 - textureCoord.y));\");\n                                        }\n                                        // unpack swizzled normals\n                                        // get x and y from alpha and green, scaled to [-1, 1]\n                                        add(\"vNormal = vec3(swizzledNormalMap.ag * 2.0 - 1.0, 0.0);\");\n                                        // recover z; (x^2 + y^2 + z^2 = 1)\n                                        add(\"vNormal.z = sqrt(max(1.0 - dot(vNormal.xy, vNormal.xy), 0.0));\");\n                                        add(\"viewNormalVec = mix(viewNormalVec, TBN * normalize(vNormal), SCENEJS_uLayer\" + i + \"BlendFactor);\");\n                                    } else {\n                                        add(\"viewNormalVec = mix(viewNormalVec, TBN * normalize(texture2D(SCENEJS_uSampler\" + i + \", textureCoord).xyz * 2.0 - 1.0), SCENEJS_uLayer\" + i + \"BlendFactor);\");\n                                    }\n                                }\n                            }\n\n                            firstNormal = false;\n                        }\n                    }\n\n                    if (normalMapping) {\n                        add(\"viewNormalVec = normalize(viewNormalVec);\")\n                    }\n                }\n\n                add(\"vec4 fragColor;\");\n\n                if (normals) {\n\n                    add(\"vec3 viewLightDir;\");\n\n                    if (phongMaterial) {\n\n                        //--------------------------------------------------------------------------------------------------\n                        // Phong lighting\n                        //--------------------------------------------------------------------------------------------------\n\n                        add(\"vec3 lightValue = vec3(0.0, 0.0, 0.0);\");\n                        add(\"vec3 specularValue  = vec3(0.0, 0.0, 0.0);\");\n                        add(\"vec3 viewLightVec;\");\n                        add(\"float dotN;\");\n                        add(\"float spotDirRatio;\");\n                        add(\"float lightDist;\");\n\n                        if (phongReflectionMapping) {\n\n                            add(\"float reflectFactor = 1.0;\");\n\n                            if (reflectFresnel) {\n                                add(\"float reflectFresnel = fresnel(viewEyeVec, viewNormalVec, SCENEJS_uReflectFresnelEdgeColor.a,  SCENEJS_uReflectFresnelCenterColor.a, SCENEJS_uReflectFresnelPower);\");\n\n                                if (reflectFresnel.blendMode & TEXTURE_FLAGS.multiply) {\n                                    add(\"reflectFactor *= mix(SCENEJS_uReflectFresnelEdgeColor.b, SCENEJS_uReflectFresnelCenterColor.b, reflectFresnel);\");\n                                } else if (reflectFresnel.blendMode & TEXTURE_FLAGS.add) {\n                                    add(\"reflectFactor += mix(SCENEJS_uReflectFresnelEdgeColor.b, SCENEJS_uReflectFresnelCenterColor.b, reflectFresnel);\");\n                                }\n                            }\n\n                            add(\"vec3 envLookup = reflect(-viewEyeVec, viewNormalVec);\");\n\n                            add(\"vec4 envColor;\");\n                            for (var i = 0, len = states.cubemap.layers.length; i < len; i++) {\n                                var layer = states.cubemap.layers[i];\n                                if (layer.applyTo === SceneJS.CUBEMAP_FLAGS.reflect) {\n                                    add(\"envColor = textureCube(SCENEJS_uCubeMapSampler\" + i + \", envLookup);\");\n                                    add(\"color = mix(color, envColor.rgb, reflectFactor * specular * SCENEJS_uCubeMapIntensity\" + i + \");\");\n                                }\n                            }\n                        }\n\n                        var light;\n\n                        for (var i = 0, len = states.lights.length; i < len; i++) {\n                            light = states.lights[i];\n\n                            if (light.mode == \"ambient\") {\n                                continue;\n                            }\n\n                            if (light.mode == \"point\") {\n                                if (light.space == \"world\") {\n                                    add(\"viewLightVec = SCENEJS_uLightPos\" + i + \" - SCENEJS_vWorldVertex.xyz;\"); // Vector from World coordinate to light pos\n                                    add(\"viewLightVec = vec3(SCENEJS_uVMatrix * vec4(viewLightVec, 0.0)).xyz;\");\n                                } else {\n                                    add(\"viewLightVec = SCENEJS_uLightPos\" + i + \".xyz - SCENEJS_vViewVertex.xyz;\"); // Vector from View coordinate to light pos\n                                }\n                                add(\"dotN = max(dot(viewNormalVec, normalize(viewLightVec)), 0.0);\");\n                                add(\"lightDist = length( SCENEJS_uLightPos\" + i + \" - SCENEJS_vWorldVertex.xyz);\");\n                                add(\"attenuation = 1.0 - (\" +\n                                    \"  SCENEJS_uLightAttenuation\" + i + \".x + \" +\n                                    \"  SCENEJS_uLightAttenuation\" + i + \".y * lightDist + \" +\n                                    \"  SCENEJS_uLightAttenuation\" + i + \".z * lightDist * lightDist);\");\n                                if (light.diffuse) {\n                                    add(\"      lightValue += dotN * SCENEJS_uLightColor\" + i + \" * attenuation;\");\n                                }\n                                if (light.specular) {\n                                    add(\"    specularValue += specularColor * SCENEJS_uLightColor\" + i + \" * specular * pow(max(dot(reflect(normalize(-viewLightVec), -viewNormalVec), normalize(-SCENEJS_vViewVertex.xyz)), 0.0), shine) * attenuation;\");\n                                }\n                            }\n\n                            if (light.mode == \"spot\") {\n\n                                add(\"viewLightDir = SCENEJS_uLightDir\" + i + \";\");\n\n                                if (light.space == \"world\") {\n                                    add(\"viewLightVec = SCENEJS_uLightPos\" + i + \" - SCENEJS_vWorldVertex.xyz;\"); // Vector from World coordinate to light pos\n                                    add(\"viewLightVec = vec3(SCENEJS_uVMatrix * vec4(viewLightVec, 0.0)).xyz;\");\n                                    add(\"viewLightDir = vec3(SCENEJS_uVMatrix * vec4(viewLightDir, 0.0)).xyz;\");\n                                } else {\n                                    add(\"viewLightVec = SCENEJS_uLightPos\" + i + \".xyz - SCENEJS_vViewVertex.xyz;\"); // Vector from View coordinate to light pos\n                                }\n\n                                add(\"dotN = max(dot(viewNormalVec, normalize(viewLightVec)), 0.0);\");\n                                add(\"spotDirRatio = 1.0 - max(dot(normalize(viewLightDir), normalize(-viewLightVec)), 0.0);\");\n                                add(\"lightDist = length( SCENEJS_uLightPos\" + i + \" - SCENEJS_vWorldVertex.xyz);\");\n                                add(\"attenuation = 1.0 - (\" +\n                                    \"  SCENEJS_uLightAttenuation\" + i + \".x + \" +\n                                    \"  SCENEJS_uLightAttenuation\" + i + \".y * lightDist + \" +\n                                    \"  SCENEJS_uLightAttenuation\" + i + \".z * lightDist * lightDist);\");\n\n                                // Attenuations due to spotlight cones\n                                add(\"attenuation *= 1.0 - clamp((spotDirRatio - SCENEJS_uInnerCone\" + i + \") / max(SCENEJS_uOuterCone\" + i + \" - SCENEJS_uInnerCone\" + i + \", 0.0001), 0.0, 1.0);\");\n                                if (light.diffuse) {\n                                    add(\"      lightValue += dotN * SCENEJS_uLightColor\" + i + \" * attenuation;\");\n                                }\n                                if (light.specular) {\n                                    add(\"    specularValue += specularColor * SCENEJS_uLightColor\" + i + \" * specular * pow(max(dot(reflect(normalize(-viewLightVec), -viewNormalVec), normalize(-SCENEJS_vViewVertex.xyz)), 0.0), shine) * attenuation;\");\n                                }\n                            }\n\n                            if (light.mode == \"dir\") {\n                                if (light.space == \"world\") {\n                                    add(\"viewLightVec = normalize(SCENEJS_uLightDir\" + i + \");\");\n                                    add(\"viewLightVec = vec3(SCENEJS_uVMatrix * vec4(viewLightVec, 0.0)).xyz;\");\n\n                                } else {\n                                    add(\"viewLightVec = normalize(SCENEJS_uLightDir\" + i + \");\");\n                                }\n                                add(\"viewLightVec = -viewLightVec;\");\n                                add(\"dotN = max(dot(viewNormalVec, normalize(viewLightVec)), 0.0);\");\n                                if (light.diffuse) {\n                                    add(\"lightValue += dotN * SCENEJS_uLightColor\" + i + \";\");\n                                }\n                                if (light.specular) {\n                                    add(\"specularValue += specularColor * SCENEJS_uLightColor\" + i + \" * specular * pow(max(dot(reflect(normalize(-viewLightVec), -viewNormalVec), normalize(-SCENEJS_vViewVertex.xyz)), 0.0), shine);\");\n                                }\n                            }\n                        }\n\n                        //--------------------------------------------------------------------------------\n                        // PHONG FRESNELS\n                        //--------------------------------------------------------------------------------\n\n                        if (diffuseFresnel) {\n                            add(\"float diffuseFresnel = fresnel(viewEyeVec, viewNormalVec, SCENEJS_uDiffuseFresnelEdgeColor.a, SCENEJS_uDiffuseFresnelCenterColor.a, SCENEJS_uDiffuseFresnelPower);\");\n                            if (diffuseFresnel.blendMode & TEXTURE_FLAGS.multiply) {\n                                add(\"color.rgb *= mix(SCENEJS_uDiffuseFresnelEdgeColor.rgb, SCENEJS_uDiffuseFresnelCenterColor.rgb, diffuseFresnel);\");\n                            } else if (diffuseFresnel.blendMode & TEXTURE_FLAGS.add) {\n                                add(\"color.rgb += mix(SCENEJS_uDiffuseFresnelEdgeColor.rgb, SCENEJS_uDiffuseFresnelCenterColor.rgb, diffuseFresnel);\");\n                            }\n                        }\n\n                        if (specularFresnel) {\n                            add(\"float specFresnel = fresnel(viewEyeVec, viewNormalVec, SCENEJS_uSpecularFresnelEdgeColor.a, SCENEJS_uSpecularFresnelCenterColor.a, SCENEJS_uSpecularFresnelPower);\");\n                            if (specularFresnel.blendMode & TEXTURE_FLAGS.multiply) {\n                                add(\"specularValue.rgb *= mix(SCENEJS_uSpecularFresnelEdgeColor.rgb, SCENEJS_uSpecularFresnelCenterColor.rgb, specFresnel);\");\n                            } else if (specularFresnel.blendMode & TEXTURE_FLAGS.add) {\n                                add(\"specularValue.rgb += mix(SCENEJS_uSpecularFresnelEdgeColor.rgb, SCENEJS_uSpecularFresnelCenterColor.rgb, specFresnel);\");\n                            }\n                        }\n\n                        if (alphaFresnel) {\n                            // We could convert to alpha and do in alpha space, or do in transparency space\n                            // Transparency Calculation for \"multiply\": t = 1 + mix(afe,afc,af) - t*mix(afe,afc,af)\n                            // Transparency Calculation for \"add\": t = t - mix(afe,afc,af)\n                            add(\"float alphaFresnel = fresnel(viewEyeVec, viewNormalVec, SCENEJS_uAlphaFresnelEdgeColor.a, SCENEJS_uAlphaFresnelCenterColor.a, SCENEJS_uAlphaFresnelPower);\");\n                            add(\"alpha = 1.0 - transparency;\");\n                            if (alphaFresnel.blendMode & TEXTURE_FLAGS.multiply) {\n                                add(\"alpha *= mix(SCENEJS_uAlphaFresnelEdgeColor.r, SCENEJS_uAlphaFresnelCenterColor.r, alphaFresnel);\");\n                            } else if (alphaFresnel.blendMode & TEXTURE_FLAGS.add) {\n                                add(\"alpha += mix(SCENEJS_uAlphaFresnelEdgeColor.r, SCENEJS_uAlphaFresnelCenterColor.r, alphaFresnel);\");\n                            }\n                            add(\"transparency = 1.0 -alpha;\");\n                        }\n\n                        if (transparencyFresnel) {\n                            add(\"float transparencyFresnel = fresnel(viewEyeVec, viewNormalVec, SCENEJS_uTransparencyFresnelEdgeColor.a, SCENEJS_uTransparencyFresnelCenterColor.a, SCENEJS_uTransparencyFresnelPower);\");\n                            if (transparencyFresnel.blendMode & TEXTURE_FLAGS.multiply) {\n                                add(\"transparency *= mix(SCENEJS_uTransparencyFresnelEdgeColor.r, SCENEJS_uTransparencyFresnelCenterColor.r, transparencyFresnel);\");\n                            } else if (transparencyFresnel.blendMode & TEXTURE_FLAGS.add) {\n                                add(\"transparency += mix(SCENEJS_uTransparencyFresnelEdgeColor.r, SCENEJS_uTransparencyFresnelCenterColor.r, transparencyFresnel);\");\n                            }\n                        }\n\n                        if (emitFresnel) {\n                            add(\"float emitFresnel = fresnel(viewEyeVec, viewNormalVec, SCENEJS_uEmitFresnelEdgeColor.a, SCENEJS_uEmitFresnelCenterColor.a, SCENEJS_uEmitFresnelPower);\");\n                            if (emitFresnel.blendMode & TEXTURE_FLAGS.multiply) {\n                                add(\"emitColor.rgb *= mix(SCENEJS_uEmitFresnelEdgeColor.rgb, SCENEJS_uEmitFresnelCenterColor.rgb, emitFresnel);\");\n                            } else if (emitFresnel.blendMode & TEXTURE_FLAGS.add) {\n                                add(\"emitColor.rgb += mix(SCENEJS_uEmitFresnelEdgeColor.rgb, SCENEJS_uEmitFresnelCenterColor.rgb, emitFresnel);\");\n                            }\n                        }\n\n                        //--------------------------------------------------------------------------------\n                        // COMBINE PHONG TERMS\n                        //--------------------------------------------------------------------------------\n\n                        add(\"alpha = 1.0 - transparency;\");\n                        add(\"fragColor = vec4((specularValue.rgb + color.rgb * (lightValue.rgb + ambientColor.rgb)) + (emit * emitColor.rgb), alpha);\");\n\n                    } //phongMaterial\n\n\n                    if (metallicMaterial) {\n\n                        //--------------------------------------------------------------------------------------------------\n                        // PBR lighting\n                        //--------------------------------------------------------------------------------------------------\n\n                        // PREPARE INPUTS FOR SHADER FUNCTIONS\n\n                        add(\"IncidentLight  light;\");\n                        add(\"Material       material;\");\n                        add(\"Geometry       geometry;\");\n                        add(\"ReflectedLight reflectedLight = ReflectedLight(vec3(0.0,0.0,0.0), vec3(0.0,0.0,0.0));\");\n\n                        add(\"float dielectricSpecular   = 0.16 * specularF0 * specularF0;\");\n                        add(\"material.diffuseColor      = color * (1.0 - dielectricSpecular) * (1.0 - metallic);\");\n                        add(\"float realRoughness = sqrt(roughness);\"); // Convert from perceptual roughness\n                        add(\"material.specularRoughness = clamp(realRoughness, 0.04, 1.0);\");\n                        add(\"material.specularColor     = mix(vec3(dielectricSpecular), color, metallic);\");\n\n                        // GEOMETRY\n\n                        add(\"geometry.position = SCENEJS_vViewVertex.xyz;\");\n\n                        if (phongLightMapping) {\n                            add(\"geometry.worldNormal = normalize(SCENEJS_vWorldNormal);\");\n                        }\n\n                        add(\"geometry.viewNormal = viewNormalVec;\");\n                        add(\"geometry.viewEyeDir = -normalize(SCENEJS_vViewVertex.xyz);\");\n\n                        // REFLECTION MAPPING\n\n                        if (pbrReflectionMapping) {\n                            add(\"computePBRReflectionMapping(SCENEJS_uPBRReflectionMapSampler, SCENEJS_uPBRReflectionMapIntensity, SCENEJS_uVMatrix, geometry, material, reflectedLight, SCENEJS_uPBRReflectionMapMipLevels);\");\n                        }\n\n                        // LIGHT MAPPING\n\n                        if (pbrLightMapping) {\n\n                            var lightmap = states.lightmaps.activeLightmap;\n                            if (lightmap.space === \"world\") {\n                                add(\"computePBRLightMapping(SCENEJS_uPBRLightMapSampler, SCENEJS_uPBRLightMapIntensity, geometry.worldNormal, material, reflectedLight);\");\n                            } else {\n                                add(\"computePBRLightMapping(SCENEJS_uPBRLightMapSampler, SCENEJS_uPBRLightMapIntensity, geometry.viewNormal, material, reflectedLight);\");\n                            }\n                        }\n\n                        //--------------------------------------------------------------------------------\n                        // CALL PBR SHADING FUNCTION FOR EACH LIGHT\n                        //--------------------------------------------------------------------------------\n\n                        add(\"vec3 lightValue = vec3(0.0, 0.0, 0.0);\");\n                        add(\"vec3 specularValue  = vec3(0.0, 0.0, 0.0);\");\n                        add(\"vec3 viewLightVec;\");\n                        add(\"float dotN;\");\n                        add(\"float spotDirRatio;\");\n                        add(\"float lightDist;\");\n\n                        var light;\n\n                        for (var i = 0, len = states.lights.length; i < len; i++) {\n\n                            light = states.lights[i];\n\n                            if (light.mode == \"ambient\") {\n                                continue;\n                            }\n\n                            if (light.mode == \"dir\") {\n                                if (light.space == \"world\") {\n                                    add(\"viewLightVec = normalize(SCENEJS_uLightDir\" + i + \");\");\n                                    add(\"viewLightVec = vec3(SCENEJS_uVMatrix * vec4(viewLightVec, 0.0)).xyz;\"); // Transform to View space\n                                } else {\n                                    add(\"viewLightVec = normalize(SCENEJS_uLightDir\" + i + \");\");\n                                }\n                                add(\"viewLightVec = -viewLightVec;\");\n                                add(\"light.direction = viewLightVec;\");\n                                add(\"light.color = SCENEJS_uLightColor\" + i + \";\");\n\n                                add(\"computePBRLighting(light, geometry, material, reflectedLight);\");\n                            }\n\n                            if (light.mode == \"point\") {\n                                if (light.space == \"world\") {\n                                    add(\"viewLightVec = SCENEJS_uLightPos\" + i + \" - SCENEJS_vWorldVertex.xyz;\");\n                                    add(\"viewLightVec = vec3(SCENEJS_uVMatrix * vec4(viewLightVec, 0.0)).xyz;\"); // Transform to View space\n                                } else {\n                                    add(\"viewLightVec = SCENEJS_uLightPos\" + i + \".xyz - SCENEJS_vViewVertex.xyz;\"); // Vector from View coordinate to light pos\n                                }\n                                add(\"lightDist = length(viewLightVec);\");\n                                add(\"attenuation = 1.0 - (\" +\n                                    \"  SCENEJS_uLightAttenuation\" + i + \".x + \" +\n                                    \"  SCENEJS_uLightAttenuation\" + i + \".y * lightDist + \" +\n                                    \"  SCENEJS_uLightAttenuation\" + i + \".z * lightDist * lightDist);\");\n                                add(\"light.direction = normalize(viewLightVec);\");\n                                add(\"light.color = SCENEJS_uLightColor\" + i + \" * attenuation;\");\n\n                                add(\"computePBRLighting(light, geometry, material, reflectedLight);\");\n                            }\n\n                            if (light.mode == \"spot\") {\n                                add(\"viewLightDir = SCENEJS_uLightDir\" + i + \";\");\n                                if (light.space == \"world\") {\n                                    add(\"viewLightVec = SCENEJS_uLightPos\" + i + \" - SCENEJS_vWorldVertex.xyz;\");\n                                    add(\"viewLightVec = vec3(SCENEJS_uVMatrix * vec4(viewLightVec, 0.0)).xyz;\"); // Transform to View space\n                                    add(\"viewLightDir = vec3(SCENEJS_uVMatrix * vec4(viewLightDir, 0.0)).xyz;\");\n                                } else {\n                                    add(\"viewLightVec = SCENEJS_uLightPos\" + i + \".xyz - SCENEJS_vViewVertex.xyz;\"); // Vector from View coordinate to light pos\n                                }\n                                add(\"spotDirRatio = 1.0 - max(dot(normalize(viewLightDir), normalize(-viewLightVec)), 0.0);\");\n                                add(\"lightDist = length(SCENEJS_uLightPos\" + i + \" - SCENEJS_vWorldVertex.xyz);\");\n                                add(\"attenuation = 1.0 - (\" +\n                                    \"  SCENEJS_uLightAttenuation\" + i + \".x + \" +\n                                    \"  SCENEJS_uLightAttenuation\" + i + \".y * lightDist + \" +\n                                    \"  SCENEJS_uLightAttenuation\" + i + \".z * lightDist * lightDist);\");\n                                add(\"attenuation *= 1.0 - clamp((spotDirRatio - SCENEJS_uInnerCone\" + i + \") / max(SCENEJS_uOuterCone\" + i + \" - SCENEJS_uInnerCone\" + i + \", 0.0001), 0.0, 1.0);\");\n                                add(\"light.direction = normalize(viewLightVec);\");\n                                add(\"light.color = SCENEJS_uLightColor\" + i + \" * attenuation;\");\n\n                                add(\"computePBRLighting(light, geometry, material, reflectedLight);\");\n                            }\n                        }\n\n                        //--------------------------------------------------------------------------------\n                        // PBR FRESNELS\n                        //--------------------------------------------------------------------------------\n\n                        if (diffuseFresnel) {\n                            add(\"float diffuseFresnel = fresnel(viewEyeVec, viewNormalVec, SCENEJS_uDiffuseFresnelEdgeColor.a, SCENEJS_uDiffuseFresnelCenterColor.a, SCENEJS_uDiffuseFresnelPower);\");\n                            if (diffuseFresnel.blendMode & TEXTURE_FLAGS.multiply) {\n                                add(\"reflectedLight.diffuse *= mix(SCENEJS_uDiffuseFresnelEdgeColor.rgb, SCENEJS_uDiffuseFresnelCenterColor.rgb, diffuseFresnel);\");\n                            } else if (diffuseFresnel.blendMode & TEXTURE_FLAGS.add) {\n                                add(\"reflectedLight.diffuse += mix(SCENEJS_uDiffuseFresnelEdgeColor.rgb, SCENEJS_uDiffuseFresnelCenterColor.rgb, diffuseFresnel);\");\n                            }\n                        }\n\n                        if (specularFresnel) {\n                            add(\"float specFresnel = fresnel(viewEyeVec, viewNormalVec, SCENEJS_uSpecularFresnelEdgeColor.a, SCENEJS_uSpecularFresnelCenterColor.a, SCENEJS_uSpecularFresnelPower);\");\n                            if (specularFresnel.blendMode & TEXTURE_FLAGS.multiply) {\n                                add(\"reflectedLight.specular *= mix(SCENEJS_uSpecularFresnelEdgeColor.rgb, SCENEJS_uSpecularFresnelCenterColor.rgb, specFresnel);\");\n                            } else if (specularFresnel.blendMode & TEXTURE_FLAGS.add) {\n                                add(\"reflectedLight.specular += mix(SCENEJS_uSpecularFresnelEdgeColor.rgb, SCENEJS_uSpecularFresnelCenterColor.rgb, specFresnel);\");\n                            }\n                        }\n\n                        if (alphaFresnel) {\n                            // We could convert to alpha and do in alpha space, or do in transparency space\n                            // Transparency Calculation for \"multiply\": t = 1 + mix(afe,afc,af) - t*mix(afe,afc,af)\n                            // Transparency Calculation for \"add\": t = t - mix(afe,afc,af)\n                            add(\"float alphaFresnel = fresnel(viewEyeVec, viewNormalVec, SCENEJS_uAlphaFresnelEdgeColor.a, SCENEJS_uAlphaFresnelCenterColor.a, SCENEJS_uAlphaFresnelPower);\");\n                            add(\"alpha = 1.0 - transparency;\");\n                            if (alphaFresnel.blendMode & TEXTURE_FLAGS.multiply) {\n                                add(\"alpha *= mix(SCENEJS_uAlphaFresnelEdgeColor.r, SCENEJS_uAlphaFresnelCenterColor.r, alphaFresnel);\");\n                            } else if (alphaFresnel.blendMode & TEXTURE_FLAGS.add) {\n                                add(\"alpha += mix(SCENEJS_uAlphaFresnelEdgeColor.r, SCENEJS_uAlphaFresnelCenterColor.r, alphaFresnel);\");\n                            }\n                            add(\"transparency = 1.0 - alpha;\");\n                        }\n\n                        if (transparencyFresnel) {\n                            add(\"float transparencyFresnel = fresnel(viewEyeVec, viewNormalVec, SCENEJS_uTransparencyFresnelEdgeColor.a, SCENEJS_uTransparencyFresnelCenterColor.a, SCENEJS_uTransparencyFresnelPower);\");\n                            if (transparencyFresnel.blendMode & TEXTURE_FLAGS.multiply) {\n                                add(\"transparency *= mix(SCENEJS_uTransparencyFresnelEdgeColor.r, SCENEJS_uTransparencyFresnelCenterColor.r, transparencyFresnel);\");\n                            } else if (transparencyFresnel.blendMode & TEXTURE_FLAGS.add) {\n                                add(\"transparency += mix(SCENEJS_uTransparencyFresnelEdgeColor.r, SCENEJS_uTransparencyFresnelCenterColor.r, transparencyFresnel);\");\n                            }\n                        }\n\n                        if (emitFresnel) {\n                            add(\"float emitFresnel = fresnel(viewEyeVec, viewNormalVec, SCENEJS_uEmitFresnelEdgeColor.a, SCENEJS_uEmitFresnelCenterColor.a, SCENEJS_uEmitFresnelPower);\");\n                            if (emitFresnel.blendMode & TEXTURE_FLAGS.multiply) {\n                                add(\"emitColor.rgb *= mix(SCENEJS_uEmitFresnelEdgeColor.rgb, SCENEJS_uEmitFresnelCenterColor.rgb, emitFresnel);\");\n                            } else if (emitFresnel.blendMode & TEXTURE_FLAGS.add) {\n                                add(\"emitColor.rgb += mix(SCENEJS_uEmitFresnelEdgeColor.rgb, SCENEJS_uEmitFresnelCenterColor.rgb, emitFresnel);\");\n                            }\n                        }\n\n                        //--------------------------------------------------------------------------------\n                        // COMBINE PBR TERMS\n                        //--------------------------------------------------------------------------------\n\n                        add(\"vec3 outgoingLight = (occlusion * reflectedLight.diffuse) + (occlusion * reflectedLight.specular) + (emit * emitColor);\");\n                        add(\"alpha = 1.0 - transparency;\");\n                        add(\"fragColor = vec4(outgoingLight, alpha);\");\n\n                    } // metallicMaterial\n\n                } else { // No normals\n\n                    add(\"alpha = 1.0 - transparency;\");\n                    add(\"fragColor = vec4((color.rgb + (emit * color.rgb)) *  (vec3(1.0, 1.0, 1.0) + ambientColor.rgb), alpha);\");\n                }\n\n                if (opacityMods) {\n                    var omi = 0;\n                    var omods = states.properties.opacityModifiers;\n                    var len = omods.length;\n                    var hasOpacityFresnel = false;\n                    var hasOpacityRange = false;\n                    add(\"float opacity;\");\n                    for (omi = 0; omi < len; omi++) {\n                        opacityMod = omods[omi];\n                        if (opacityMod.value.isScalarFresnel) {\n                            if (!hasOpacityFresnel) {\n                                add(\"float opacityModFresnel;\");\n                                hasOpacityFresnel = true;\n                            }\n                            add(\"opacityModFresnel = fresnel(viewEyeVec, viewNormalVec, SCENEJS_uOpacityModFresnelEdge\" + omi + \".a, \" + \"SCENEJS_uOpacityModFresnelCenter\" + omi + \".a, SCENEJS_uOpacityModFresnelPower\" + omi + \");\");\n                            add(\"opacity = mix(SCENEJS_uOpacityModFresnelEdge\" + omi + \".r, SCENEJS_uOpacityModFresnelCenter\" + omi + \".r, opacityModFresnel);\");\n                        } else {\n                            add(\"opacity =  SCENEJS_uOpacityModification\" + omi + \";\");\n                        }\n                        if (opacityMod.range) {\n                            if (!hasOpacityRange) {\n                                add(\"float opacityModFactor;\");\n                                hasOpacityRange = true;\n                            }\n                            add(\"opacityModFactor = 1.0 - clamp((length(SCENEJS_vWorldVertex.xyz - SCENEJS_uOpacityModCenter\" + omi + \") - SCENEJS_uOpacityModRadius\" + omi + \".x) / SCENEJS_uOpacityModRadius\" + omi + \".y, 0.0, 1.0);\");\n                            add(\"opacity = mix(1.0, opacity, opacityModFactor);\");\n                        }\n                        add(\"fragColor.a *= opacity;\");\n                    }\n                }\n\n                if (clipping && states.clips.clipFade) {\n                    add(\"fragColor.a *= 1.0 - max(distAlpha, 0.0);\");\n                }\n\n                //--------------------------------------------------------------------------------\n                // Effects post-applied to shaded fragments\n                //--------------------------------------------------------------------------------\n\n                if (regionInteraction) {\n\n                    // Region map highlighting\n\n                    add(\"vec3 regionColor = texture2D(SCENEJS_uRegionMapSampler, vec2(SCENEJS_vRegionMapUV.s, SCENEJS_vRegionMapUV.t)).rgb;\");\n                    add(\"float tolerance = 0.01;\");\n                    add(\"vec3 colorDelta = abs(SCENEJS_uRegionMapRegionColor - regionColor);\");\n                    if (states.regionMap.mode === \"highlight\" || states.regionMap.mode === \"hide\") {\n                        add(\"if (max(colorDelta.x, max(colorDelta.y, colorDelta.z)) < tolerance) {\");\n                        if (states.regionMap.mode === \"highlight\") {\n                            add(\"  fragColor.rgb *= SCENEJS_uRegionMapHighlightFactor;\");\n                        } else {\n                            // mode = \"hide\"\n                            add(\"  fragColor.a = SCENEJS_uRegionMapHideAlpha;\");\n                        }\n                        add(\"}\");\n                    } else {\n                        // mode = \"isolate\"\n                        add(\"if (max(colorDelta.x, max(colorDelta.y, colorDelta.z)) > tolerance) {\");\n                        add(\"  fragColor.a = SCENEJS_uRegionMapHideAlpha;\");\n                        add(\"}\");\n                    }\n                }\n\n                if (alphaTest) {\n                    add(\"if (SCENEJS_uDiscardOpaque && fragColor.a >= 1.0) { discard; }\");\n                    add(\"if (!SCENEJS_uDiscardOpaque && fragColor.a < 1.0) { discard; }\");\n                }\n\n                if (stochasticAlpha) {\n                    add(\"{\");\n                    add(\"    float maxDeriv = max(length(dFdx(SceneJS_vModelVertex.xy)), length(dFdy(SceneJS_vModelVertex.xy)));\");\n                    add(\"    float pixScale = 1.0 / maxDeriv;\");\n                    add(\"    vec2 pixScales = vec2( exp2(floor(log2(pixScale))), exp2(ceil(log2(pixScale))) );\");\n                    add(\"    vec2 alpha = vec2(hash3D(floor(pixScales.x * SceneJS_vModelVertex.xyz)), hash3D(floor(pixScales.y * SceneJS_vModelVertex.xyz)));\");\n                    add(\"    float lerpFactor = fract(log2(pixScale));\");\n                    add(\"    float x = (1.0 - lerpFactor) * alpha.x + lerpFactor * alpha.y;\");\n                    add(\"    float a = min(lerpFactor, 1.0 - lerpFactor);\");\n                    add(\"    vec3 cases = vec3(\");\n                    add(\"        x * x / (2.0 * a * (1.0 - a)), \");\n                    add(\"        (x - 0.5 * a)/(1.0 - a), \");\n                    add(\"        1.0 - ((1.0 - x) * (1.0 - x) / (2.0 * a * (1.0 - a)))\");\n                    add(\"    );\");\n                    add(\"    float aThresh = (x < (1.0 - a)) ? ((x < a) ? cases.x : cases.y) : cases.z;\");\n                    add(\"    aThresh = clamp(aThresh, 1.0e-6, 1.0);\");\n                    add(\"    if (fragColor.a < aThresh) {\");\n                    add(\"        discard;\");\n                    add(\"    } else {\");\n                    add(\"        fragColor.a = 1.0;\");\n                    add(\"    }\");\n                    add(\"}\");\n                }\n\n                // Color Modification Sequence\n                if (colorModifiers.length > 0) {\n                    add(\"float colorModFresnel;\");\n                    add(\"float saturation;\");\n                    add(\"float contrast;\");\n                    add(\"float brightness;\");\n                    add(\"float colorModFactor;\");\n                    add(\"vec3 tintColor;\");\n\n                    var calculatedLuma = false;\n                    var cmi = 0, len = colorModifiers.length;\n                    var colorMod;\n                    for (cmi = 0; cmi < len; cmi++) {\n\n                        colorMod = colorModifiers[cmi];\n\n                        // attenuate color modification by range, if applicable\n                        if (colorMod.range) {\n                            add(\"colorModFactor = 1.0 - clamp((length(SCENEJS_vWorldVertex.xyz - SCENEJS_uColorModCenter\" + cmi + \") - SCENEJS_uColorModRadius\" + cmi + \".x) / SCENEJS_uColorModRadius\" + cmi + \".y, 0.0, 1.0);\");\n                        }\n\n                        // apply color modifications\n\n                        if (colorMod.applyTo === COLOR_MOD_FLAGS.SATURATION) {\n\n                            //------------------------------------------------------------------------------------------\n                            // Saturation\n                            //------------------------------------------------------------------------------------------\n\n                            if (!calculatedLuma) {\n                                add(\"float L = dot(vec3(0.3, 0.59, 0.11), fragColor.rgb);\");\n                                calculatedLuma = true;\n                            }\n\n                            if (colorMod.value.isScalarFresnel) {\n                                add(\"colorModFresnel = fresnel(viewEyeVec, viewNormalVec, SCENEJS_uColorModFresnelEdge\" + cmi + \".a, \" + \"SCENEJS_uColorModFresnelCenter\" + cmi + \".a, SCENEJS_uColorModFresnelPower\" + cmi + \");\");\n                                add(\"saturation = mix(SCENEJS_uColorModFresnelEdge\" + cmi + \".r, SCENEJS_uColorModFresnelCenter\" + cmi + \".r, colorModFresnel);\");\n                            } else {\n                                add(\"saturation = SCENEJS_uColorModification\" + cmi + \";\");\n                            }\n\n                            if (colorMod.range) {\n                                add(\"saturation *= colorModFactor;\");\n                            }\n                            add(\"fragColor.rgb -= saturation * (L - fragColor.rgb);\");\n\n                        } else if (colorMod.applyTo === COLOR_MOD_FLAGS.CONTRAST) {\n\n                            //------------------------------------------------------------------------------------------\n                            // Contrast\n                            //------------------------------------------------------------------------------------------\n\n                            if (colorMod.value.isScalarFresnel) {\n                                add(\"colorModFresnel = fresnel(viewEyeVec, viewNormalVec, SCENEJS_uColorModFresnelEdge\" + cmi + \".a, \" + \"SCENEJS_uColorModFresnelCenter\" + cmi + \".a, SCENEJS_uColorModFresnelPower\" + cmi + \");\");\n                                add(\"contrast = mix(SCENEJS_uColorModFresnelEdge\" + cmi + \".r, SCENEJS_uColorModFresnelCenter\" + cmi + \".r, colorModFresnel);\");\n                            } else {\n                                add(\"contrast = SCENEJS_uColorModification\" + cmi + \";\");\n                            }\n\n                            if (colorMod.range) {\n                                add(\"contrast = mix(1.0, contrast, colorModFactor);\");\n                            }\n                            add(\"fragColor.rgb = (fragColor.rgb - 0.5) * contrast + 0.5;\");\n\n                        } else if (colorMod.applyTo === COLOR_MOD_FLAGS.BRIGHTNESS) {\n\n                            //------------------------------------------------------------------------------------------\n                            // Brightness\n                            //------------------------------------------------------------------------------------------\n\n                            if (colorMod.value.isScalarFresnel) {\n                                add(\"colorModFresnel = fresnel(viewEyeVec, viewNormalVec, SCENEJS_uColorModFresnelEdge\" + cmi + \".a, \" + \"SCENEJS_uColorModFresnelCenter\" + cmi + \".a, SCENEJS_uColorModFresnelPower\" + cmi + \");\");\n                                add(\"brightness = mix(SCENEJS_uColorModFresnelEdge\" + cmi + \".r, SCENEJS_uColorModFresnelCenter\" + cmi + \".r, colorModFresnel);\");\n                            } else {\n                                add(\"brightness = SCENEJS_uColorModification\" + cmi + \";\");\n                            }\n                            if (colorMod.range) {\n                                add(\"brightness *= colorModFactor;\");\n                            }\n                            add(\"fragColor.rgb += brightness;\");\n\n                        } else if (colorMod.applyTo === COLOR_MOD_FLAGS.TINT) {\n\n                            //------------------------------------------------------------------------------------------\n                            // Tint\n                            //------------------------------------------------------------------------------------------\n\n                            if (colorMod.value.isColorFresnel) {\n                                add(\"colorModFresnel = fresnel(viewEyeVec, viewNormalVec, SCENEJS_uColorModFresnelEdge\" + cmi + \".a, \" + \"SCENEJS_uColorModFresnelCenter\" + cmi + \".a, SCENEJS_uColorModFresnelPower\" + cmi + \");\");\n                                add(\"tintColor = mix(SCENEJS_uColorModFresnelEdge\" + cmi + \".rgb, SCENEJS_uColorModFresnelCenter\" + cmi + \".rgb, colorModFresnel);\");\n                                if (colorMod.range) {\n                                    add(\"tintColor = mix(vec3(1.0), tintColor, colorModFactor);\");\n                                }\n                            } else {\n                                add(\"tintColor = SCENEJS_uColorModification\" + cmi + \";\");\n                                if (colorMod.range) {\n                                    add(\"tintColor = mix(vec3(1.0), tintColor, colorModFactor);\");\n                                }\n                            }\n                            add(\"fragColor.rgb *= tintColor;\");\n                        }\n                    }\n                }\n\n                if (fogEnabled) {\n                    add(\"vec3 fogColor = SCENEJS_uFogColor.rgb;\");\n                    add(\"float fogDensity = SCENEJS_uFogColor.a;\");\n                    add(\"float fogStart = SCENEJS_uFogParams.x;\");\n                    add(\"float fogEnd = SCENEJS_uFogParams.y;\");\n                    add(\"float fogMin = SCENEJS_uFogParams.z;\");\n                    add(\"float fogMax = SCENEJS_uFogParams.w;\");\n                    if (fogMode === DISPLAY_FLAGS.FOG_LINEAR) {\n                        add(\"float fog = (length(SCENEJS_vViewVertex.xyz) - fogStart) / (fogEnd - fogStart);\");\n                    } else {\n                        add(\"float fogAttenuation = fogDensity * max(length(SCENEJS_vViewVertex.xyz) - fogStart, 0.0);\");\n                        if (fogMode === DISPLAY_FLAGS.FOG_EXP2) {\n                            add(\"fogAttenuation = fogAttenuation * fogAttenuation;\");\n                        }\n                        add(\"float fog = 1.0 - exp(-fogAttenuation);\");\n\n                    }\n                    add(\"fog = clamp(fog, fogMin, fogMax);\");\n                    add(\"fragColor.rgb = mix(fragColor.rgb, fogColor, fog);\");\n                }\n\n                if (fragmentFresnel) {\n                    add(\"float fragmentFresnel = fresnel(viewEyeVec, viewNormalVec, SCENEJS_uFragmentFresnelEdgeColor.a, SCENEJS_uFragmentFresnelCenterColor.a, SCENEJS_uFragmentFresnelPower);\");\n\n                    if (fragmentFresnel.blendMode & TEXTURE_FLAGS.multiply) {\n                        add(\"fragColor.rgb *= mix(SCENEJS_uFragmentFresnelEdgeColor.rgb, SCENEJS_uFragmentFresnelCenterColor.rgb, fragmentFresnel);\");\n                    } else if (fragmentFresnel.blendMode & TEXTURE_FLAGS.add) {\n                        add(\"fragColor.rgb += mix(SCENEJS_uFragmentFresnelEdgeColor.rgb, SCENEJS_uFragmentFresnelCenterColor.rgb, fragmentFresnel);\");\n                    }\n                }\n\n                // Ensure compositing is done properly for pre-multiplied alpha\n                if (gammaOutput) {\n                    src.push(\"fragColor = linearToGamma(fragColor, 2.2);\");\n                }\n\n                if (!stochasticAlpha) {\n                    add(\"fragColor.rgb *= fragColor.a;\");\n                }\n\n                add(\"fragColor = clamp(fragColor, 0.0, 1.0);\");\n                add(\"fragColor.a = max(max(fragColor.r, fragColor.g), max(fragColor.b, fragColor.a));\");\n\n                if (fragmentShaderFooter) {\n                    add(fragmentShaderFooter);\n                } else {\n                    add(\"if (SCENEJS_uOutputFormat == 0.0) {\");\n                    add(\"    gl_FragColor = fragColor;\");\n                    add(\"} else if (SCENEJS_uOutputFormat == 1.0) {\");\n                    add(\"    vec2 uv = gl_FragCoord.xy / SCENEJS_uCanvasRes;\")\n                    add(\"    float fragZ = gl_FragCoord.z - texture2D(SCENEJS_uDepthBuffer, uv).r;\")\n                    add(\"    float d = 1.0 - fragZ * 0.99;\");\n                    add(\"    float d4 = d * d * d * d;\");\n                    add(\"    float d16 = d4 * d4 * d4 * d4;\");\n                    add(\"    float a2 = fragColor.a * fragColor.a;\");\n                    add(\"    float a4 = a2 * a2;\");\n                    add(\"    float depthWeight = 256.0 * d4 * a2 + 4096.0 * d16 * d16 * a4;\");\n                    add(\"    float w = clamp(depthWeight, 0.0001, 1e4);\");\n                    add(\"    vec3 ycocg = RGB_YCOCG * (fragColor.rgb * w);\")\n                    add(\"    bool checkerboard = mod(gl_FragCoord.x, 2.0) == mod(gl_FragCoord.y, 2.0);\")\n                    add(\"    gl_FragColor = vec4(ycocg.r, checkerboard ? ycocg.g : ycocg.b, fragColor.a * w, fragColor.a);\");\n                    add(\"}\");\n                }\n\n                add(\"}\");\n\n                return end();\n            }\n\n            function vertexXRay() {\n                begin();\n                add(\"uniform mat4 SCENEJS_uMMatrix;\");\n                if (FRAG_HIGHP_SUPPORTED) {\n                    add(\"uniform mat4 SCENEJS_uVMatrix;\");\n                    add(\"uniform vec3 SCENEJS_uWorldEye;\");\n                } else {\n                    add(\"uniform mediump mat4 SCENEJS_uVMatrix;\");\n                    add(\"uniform mediump vec3 SCENEJS_uWorldEye;\");\n                }\n                add(\"uniform mat4 SCENEJS_uPMatrix;\");\n                add(\"attribute vec4 SCENEJS_aVertex;\");\n                if (points) {\n                    add(\"uniform float SCENEJS_uPointSize;\");\n                    if (scaleRotationPoints) {\n                        add(\"attribute vec2 SCENEJS_aPointScaleRotation;\");\n                    }\n                }\n                if (quantizedPositions) {\n                    add(\"uniform mat4 SCENEJS_uDecodePositionMatrix;\");\n                }\n\n                add(\"varying vec4 SCENEJS_vViewVertex;\");\n\n                if (normals) {\n                    add(\"attribute vec3 SCENEJS_aNormal;\");\n                    add(\"uniform   mat4 SCENEJS_uMNMatrix;\");\n                    add(\"varying   vec3 SCENEJS_vViewNormal;\");\n                }\n\n                if (clipping) {\n                    add(\"varying vec4 SCENEJS_vWorldVertex;\");\n                }\n                if (stochasticAlpha) {\n                    add(\"varying vec4 SceneJS_vModelVertex;\");\n                }\n\n                if (morphing) {\n                    add(\"uniform float SCENEJS_uMorphFactor;\");\n                    if (states.morphGeometry.targets[0].vertexBuf) {\n                        add(\"attribute vec4 SCENEJS_aMorphVertex;\");\n                    }\n                    if (normals) {\n                        if (states.morphGeometry.targets[0].normalBuf) {\n                            add(\"attribute vec3 SCENEJS_aMorphNormal;\");\n                        }\n                    }\n                    if (quantizedPositions) {\n                        add(\"uniform mat4 SCENEJS_uDecodeMorphPosMatrix;\");\n                    }\n                }\n                if (billboard) {\n                    add(\"void billboard(inout mat4 mat) {\");\n                    add(\"   mat[0].xyz = vec3(1.0, 0.0, 0.0);\");\n                    add(\"   mat[1].xyz = vec3(0.0, 1.0, 0.0);\");\n                    add(\"   mat[2].xyz = vec3(0.0, 0.0, 1.0);\");\n                    add(\"}\");\n                }\n                if (octNormals) {\n                    add(\"vec3 octDecode(vec2 oct) {\");\n                    add(\"    vec3 v = vec3(oct.xy, 1.0 - abs(oct.x) - abs(oct.y));\");\n                    add(\"    if (v.z < 0.0) {\");\n                    add(\"        v.xy = (1.0 - abs(v.yx)) * vec2(v.x >= 0.0 ? 1.0 : -1.0, v.y >= 0.0 ? 1.0 : -1.0);\");\n                    add(\"    }\");\n                    add(\"    return normalize(v);\");\n                    add(\"}\");\n                }\n                add(\"void main(void) {\");\n                if (quantizedPositions) {\n                    add(\"vec4 modelVertex = SCENEJS_uDecodePositionMatrix * SCENEJS_aVertex;\");\n                } else {\n                    add(\"vec4 modelVertex = SCENEJS_aVertex; \");\n                }\n                if (octNormals) {\n                    add(\"vec4 modelNormal = vec4(octDecode(SCENEJS_aNormal.xy), 0.0); \");\n                } else if (normals) {\n                    add(\"vec4 modelNormal = vec4(SCENEJS_aNormal, 0.0); \");\n                }\n                if (morphing) {\n                    if (states.morphGeometry.targets[0].vertexBuf) {\n                        if (quantizedPositions) {\n                            add(\"modelVertex = mix(modelVertex, SCENEJS_uDecodeMorphPosMatrix * SCENEJS_aMorphVertex, SCENEJS_uMorphFactor); \");\n                        } else {\n                            add(\"modelVertex = mix(modelVertex, SCENEJS_aMorphVertex, SCENEJS_uMorphFactor); \");\n                        }\n                    }\n                    if (normals) {\n                        if (states.morphGeometry.targets[0].normalBuf) {\n                            if (octNormals) {\n                                add(\"modelNormal = vec4( mix(modelNormal.xyz, octDecode(SCENEJS_aMorphNormal.xy), SCENEJS_uMorphFactor), 0.0); \");\n                            } else {\n                                add(\"modelNormal = vec4( mix(modelNormal.xyz, SCENEJS_aMorphNormal, SCENEJS_uMorphFactor), 0.0); \");\n                            }\n                        }\n                    }\n                }\n\n                if (stochasticAlpha) {\n                    add(\"SceneJS_vModelVertex = modelVertex;\");\n                }\n\n                add(\"mat4 modelMatrix = SCENEJS_uMMatrix;\");\n                add(\"mat4 viewMatrix = SCENEJS_uVMatrix;\");\n                if (normals) {\n                    add(\"mat4 modelNormalMatrix = SCENEJS_uMNMatrix;\");\n                }\n                add(\"vec4 worldVertex;\");\n                add(\"vec4 viewVertex;\");\n                if (skybox) {\n                    add(\"viewMatrix[3].xyz = vec3(0.0);\");\n                }\n                if (billboard) {\n                    add(\"mat4 modelViewMatrix =  viewMatrix * modelMatrix;\");\n                    add(\"billboard(modelMatrix);\");\n                    add(\"billboard(viewMatrix);\");\n                    add(\"billboard(modelViewMatrix);\");\n                    if (normals) {\n                        add(\"billboard(modelNormalMatrix);\");\n                    }\n                    add(\"worldVertex = modelMatrix * modelVertex;\");\n                    add(\"viewVertex = modelViewMatrix * modelVertex;\");\n                } else {\n                    add(\"worldVertex = modelMatrix * modelVertex;\");\n                    add(\"viewVertex  = viewMatrix * worldVertex; \");\n                }\n\n                add(\"SCENEJS_vViewVertex = viewVertex;\");\n\n                if (normals) {\n                    add(\"vec3 worldNormal = (modelNormalMatrix * modelNormal).xyz; \");\n                    add(\"SCENEJS_vViewNormal = (viewMatrix * vec4(worldNormal, 0.0)).xyz;\");\n                }\n                if (clipping) {\n                    add(\"SCENEJS_vWorldVertex = worldVertex;\");\n                }\n                add(\"gl_Position = SCENEJS_uPMatrix * viewVertex;\");\n                if (points) {\n                    add(\"gl_PointSize = SCENEJS_uPointSize;\");\n                    if (perspectivePoints) {\n                        add(\"gl_PointSize *= 20.0 / length(viewVertex.xyz);\");\n                    }\n                    if (scaleRotationPoints) {\n                        add(\"gl_PointSize *= SCENEJS_aPointScaleRotation.x;\");\n                    }\n                    add(\"gl_PointSize = min(gl_PointSize, \" + maxPointSizeStr + \");\");\n                }\n                add(\"}\");\n                return end();\n            }\n\n            function fragmentXRay() {\n                begin();\n                if (stochasticAlpha) {\n                    add(\"#extension GL_OES_standard_derivatives : enable\");\n                }\n                if (fragmentShaderHeader) {\n                    add(fragmentShaderHeader);\n                }\n\n                add(\"precision \" + SceneJS.WEBGL_INFO.FS_MAX_FLOAT_PRECISION + \" float;\");\n\n                add(\"#define EDGE_ALPHA 0.9\");\n                add(\"#define CENTER_ALPHA 0.0\");\n                add(\"#define EDGE_BIAS 0.0\");\n                add(\"#define CENTER_BIAS 0.6\");\n\n                add(\"uniform sampler2D SCENEJS_uDepthBuffer;\");\n                add(\"uniform vec2 SCENEJS_uCanvasRes;\");\n\n                add(\"varying vec4 SCENEJS_vViewVertex;\");\n\n                if (clipping) {\n                    add(\"varying vec4 SCENEJS_vWorldVertex;\");\n                    if (solid) {\n                        add(\"uniform vec3 SCENEJS_uSolidColor;\");\n                    }\n\n                    for (var i = 0; i < states.clips.clips.length; i++) {\n                        add(\"uniform vec4  SCENEJS_uClipNormalAndDist\" + i + \";\");\n                        if (states.clips.clips[i].fade) {\n                            add(\"uniform float SCENEJS_uClipFadeDistance\" + i + \";\");\n                        }\n                    }\n                }\n                if (stochasticAlpha) {\n                    add(\"varying vec4 SceneJS_vModelVertex;\");\n                }\n                if (normals) {\n                    add(\"uniform vec3 SCENEJS_uXrayColor;\");\n                    add(\"varying vec3 SCENEJS_vViewNormal;\");\n                }\n                if (fogEnabled) {\n                    add(\"uniform vec4   SCENEJS_uFogParams;\"); // x = start, y = end, z = min, w = max\n                    add(\"uniform vec4   SCENEJS_uFogColor;\"); // RGB = color, a = density\n                }\n\n                add(\"uniform float SCENEJS_uOutputFormat;\");\n\n                add(\"#define RGB_YCOCG mat3(0.25, 0.5, -0.25, 0.5, 0.0, 0.5, 0.25, -0.5, -0.25)\")\n\n                if (alphaTest) {\n                    add(\"uniform bool SCENEJS_uDiscardOpaque;\")\n                }\n\n                if (stochasticAlpha) {\n                    add(\"float hash(vec2 v) {\");\n                    add(\"    return fract(1.0e4 * sin(17.0 * v.x + 0.1 * v.y) * (0.1 + abs(sin(13.0 * v.y + v.x))));\");\n                    add(\"}\");\n\n                    add(\"float hash3D(vec3 v) {\");\n                    add(\"    return hash(vec2(hash(v.xy), v.z));\");\n                    add(\"}\");\n                }\n\n                add(\"void main(void) {\");\n                add(\"vec4 fragColor = vec4(1.0);\");\n                if (clipping) {\n                    if (states.clips.clipDiscard) {\n                        add(\"float distOff = 0.0;\");\n                    }\n                    if (states.clips.clipFade) {\n                        add(\"float distAlpha = 0.0;\");\n                    }\n                    for (var i = 0; i < states.clips.clips.length; i++) {\n                        if (states.clips.clips[i].fade) {\n                            //max obsrved normalized distance from alpha plane (normalized to max fade distance)\n                            add(\"distAlpha = max(distAlpha, (dot(SCENEJS_vWorldVertex.xyz, SCENEJS_uClipNormalAndDist\" + i + \".xyz) + SCENEJS_uClipNormalAndDist\" + i + \".w) / SCENEJS_uClipFadeDistance\" + i + \");\");\n                        } else {\n                            //max observed distance from clipping plane\n                            add(\"distOff = max(distOff, dot(SCENEJS_vWorldVertex.xyz, SCENEJS_uClipNormalAndDist\" + i + \".xyz) + SCENEJS_uClipNormalAndDist\" + i + \".w);\");\n                        }\n                    }\n                    if (states.clips.clipDiscard) {\n                        // discard  fragment if beyond any clip\n                        add(\"if (distOff > 0.0) { discard; }\");\n                    }\n                    if (states.clips.clipFade) {\n                        // set transparency proportionally to distance\n                        // TODO: Requires drawn object to be transparent flag.\n                        add(\"if (distAlpha > 1.0) { discard; }\")\n                    }\n                }\n\n                if (points && roundPoints) {\n                    add(\"vec2 cxy = 2.0 * gl_PointCoord - 1.0;\");\n                    add(\"float r = dot(cxy, cxy);\");\n                    add(\"if (r > 1.0) {\");\n                    add(\"   discard;\");\n                    add(\"}\");\n                }\n\n\n                if (normals) {\n                    add(\"float fr = abs(dot(normalize(-SCENEJS_vViewVertex.xyz), normalize(SCENEJS_vViewNormal)));\");\n                    add(\"float fresnelFactor = clamp((fr - EDGE_BIAS) / (CENTER_BIAS - EDGE_BIAS), 0.0, 1.0);\");\n                    add(\"fragColor.rgb = SCENEJS_uXrayColor;\");\n                    add(\"fragColor.a = mix(EDGE_ALPHA, CENTER_ALPHA, fresnelFactor);\");\n                }\n\n                if (clipping && states.clips.clipFade) {\n                    add(\"fragColor.a *= (1.0 - distAlpha);\")\n                }\n\n                if (alphaTest) {\n                    add(\"if (SCENEJS_uDiscardOpaque && fragColor.a >= 1.0) { discard; }\");\n                    add(\"if (!SCENEJS_uDiscardOpaque && fragColor.a < 1.0) { discard; }\");\n                }\n\n                if (stochasticAlpha) {\n                    add(\"{\");\n                    add(\"    float maxDeriv = max(length(dFdx(SceneJS_vModelVertex.xy)), length(dFdy(SceneJS_vModelVertex.xy)));\");\n                    add(\"    float pixScale = 1.0 / maxDeriv;\");\n                    add(\"    vec2 pixScales = vec2( exp2(floor(log2(pixScale))), exp2(ceil(log2(pixScale))) );\");\n                    add(\"    vec2 alpha = vec2(hash3D(floor(pixScales.x * SceneJS_vModelVertex.xyz)), hash3D(floor(pixScales.y * SceneJS_vModelVertex.xyz)));\");\n                    add(\"    float lerpFactor = fract(log2(pixScale));\");\n                    add(\"    float x = (1.0 - lerpFactor) * alpha.x + lerpFactor * alpha.y;\");\n                    add(\"    float a = min(lerpFactor, 1.0 - lerpFactor);\");\n                    add(\"    vec3 cases = vec3(\");\n                    add(\"        x * x / (2.0 * a * (1.0 - a)), \");\n                    add(\"        (x - 0.5 * a)/(1.0 - a), \");\n                    add(\"        1.0 - ((1.0 - x) * (1.0 - x) / (2.0 * a * (1.0 - a)))\");\n                    add(\"    );\");\n                    add(\"    float aThresh = (x < (1.0 - a)) ? ((x < a) ? cases.x : cases.y) : cases.z;\");\n                    add(\"    aThresh = clamp(aThresh, 1.0e-6, 1.0);\");\n                    add(\"    if (fragColor.a < aThresh) {\");\n                    add(\"        discard;\");\n                    add(\"    } else {\");\n                    add(\"        fragColor.a = 1.0;\");\n                    add(\"    }\");\n                    add(\"}\");\n                }\n\n                if (fogEnabled) {\n                    add(\"vec3 fogColor = SCENEJS_uFogColor.rgb;\");\n                    add(\"float fogDensity = SCENEJS_uFogColor.a;\");\n                    add(\"float fogStart = SCENEJS_uFogParams.x;\");\n                    add(\"float fogEnd = SCENEJS_uFogParams.y;\");\n                    add(\"float fogMin = SCENEJS_uFogParams.z;\");\n                    add(\"float fogMax = SCENEJS_uFogParams.w;\");\n                    if (fogMode === DISPLAY_FLAGS.FOG_LINEAR) {\n                        add(\"float fog = (length(SCENEJS_vViewVertex.xyz) - fogStart) / (fogEnd - fogStart);\");\n                    } else {\n                        add(\"float fogAttenuation = fogDensity * max(length(SCENEJS_vViewVertex.xyz) - fogStart, 0.0);\");\n                        if (fogMode === DISPLAY_FLAGS.FOG_EXP2) {\n                            add(\"fogAttenuation = fogAttenuation * fogAttenuation;\");\n                        }\n                        add(\"float fog = 1.0 - exp(-fogAttenuation);\");\n                    }\n                    add(\"fog = clamp(fog, fogMin, fogMax);\");\n                    add(\"fragColor.rgb = mix(fragColor.rgb, fogColor, fog);\");\n                }\n\n                add(\"fragColor.rgb *= fragColor.a;\");\n\n                // Ensure compositing is done properly for pre-multiplied alpha\n                add(\"fragColor = clamp(fragColor, 0.0, 1.0);\");\n                add(\"fragColor.a = max(max(fragColor.r, fragColor.g), max(fragColor.b, fragColor.a));\")\n\n                if (fragmentShaderFooter) {\n                    add(fragmentShaderFooter);\n                } else {\n                    add(\"if (SCENEJS_uOutputFormat == 0.0) {\");\n                    add(\"    gl_FragColor = fragColor;\");\n                    add(\"} else if (SCENEJS_uOutputFormat == 1.0) {\");\n                    add(\"    vec2 uv = gl_FragCoord.xy / SCENEJS_uCanvasRes;\")\n                    add(\"    float fragZ = gl_FragCoord.z - texture2D(SCENEJS_uDepthBuffer, uv).r;\")\n                    add(\"    float d = 1.0 - fragZ * 0.99;\");\n                    add(\"    float d4 = d * d * d * d;\");\n                    add(\"    float d16 = d4 * d4 * d4 * d4;\");\n                    add(\"    float a2 = fragColor.a * fragColor.a;\");\n                    add(\"    float a4 = a2 * a2;\");\n                    add(\"    float depthWeight = 256.0 * d4 * a2 + 4096.0 * d16 * d16 * a4;\");\n                    add(\"    float w = clamp(depthWeight, 0.0001, 1e4);\");\n                    add(\"    vec3 ycocg = RGB_YCOCG * (fragColor.rgb * w);\")\n                    add(\"    bool checkerboard = mod(gl_FragCoord.x, 2.0) == mod(gl_FragCoord.y, 2.0);\")\n                    add(\"    gl_FragColor = vec4(ycocg.r, checkerboard ? ycocg.g : ycocg.b, fragColor.a * w, fragColor.a);\");\n                    add(\"}\");\n                }\n\n                add(\"}\");\n\n                //        console.log(src.join(\"\\n\"));\n                return end();\n            }\n\n            function vertexDepth() {\n\n                begin();\n\n                add(\"attribute vec4 SCENEJS_aVertex;\");\n                add(\"uniform mat4 SCENEJS_uMMatrix;\");\n                add(\"uniform mat4 SCENEJS_uVMatrix;\");\n                add(\"uniform mat4 SCENEJS_uPMatrix;\");\n\n                if (points) {\n                    add(\"uniform float SCENEJS_uPointSize;\");\n                    if (scaleRotationPoints) {\n                        add(\"attribute vec2 SCENEJS_aPointScaleRotation;\");\n                    }\n                }\n\n                if (quantizedPositions) {\n                    add(\"uniform mat4 SCENEJS_uDecodePositionMatrix;\");\n                }\n\n                add(\"varying vec4 SCENEJS_vWorldVertex;\");\n\n                if (morphing) {\n                    add(\"uniform float SCENEJS_uMorphFactor;\");       // LERP factor for morph\n                    if (states.morphGeometry.targets[0].vertexBuf) {      // target2 has these arrays also\n                        add(\"attribute vec4 SCENEJS_aMorphVertex;\");\n                    }\n\n                    if (quantizedPositions) {\n                        add(\"uniform mat4 SCENEJS_uDecodeMorphPosMatrix;\");\n                    }\n                }\n\n                add(\"void main(void) {\");\n\n                if (quantizedPositions) {\n                    add(\"    vec4 modelVertex = SCENEJS_uDecodePositionMatrix * SCENEJS_aVertex;\");\n                } else {\n                    add(\"    vec4 modelVertex = SCENEJS_aVertex;\");\n                }\n\n                if (morphing) {\n                    if (states.morphGeometry.targets[0].vertexBuf) {\n                        if (quantizedPositions) {\n                            add(\"  modelVertex = mix(modelVertex, SCENEJS_uDecodeMorphPosMatrix * SCENEJS_aMorphVertex, SCENEJS_uMorphFactor); \");\n                        } else {\n                            add(\"  modelVertex = mix(modelVertex, SCENEJS_aMorphVertex, SCENEJS_uMorphFactor); \");\n                        }\n                    }\n                }\n                add(\"  SCENEJS_vWorldVertex = SCENEJS_uMMatrix * modelVertex; \");\n\n                add(\"mat4 vPosMatrix = SCENEJS_uVMatrix;\");\n\n                if (skybox) {\n                    add(\"vPosMatrix[3].xyz = vec3(0.0);\");\n                }\n\n                add(\"  vec4 viewVertex =  vPosMatrix * SCENEJS_vWorldVertex;\");\n                add(\"  gl_Position =  SCENEJS_uPMatrix * viewVertex;\");\n\n                if (points) {\n                    add(\"gl_PointSize = SCENEJS_uPointSize;\");\n                    if (perspectivePoints) {\n                        add(\"gl_PointSize *= 20.0 / length(viewVertex.xyz);\");\n                    }\n                    if (scaleRotationPoints) {\n                        add(\"gl_PointSize *= SCENEJS_aPointScaleRotation.x;\");\n                    }\n                    add(\"gl_PointSize = min(gl_PointSize, \" + maxPointSizeStr + \");\");\n                }\n\n                add(\"}\");\n\n                return end();\n            }\n\n            function fragmentDepth() {\n\n                begin();\n\n                add(\"precision \" + SceneJS.WEBGL_INFO.FS_MAX_FLOAT_PRECISION + \" float;\");\n\n                add(\"varying vec4 SCENEJS_vWorldVertex;\");\n\n                if (clipping) {\n                    for (var i = 0; i < states.clips.clips.length; i++) {\n                        add(\"uniform vec4  SCENEJS_uClipNormalAndDist\" + i + \";\");\n                        if (states.clips.clips[i].fade) {\n                            add(\"uniform float SCENEJS_uClipFadeDistance\" + i + \";\");\n                        }\n                    }\n                }\n\n                add(\"void main(void) {\");\n\n                if (clipping) {\n\n                    if (states.clips.clipDiscard) {\n                        add(\"float distOff = 0.0;\");\n                    }\n                    if (states.clips.clipFade) {\n                        add(\"float distAlpha = 0.0;\");\n                    }\n\n                    for (var i = 0; i < states.clips.clips.length; i++) {\n                        if (states.clips.clips[i].fade) {\n                            //max obsrved normalized distance from alpha plane (normalized to max fade distance)\n                            add(\"distAlpha = max(distAlpha, (dot(SCENEJS_vWorldVertex.xyz, SCENEJS_uClipNormalAndDist\" + i + \".xyz) + SCENEJS_uClipNormalAndDist\" + i + \".w) / SCENEJS_uClipFadeDistance\" + i + \");\");\n                        } else {\n                            //max observed distance from clipping plane\n                            add(\"distOff = max(distOff, dot(SCENEJS_vWorldVertex.xyz, SCENEJS_uClipNormalAndDist\" + i + \".xyz) + SCENEJS_uClipNormalAndDist\" + i + \".w);\");\n                        }\n                    }\n\n                    if (states.clips.clipDiscard) {\n                        // discard  fragment if beyond any clip\n                        add(\"if (distOff > 0.0) { discard; }\");\n                    }\n\n                    if (states.clips.clipFade) {\n                        // set transparency proportionally to distance\n                        // TODO: Requires drawn object to be transparent flag.\n                        add(\"if (distAlpha > 1.0) { discard; }\")\n                    }\n\n                }\n                add(\"   gl_FragColor = vec4(gl_FragCoord.zzz, 1.0);\")\n                add(\"}\");\n\n                return end();\n            }\n\n\n            // Start fresh program source\n            function begin() {\n                src = [];\n            }\n\n            // Append to program source\n            function add(txt) {\n                src.push(txt || \"\");\n            }\n\n            // Finish building program source\n            function end() {\n                return src.join(\"\\n\");\n            }\n\n        }\n\n    )();\n})();\n;/**\n * @class Manages creation, sharing and recycle of {@link SceneJS_Program} instances\n * @private\n */\n\n(function () {\n    \"use strict\";\n\n    var SceneJS_ProgramFactory = window.SceneJS_ProgramFactory = function(stats, cfg) {\n\n        this.stats = stats;\n\n        this._canvas = cfg.canvas;\n\n        this._programs = {};\n    };\n\n    /**\n     * Gets a program to render the given states\n     */\n    SceneJS_ProgramFactory.prototype.getProgram = function(hash, vertexSrc, fragmentSrc) {\n\n        var program = this._programs[hash];\n\n        if (!program) {\n            program = new SceneJS._webgl.Program(this.stats, this._canvas.gl, hash, vertexSrc, fragmentSrc);\n            this._programs[hash] = program;\n\n            this.stats.state.programs++;\n        }\n\n        program.useCount++;\n\n        return program;\n    };\n\n    /**\n     * Releases a program back to the shader factory\n     */\n    SceneJS_ProgramFactory.prototype.putProgram = function(program) {\n\n        if (--program.useCount <= 0) {\n\n            program.destroy();\n\n            delete this._programs[program.hash];\n\n            this.stats.state.programs--;\n        }\n    };\n\n    /**\n     * Notifies this shader factory that the WebGL context has been restored after previously being lost\n     */\n    SceneJS_ProgramFactory.prototype.webglRestored = function() {\n\n        var gl = this._canvas.gl;\n        var program;\n\n        for (var id in this._programs) {\n            if (this._programs.hasOwnProperty(id)) {\n                this._programs[id].build(gl);\n            }\n        }\n    };\n\n    /**\n     * Destroys this shader factory\n     */\n    SceneJS_ProgramFactory.prototype.destroy = function() {\n    };\n\n})();\n;/**\n * @class An object within a {@link SceneJS_Display}\n * @private\n */\n /*\n NOTE: vec2s are being created when getting geometry UVs.\n */\n\n(function () {\n    \"use strict\";\n\n    var SceneJS_Object = window.SceneJS_Object = function(id) {\n\n        /**\n         * ID for this objects, unique among all objects in the display\n         * @type Number\n         */\n        this.id = id;\n\n        /**\n         * Hash code for this object, unique among all objects in the display\n         * @type String\n         */\n        this.hash = null;\n\n        /**\n         * State sort key, computed from {@link #layer}, {@link #program} and {@link #texture}\n         * @type Number\n         */\n        this.sortKey = 0;\n        this.sortTieBreaker = 0;\n\n        /**\n         * Sequence of state chunks applied to render this object\n         * @type {[SceneJS_Chunk]} chunks\n         */\n        this.chunkSets = {};\n\n        /**\n         * Number of state chunks applied to render this object\n         * @type Number\n         */\n        this.chunksLen = 0;\n\n        /**\n         * Shader programs that render this object, also used for (re)computing {@link #sortKey}\n         * @type SceneJS_Program\n         */\n        this.program = null;\n\n        /**\n         * State core for the {@link SceneJS.Layer} that this object was compiled from, used for (re)computing {@link #sortKey} and visibility cull\n         */\n        this.layer = null;\n\n         /**\n         * State core for the {@link SceneJS.Texture} that this object was compiled from, used for (re)computing {@link #sortKey}\n         */\n        this.texture = null;\n\n        /**\n         * State core for the {@link SceneJS.Flags} that this object was compiled from, used for visibility cull\n         */\n        this.properties = null;\n\n        /**\n        *   Used to calculate the depth for depth sorting\n        */\n        this.centroid = null;\n    };\n\n    var tempVec3 = new vec3.create();\n\n    var pair1 = vec2.create();\n    var pair2 = vec2.create();\n    var pair3 = vec2.create();\n\n    var geoVec1 = vec3.create();\n    var geoVec2 = vec3.create();\n    var geoVec3 = vec3.create();\n    var a1 = vec3.create();\n    var b1 = vec3.create();\n    var c1 = vec3.create();\n    var a2 = vec3.create();\n    var b2 = vec3.create();\n    var c2 = vec3.create();\n\n    var homogeneousCoord1 = vec4.create();\n    var homogeneousCoord2 = vec4.create();\n    var homogeneousCoord3 = vec4.create();\n\n    SceneJS_Object.prototype.getDepth = function() {\n        if (!this.centroid) {\n            this.centroid = this._calculateCentroid(this);\n        }\n\n        var modelMatrix = this.modelTransform.matrix;\n        var viewMatrix = this.viewMatrix;\n\n        var viewCentroid = vec3.transformMat4(tempVec3, this.centroid, modelMatrix);\n\n        return -(viewMatrix[2]  * viewCentroid[0] + \n                 viewMatrix[6]  * viewCentroid[1] + \n                 viewMatrix[10] * viewCentroid[2] +\n                 viewMatrix[14]);\n    };\n\n    SceneJS_Object.prototype.isTransparent = function() {\n        return !this.properties.stochasticAlpha && !!(this.properties.transparent ||\n            this.properties.opacityModifiers.length > 0 ||\n            this.texture.transparent ||\n            this.geometry.transparent || \n            this.fresnel.transparent ||\n            this.material.transparent ||\n            this.regionMap.transparent);\n    };\n\n    SceneJS_Object.prototype.isPartiallyOpaque = function() {\n        return this.properties.partiallyOpaque || \n               (!this.properties.transparent && \n                   (this.fresnel.partiallyOpaque || \n                    this.texture.transparent));\n    };\n\n\n    SceneJS_Object.prototype.getKdTree = function() {\n        var indices = this.geometry.arrays.indices;\n        var targets = this.morphGeometry.targets;\n        if (targets && targets.length > 0) {\n            return this.morphGeometry.getKdTree(indices);\n        } else {\n            return this.geometry.getKdTree();\n        }\n    };\n\n    SceneJS_Object.prototype.getPositions = function() {\n        var targets = this.morphGeometry.targets;\n        if (targets && targets.length > 0) {\n            return targets[this.morphGeometry.key1].positions;\n        } else {\n            return this.geometry.arrays.positions;\n        }\n    };\n\n    SceneJS_Object.prototype.getPositionDecodeMat = function() {\n        var targets = this.morphGeometry.targets;\n        if (targets && targets.length > 0) {\n            return targets[this.morphGeometry.key1].positionDecodeMat;\n        } else {\n            return this.geometry.positionDecodeMat;\n        }\n    };\n\n    SceneJS_Object.prototype.getFrameEndPositions = function() {\n        var targets = this.morphGeometry.targets;\n        if (targets && targets.length > 0) {\n            return targets[this.morphGeometry.key2].positions;\n        } else {\n            return null;\n        }\n    };\n\n    SceneJS_Object.prototype.getFrameEndPositionDecodeMat = function() {\n        var targets = this.morphGeometry.targets;\n        if (targets && targets.length > 0) {\n            return targets[this.morphGeometry.key2].positionDecodeMat;\n        } else {\n            return null;\n        }\n    };\n\n    SceneJS_Object.prototype.getNormals = function() {\n        var targets = this.morphGeometry.targets;\n        if (targets && targets.length > 0) {\n            return targets[this.morphGeometry.key1].normals;\n        } else {\n            return this.geometry.arrays.normals;\n        }\n    };\n\n    SceneJS_Object.prototype.getFrameEndNormals = function() {\n        var targets = this.morphGeometry.targets;\n        if (targets && targets.length > 0) {\n            return targets[this.morphGeometry.key2].normals;\n        } else {\n            return null;\n        }\n    };\n\n    SceneJS_Object.prototype.getIndices = function() {\n        return this.geometry.arrays.indices || null;\n    };\n\n    SceneJS_Object.prototype.getMorphFactor = function() {\n        var targets = this.morphGeometry.targets;\n        if (targets && targets.length > 0) {\n            return this.morphGeometry.factor;\n        } else {\n            return null;\n        }\n    };\n\n    SceneJS_Object.prototype.cartesianToBarycentric = function(triangleIndex, point, barycentric) {\n        // get euclidean coordinates for each triangle vertex\n        this.getTrianglePositionOnSurface(triangleIndex, geoVec1, geoVec2, geoVec3);\n        SceneJS_math_cartesianToBarycentric(point, geoVec1, geoVec2, geoVec3, barycentric);\n    }\n\n    // Convert an euclidean point from local space to world space\n    SceneJS_Object.prototype.getPointInWorldSpace = function(point, a) {\n\n        // convert vec3 to vec4 because transformations are on homogeneous coordinates\n        homogeneousCoord1.set(point);\n        homogeneousCoord1[3] = 1;\n\n        // apply world transformation matrix\n        vec4.transformMat4(homogeneousCoord1, homogeneousCoord1, this.modelTransform.matrix);\n\n        // convert vec4 back to vec3\n        a.set(homogeneousCoord1.subarray(0, 3));\n    }\n\n    // Object triangle vertex indices\n    SceneJS_Object.prototype.getTriangleIndices = function(triangleIndex, out) {\n        var indices = this.geometry.arrays.indices;\n        if (indices) {\n            out[0] = indices[triangleIndex];\n            out[1] = indices[triangleIndex + 1];\n            out[2] = indices[triangleIndex + 2];\n        } else {\n            out[0] = triangleIndex;\n            out[1] = triangleIndex + 1;\n            out[2] = triangleIndex + 2;\n        }\n    }\n\n    // Object Space Position of a point on a particular triangle of a shape at the current time.\n    SceneJS_Object.prototype.barycentricToCartesian = function(triangleIndex, barycentric, a) {\n        barycentric = barycentric || [1/3, 1/3, 1/3];\n        this.getTrianglePositionOnSurface(triangleIndex, geoVec1, geoVec2, geoVec3); // triangle positions for each vertex of triangle\n        SceneJS_math_barycentricToCartesian(barycentric, geoVec1, geoVec2, geoVec3, a);\n    }\n\n    // Object Space Positions of each vertex of a triangle of a shape at the current time.\n    SceneJS_Object.prototype.getTrianglePositionOnSurface = function(triangleIndex, a, b, c) {\n        var indices = this.geometry.arrays.indices;\n          if (!this.geometry && !this.morphGeometry){\n            return;\n        }\n\n        var ia, ib, ic;\n        if (indices) {\n            ia = indices[triangleIndex];\n            ib = indices[triangleIndex + 1];\n            ic = indices[triangleIndex + 2];\n        } else {\n            ia = triangleIndex;\n            ib = triangleIndex + 1;\n            ic = triangleIndex + 2;\n        }\n        \n\n        if (this.morphGeometry.targets && this.morphGeometry.targets.length > 0) {\n            getMorphTrianglePositions(this.morphGeometry, ia, ib, ic, a, b, c);\n        } else {\n            getGeometryTrianglePositions(this.geometry, ia, ib, ic, a, b, c);\n        }\n    }\n\n    // Normal vector of any point on a particular triangle of a shape at the current time\n    SceneJS_Object.prototype.normalFromBarycentric = function(triangleIndex, barycentric, a) {\n        barycentric = barycentric || [1/3, 1/3, 1/3];\n        var gotNormals = this.normalFromCartesian(triangleIndex, geoVec1, geoVec2, geoVec3);\n        if (!gotNormals) {\n            return false;\n        }\n        vec3.scale(a, geoVec1, barycentric[0]);\n        vec3.add(a, a, vec3.scale(b1, geoVec2, barycentric[1]));\n        vec3.add(a, a, vec3.scale(b1, geoVec3, barycentric[2]));\n        return true;\n    }\n\n    // Normal vector for each vertex on a particular triangle of a shape at the current time\n    SceneJS_Object.prototype.normalFromCartesian = function(triangleIndex, a, b, c) {\n        if (!this.geometry && !this.morphGeometry){\n          return;\n        }\n        var indices = this.geometry.arrays.indices;\n\n        var ia, ib, ic;\n        if (indices) {\n            ia = indices[triangleIndex];\n            ib = indices[triangleIndex + 1];\n            ic = indices[triangleIndex + 2];\n        } else {\n            ia = triangleIndex;\n            ib = triangleIndex + 1;\n            ic = triangleIndex + 2;\n        }\n        \n        if (this.morphGeometry.targets && this.morphGeometry.targets.length > 0) {\n            return getMorphTriangleNormals(this.morphGeometry, ia, ib, ic, a, b, c);\n        } else {\n            return getGeometryTriangleNormals(this.geometry, ia, ib, ic, a, b, c);\n        }\n    }\n\n    SceneJS_Object.prototype.uvFromBarycentric = function(triangleIndex, barycentric, a) {\n        //NOTE: a is a javascript array of vec2s\n        if (!this.geometry || !this.geometry.arrays.uvs || this.geometry.arrays.uvs.length <= 0) {\n            return;\n        }\n\n        var indices = this.geometry.arrays.indices;\n\n        var ia, ib, ic;\n        if (indices) {\n            ia = indices[triangleIndex];\n            ib = indices[triangleIndex + 1];\n            ic = indices[triangleIndex + 2];\n        } else {\n            ia = triangleIndex;\n            ib = triangleIndex + 1;\n            ic = triangleIndex + 2;\n        }\n        var layerIndex;\n        for (layerIndex = 0; layerIndex < this.geometry.arrays.uvs.length; layerIndex++) {\n            _getTriangleUVFromGeometry(this.geometry, layerIndex, ia, ib, ic, geoVec1, geoVec2, geoVec3);\n            var uv = vec2.create();\n            vec2.scale(uv, geoVec1, barycentric[0]);\n            vec2.add(uv, uv, vec2.scale(pair1, geoVec2, barycentric[1]));\n            vec2.add(uv, uv, vec2.scale(pair2, geoVec3, barycentric[2]));\n            a.push(uv);\n        }\n    }\n\n    // Get UV pairs for each triangle vertex for each uv-layer.\n    SceneJS_Object.prototype.uvFromCartesian = function(triangleIndex, a, b, c) {\n        // NOTE: a,b,c are javascript arrays of vec2 pairs\n        if (!this.geometry || !this.geometry.arrays.uvs || this.geometry.arrays.uvs.length <= 0) {\n            return;\n        }\n        var indices = this.geometry.arrays.indices;\n        var ia, ib, ic;\n        if (indices) {\n            ia = indices[triangleIndex];\n            ib = indices[triangleIndex + 1];\n            ic = indices[triangleIndex + 2];\n        } else {\n            ia = triangleIndex;\n            ib = triangleIndex + 1;\n            ic = triangleIndex + 2;\n        }\n        var auvs = [];\n        var buvs = [];\n        var cuvs = [];\n        var layerIndex;\n        for (layerIndex = 0; layerIndex < this.geometry.arrays.uvs.length; layerIndex++) {\n            _getTriangleUVFromGeometry(triangleIndex, layerIndex, ia, ib, ic, geoVec1, geoVec2, geoVec3);\n            var _uv1 = vec2.create();\n            var _uv2 = vec2.create();\n            var _uv3 = vec3.create();\n\n            _uv1[0] = geoVec1[0];\n            _uv1[1] = geoVec1[1];\n            _uv2[0] = geoVec2[0];\n            _uv2[1] = geoVec2[1];\n            _uv3[0] = geoVec3[0];\n            _uv3[1] = geoVec3[1];\n            auvs.push(_uv1);\n            buvs.push(_uv2);\n            cuvs.push(_uv3);\n        }\n    }\n\n    SceneJS_Object.prototype._calculateCentroid = function() {\n\n        var centroid = vec3.create();\n\n        var positions = this.geometry.arrays.positions;\n\n        var xmin = Infinity;\n        var ymin = Infinity;\n        var zmin = Infinity;\n        var xmax = -Infinity;\n        var ymax = -Infinity;\n        var zmax = -Infinity;\n\n        var min = Math.min;\n        var max = Math.max;\n\n        for (var i = 0, len = positions.length / 3; i < len; ++i) {\n            getGeometryPosition(this.geometry, i, tempVec3);\n            var x = tempVec3[0];\n            var y = tempVec3[1];\n            var z = tempVec3[2];\n\n            xmin = min(x, xmin);\n            ymin = min(y, ymin);\n            zmin = min(z, zmin);\n            xmax = max(x, xmax);\n            ymax = max(y, ymax);\n            zmax = max(z, zmax);\n        }\n\n        centroid[0] = 0.5 * (xmin + xmax);\n        centroid[1] = 0.5 * (ymin + ymax);\n        centroid[2] = 0.5 * (zmin + zmax);\n\n        return centroid;\n    };\n\n    // Get the model-space coordinates for each vertex of a surface triangle, from current morph geometry\n    function getMorphTrianglePositions(morph, ia, ib, ic, a, b, c) {\n        var ia3 = ia * 3;\n        var ib3 = ib * 3;\n        var ic3 = ic * 3;\n        var positions1 = morph.targets[morph.key1].positions;\n        var positions2 = morph.targets[morph.key2].positions;\n        var decodeMat1 = morph.targets[morph.key1].positionDecodeMat;\n        var decodeMat2 = morph.targets[morph.key2].positionDecodeMat;\n\n        if (morph.compressedPositions) {\n            SceneJS_math_decompressPosition(a1, positions1.subarray(ia3, ia3 + 3), decodeMat1);\n            SceneJS_math_decompressPosition(a2, positions2.subarray(ia3, ia3 + 3), decodeMat2);\n            SceneJS_math_decompressPosition(b1, positions1.subarray(ib3, ib3 + 3), decodeMat1);\n            SceneJS_math_decompressPosition(b2, positions2.subarray(ib3, ib3 + 3), decodeMat2);\n            SceneJS_math_decompressPosition(c1, positions1.subarray(ic3, ic3 + 3), decodeMat1);\n            SceneJS_math_decompressPosition(c2, positions2.subarray(ic3, ic3 + 3), decodeMat2);\n        } else {\n            a1.set(positions1.subarray(ia3, ia3 + 3));\n            a2.set(positions2.subarray(ia3, ia3 + 3));\n            b1.set(positions1.subarray(ib3, ib3 + 3));\n            b2.set(positions2.subarray(ib3, ib3 + 3));\n            c1.set(positions1.subarray(ic3, ic3 + 3));\n            c2.set(positions2.subarray(ic3, ic3 + 3));\n        }\n\n        vec3.lerp(a, a1, a2, morph.factor);\n        vec3.lerp(b, b1, b2, morph.factor);\n        vec3.lerp(c, c1, c2, morph.factor);\n    };\n\n    // Get the model-space coordinates for each vertex of a surface triangle, from current geometry\n    function getGeometryTrianglePositions(geo, ia, ib, ic, a, b, c) {\n      var positions = geo.arrays.positions;\n      var positionDecodeMat = geo.positionDecodeMat;\n\n      var ia3 = ia * 3;\n      var ib3 = ib * 3;\n      var ic3 = ic * 3;\n\n      a[0] = positions[ia3];\n      a[1] = positions[ia3 + 1];\n      a[2] = positions[ia3 + 2];\n\n      b[0] = positions[ib3];\n      b[1] = positions[ib3 + 1];\n      b[2] = positions[ib3 + 2];\n\n      c[0] = positions[ic3];\n      c[1] = positions[ic3 + 1];\n      c[2] = positions[ic3 + 2];\n\n      if (positionDecodeMat) {\n          SceneJS_math_decompressPosition(a, a, positionDecodeMat);\n          SceneJS_math_decompressPosition(b, b, positionDecodeMat);\n          SceneJS_math_decompressPosition(c, c, positionDecodeMat);\n      }\n    }\n\n    function getGeometryPosition(geo, i, p) {\n      var positions = geo.arrays.positions;\n      var positionDecodeMat = geo.positionDecodeMat;\n\n      var index = i * 3;\n\n      p[0] = positions[index];\n      p[1] = positions[index + 1];\n      p[2] = positions[index + 2];\n\n      if (positionDecodeMat) {\n          SceneJS_math_decompressPosition(p, p, positionDecodeMat);\n      }\n    }\n\n    // Get the normal vector for each vertex of a surface triangle from current morph geometry\n    function getMorphTriangleNormals(morph, ia, ib, ic, a, b, c) {\n        var iax, ibx, icx;\n        var normals1 = morph.targets[morph.key1].normals;\n        var normals2 = morph.targets[morph.key2].normals;\n        if (morph.compressedNormals) {\n            iax = ia * 2;\n            ibx = ib * 2;\n            icx = ic * 2;\n            SceneJS_math_octDecodeVec2(normals1.subarray(iax, iax + 2), a1);\n            SceneJS_math_octDecodeVec2(normals2.subarray(iax, iax + 2), a2);\n            SceneJS_math_octDecodeVec2(normals1.subarray(ibx, ibx + 2), b1);\n            SceneJS_math_octDecodeVec2(normals2.subarray(ibx, ibx + 2), b2);\n            SceneJS_math_octDecodeVec2(normals1.subarray(icx, icx + 2), c1);\n            SceneJS_math_octDecodeVec2(normals2.subarray(icx, icx + 2), c2);\n        } else {\n            iax = ia * 3;\n            ibx = ib * 3;\n            icx = ic * 3;\n            a1.set(normals1.subarray(iax, iax + 3));\n            a2.set(normals2.subarray(iax, iax + 3));\n            b1.set(normals1.subarray(ibx, ibx + 3));\n            b2.set(normals2.subarray(ibx, ibx + 3));\n            c1.set(normals1.subarray(icx, icx + 3));\n            c2.set(normals2.subarray(icx, icx + 3));\n        }\n        vec3.lerp(a, a1, a2, morph.factor);\n        vec3.lerp(b, b1, b2, morph.factor);\n        vec3.lerp(c, c1, c2, morph.factor);\n        return true; // normals exist\n    }\n\n    // Get the normal vector for each vertex of a surface triangle from the current geometry\n    function getGeometryTriangleNormals(geo, ia, ib, ic, a, b, c) {\n        var normals = geo.arrays.normals;\n        var iax, ibx, icx;\n        if (!normals) {\n            a = a.set([0,0,0]);\n            b = b.set([0,0,0]);\n            c = c.set([0,0,0]);\n            return false; // no normals exist\n        }\n        if (geo.compressedNormals) {\n\n            var iax = ia * 2;\n            var ibx = ib * 2;\n            var icx = ic * 2;\n\n            var encna = normals.subarray(iax, iax + 2);\n            var encnb = normals.subarray(ibx, ibx + 2);\n            var encnc = normals.subarray(icx, icx + 2);\n\n            SceneJS_math_octDecodeVec2(normals.subarray(iax, iax + 2), a);\n            SceneJS_math_octDecodeVec2(normals.subarray(ibx, ibx + 2), b);\n            SceneJS_math_octDecodeVec2(normals.subarray(icx, icx + 2), c);\n\n        } else {\n            iax = ia*3;\n            ibx = ib*3;\n            icx = ic*3;\n            a[0] = normals[iax];\n            a[1] = normals[iax + 1];\n            a[2] = normals[iax + 2];\n\n            b[0] = normals[ibx];\n            b[1] = normals[ibx + 1];\n            b[2] = normals[ibx + 2];\n\n            c[0] = normals[icx];\n            c[1] = normals[icx + 1];\n            c[2] = normals[icx + 2];\n\n        }\n        return true;\n    }\n\n    // Get the uv array (length 2) for specified uv-layer  for each vertex of a surface triangle from geometry\n    function _getTriangleUVFromGeometry(geo, layer, ia, ib, ic, a, b, c) {\n        var ia2 = ia * 2;\n        var ib2 = ib * 2;\n        var ic2 = ic * 2;\n        var uvs = geo.arrays.uvs[layer]; // get uvs for layer\n\n        // get uv-pairs for each triangle vertex:\n        a[0] = uvs[ia2];\n        a[1] = uvs[ia2 + 1];\n        b[0] = uvs[ib2];\n        b[1] = uvs[ib2 + 1];\n        c[0] = uvs[ic2];\n        c[1] = uvs[ic2 + 1];\n\n        if (geo.compressedUVs) {\n            var uvDecodeMat = geo.uvDecodeMats[layer];\n            SceneJS_math_decompressUV(a, a, uvDecodeMat);\n            SceneJS_math_decompressUV(b, b, uvDecodeMat);\n            SceneJS_math_decompressUV(c, c, uvDecodeMat);\n        }\n    }\n\n})();\n\n;/**\n * @class An object within a {@link SceneJS_Display}\n * @private\n */\n\n(function() {\n    \"use strict\";\n\n    var quadVSSource = [\n        \"attribute vec2 aPosition;\",\n        \"varying vec2 vUV;\",\n        \"void main() {\",\n        \"    vUV = aPosition * 0.5 + 0.5;\",\n        \"    gl_Position = vec4(aPosition, 0.0, 1.0);\",\n        \"}\"\n    ].join(\"\\n\");\n\n    var quadPositions = new Float32Array([\n        -1, -1,\n        1, -1,\n        -1, 1,\n        1, 1\n    ]);\n\n    window.SceneJS_PostProcess = function(stats, gl, fragmentSource, options) {\n        options = options || {};\n\n        this.gl = gl;\n\n        this.uniformIndices = {};\n        this.uniformHandles = [];\n        this.uniformValues = [];\n\n        this.textureIndices = {};\n        this.samplerNames = [];\n        this.textures = [];\n\n        this.positionBuffer = new SceneJS._webgl.ArrayBuffer(gl, gl.ARRAY_BUFFER, quadPositions, quadPositions.length, 2, gl.STATIC_DRAW);\n\n        this.program = new SceneJS._webgl.Program(stats, gl, \"post-process\", quadVSSource, fragmentSource);\n        this.positionsAttribute = this.program.getAttribute(\"aPosition\");\n\n        this.uniformCount = 0;\n        this.textureCount = 0;\n\n        this.clear = !!options.clear;\n    };\n\n    SceneJS_PostProcess.prototype.setUniform = function(name, value) {\n        var index = this.uniformIndices[name];\n\n        if (index === undefined) {\n            index = this.uniformIndices[name] = this.uniformCount++; \n            this.uniformHandles.push(this.program.getUniform(name));\n        }\n\n        this.uniformValues[index] = value;\n    };\n\n    SceneJS_PostProcess.prototype.setTexture = function(name, texture) {\n        var index = this.textureIndices[name];\n\n        if (index === undefined) {\n            index = this.textureIndices[name] = this.textureCount++; \n            this.samplerNames.push(name);\n        }\n\n        this.textures[index] = texture;\n    };\n\n    SceneJS_PostProcess.prototype.draw = function(frameCtx) {\n        if (frameCtx.VAO) {\n            frameCtx.VAO.bindVertexArrayOES(null);\n        }\n\n        this.program.bind();\n        this.positionsAttribute.bindArrayBuffer(this.positionBuffer);\n\n        for (var i = 0; i < this.uniformCount; ++i) {\n            this.uniformHandles[i].setValue(this.uniformValues[i]);\n        }\n\n        for (var i = 0; i < this.textureCount; ++i) {\n            this.program.bindTexture(this.samplerNames[i], this.textures[i], i);\n        }\n\n        if (this.clear) {\n            this.gl.clearColor(0, 0, 0, 0);\n            this.gl.clearDepth(1);\n            this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n        }\n\n//        this.gl.CheckFramebufferStatus(this.positionBuffer);\n        this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\n    };\n\n    SceneJS_PostProcess.prototype.destroy = function() {\n        this.positionBuffer.destroy();\n        this.positionBuffer = null;\n        this.program.destroy();\n        this.program = null;\n    };\n\n    SceneJS_PostProcess.prototype.webglRestored = function(gl) {\n        this.gl = gl;\n        this.positionBuffer = new SceneJS._webgl.ArrayBuffer(gl, gl.ARRAY_BUFFER, quadPositions, quadPositions.length, 2, gl.STATIC_DRAW);\n        this.program.build(gl);\n        this.positionsAttribute = this.program.getAttribute(\"aPosition\");\n\n        for (var name in this.uniformIndices) {\n            var i = this.uniformIndices[name];\n            this.uniformHandles[i] = this.program.getUniform(name);\n        }\n    };\n})();\n\n\n;/**\n * @class An object within a {@link SceneJS_Display}\n * @private\n */\n\n(function() {\n    \"use strict\";\n\n    window.SceneJS_PostProcessStage = function(display, cfg) {\n        this.id = cfg.id;\n        this.display = display;\n        this.postProcess = display._postProcessTypes[cfg.type];\n        this.uniforms = cfg.uniforms;\n        this.framebuffer = null;\n        if (cfg.framebuffer) {\n            this.framebuffer = display.framebuffers[cfg.framebuffer];\n        }\n\n        this.textures = {};\n        for (var sampler in cfg.textures) {\n            var texture = cfg.textures[sampler];\n            var framebufferId = texture.framebuffer;\n            var target = texture.target;\n            var data = texture.data;\n            var gl = display._canvas.gl;\n            var framebuffer;\n\n            if (framebufferId) {\n                framebuffer = display.framebuffers[framebufferId];\n\n                if (!framebuffer) {\n                    console.error(\"Framebuffer not found: \" + framebufferId);\n                    continue;\n                }\n\n                if (target === \"color\") {\n                    this.textures[sampler] = framebuffer.getColorTarget(texture.attachment || 0);\n                } else if (target === \"depth\") {\n                    this.textures[sampler] = framebuffer.getDepthTarget();\n                } else {\n                    console.error(\"Invalid target: \" + target);\n                    continue;\n                }\n                \n            } else if (data) {\n                // Values input as typed array\n\n                var tex = gl.createTexture();\n                var format = texture.format !== undefined ? gl[texture.format] : gl.RGBA; \n                var type = texture.type !== undefined ? gl[texture.type] : gl.UNSIGNED_BYTE; \n                var minFilter = texture.minFilter !== undefined ? gl[texture.minFilter] : gl.NEAREST; \n                var magFilter = texture.magFilter !== undefined ? gl[texture.magFilter] : gl.NEAREST; \n                var wrapS = texture.wrapS !== undefined ? gl[texture.wrapS] : gl.CLAMP_TO_EDGE; \n                var wrapT = texture.wrapT !== undefined ? gl[texture.wrapT] : gl.CLAMP_TO_EDGE; \n                \n                gl.bindTexture(gl.TEXTURE_2D, tex);\n                gl.texImage2D(gl.TEXTURE_2D, 0, format, texture.width, texture.height, 0, format, type, data);\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter);\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, magFilter);\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrapS);\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrapT);\n\n                this.textures[sampler] = {\n                    texture: tex,\n                    gl: gl,\n                    bind: function (unit) {\n                        if (this.texture) {\n                            this.gl.activeTexture(this.gl.TEXTURE0 + unit);\n                            this.gl.bindTexture(this.gl.TEXTURE_2D, this.texture);\n                            return true;\n                        }\n                        return false;\n                    },\n                    unbind: function (unit) {\n                        if (this.texture) {\n                            this.gl.activeTexture(this.gl.TEXTURE0 + unit);\n                            this.gl.bindTexture(this.gl.TEXTURE_2D, null);\n                        }\n                    },\n                    destroy: function() {\n                        if (this.texture) {\n                            this.gl.deleteTexture(this.texture);\n                            this.texture = null;\n                        }\n                    }\n                };\n\n                gl.bindTexture(gl.TEXTURE_2D, null);\n            }\n        }\n\n    };\n\n    SceneJS_PostProcessStage.prototype.setUniform = function(name, value) {\n        this.uniforms[name] = value;\n        this.display.imageDirty = true;\n    };\n\n    SceneJS_PostProcessStage.prototype.draw = function(frameCtx) {\n        for (var uniform in this.uniforms) {\n            this.postProcess.setUniform(uniform, this.uniforms[uniform]);\n        }\n\n        for (var texture in this.textures) {\n            this.postProcess.setTexture(texture, this.textures[texture]);\n        }\n\n        this.postProcess.draw(frameCtx);\n    };\n\n    SceneJS_PostProcessStage.prototype.destroy = function() {\n\n        for (var texture in this.textures) {\n            if (typeof this.textures[texture].destroy === \"function\") {\n                this.textures[texture].destroy();\n            }\n            this.textures[texture] = null;\n        }\n\n    };\n\n})();\n\n\n;(function() {\n    \"use strict\";\n\n    var SceneJS_ChunkFactory = window.SceneJS_ChunkFactory = function() {\n        this._chunks = {};\n        this._numericIds = 1;\n        this.chunkTypes = SceneJS_ChunkFactory.chunkTypes;\n    };\n\n    SceneJS_ChunkFactory.chunkTypes = {};\n\n    SceneJS_ChunkFactory.addChunkType = function(type, chunkClass) {\n        SceneJS_ChunkFactory.chunkTypes[type] = chunkClass;\n    };\n\n    SceneJS_ChunkFactory.prototype.getChunk = function(chunkId, type, program, cores) {\n        var chunkClass = SceneJS_ChunkFactory.chunkTypes[type];\n        if (!chunkClass) {\n            throw \"chunk type not supported: '\" + type + \"'\";\n        }\n        var chunk = this._chunks[chunkId];\n        if (chunk) {\n            chunk.useCount++;\n            return chunk;\n        }\n        chunk = new chunkClass(chunkId, this._numericIds++, program, cores);\n        chunk.useCount = 1;\n        this._chunks[chunkId] = chunk;\n        return chunk;\n    };\n\n    SceneJS_ChunkFactory.prototype.putChunk = function (chunk) {\n        if (chunk.useCount === 0) {\n            return;\n        }\n        if (--chunk.useCount <= 0) {\n            if (chunk.recycle) {\n                chunk.recycle();\n            }\n            delete this._chunks[chunk.id];\n        }\n    };\n\n    SceneJS_ChunkFactory.prototype.webglRestored = function () {\n        var chunk;\n        for (var chunkId in this._chunks) {\n            if (this._chunks.hasOwnProperty(chunkId)) {\n                chunk = this._chunks[chunkId];\n                if (chunk && chunk.build) {\n                    chunk.build();\n                }\n            }\n        }\n    };\n\n})();\n\n;(function () {\n    \"use strict\";\n\n    var DrawChunk = function (id, numericId, program, cores) {\n\n        this.id = id;\n        this.numericId = numericId;\n        this.program = program;\n\n        cores = cores || [];\n\n        for (var i = 0, len = cores.length; i < len; ++i) {\n            if (cores[i] && cores[i].empty) {\n                cores[i] = null;\n            }\n        }\n\n        this.cores = cores;\n        this.handles = {};\n\n        // As we apply a list of state chunks in a {@link SceneJS_Display}, we track the ID of each chunk\n        // in order to avoid redundantly re-applying the same chunk.\n        // We don't want that for draw chunks however, because they contain GL drawElements calls,\n        // which we need to do for each object.\n        this.unique = true;\n\n        this.build();\n    };\n\n    DrawChunk.prototype.build = function () {\n\n        this.core = this.cores[0];\n\n        this.handles.draw = {};\n\n        this.handles.xray = {};\n\n        this.handles.pick = {\n            uPickColor: this.program.pick.getUniform(\"SCENEJS_uPickColor\")\n        };\n\n        this.handles.depth = {};\n\n        this.handles.drawTexture = {};  \n    };\n\n    DrawChunk.prototype.draw = function (renderMode, frameCtx) {\n\n        var core = this.core;\n        var handles = this.handles[renderMode];\n        var gl = this.program.gl;\n\n        if (frameCtx.pickTriangle) {\n\n            var pickColors = core.getPickColors();\n\n            if (pickColors) {\n                gl.drawArrays(core.primitive, 0, pickColors.numItems / 4); // rgba per vertex\n            }\n\n        } else {\n            if (frameCtx.pickObject) {\n\n                if (handles.uPickColor) {\n\n                    var a = frameCtx.pickIndex >> 24 & 0xFF;\n                    var b = frameCtx.pickIndex >> 16 & 0xFF;\n                    var g = frameCtx.pickIndex >> 8 & 0xFF;\n                    var r = frameCtx.pickIndex & 0xFF;\n\n                    frameCtx.pickIndex++;\n\n                    handles.uPickColor.setValue([r / 255, g / 255, b / 255, a / 255]);\n                }\n            }\n\n            if (core.indexBuf) {\n                gl.drawElements(core.primitive, core.indexBuf.numItems, core.indexBuf.itemType, 0);\n            } else {\n                gl.drawArrays(core.primitive, 0, core.vertexBuf.numItems / 3);\n            }\n        }\n\n        frameCtx.transparent = false;\n    };\n\n    SceneJS_ChunkFactory.addChunkType(\"draw\", DrawChunk);\n})();\n;(function () {\n    \"use strict\";\n\n    var FLAGS = SceneJS.PROPERTY_FLAGS;\n    var DEPTH_TEST_FLAGS = SceneJS.DEPTH_TEST_FLAGS;\n\n    var tempVec4 = vec4.create();\n\n    var ObjectChunk = function (id, numericId, program, cores) {\n\n        this.id = id;\n        this.numericId = numericId;\n        this.program = program;\n\n        cores = cores || [];\n\n        for (var i = 0, len = cores.length; i < len; ++i) {\n            if (cores[i] && cores[i].empty) {\n                cores[i] = null;\n            }\n        }\n\n        this.cores = cores;\n        this.handles = {};\n        this.unique = true;\n\n        this.build();\n    };\n\n    ObjectChunk.prototype.build = function () {\n\n        this.propertiesCore = this.cores[0];\n        this.xformCore = this.cores[1];\n\n        var draw = this.program.draw;\n        var xray = this.program.xray;\n        var pick = this.program.pick;\n        var pickTriangle = this.program.pickTriangle;\n        var depth = this.program.depth;\n        var drawTexture = this.program.drawTexture;\n\n        var drawHandles = this.handles.draw = {};\n        var xrayHandles = this.handles.xray = {};\n        var pickHandles = this.handles.pick = {};\n        var pickTriangleHandles = this.handles.pickTriangle = {};\n        var depthHandles = this.handles.depth = {};\n        var drawTextureHandles = this.handles.drawTexture = {};\n\n        drawHandles.uDiscardOpaque = draw.getUniform(\"SCENEJS_uDiscardOpaque\");\n        drawHandles.uOutputFormat = draw.getUniform(\"SCENEJS_uOutputFormat\");\n\n        xrayHandles.uDiscardOpaque = xray.getUniform(\"SCENEJS_uDiscardOpaque\");\n        xrayHandles.uOutputFormat = xray.getUniform(\"SCENEJS_uOutputFormat\");\n\n        if (this.propertiesCore) {\n\n            drawHandles.uSolidColor = draw.getUniform(\"SCENEJS_uSolidColor\");\n            drawHandles.uXrayParams = draw.getUniform(\"SCENEJS_uXrayParams\");\n            xrayHandles.uSolidColor = xray.getUniform(\"SCENEJS_uSolidColor\");\n\n            depthHandles.uClipping = depth.getUniform(\"SCENEJS_uClipping\");\n\n            drawHandles.uColorModifications = new Array(this.propertiesCore.colorModifiers.length);\n            drawHandles.uColorModCenters = new Array(this.propertiesCore.colorModifiers.length);\n            drawHandles.uColorModRadii = new Array(this.propertiesCore.colorModifiers.length);\n\n            drawHandles.uColorModFresnels = new Array(this.propertiesCore.colorModifiers.length);\n\n            for (var cmi = 0, len = this.propertiesCore.colorModifiers.length; cmi < len; cmi++) {\n                var colorMod = this.propertiesCore.colorModifiers[cmi];\n                var value = colorMod.value;\n                drawHandles.uColorModifications[cmi] = draw.getUniform(\"SCENEJS_uColorModification\" + cmi);\n                if (value.isColorFresnel || value.isScalarFresnel) {\n                    drawHandles.uColorModFresnels[cmi] = {\n                        edge: draw.getUniform(\"SCENEJS_uColorModFresnelEdge\" + cmi),\n                        center: draw.getUniform(\"SCENEJS_uColorModFresnelCenter\" + cmi),\n                        power: draw.getUniform(\"SCENEJS_uColorModFresnelPower\" + cmi)\n                    };\n                }\n                drawHandles.uColorModCenters[cmi] = draw.getUniform(\"SCENEJS_uColorModCenter\" + cmi);\n                drawHandles.uColorModRadii[cmi] = draw.getUniform(\"SCENEJS_uColorModRadius\" + cmi);\n            }\n\n            drawHandles.uOpacityModifications = new Array(this.propertiesCore.opacityModifiers.length);\n            drawHandles.uOpacityModCenters = new Array(this.propertiesCore.opacityModifiers.length);\n            drawHandles.uOpacityModRadii = new Array(this.propertiesCore.opacityModifiers.length);\n            drawHandles.uOpacityModFresnels = new Array(this.propertiesCore.opacityModifiers.length);\n            for (var omi = 0, len = this.propertiesCore.opacityModifiers.length; omi < len; ++omi) {\n                var opacityMod = this.propertiesCore.opacityModifiers[omi];\n                drawHandles.uOpacityModifications[omi] = draw.getUniform(\"SCENEJS_uOpacityModification\" + omi);\n                if (opacityMod.value.isScalarFresnel) {\n                    drawHandles.uOpacityModFresnels[omi] = {\n                        edge: draw.getUniform(\"SCENEJS_uOpacityModFresnelEdge\" + omi),\n                        center: draw.getUniform(\"SCENEJS_uOpacityModFresnelCenter\" + omi),\n                        power: draw.getUniform(\"SCENEJS_uOpacityModFresnelPower\" + omi)\n                    }\n                }\n                drawHandles.uOpacityModCenters[omi] = draw.getUniform(\"SCENEJS_uOpacityModCenter\" + omi);\n                drawHandles.uOpacityModRadii[omi] = draw.getUniform(\"SCENEJS_uOpacityModRadius\" + omi);\n            }\n        }\n\n        if (this.xformCore) {\n            drawHandles.uMatLocation = draw.getUniform(\"SCENEJS_uMMatrix\");\n            drawHandles.uNormalMatLocation = draw.getUniform(\"SCENEJS_uMNMatrix\");\n\n            xrayHandles.uMatLocation = xray.getUniform(\"SCENEJS_uMMatrix\");\n            xrayHandles.uNormalMatLocation = xray.getUniform(\"SCENEJS_uMNMatrix\");\n\n            pickHandles.uMatLocation = pick.getUniform(\"SCENEJS_uMMatrix\");\n\n            pickTriangleHandles.uMatLocation = pickTriangle.getUniform(\"SCENEJS_uMMatrix\");\n\n            depthHandles.uMatLocation = depth.getUniform(\"SCENEJS_uMMatrix\");\n\n            drawTextureHandles.uMatLocation = drawTexture.getUniform(\"SCENEJS_uMMatrix\");\n        }\n    };\n\n    ObjectChunk.prototype.draw = function (renderMode, frameCtx) {\n\n        var gl = this.program.gl;\n        var picking = frameCtx.picking;\n        var handles = this.handles[renderMode];\n\n        if (handles.uDiscardOpaque) {\n            handles.uDiscardOpaque.setValue(frameCtx.discardOpaque);\n        }\n\n        if (handles.uOutputFormat) {\n            handles.uOutputFormat.setValue(frameCtx.outputFormat);\n        }\n\n        if (this.propertiesCore) {\n\n            var depthTest = this.propertiesCore.depthTest;\n\n            if (frameCtx.depthTest != depthTest) {\n                if (depthTest == DEPTH_TEST_FLAGS.ALWAYS_PASS) {\n                    gl.enable(gl.DEPTH_TEST);\n                    gl.depthFunc(gl.ALWAYS);\n                } else if (depthTest == DEPTH_TEST_FLAGS.DISABLED) {\n                    gl.disable(gl.DEPTH_TEST);\n                } else {\n                    gl.enable(gl.DEPTH_TEST);\n                    gl.depthFunc(gl.LESS);\n                }\n                frameCtx.depthTest = depthTest;\n            }\n\n            var frontfaceCCW = this.propertiesCore.flags & FLAGS.CCW;\n\n            if (frameCtx.frontface != frontfaceCCW) {\n                if (frontfaceCCW) {\n                    gl.frontFace(gl.CCW);\n                } else {\n                    gl.frontFace(gl.CW);\n                }\n                frameCtx.frontface = frontfaceCCW;\n            }\n\n            // color modifications with optional modification range definition\n            if (handles.uColorModifications) {\n                for (var cmi = 0, len = this.propertiesCore.colorModifiers.length; cmi < len; ++cmi) {\n\n                    var colorMod = this.propertiesCore.colorModifiers[cmi];\n                    var value = colorMod.value;\n\n                    if (handles.uColorModifications[cmi]) {\n                        handles.uColorModifications[cmi].setValue(value);\n                    }\n\n                    var uColorModFresnel = handles.uColorModFresnels[cmi];\n                    if (uColorModFresnel) {\n                        if (value.isColorFresnel) {\n                            if (uColorModFresnel.edge) {\n                                tempVec4[0] = value.edge[0];\n                                tempVec4[1] = value.edge[1];\n                                tempVec4[2] = value.edge[2];\n                                tempVec4[3] = value.edgeBias;\n                                uColorModFresnel.edge.setValue(tempVec4);\n                            }\n                            if (uColorModFresnel.center) {\n                                tempVec4[0] = value.center[0];\n                                tempVec4[1] = value.center[1];\n                                tempVec4[2] = value.center[2];\n                                tempVec4[3] = value.centerBias;\n                                uColorModFresnel.center.setValue(tempVec4);\n                            }\n                            if (uColorModFresnel.power) {\n                                uColorModFresnel.power.setValue(value.power);\n                            }\n                        } else if (value.isScalarFresnel) {\n                            if (uColorModFresnel.edge) {\n                                tempVec4[0] = value.edge;\n                                tempVec4[3] = value.edgeBias;\n                                uColorModFresnel.edge.setValue(tempVec4);\n                            }\n                            if (uColorModFresnel.center) {\n                                tempVec4[0] = value.center;\n                                tempVec4[3] = value.centerBias;\n                                uColorModFresnel.center.setValue(tempVec4);\n                            }\n                            if (uColorModFresnel.power) {\n                                uColorModFresnel.power.setValue(value.power);\n                            }\n                        }\n                    }\n\n                    if (handles.uColorModCenters[cmi]) {\n                        handles.uColorModCenters[cmi].setValue(colorMod.range.center);\n                    }\n                    if (handles.uColorModRadii[cmi]) {\n                        handles.uColorModRadii[cmi].setValue(colorMod.range.radius);\n                    }\n                }\n            }\n\n            if (handles.uOpacityModifications) {\n                for (var omi = 0, len = this.propertiesCore.opacityModifiers.length; omi < len; ++omi) {\n\n                    var opacityMod = this.propertiesCore.opacityModifiers[omi];\n                    var value = opacityMod.value;\n\n                    if (handles.uOpacityModifications[omi]) {\n                        handles.uOpacityModifications[omi].setValue(value);\n                    }\n\n                    var uOpacityModFresnel = handles.uOpacityModFresnels[omi];\n                    if (uOpacityModFresnel) {\n                        if (uOpacityModFresnel.edge) {\n                            tempVec4[0] = value.edge;\n                            tempVec4[3] = value.edgeBias;\n                            uOpacityModFresnel.edge.setValue(tempVec4);\n                        }\n                        if (uOpacityModFresnel.center) {\n                            tempVec4[0] = value.center;\n                            tempVec4[3] = value.centerBias;\n                            uOpacityModFresnel.center.setValue(tempVec4);\n                        }\n                        if (uOpacityModFresnel.power) {\n                            uOpacityModFresnel.power.setValue(value.power);\n                        }\n                    }\n\n                    if (handles.uOpacityModCenters[omi]) {\n                        handles.uOpacityModCenters[omi].setValue(opacityMod.range.center);\n                    }\n                    if (handles.uOpacityModRadii[omi]) {\n                        handles.uOpacityModRadii[omi].setValue(opacityMod.range.radius);\n                    }\n                }\n            }\n\n            if (handles.uSolidColor) {\n                handles.uSolidColor.setValue(this.propertiesCore.solidColor);\n            }\n\n            if (handles.uXrayParams) {\n                handles.uXrayParams.setValue(this.propertiesCore.xrayParams);\n            }\n        }\n\n        if (this.xformCore) {\n            if (handles.uMatLocation) {\n                handles.uMatLocation.setValue(this.xformCore.matrix);\n            }\n\n            if (handles.uNormalMatLocation) {\n                handles.uNormalMatLocation.setValue(this.xformCore.normalMatrix);\n            }\n        }\n    };\n\n    SceneJS_ChunkFactory.addChunkType(\"object\", ObjectChunk);\n})();\n;(function () {\n    \"use strict\";\n\n    var GeometryChunk = function (id, numericId, program, cores) {\n\n        this.id = id;\n        this.numericId = numericId;\n        this.program = program;\n\n        cores = cores || [];\n\n        for (var i = 0, len = cores.length; i < len; ++i) {\n            if (cores[i] && cores[i].empty) {\n                cores[i] = null;\n            }\n        }\n\n        this.cores = cores;\n        this.handles = {};\n        this.VAOs = {\n            draw: null,\n            pick: null,\n            pickTriangle: null,\n            xray: null,\n            depth: null,\n            drawTexture: null\n        };\n\n        this.build();\n    };\n\n    GeometryChunk.prototype.build = function () {\n\n        this.core = this.cores[0];\n        this.core2 = this.cores[1];\n\n        var draw = this.program.draw;\n\n        var uvLength = 0;\n        if(this.core2.uvBufs) {\n            uvLength = this.core2.uvBufs.length;\n        }\n\n        this.handles.draw = {\n            aRegionMapUV: draw.getAttribute(\"SCENEJS_aRegionMapUV\"),\n            aVertex: draw.getAttribute(\"SCENEJS_aVertex\"),\n            aNormal: draw.getAttribute(\"SCENEJS_aNormal\"),\n            aUV: new Array(uvLength),\n            uDecodeUV: new Array(uvLength),\n            aTangent: draw.getAttribute(\"SCENEJS_aTangent\"),\n            aColor: draw.getAttribute(\"SCENEJS_aVertexColor\"),\n\n            aMorphVertex: draw.getAttribute(\"SCENEJS_aMorphVertex\"),\n            aMorphNormal: draw.getAttribute(\"SCENEJS_aMorphNormal\"),\n            aMorphTangent: draw.getAttribute(\"SCENEJS_aMorphTangent\"),\n            aPointScaleRotation: draw.getAttribute(\"SCENEJS_aPointScaleRotation\"),\n            aPointUVTranslate: draw.getAttribute(\"SCENEJS_aPointUVTranslate\"),\n            uPointUVScale: draw.getUniform(\"SCENEJS_uPointUVScale\"),\n            uMorphFactor: draw.getUniform(\"SCENEJS_uMorphFactor\"),\n            uPointSize: draw.getUniform(\"SCENEJS_uPointSize\"),\n            uDecodePositions: draw.getUniform(\"SCENEJS_uDecodePositionMatrix\"),\n            uDecodeMorphPos: draw.getUniform(\"SCENEJS_uDecodeMorphPosMatrix\"),\n        };\n\n        for (var i = 0; i < uvLength; i++) {\n            this.handles.draw.aUV[i] = draw.getAttribute(\"SCENEJS_aUVCoord\" + i);\n            this.handles.draw.uDecodeUV[i] = draw.getUniform(\"SCENEJS_uDecodeUVMatrix\" + i);\n        }\n\n        var xray = this.program.xray;\n\n        this.handles.xray = {\n            aVertex: xray.getAttribute(\"SCENEJS_aVertex\"),\n            aNormal: xray.getAttribute(\"SCENEJS_aNormal\"),\n            aMorphVertex: xray.getAttribute(\"SCENEJS_aMorphVertex\"),\n            aMorphNormal: xray.getAttribute(\"SCENEJS_aMorphNormal\"),\n            aPointScaleRotation: xray.getAttribute(\"SCENEJS_aPointScaleRotation\"),\n            uMorphFactor: xray.getUniform(\"SCENEJS_uMorphFactor\"),\n            uPointSize: xray.getUniform(\"SCENEJS_uPointSize\"),\n            uDecodePositions: xray.getUniform(\"SCENEJS_uDecodePositionMatrix\"),\n            uDecodeMorphPos: xray.getUniform(\"SCENEJS_uDecodeMorphPosMatrix\")\n        };\n\n        var pick = this.program.pick;\n\n        this.handles.pick = {\n            aRegionMapUV: pick.getAttribute(\"SCENEJS_aRegionMapUV\"),\n            aVertex: pick.getAttribute(\"SCENEJS_aVertex\"),\n            aMorphVertex: pick.getAttribute(\"SCENEJS_aMorphVertex\"),\n            aPointScaleRotation: pick.getAttribute(\"SCENEJS_aPointScaleRotation\"),\n            uMorphFactor: pick.getUniform(\"SCENEJS_uMorphFactor\"),\n            uPointSize: pick.getUniform(\"SCENEJS_uPointSize\"),\n            uDecodePositions: pick.getUniform(\"SCENEJS_uDecodePositionMatrix\"),\n            uDecodeMorphPos: pick.getUniform(\"SCENEJS_uDecodeMorphPosMatrix\")\n        };\n\n        var pickTriangle = this.program.pickTriangle;\n\n        this.handles.pickTriangle = {\n            aVertex: pickTriangle.getAttribute(\"SCENEJS_aVertex\"),\n            aTriColor: pickTriangle.getAttribute(\"SCENEJS_aTriColor\"),\n            aMorphVertex: pickTriangle.getAttribute(\"SCENEJS_aMorphVertex\"),\n            aPointScaleRotation: pickTriangle.getAttribute(\"SCENEJS_aPointScaleRotation\"),\n            uMorphFactor: pickTriangle.getUniform(\"SCENEJS_uMorphFactor\"),\n            uPointSize: pickTriangle.getUniform(\"SCENEJS_uPointSize\"),\n            uDecodePositions: pickTriangle.getUniform(\"SCENEJS_uDecodePositionMatrix\"),\n            uDecodeMorphPos: pickTriangle.getUniform(\"SCENEJS_uDecodeMorphPosMatrix\")\n        };\n\n        var depth = this.program.depth;\n\n        this.handles.depth = {\n            aVertex: depth.getAttribute(\"SCENEJS_aVertex\"),\n            aMorphVertex: depth.getAttribute(\"SCENEJS_aMorphVertex\"),\n            aPointScaleRotation: depth.getAttribute(\"SCENEJS_aPointScaleRotation\"),\n            uMorphFactor: depth.getUniform(\"SCENEJS_uMorphFactor\"),\n            uPointSize: depth.getUniform(\"SCENEJS_uPointSize\"),\n            uDecodePositions: depth.getUniform(\"SCENEJS_uDecodePositionMatrix\"),\n            uDecodeMorphPos: depth.getUniform(\"SCENEJS_uDecodeMorphPosMatrix\")\n        };\n\n        var drawTexture = this.program.drawTexture;\n        \n        this.handles.drawTexture = {\n            aVertex: drawTexture.getAttribute(\"SCENEJS_aVertex\"),\n            aUV: new Array(uvLength),\n            uDecodeUV: new Array(uvLength),\n            aMorphVertex: drawTexture.getAttribute(\"SCENEJS_aMorphVertex\"),\n            uMorphFactor: drawTexture.getUniform(\"SCENEJS_uMorphFactor\"),\n            uDecodePositions: drawTexture.getUniform(\"SCENEJS_uDecodePositionMatrix\"),\n            uDecodeMorphPos: drawTexture.getUniform(\"SCENEJS_uDecodeMorphPosMatrix\")\n        };\n\n        for (var i = 0; i < uvLength; i++) {\n            this.handles.drawTexture.aUV[i] = drawTexture.getAttribute(\"SCENEJS_aUVCoord\" + i);\n            this.handles.drawTexture.uDecodeUV[i] = drawTexture.getUniform(\"SCENEJS_uDecodeUVMatrix\" + i);\n        }\n\n        for (var renderMode in this.VAOs) {\n            this.VAOs[renderMode] = {\n                VAO: null,\n                morphKey1: -1,\n                morphKey2: -1\n            };\n        }\n\n    };\n\n    GeometryChunk.prototype.recycle = function () {\n        var VAOExt = this.program.gl.getExtension(\"OES_vertex_array_object\");\n        if (VAOExt) {\n            for (var renderMode in this.VAOs) {\n                if (this.VAOs[renderMode].VAO) {\n                    VAOExt.deleteVertexArrayOES(this.VAOs[renderMode].VAO);\n                    this.VAOs[renderMode].VAO = null;\n                }\n                this.VAOs[renderMode].morphKey1 = -1;\n                this.VAOs[renderMode].morphKey2 = -1;\n            }\n        }\n    };\n\n    GeometryChunk.prototype.morphDraw = function (handles, VAO, frameCtx) {\n\n        VAO.morphKey1 = this.core.key1;\n        VAO.morphKey2 = this.core.key2;\n\n        var key1 = this.core.key1;\n        var key2 = this.core.key2;\n\n        var target1 = this.core.targets[key1]; // Keys will update\n        var target2 = this.core.targets[key2];\n\n        if (handles.aMorphVertex) {\n            handles.aVertex.bindArrayBuffer(target1.vertexBuf);\n            handles.aMorphVertex.bindArrayBuffer(target2.vertexBuf);\n            frameCtx.bindArray += 2;\n\n        } else if (handles.aVertex) {\n            handles.aVertex.bindArrayBuffer(this.core2.vertexBuf);\n            frameCtx.bindArray++;\n        }\n\n        if (handles.aMorphNormal) {\n            handles.aNormal.bindArrayBuffer(target1.normalBuf);\n            handles.aMorphNormal.bindArrayBuffer(target2.normalBuf);\n            frameCtx.bindArray += 2;\n\n        } else if (handles.aNormal) {\n            handles.aNormal.bindArrayBuffer(this.core2.normalBuf);\n            frameCtx.bindArray++;\n        }\n\n        if (handles.aMorphTangent || handles.aTangent) {\n\n            // Bind tangent arrays from geometry and morphGeometry\n\n            // Use the first UV layer since tangents should be the same for all UV layouts.\n\n            if (frameCtx.hasNormalMap) {\n                if (handles.aMorphTangent) {\n                    handles.aTangent.bindArrayBuffer(\n                        this.core.getTangents(key1, this.core2.arrays.indices, this.core2.arrays.uvs[0],\n                            this.core2.positionDecodeMat, this.core2.compressedUVs && this.core2.uvDecodeMats[0])\n                    );\n                    handles.aMorphTangent.bindArrayBuffer(\n                        this.core.getTangents(key2, this.core2.arrays.indices, this.core2.arrays.uvs[0],\n                            this.core2.positionDecodeMat, this.core2.compressedUVs && this.core2.uvDecodeMats[0])\n                    );\n                    frameCtx.bindArray += 2;\n\n                }\n            }\n        }\n\n        // Bind UV layer from geometry\n\n        if (handles.aUV) {\n            var uvBuf;\n            for (var i = 0, len = handles.aUV.length; i < len; i++) {\n                uvBuf = this.core2.uvBufs[i];\n                if (uvBuf && handles.aUV[i]) {\n                    handles.aUV[i].bindArrayBuffer(uvBuf);\n                    frameCtx.bindArray++;\n                }\n            }\n        }\n\n        if (handles.aColor) {\n            handles.aColor.bindArrayBuffer(this.core2.colorBuf);\n            frameCtx.bindArray++;\n        }\n    };\n\n    GeometryChunk.prototype.updateGeoUniforms = function (handles) {\n        if (handles.uDecodePositions) {\n            handles.uDecodePositions.setValue(this.core2.positionDecodeMat);\n        }\n    };\n\n    GeometryChunk.prototype.updateMorphUniforms = function (handles) {\n        var key1 = this.core.key1;\n        var key2 = this.core.key2;\n\n        var target1 = this.core.targets[key1]; // Keys will update\n        var target2 = this.core.targets[key2];\n\n        if (handles.uDecodePositions) {\n            handles.uDecodePositions.setValue(target1.positionDecodeMat);\n        }\n\n        if (handles.uDecodeMorphPos) {\n            handles.uDecodeMorphPos.setValue(target2.positionDecodeMat);\n        }\n\n        if (handles.uMorphFactor) {\n            handles.uMorphFactor.setValue(this.core.factor); // Bind LERP factor\n        }\n    };\n\n    GeometryChunk.prototype.draw = function (renderMode, frameCtx) {\n        var handles = this.handles[renderMode];\n        var VAO = this.VAOs[renderMode];\n\n        var doMorph = this.core.targets && this.core.targets.length;\n\n        if (handles.uPointSize) {\n            handles.uPointSize.setValue(this.core2.pointSize);\n        }\n\n        if (handles.uPointUVScale) {\n            handles.uPointUVScale.setValue(this.core2.pointUVScale);\n        }\n\n        if (handles.uDecodeUV) {\n            for (var i = 0, len = handles.uDecodeUV.length; i < len; i++) {\n                if (handles.uDecodeUV[i]) {\n                    handles.uDecodeUV[i].setValue(this.core2.uvDecodeMats[i]);\n                }\n            }\n        }\n\n        if (doMorph) {\n            this.updateMorphUniforms(handles);\n        } else {\n            this.updateGeoUniforms(handles);\n        }\n\n        if (frameCtx.pickTriangle) {\n\n            if (doMorph) {\n                if (handles.aMorphVertex) {\n\n                    var pickPositionsBuf = this.core.getPickPositions(this.core.key1, this.core2.arrays.indices);\n                    if (pickPositionsBuf) {\n                        handles.aVertex.bindArrayBuffer(pickPositionsBuf);\n                    }\n\n                    pickPositionsBuf = this.core.getPickPositions(this.core.key2, this.core2.arrays.indices);\n                    if (pickPositionsBuf) {\n                        handles.aMorphVertex.bindArrayBuffer(pickPositionsBuf);\n                    }\n\n                    if (handles.aTriColor) {\n                        handles.aTriColor.bindArrayBuffer(this.core2.getPickColors());\n                    }\n\n                } else if (handles.aVertex) {\n\n                    handles.aVertex.bindArrayBuffer(this.core2.vertexBuf);\n\n                    this.core2.indexBuf.bind();\n                }\n            } else {\n\n                if (handles.aVertex) {\n                    handles.aVertex.bindArrayBuffer(this.core2.getPickPositions());\n                }\n\n                if (handles.aTriColor) {\n                    handles.aTriColor.bindArrayBuffer(this.core2.getPickColors());\n                }\n\n            }\n\n            return;\n        }\n\n        if (VAO.VAO && frameCtx.VAO) { // Workaround for https://github.com/xeolabs/scenejs/issues/459\n            frameCtx.VAO.bindVertexArrayOES(VAO.VAO);\n            if (doMorph) {\n                if (VAO.morphKey1 == this.core.key1 && VAO.morphKey2 == this.core.key2) {\n                    return;\n                }\n            } else {\n                return;\n            }\n        } else if (frameCtx.VAO) {\n            // Start creating a new VAO by switching to the default VAO, which doesn't have attribs enabled.\n            frameCtx.VAO.bindVertexArrayOES(null);\n            VAO.VAO = frameCtx.VAO.createVertexArrayOES();\n            frameCtx.VAO.bindVertexArrayOES(VAO.VAO);\n        }\n\n        if (doMorph) {\n            this.morphDraw(handles, VAO, frameCtx);\n        } else {\n            if (handles.aVertex) {\n                handles.aVertex.bindArrayBuffer(this.core2.vertexBuf);\n                frameCtx.bindArray++;\n            }\n            if (handles.aNormal) {\n                handles.aNormal.bindArrayBuffer(this.core2.normalBuf);\n                frameCtx.bindArray++;\n            }\n            if (handles.aUV) {\n                var uvBuf;\n                for (var i = 0, len = handles.aUV.length; i < len; i++) {\n                    uvBuf = this.core2.uvBufs[i];\n                    if (uvBuf && handles.aUV[i]) {\n                        handles.aUV[i].bindArrayBuffer(uvBuf);\n                        frameCtx.bindArray++;\n                    }\n                }\n            }\n            if (handles.aColor) {\n                handles.aColor.bindArrayBuffer(this.core2.colorBuf);\n                frameCtx.bindArray++;\n            }\n\n            if (handles.aPointScaleRotation) {\n                handles.aPointScaleRotation.bindArrayBuffer(this.core2.pointScaleRotationBuf);\n                frameCtx.bindArray++;                \n            }\n\n            if (handles.aPointUVTranslate) {\n                handles.aPointUVTranslate.bindArrayBuffer(this.core2.pointUVTranslateBuf);\n                frameCtx.bindArray++;\n            }\n\n            if (handles.aTangent) {\n\n                // In the texture chunk we remembered which UV layer we're using for the normal\n                // map so that we can lazy-generate the tangents from the appropriate UV layer\n                // in the geometry chunk.\n\n                // Just use the first UV layer to generate tangest since it should be the same\n                // for all layouts.\n\n                if (frameCtx.hasNormalMap) {\n                    handles.aTangent.bindArrayBuffer(this.core2.getTangents(0));\n                    frameCtx.bindArray++;\n                }\n            }\n        }\n\n        if (handles.aRegionMapUV) {\n            var regionMapUVLayerIdx = frameCtx.regionMapUVLayerIdx; // Set by regionMapChunk\n            if (regionMapUVLayerIdx >= 0) {\n                var uvBufs = this.core2.uvBufs;\n                if (regionMapUVLayerIdx < uvBufs.length) {\n                    handles.aRegionMapUV.bindArrayBuffer(uvBufs[regionMapUVLayerIdx]);\n                    frameCtx.bindArray++;\n                }\n            }\n        }\n\n        if (this.core2.indexBuf) {\n            this.core2.indexBuf.bind();\n        }\n    };\n\n    SceneJS_ChunkFactory.addChunkType(\"geometry\", GeometryChunk);\n\n})();\n;(function () {\n    \"use strict\";\n\n    var MaterialChunk = function (id, numericId, program, cores) {\n\n        this.id = id;\n        this.numericId = numericId;\n        this.program = program;\n\n        cores = cores || [];\n\n        for (var i = 0, len = cores.length; i < len; ++i) {\n            if (cores[i] && cores[i].empty) {\n                cores[i] = null;\n            }\n        }\n\n        this.cores = cores;\n        this.handles = {};\n\n        this.build();\n    };\n\n    MaterialChunk.prototype.build = function () {\n\n        this.materialCore = this.cores[0];\n        this.textureCore = this.cores[1];\n        this.fresnelCore = this.cores[2];\n        this.cubemapCore = this.cores[3];\n\n        var draw = this.program.draw;\n        var drawHandles = this.handles.draw = {};\n        var drawTexture = this.program.drawTexture;\n        var drawTextureHandles = this.handles.drawTexture = {};\n\n        if (this.materialCore) {\n            drawHandles.uMaterialBaseColor = draw.getUniform(\"SCENEJS_uMaterialColor\");\n            drawHandles.uMaterialSpecularColor = draw.getUniform(\"SCENEJS_uMaterialSpecularColor\");\n            drawHandles.uMaterialEmitColor = draw.getUniform(\"SCENEJS_uMaterialEmitColor\");\n            drawHandles.uMaterialShine = draw.getUniform(\"SCENEJS_uMaterialShine\");\n            drawHandles.uMetalRoughSpecularf0 = draw.getUniform(\"SCENEJS_uMetalRoughSpecularf0\");\n        }\n\n        if (this.textureCore) {\n            drawHandles.uTexSampler = [];\n            drawHandles.uTexMatrix = [];\n            drawHandles.uTexBlendFactor = [];\n\n            var layers = this.textureCore.layers;\n\n            if (layers) {\n\n                var layer;\n                var draw = this.program.draw;\n\n                for (var i = 0, len = layers.length; i < len; i++) {\n\n                    layer = layers[i];\n\n                    drawHandles.uTexSampler[i] = \"SCENEJS_uSampler\" + i;\n                    drawHandles.uTexMatrix[i] = draw.getUniform(\"SCENEJS_uLayer\" + i + \"Matrix\");\n                    drawHandles.uTexBlendFactor[i] = draw.getUniform(\"SCENEJS_uLayer\" + i + \"BlendFactor\");\n                }\n            \n                drawTextureHandles.uDrawSampler = \"SCENEJS_uDrawSampler\";\n            }\n        }\n\n        if (this.fresnelCore) {\n            var fresnelCore = this.fresnelCore;\n\n            if (fresnelCore.diffuse) {\n                drawHandles.uDiffuseFresnelCenterColor = draw.getUniform(\"SCENEJS_uDiffuseFresnelCenterColor\");\n                drawHandles.uDiffuseFresnelEdgeColor = draw.getUniform(\"SCENEJS_uDiffuseFresnelEdgeColor\");\n                drawHandles.uDiffuseFresnelPower = draw.getUniform(\"SCENEJS_uDiffuseFresnelPower\");\n            }\n\n            if (fresnelCore.specular) {\n                drawHandles.uSpecularFresnelCenterColor = draw.getUniform(\"SCENEJS_uSpecularFresnelCenterColor\");\n                drawHandles.uSpecularFresnelEdgeColor = draw.getUniform(\"SCENEJS_uSpecularFresnelEdgeColor\");\n                drawHandles.uSpecularFresnelPower = draw.getUniform(\"SCENEJS_uSpecularFresnelPower\");\n            }\n\n            if (fresnelCore.alpha) {\n                drawHandles.uAlphaFresnelCenterColor = draw.getUniform(\"SCENEJS_uAlphaFresnelCenterColor\");\n                drawHandles.uAlphaFresnelEdgeColor = draw.getUniform(\"SCENEJS_uAlphaFresnelEdgeColor\");\n                drawHandles.uAlphaFresnelPower = draw.getUniform(\"SCENEJS_uAlphaFresnelPower\");\n            }\n\n            if (fresnelCore.transparency) {\n                drawHandles.uTransparencyFresnelCenterColor = draw.getUniform(\"SCENEJS_uTransparencyFresnelCenterColor\");\n                drawHandles.uTransparencyFresnelEdgeColor = draw.getUniform(\"SCENEJS_uTransparencyFresnelEdgeColor\");\n                drawHandles.uTransparencyFresnelPower = draw.getUniform(\"SCENEJS_uTransparencyFresnelPower\");\n            }\n\n            if (fresnelCore.reflect) {\n                drawHandles.uReflectFresnelCenterColor = draw.getUniform(\"SCENEJS_uReflectFresnelCenterColor\");\n                drawHandles.uReflectFresnelEdgeColor = draw.getUniform(\"SCENEJS_uReflectFresnelEdgeColor\");\n                drawHandles.uReflectFresnelPower = draw.getUniform(\"SCENEJS_uReflectFresnelPower\");\n            }\n\n            if (fresnelCore.emit) {\n                drawHandles.uEmitFresnelCenterColor = draw.getUniform(\"SCENEJS_uEmitFresnelCenterColor\");\n                drawHandles.uEmitFresnelEdgeColor = draw.getUniform(\"SCENEJS_uEmitFresnelEdgeColor\");\n                drawHandles.uEmitFresnelPower = draw.getUniform(\"SCENEJS_uEmitFresnelPower\");\n            }\n\n            if (fresnelCore.fragment) {\n                drawHandles.uFragmentFresnelCenterColor = draw.getUniform(\"SCENEJS_uFragmentFresnelCenterColor\");\n                drawHandles.uFragmentFresnelEdgeColor = draw.getUniform(\"SCENEJS_uFragmentFresnelEdgeColor\");\n                drawHandles.uFragmentFresnelPower = draw.getUniform(\"SCENEJS_uFragmentFresnelPower\");\n            }\n        }\n\n        if (this.cubemapCore) {\n            var layers = this.cubemapCore.layers;\n            drawHandles.uCubeMapSampler = new Array(layers.length);\n            drawHandles.uCubeMapIntensity = new Array(layers.length);\n            drawHandles.uCubeMapMipLevels = new Array(layers.length);\n            if (layers) {\n                var layer;\n                var draw = this.program.draw;\n                for (var i = 0, len = layers.length; i < len; i++) {\n                    layer = layers[i];\n                    drawHandles.uCubeMapSampler[i] = \"SCENEJS_uCubeMapSampler\" + i;\n                    drawHandles.uCubeMapIntensity[i] = draw.getUniform(\"SCENEJS_uCubeMapIntensity\" + i);\n                    drawHandles.uCubeMapMipLevels[i] = draw.getUniform(\"SCENEJS_uCubeMapMipLevels\" + i);\n                }\n            }\n        }\n\n    };\n\n    MaterialChunk.prototype.draw = function (rendertype, frameCtx) {\n\n        var gl = this.program.gl;\n        var handles = this.handles[rendertype];\n\n        if (this.materialCore) {\n            if (handles.uMaterialBaseColor) {\n                handles.uMaterialBaseColor.setValue(this.materialCore.baseColor);\n            }\n\n            if (handles.uMaterialSpecularColor) {\n                handles.uMaterialSpecularColor.setValue(this.materialCore.specularColor);\n            }\n\n            if (handles.uMaterialEmitColor) {\n                handles.uMaterialEmitColor.setValue(this.materialCore.emitColor);\n            }\n\n            if (handles.uMaterialSpecular) {\n                handles.uMaterialSpecular.setValue(this.materialCore.specular);\n            }\n\n            if (handles.uMaterialShine) {\n                handles.uMaterialShine.setValue(this.materialCore.shine);\n            }\n\n            if (handles.uMaterialEmit) {\n                handles.uMaterialEmit.setValue(this.materialCore.emit);\n            }\n\n            if (handles.uMaterialAlpha) {\n                handles.uMaterialAlpha.setValue(this.materialCore.alpha);\n            }\n\n            if (handles.uMetalRoughSpecularf0) {\n                handles.uMetalRoughSpecularf0.setValue(this.materialCore.metalRoughspecularf0);\n            }\n        }\n\n        if (this.textureCore) {\n            frameCtx.hasNormalMap = false;\n\n            var layers = this.textureCore.layers;\n\n            if (layers) {\n\n                var program = this.program[rendertype];\n                var layer;\n\n                if (handles.uTexSampler) {\n                    for (var i = 0, len = layers.length; i < len; i++) {\n\n                        layer = layers[i];\n\n                        if (handles.uTexSampler[i] && layer.texture) {    // Lazy-loads\n\n                            program.bindTexture(handles.uTexSampler[i], layer.texture, frameCtx.textureUnit);\n                            frameCtx.textureUnit = (frameCtx.textureUnit + 1) % SceneJS.WEBGL_INFO.MAX_TEXTURE_UNITS;\n\n                            frameCtx.bindTexture++;\n\n                            if (layer._matrixDirty && layer.buildMatrix) {\n                                layer.buildMatrix.call(layer);\n                            }\n\n                            if (handles.uTexMatrix && handles.uTexMatrix[i]) {\n                                handles.uTexMatrix[i].setValue(layer.matrixAsArray);\n                            }\n\n                            if (handles.uTexBlendFactor && handles.uTexBlendFactor[i]) {\n                                handles.uTexBlendFactor[i].setValue(layer.blendFactor);\n                            }\n\n                            frameCtx.hasNormalMap = frameCtx.hasNormalMap || layer.isNormalMap;\n\n                        }\n                    }\n                }\n\n                if (handles.uDrawSampler) {\n                    var drawLayerIndex = this.textureCore.drawLayerIndex;\n                    var drawLayer = layers[drawLayerIndex];\n                    program.bindTexture(handles.uDrawSampler, drawLayer.texture, frameCtx.textureUnit);\n                    frameCtx.textureUnit = (frameCtx.textureUnit + 1) % SceneJS.WEBGL_INFO.MAX_TEXTURE_UNITS;\n                }\n            }\n            \n            frameCtx.texture = this.textureCore;\n        }\n\n        if (this.fresnelCore) {\n            var fresnelCore = this.fresnelCore;\n\n            if (fresnelCore.diffuse) {\n\n                if (handles.uDiffuseFresnelCenterColor) {\n                    handles.uDiffuseFresnelCenterColor.setValue(fresnelCore.diffuse.centerColor);\n                }\n\n                if (handles.uDiffuseFresnelEdgeColor) {\n                    handles.uDiffuseFresnelEdgeColor.setValue(fresnelCore.diffuse.edgeColor);\n                }\n\n                if (handles.uDiffuseFresnelPower) {\n                    handles.uDiffuseFresnelPower.setValue(fresnelCore.diffuse.power);\n                }\n            }\n\n            if (fresnelCore.specular) {\n\n                if (handles.uSpecularFresnelCenterColor) {\n                    handles.uSpecularFresnelCenterColor.setValue(fresnelCore.specular.centerColor);\n                }\n\n                if (handles.uSpecularFresnelEdgeColor) {\n                    handles.uSpecularFresnelEdgeColor.setValue(fresnelCore.specular.edgeColor);\n                }\n\n                if (handles.uSpecularFresnelPower) {\n                    handles.uSpecularFresnelPower.setValue(fresnelCore.specular.power);\n                }\n            }\n\n            if (fresnelCore.alpha) {\n\n                if (handles.uAlphaFresnelCenterColor) {\n                    handles.uAlphaFresnelCenterColor.setValue(fresnelCore.alpha.centerColor);\n                }\n\n                if (handles.uAlphaFresnelEdgeColor) {\n                    handles.uAlphaFresnelEdgeColor.setValue(fresnelCore.alpha.edgeColor);\n                }\n\n                if (handles.uAlphaFresnelPower) {\n                    handles.uAlphaFresnelPower.setValue(fresnelCore.alpha.power);\n                }\n            }\n\n            if (fresnelCore.transparency) {\n                if (handles.uTransparencyFresnelCenterColor) {\n                    handles.uTransparencyFresnelCenterColor.setValue(fresnelCore.transparency.centerColor);\n                }\n                if (handles.uTransparencyFresnelEdgeColor) {\n                    handles.uTransparencyFresnelEdgeColor.setValue(fresnelCore.transparency.edgeColor);\n                }\n                if (handles.uTransparencyFresnelPower) {\n                    handles.uTransparencyFresnelPower.setValue(fresnelCore.transparency.power);\n                }\n            }\n\n            if (fresnelCore.reflect) {\n\n                if (handles.uReflectFresnelCenterColor) {\n                    handles.uReflectFresnelCenterColor.setValue(fresnelCore.reflect.centerColor);\n                }\n\n                if (handles.uReflectFresnelEdgeColor) {\n                    handles.uReflectFresnelEdgeColor.setValue(fresnelCore.reflect.edgeColor);\n                }\n\n                if (handles.uReflectFresnelPower) {\n                    handles.uReflectFresnelPower.setValue(fresnelCore.reflect.power);\n                }\n            }\n\n            if (fresnelCore.emit) {\n\n                if (handles.uEmitFresnelCenterColor) {\n                    handles.uEmitFresnelCenterColor.setValue(fresnelCore.emit.centerColor);\n                }\n\n                if (handles.uEmitFresnelEdgeColor) {\n                    handles.uEmitFresnelEdgeColor.setValue(fresnelCore.emit.edgeColor);\n                }\n\n                if (handles.uEmitFresnelPower) {\n                    handles.uEmitFresnelPower.setValue(fresnelCore.emit.power);\n                }\n            }\n\n            if (fresnelCore.fragment) {\n\n                if (handles.uFragmentFresnelCenterColor) {\n                    handles.uFragmentFresnelCenterColor.setValue(fresnelCore.fragment.centerColor);\n                }\n\n                if (handles.uFragmentFresnelEdgeColor) {\n                    handles.uFragmentFresnelEdgeColor.setValue(fresnelCore.fragment.edgeColor);\n                }\n\n                if (handles.uFragmentFresnelPower) {\n                    handles.uFragmentFresnelPower.setValue(fresnelCore.fragment.power);\n                }\n            }\n        }\n\n        if (this.cubemapCore) {\n            var layers = this.cubemapCore.layers;\n            if (layers) {\n                var layer;\n                var program = this.program[rendertype];\n                if (handles.uCubeMapSampler) {\n                    for (var i = 0, len = layers.length; i < len; i++) {\n                        layer = layers[i];\n                        if (handles.uCubeMapSampler[i] && layer.texture) {\n    \n                            program.bindTexture(handles.uCubeMapSampler[i], layer.texture, frameCtx.textureUnit);\n                            frameCtx.textureUnit = (frameCtx.textureUnit + 1) % SceneJS.WEBGL_INFO.MAX_TEXTURE_UNITS;\n    \n                            if (handles.uCubeMapIntensity[i]) {\n                                handles.uCubeMapIntensity[i].setValue(layer.intensity);\n                            }\n\n                            if (handles.uCubeMapMipLevels[i]) {\n                                handles.uCubeMapMipLevels[i].setValue(layer.mipLevels);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    SceneJS_ChunkFactory.addChunkType(\"material\", MaterialChunk);\n})();\n;(function () {\n    \"use strict\";\n\n    var ProgramChunk = function (id, numericId, program, cores) {\n\n        this.id = id;\n        this.numericId = numericId;\n        this.program = program;\n\n        cores = cores || [];\n\n        for (var i = 0, len = cores.length; i < len; ++i) {\n            if (cores[i] && cores[i].empty) {\n                cores[i] = null;\n            }\n        }\n\n        this.cores = cores;\n        this.handles = {};\n        this.numLights = 0;\n        this.numClips = 0;\n\n        this.build();\n    };\n\n    ProgramChunk.prototype.build = function () {\n\n        var draw = this.program.draw;\n        var xray = this.program.xray;\n        var pick = this.program.pick;\n        var pickTriangle = this.program.pickTriangle;\n        var depth = this.program.depth;\n        var drawTexture = this.program.drawTexture;\n\n        this.handles.draw = {\n            uPMatrix: draw.getUniform(\"SCENEJS_uPMatrix\"),\n            uvMatrix: draw.getUniform(\"SCENEJS_uVMatrix\"),\n            uWorldEye: draw.getUniform(\"SCENEJS_uWorldEye\"),\n            uFogParams: draw.getUniform(\"SCENEJS_uFogParams\"), // x = start, y = end, z = min, w = max\n            uFogColor: draw.getUniform(\"SCENEJS_uFogColor\"), // RGB = color, a = density\n            uCanvasRes: draw.getUniform(\"SCENEJS_uCanvasRes\"),\n            uAmbientColor: draw.getUniform(\"SCENEJS_uAmbientColor\"),\n            uLightColor: [],\n            uLightDir: [],\n            uLightPos: [],\n            uLightCutOff: [],\n            uLightSpotExp: [],\n            uLightAttenuation: [],\n            uInnerCone: [],\n            uOuterCone: [],\n            uClipNormalAndDist: [],\n            uClipFadeDistance: [],\n            uPBRLightMapIntensity: draw.getUniform(\"SCENEJS_uPBRLightMapIntensity\"),\n            uPBRLightMapMipLevels: draw.getUniform(\"SCENEJS_uPBRLightMapMipLevels\"),\n            uPBRReflectionMapIntensity: draw.getUniform(\"SCENEJS_uPBRReflectionMapIntensity\"),\n            uPBRReflectionMapMipLevels: draw.getUniform(\"SCENEJS_uPBRReflectionMapMipLevels\")\n        };\n\n        var program = this.program;\n        this.numLights = 0;\n\n        while (true) {\n            var colorUniform = draw.getUniform(\"SCENEJS_uLightColor\" + this.numLights);\n            if (!colorUniform) {\n                break;\n            }\n            this.handles.draw.uLightColor[this.numLights] = colorUniform;\n            this.handles.draw.uLightPos[this.numLights] = program.draw.getUniform(\"SCENEJS_uLightPos\" + this.numLights);\n            this.handles.draw.uLightDir[this.numLights] = program.draw.getUniform(\"SCENEJS_uLightDir\" + this.numLights);\n            this.handles.draw.uLightAttenuation[this.numLights] = program.draw.getUniform(\"SCENEJS_uLightAttenuation\" + this.numLights);\n            this.handles.draw.uInnerCone[this.numLights] = program.draw.getUniform(\"SCENEJS_uInnerCone\" + this.numLights);\n            this.handles.draw.uOuterCone[this.numLights] = program.draw.getUniform(\"SCENEJS_uOuterCone\" + this.numLights);\n            ++this.numLights;\n        }\n\n        this.handles.xray = {\n            uPMatrix: xray.getUniform(\"SCENEJS_uPMatrix\"),\n            uvMatrix: xray.getUniform(\"SCENEJS_uVMatrix\"),\n            uWorldEye: xray.getUniform(\"SCENEJS_uWorldEye\"),\n            uFogParams: xray.getUniform(\"SCENEJS_uFogParams\"), // x = start, y = end, z = min, w = max\n            uFogColor: xray.getUniform(\"SCENEJS_uFogColor\"), // RGB = color, a = density\n            uXrayColor: xray.getUniform(\"SCENEJS_uXrayColor\"),\n            uClipNormalAndDist: [],\n            uClipFadeDistance: []\n        };\n\n        this.handles.pick = {\n            pickMode: pick.getUniform(\"SCENEJS_uPickMode\"),\n            uPMatrix: pick.getUniform(\"SCENEJS_uPMatrix\"),\n            uvMatrix: pick.getUniform(\"SCENEJS_uVMatrix\"),\n            uClipNormalAndDist: [],\n            uClipFadeDistance: []\n        };\n\n        this.handles.pickTriangle = {\n            uPMatrix: pickTriangle.getUniform(\"SCENEJS_uPMatrix\"),\n            uvMatrix: pickTriangle.getUniform(\"SCENEJS_uVMatrix\"),\n            uClipNormalAndDist: [],\n            uClipFadeDistance: []\n        };\n\n        this.handles.depth = {\n            uPMatrix: depth.getUniform(\"SCENEJS_uPMatrix\"),\n            uvMatrix: depth.getUniform(\"SCENEJS_uVMatrix\"),\n            uClipNormalAndDist: [],\n            uClipFadeDistance: []\n        };\n\n        this.handles.drawTexture = {\n            uPMatrix: drawTexture.getUniform(\"SCENEJS_uPMatrix\"),\n            uvMatrix: drawTexture.getUniform(\"SCENEJS_uVMatrix\"),\n            uClipNormalAndDist: [],\n            uClipFadeDistance: []\n        };\n\n        this.numClips = 0;\n        while (true) {\n            var clipUniform = draw.getUniform(\"SCENEJS_uClipNormalAndDist\" + this.numClips);\n            if (!clipUniform) {\n                break;\n            }\n\n            this.handles.draw.uClipNormalAndDist[this.numClips] = clipUniform;\n            this.handles.draw.uClipFadeDistance[this.numClips] = draw.getUniform(\"SCENEJS_uClipFadeDistance\" + this.numClips);\n\n            this.handles.xray.uClipNormalAndDist[this.numClips] = xray.getUniform(\"SCENEJS_uClipNormalAndDist\" + this.numClips);\n            this.handles.xray.uClipFadeDistance[this.numClips] = xray.getUniform(\"SCENEJS_uClipFadeDistance\" + this.numClips);\n\n            this.handles.pick.uClipNormalAndDist[this.numClips] = pick.getUniform(\"SCENEJS_uClipNormalAndDist\" + this.numClips);\n            this.handles.pick.uClipFadeDistance[this.numClips] = pick.getUniform(\"SCENEJS_uClipFadeDistance\" + this.numClips);\n\n            this.handles.pickTriangle.uClipNormalAndDist[this.numClips] = pickTriangle.getUniform(\"SCENEJS_uClipNormalAndDist\" + this.numClips);\n            this.handles.pickTriangle.uClipFadeDistance[this.numClips] = pickTriangle.getUniform(\"SCENEJS_uClipFadeDistance\" + this.numClips);\n\n            this.handles.depth.uClipNormalAndDist[this.numClips] = depth.getUniform(\"SCENEJS_uClipNormalAndDist\" + this.numClips);\n            this.handles.depth.uClipFadeDistance[this.numClips] = depth.getUniform(\"SCENEJS_uClipFadeDistance\" + this.numClips);\n\n            this.handles.drawTexture.uClipNormalAndDist[this.numClips] = drawTexture.getUniform(\"SCENEJS_uClipNormalAndDist\" + this.numClips);\n            this.handles.drawTexture.uClipFadeDistance[this.numClips] = drawTexture.getUniform(\"SCENEJS_uClipFadeDistance\" + this.numClips);\n\n            ++this.numClips;\n        }\n\n        var gl = draw.gl;\n\n        var dummyTexture = gl.createTexture();\n        gl.bindTexture(gl.TEXTURE_2D, dummyTexture);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array(4));\n\n        this.dummyDepthTexture = {\n            texture: dummyTexture,\n            gl: gl,\n            bind: function (unit) {\n                if (this.texture) {\n                    this.gl.activeTexture(this.gl.TEXTURE0 + unit);\n                    this.gl.bindTexture(this.gl.TEXTURE_2D, this.texture);\n                    return true;\n                }\n                return false;\n            },\n            unbind: function (unit) {\n                if (this.texture) {\n                    this.gl.activeTexture(this.gl.TEXTURE0 + unit);\n                    this.gl.bindTexture(this.gl.TEXTURE_2D, null);\n                }\n            },\n            destroy: function () {\n                if (this.texture) {\n                    this.gl.deleteTexture(this.texture);\n                    this.texture = null;\n                }\n            }\n        };\n\n        gl.bindTexture(gl.TEXTURE_2D, null);\n\n    };\n\n    ProgramChunk.prototype.draw = function (renderMode, frameCtx) {\n\n        this.program[renderMode].bind();\n        var handles = this.handles[renderMode];\n\n        frameCtx.textureUnit = 0;\n\n        var gl = this.program.gl;\n        if (handles.depthMode) {\n            handles.depthMode.setValue(frameCtx.depthMode);\n        }\n        if (!frameCtx.VAO) {\n            for (var i = 0; i < 10; i++) {\n                gl.disableVertexAttribArray(i);\n            }\n        }\n\n        if (handles.uPMatrix) {\n            handles.uPMatrix.setValue(frameCtx.projectionMatrix);\n        }\n\n        if (handles.uvMatrix) {\n            handles.uvMatrix.setValue(frameCtx.viewMatrix);\n        }\n\n        if (handles.uWorldEye) {\n            handles.uWorldEye.setValue(frameCtx.cameraEye);\n        }\n\n        if (handles.uAmbientColor) {\n            handles.uAmbientColor.setValue(frameCtx.ambientColor);\n        }\n\n        if (handles.uLightColor) {\n            for (var i = 0; i < this.numLights; ++i) {\n                var light = frameCtx.lights[i];\n\n                if (handles.uLightColor[i]) {\n                    handles.uLightColor[i].setValue(light.color);\n                }\n\n                if (handles.uLightPos[i]) {\n                    handles.uLightPos[i].setValue(light.pos);\n\n                    if (handles.uLightAttenuation[i]) {\n                        handles.uLightAttenuation[i].setValue(light.attenuation);\n                    }\n                }\n\n                if (handles.uLightDir[i]) {\n                    handles.uLightDir[i].setValue(light.dir);\n                }\n\n                if (handles.uInnerCone[i]) {\n                    handles.uInnerCone[i].setValue(light.innerCone);\n                }\n\n                if (handles.uOuterCone[i]) {\n                    handles.uOuterCone[i].setValue(light.outerCone);\n                }\n\n            }\n        }\n\n        if (this.numClips > 0) {\n            for (var i = 0; i < this.numClips; ++i) {\n                var clip = frameCtx.clips.clips[i];\n\n                if (handles.uClipNormalAndDist[i]) {\n                    handles.uClipNormalAndDist[i].setValue(clip.normalAndDist);\n                }\n\n                if (handles.uClipFadeDistance[i]) {\n                    handles.uClipFadeDistance[i].setValue(clip.fadeDistance);\n                }\n            }\n        }\n\n        if (frameCtx.reflection && frameCtx.reflection.texture) {\n            this.program[renderMode].bindTexture(\"SCENEJS_uPBRReflectionMapSampler\", frameCtx.reflection.texture, frameCtx.textureUnit);\n            frameCtx.textureUnit = (frameCtx.textureUnit + 1) % SceneJS.WEBGL_INFO.MAX_TEXTURE_UNITS;\n            frameCtx.bindTexture++;\n\n            if (handles.uPBRReflectionMapIntensity) {\n                handles.uPBRReflectionMapIntensity.setValue(frameCtx.reflection.intensity);\n            }\n            if (handles.uPBRReflectionMapMipLevels) {\n                handles.uPBRReflectionMapMipLevels.setValue(frameCtx.reflection.mipLevels);\n            }\n        }\n\n        if (frameCtx.lightmap && frameCtx.lightmap.texture) {\n\n            this.program[renderMode].bindTexture(\"SCENEJS_uPBRLightMapSampler\", frameCtx.lightmap.texture, frameCtx.textureUnit);\n            frameCtx.textureUnit = (frameCtx.textureUnit + 1) % SceneJS.WEBGL_INFO.MAX_TEXTURE_UNITS;\n            frameCtx.bindTexture++;\n\n            if (handles.uPBRLightMapIntensity) {\n                handles.uPBRLightMapIntensity.setValue(frameCtx.lightmap.intensity);\n            }\n            if (handles.uPBRLightMapMipLevels) {\n                handles.uPBRLightMapMipLevels.setValue(frameCtx.lightmap.mipLevels);\n            }\n        }\n\n        if (handles.uFogParams) {\n            handles.uFogParams.setValue(frameCtx.fogParams);\n        }\n\n        if (handles.uFogColor) {\n            handles.uFogColor.setValue(frameCtx.fogColor);\n        }\n\n        if (handles.uXrayColor) {\n            handles.uXrayColor.setValue(frameCtx.xrayColor);\n        }\n\n        var depthBuffer = frameCtx.depthBuffer || this.dummyDepthTexture;\n        this.program[renderMode].bindTexture(\"SCENEJS_uDepthBuffer\", depthBuffer, frameCtx.textureUnit);\n        frameCtx.textureUnit = (frameCtx.textureUnit + 1) % SceneJS.WEBGL_INFO.MAX_TEXTURE_UNITS;\n        frameCtx.bindTexture++;\n\n        if (handles.uCanvasRes) {\n            handles.uCanvasRes.setValue(frameCtx.canvasResolution);\n        }\n\n        if (handles.pickMode) {\n            if (frameCtx.pickObject) {\n                handles.pickMode.setValue(0.0); // Pick object\n            } else {\n                handles.pickMode.setValue(2.0); // Pick region\n            }\n        }\n\n        frameCtx.useProgram++;\n    };\n\n    SceneJS_ChunkFactory.addChunkType(\"program\", ProgramChunk);\n})();\n;(function () {\n    \"use strict\";\n\n    var RegionMapChunk = function (id, numericId, program, cores) {\n\n        this.id = id;\n        this.numericId = numericId;\n        this.program = program;\n\n        cores = cores || [];\n\n        for (var i = 0, len = cores.length; i < len; ++i) {\n            if (cores[i] && cores[i].empty) {\n                cores[i] = null;\n            }\n        }\n\n        this.cores = cores;\n        this.handles = {};\n\n        this.build();\n    };\n\n    RegionMapChunk.prototype.build = function () {\n\n        this.core = this.cores[0];\n\n        this.handles.draw = {\n            uRegionMapRegionColor: this.program.draw.getUniform(\"SCENEJS_uRegionMapRegionColor\"),\n            uRegionMapHighlightFactor: this.program.draw.getUniform(\"SCENEJS_uRegionMapHighlightFactor\"),\n            uRegionMapHideAlpha: this.program.draw.getUniform(\"SCENEJS_uRegionMapHideAlpha\")\n        };\n        \n        this.sampleName = \"SCENEJS_uRegionMapSampler\";\n    };\n\n    RegionMapChunk.prototype.draw = function (renderMode, frameCtx) {\n\n        var texture = this.core.texture;\n        var handles = this.handles[renderMode] || {};\n\n        if (texture) {\n            frameCtx.regionData = this.core.regionData;\n\n            this.program.draw.bindTexture(this.sampleName, texture, frameCtx.textureUnit);\n            frameCtx.textureUnit = (frameCtx.textureUnit + 1) % SceneJS.WEBGL_INFO.MAX_TEXTURE_UNITS;\n\n            if (handles.uRegionMapRegionColor) {\n                handles.uRegionMapRegionColor.setValue(this.core.regionColor);\n            }\n\n            if (handles.uRegionMapHighlightFactor) {\n                handles.uRegionMapHighlightFactor.setValue(this.core.highlightFactor);\n            }\n\n            if (handles.uRegionMapHideAlpha) {\n                handles.uRegionMapHideAlpha.setValue(this.core.hideAlpha);\n            }\n\n            frameCtx.regionMapUVLayerIdx = this.core.uvLayerIdx;\n\n        } else {\n\n            frameCtx.regionMapUVLayerIdx = -1;\n        }\n    };\n\n    SceneJS_ChunkFactory.addChunkType(\"regionMap\", RegionMapChunk);\n})();\n;/**\n * Box geometry node type\n *\n * @author xeolabs / http://xeolabs.com\n *\n * <p>Usage example:</p>\n *\n * <pre>\n * someNode.addNode({\n *      type: \"geometry/box\",\n *      xSize: 10,\n *      ySize: 20,\n *      zSize: 1.5,\n *      wire: false // Default\n *  });\n *  </pre>\n */\n(function () {\n\n    SceneJS.Types.addType(\"geometry/box\", {\n\n        construct:function (params) {\n            this.addNode(build.call(this, params));\n        }\n    });\n\n    function build(params) {\n\n        var x, y, z;\n        if (params.size) {\n            x = params.size[0];\n            y = params.size[1];\n            z = params.size[2];\n        } else {\n            // Deprecated\n            x = params.xSize || 1;\n            y = params.ySize || 1;\n            z = params.zSize || 1;\n        }\n\n        var coreId = \"geometry/box_\" + x + \"_\" + y + \"_\" + z + (params.wire ? \"wire\" : \"_solid\");\n\n        // If a node core already exists for a prim with the given properties,\n        // then for efficiency we'll share that core rather than create another geometry\n        if (this.getScene().hasCore(\"geometry\", coreId)) {\n            return {\n                type:\"geometry\",\n                coreId:coreId\n            };\n        }\n\n        // Otherwise, create a new geometry\n        return {\n            type:\"geometry\",\n            primitive:params.wire ? \"lines\" : \"triangles\",\n            coreId:coreId,\n            positions:new Float32Array([\n                x, y, z, -x, y, z, -x, -y, z, x, -y, z, // v0-v1-v2-v3 front\n                x, y, z, x, -y, z, x, -y, -z, x, y, -z, // v0-v3-v4-v5 right\n                x, y, z, x, y, -z, -x, y, -z, -x, y, z, // v0-v5-v6-v1 top\n                -x, y, z, -x, y, -z, -x, -y, -z, -x, -y, z, // v1-v6-v7-v2 left\n                -x, -y, -z, x, -y, -z, x, -y, z, -x, -y, z, // v7-v4-v3-v2 bottom\n                x, -y, -z, -x, -y, -z, -x, y, -z, x, y, -z // v4-v7-v6-v5 back\n            ]),\n            normals:new Float32Array([\n                0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, // v0-v1-v2-v3 front\n                1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, // v0-v3-v4-v5 right\n                0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, // v0-v5-v6-v1 top\n                -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, // v1-v6-v7-v2 left\n                0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, // v7-v4-v3-v2 bottom\n                0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1     // v4-v7-v6-v5 back\n            ]),\n            uv:new Float32Array([\n                x, y, 0, y, 0, 0, x, 0, // v0-v1-v2-v3 front\n                0, y, 0, 0, x, 0, x, y, // v0-v3-v4-v5 right\n                x, 0, x, y, 0, y, 0, 0, // v0-v5-v6-v1 top\n                x, y, 0, y, 0, 0, x, 0, // v1-v6-v7-v2 left\n                0, 0, x, 0, x, y, 0, y, // v7-v4-v3-v2 bottom\n                0, 0, x, 0, x, y, 0, y    // v4-v7-v6-v5 back\n            ]),\n            indices:[\n                0, 1, 2, 0, 2, 3, // front\n                4, 5, 6, 4, 6, 7, // right\n                8, 9, 10, 8, 10, 11, // top\n                12, 13, 14, 12, 14, 15, // left\n                16, 17, 18, 16, 18, 19, // bottom\n                20, 21, 22, 20, 22, 23   // back\n            ]\n        };\n    }\n})();\n;/**\n * Quad geometry node type\n *\n *  @author xeolabs / http://xeolabs.com\n *\n * <p>Usage example:</p>\n *\n * <pre>\n * someNode.addNode({\n *      type: \"geometry/quad\",\n *      wire: false // Default\n *  });\n *  </pre>\n */\n(function () {\n\n    SceneJS.Types.addType(\"geometry/quad\", {\n        construct:function (params) {\n            this.addNode(build.call(this, params));\n        }\n    });\n\n    function build(params) {\n\n        // TODO: support size properties like 'geometry/plane'\n\n        var coreId = \"geometry/quad\" + (params.wire ? \"wire\" : \"_solid\");\n\n        // If a node core already exists for a prim with the given properties,\n        // then for efficiency we'll share that core rather than create another geometry\n        if (this.getScene().hasCore(\"geometry\", coreId)) {\n            return {\n                type: \"geometry\",\n                coreId:coreId\n            };\n        }\n\n        // Otherwise, create a new geometry\n        return {\n            type: \"geometry\",\n            primitive:params.wire ? \"lines\" : \"triangles\",\n            coreId:coreId,\n            positions:[ 1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0 ],\n            normals:[ -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0 ],\n            uv:[ 1, 1, 0, 1, 0, 0, 1, 0 ],\n            indices:[ 0, 1, 2, 0, 2, 3 ]\n        };\n    }\n})();;/**\n * Sphere geometry node type\n *\n * <p>Usage example:</p>\n *\n * <pre>\n * someNode.addNode({\n *      type: \"geometry/sphere\",\n *      latitudeBands: 30, // Default\n *      longitudeBands: 30, // Default\n *      radius: 1, // Default\n *      wire: false // Default\n *  });\n *  </pre>\n */\n(function () {\n\n    SceneJS.Types.addType(\"geometry/sphere\", {\n\n        construct:function (params) {\n            this.addNode(build.call(this, params));\n        }\n    });\n\n    function build(params) {\n\n        // Thanks awfully to: http://learningwebgl.com/cookbook/index.php/How_to_draw_a_sphere\n\n        var latitudeBands = params.latitudeBands || 30;\n        var longitudeBands = params.longitudeBands || 30;\n        var radius = params.radius || 1;\n\n        var coreId = \"geometry/sphere_\" + (params.wire ? \"wire\" : \"_solid\") + radius + \"_\" + longitudeBands + \"_\" + latitudeBands;\n\n        // If a node core already exists for a prim with the given properties,\n        // then for efficiency we'll share that core rather than create another geometry\n        if (this.getScene().hasCore(\"geometry\", coreId)) {\n            return {\n                type: \"geometry\",\n                coreId:coreId\n            };\n        }\n\n        // Otherwise, create a new geometry\n\n        var positions = [];\n        var normals = [];\n        var uvs = [];\n        for (var latNumber = 0; latNumber <= latitudeBands; latNumber++) {\n            var theta = latNumber * Math.PI / latitudeBands;\n            var sinTheta = Math.sin(theta);\n            var cosTheta = Math.cos(theta);\n\n            for (var longNumber = 0; longNumber <= longitudeBands; longNumber++) {\n                var phi = longNumber * 2 * Math.PI / longitudeBands;\n                var sinPhi = Math.sin(phi);\n                var cosPhi = Math.cos(phi);\n\n                var x = cosPhi * sinTheta;\n                var y = cosTheta;\n                var z = sinPhi * sinTheta;\n                var u = longNumber / longitudeBands;\n                var v = latNumber / latitudeBands;\n\n                normals.push(x);\n                normals.push(y);\n                normals.push(z);\n                uvs.push(u);\n                uvs.push(v);\n                positions.push(radius * x);\n                positions.push(radius * y);\n                positions.push(radius * z);\n            }\n        }\n\n        var indices = [];\n        for (var latNumber = 0; latNumber < latitudeBands; latNumber++) {\n            for (var longNumber = 0; longNumber < longitudeBands; longNumber++) {\n                var first = (latNumber * (longitudeBands + 1)) + longNumber;\n                var second = first + longitudeBands + 1;\n                indices.push(first + 1);\n                indices.push(second + 1);\n                indices.push(second);\n                indices.push(first + 1);\n                indices.push(second);\n                indices.push(first);\n            }\n        }\n\n        return {\n            type: \"geometry\",\n            primitive:params.wire ? \"lines\" : \"triangles\",\n            coreId : coreId,\n            positions : new Float32Array(positions),\n            normals: new Float32Array(normals),\n            uv : new Float32Array(uvs),\n            indices : indices // Type will be decided internally\n        };\n    }\n})();;/**\n * Plane geometry node type\n *\n * @author xeolabs / http://xeolabs.com\n *\n * <p>Usage example:</p>\n *\n * <pre>\n * someNode.addNode({\n *      type: \"geometry/plane\",\n *      width: 10,\n *      height: 20,\n *      wire: false // Default\n *  });\n *  </pre>\n */\n(function () {\n\n    SceneJS.Types.addType(\"geometry/plane\", {\n\n        construct:function (params) {\n            this.addNode(build.call(this, params));\n        }\n    });\n\n    function build(params) {\n\n        var width = params.width || 1.0;\n        var height = params.height || 1.0;\n\n        var widthSegments = params.widthSegments || 1;\n        var heightSegments = params.heightSegments || 1;\n\n        var coreId = \"geometry/plane_\" + (params.wire == true ? \"wire_\" : \"\") + height + \"_\" + widthSegments + \"_\" + heightSegments;\n\n        // If a node core already exists for a prim with the given properties,\n        // then for efficiency we'll share that core rather than create another geometry\n        if (this.getScene().hasCore(\"geometry\", coreId)) {\n            return {\n                type: \"geometry\",\n                coreId:coreId\n            };\n        }\n\n        // Otherwise, create a new geometry\n\n        var positions = [];\n        var normals = [];\n        var uvs = [];\n        var indices = [];\n\n        var ix, iz;\n        var halfWidth = width / 2;\n        var halfHeight = height / 2;\n\n        var gridX = widthSegments;\n        var gridZ = heightSegments;\n\n        var gridX1 = gridX + 1;\n        var gridZ1 = gridZ + 1;\n\n        var segWidth = width / gridX;\n        var segHeight = height / gridZ;\n\n        var x;\n        var y;\n\n        for (iz = 0; iz < gridZ1; iz++) {\n            for (ix = 0; ix < gridX1; ix++) {\n\n                x = ix * segWidth - halfWidth;\n                y = iz * segHeight - halfHeight;\n\n                positions.push(x);\n                positions.push(-y);\n                positions.push(0);\n\n                normals.push(0);\n                normals.push(0);\n                normals.push(1);\n\n                uvs.push(ix / gridX);\n                uvs.push(1 - iz / gridZ);\n            }\n        }\n\n        var a;\n        var b;\n        var c;\n        var d;\n\n        for (iz = 0; iz < gridZ; iz++) {\n            for (ix = 0; ix < gridX; ix++) {\n\n                a = ix + gridX1 * iz;\n                b = ix + gridX1 * ( iz + 1 );\n                c = ( ix + 1 ) + gridX1 * ( iz + 1 );\n                d = ( ix + 1 ) + gridX1 * iz;\n\n                indices.push(a);\n                indices.push(b);\n                indices.push(c);\n\n                indices.push(c);\n                indices.push(d);\n                indices.push(a);\n            }\n        }\n\n        return {\n            type: \"geometry\",\n            primitive:params.wire ? \"lines\" : \"triangles\",\n            coreId:coreId,\n            positions:new Float32Array(positions),\n            normals:new Float32Array(normals),\n            uv:new Float32Array(uvs),\n            indices:indices\n        };\n    }\n})();\n;/******************************************************************************\n\nThis is a binary tree based bin packing algorithm that is more complex than\nthe simple Packer (packer.js). Instead of starting off with a fixed width and\nheight, it starts with the width and height of the first block passed and then\ngrows as necessary to accomodate each subsequent block. As it grows it attempts\nto maintain a roughly square ratio by making 'smart' choices about whether to\ngrow right or down.\n\nWhen growing, the algorithm can only grow to the right OR down. Therefore, if\nthe new block is BOTH wider and taller than the current target then it will be\nrejected. This makes it very important to initialize with a sensible starting\nwidth and height. If you are providing sorted input (largest first) then this\nwill not be an issue.\n\nA potential way to solve this limitation would be to allow growth in BOTH\ndirections at once, but this requires maintaining a more complex tree\nwith 3 children (down, right and center) and that complexity can be avoided\nby simply chosing a sensible starting block.\n\nBest results occur when the input blocks are sorted by height, or even better\nwhen sorted by max(width,height).\n\nInputs:\n------\n\n  blocks: array of any objects that have .w and .h attributes\n\nOutputs:\n-------\n\n  marks each block that fits with a .fit attribute pointing to a\n  node with .x and .y coordinates\n\nExample:\n-------\n\n  var blocks = [\n    { w: 100, h: 100 },\n    { w: 100, h: 100 },\n    { w:  80, h:  80 },\n    { w:  80, h:  80 },\n    etc\n    etc\n  ];\n\n  var packer = new GrowingPacker();\n  packer.fit(blocks);\n\n  for(var n = 0 ; n < blocks.length ; n++) {\n    var block = blocks[n];\n    if (block.fit) {\n      Draw(block.fit.x, block.fit.y, block.w, block.h);\n    }\n  }\n\n\n******************************************************************************/\n-function (exports) {\n\nvar GrowingPacker = exports.GrowingPacker = function() { };\n\nGrowingPacker.prototype = {\n\n  fit: function(blocks) {\n    var n, node, block, len = blocks.length;\n    var w = len > 0 ? blocks[0].w : 0;\n    var h = len > 0 ? blocks[0].h : 0;\n    this.root = { x: 0, y: 0, w: w, h: h };\n    for (n = 0; n < len ; n++) {\n      block = blocks[n];\n      if (node = this.findNode(this.root, block.w, block.h))\n        block.fit = this.splitNode(node, block.w, block.h);\n      else\n        block.fit = this.growNode(block.w, block.h);\n    }\n  },\n\n  findNode: function(root, w, h) {\n    if (root.used)\n      return this.findNode(root.right, w, h) || this.findNode(root.down, w, h);\n    else if ((w <= root.w) && (h <= root.h))\n      return root;\n    else\n      return null;\n  },\n\n  splitNode: function(node, w, h) {\n    node.used = true;\n    node.down  = { x: node.x,     y: node.y + h, w: node.w,     h: node.h - h };\n    node.right = { x: node.x + w, y: node.y,     w: node.w - w, h: h          };\n    return node;\n  },\n\n  growNode: function(w, h) {\n    var canGrowDown  = (w <= this.root.w);\n    var canGrowRight = (h <= this.root.h);\n\n    var shouldGrowRight = canGrowRight && (this.root.h >= (this.root.w + w)); // attempt to keep square-ish by growing right when height is much greater than width\n    var shouldGrowDown  = canGrowDown  && (this.root.w >= (this.root.h + h)); // attempt to keep square-ish by growing down  when width  is much greater than height\n\n    if (shouldGrowRight)\n      return this.growRight(w, h);\n    else if (shouldGrowDown)\n      return this.growDown(w, h);\n    else if (canGrowRight)\n     return this.growRight(w, h);\n    else if (canGrowDown)\n      return this.growDown(w, h);\n    else\n      return null; // need to ensure sensible root starting size to avoid this happening\n  },\n\n  growRight: function(w, h) {\n    this.root = {\n      used: true,\n      x: 0,\n      y: 0,\n      w: this.root.w + w,\n      h: this.root.h,\n      down: this.root,\n      right: { x: this.root.w, y: 0, w: w, h: this.root.h }\n    };\n    if (node = this.findNode(this.root, w, h))\n      return this.splitNode(node, w, h);\n    else\n      return null;\n  },\n\n  growDown: function(w, h) {\n    this.root = {\n      used: true,\n      x: 0,\n      y: 0,\n      w: this.root.w,\n      h: this.root.h + h,\n      down:  { x: 0, y: this.root.h, w: this.root.w, h: h },\n      right: this.root\n    };\n    if (node = this.findNode(this.root, w, h))\n      return this.splitNode(node, w, h);\n    else\n      return null;\n  }\n\n}\n\n}(typeof window !== 'undefined' ? window : module.exports);;/**\n * @namespace The core engine namespace.\n */\n(function () {\n    \"use strict\";\n\n    var Human = window.Human = {};\n\n    var VERSION = \"17.1.3\";\n    VERSION = VERSION.indexOf(\"ENGINE_VERSION\") > 0 ? \"qa\" : VERSION;\n\n    var API_VERSION = \"2.0.1\";\n    API_VERSION = API_VERSION.indexOf(\"API_VERSION\") > 0 ? \"qa\" : API_VERSION;\n\n\n    /**\n     * Engine version.\n     *\n     * @memberof Human\n     * @name VERSION\n     * @property\n     * @type {string}\n     */\n    Human.VERSION = VERSION;\n    Human.API_VERSION = API_VERSION;\n\n    /** True when this engine instance is running on the Web\n     *\n     * @type {boolean}\n     * @memberof Human\n     */\n    Human.deployed = !( window.location.hostname.match(/(localhost|192\\.168\\.11\\.\\d{1,3})/) ||\n        window.location.protocol === \"file:\" );\n\n     /** The language used for content requests.\n     *\n     * @type {string}\n     * @memberof Human\n     */\n    Human.locale = \"en-US\";\n\n    Human.timer = window.performance || window.Date;\n\n    Human.stats = {\n        trackingDownloadSize: false,\n        jsonDownloadTotal: 0,\n        geometryDownloadTotal: 0,\n        textureDownloadTotal: 0,\n        jsonDownloadSizes: {},\n        geometryDownloadSizes: {},\n        textureDownloadSizes: {},\n        loadSequence: {\n            startTime: Human.timer.now(),\n            moduleRequest: 0,\n            moduleLoaded: 0,\n            assetsRequested: 0,\n            assetsLoaded: 0,\n            texturesRequested: 0,\n            texturesLoaded: 0\n        },\n        loadTimes: {\n            preModule: 0,\n            moduleDownload: 0,\n            preAsset: 0,\n            assetDownload: 0,\n            preTexture: 0,\n            textureDownload: 0\n        },\n        trackDownloadSize: function() {\n            if (window.pako) {\n                this.trackingDownloadSize = true;\n            }\n        }\n    };\n\n    /* IDs of nodes in the document and scene graph\n     */\n    Human.canvasId = \"theCanvas\";\n    Human.annotationCanvasId = \"annotationCanvas\";\n    Human.containerId = \"container\";\n\n    Human.XML_HTTP_JSON_SUPPORTED = (function() {\n        var request = new XMLHttpRequest();\n        request.open(\"GET\", \"/\");\n        request.responseType = \"json\";\n        return request.responseType === \"json\";\n    })();\n\n    Human.ELEMENT_REMOVE_SUPPORTED = typeof Element.prototype.remove === \"function\";\n\n    /*-----------------------------------------------------------------------------------------------------------------\n     * Error management\n     *---------------------------------------------------------------------------------------------------------------*/\n\n    /**\n     * Signals non-fatal error.\n     * @memberof Human\n     */\n    Human.error = function (name, msg) {\n        if (msg === undefined) {\n            msg = name;\n            name = \"ERROR\";\n        }\n        return Human._error(\"HUMAN\", name, msg, false);\n    };\n\n    /**\n     * Signals fatal error.\n     * @memberof Human\n     */\n    Human.fatalError = function (name, msg) {\n        if (msg === undefined) {\n            msg = name;\n            name = \"ERROR\";\n        }\n        return Human._error(\"HUMAN\", name, msg, true);\n    };\n\n    Human._error = function (type, name, msg, fatal) {\n\n        Human.events.fire(\"error\", {\n            type: type,\n            name: name,\n            message: msg,\n            fatal: fatal,\n            log: Human.log.messages.join(\"\\n\"),\n            stack: Human.utils.getStackTrace(),\n            webglInfo: SceneJS.WEBGL_INFO\n        });\n\n        return msg;\n    };\n\n})();\n;/**\n * @class Base class for the various engine modules.\n *\n * @constructor\n */\n\n(function() {\n    \"use strict\";\n\n    Human.Component = function () {\n\n    };\n\n\n    Human.Component.prototype = {\n\n        _init:function (ctx) {\n\n            this._ctx = ctx;\n\n            this._handleMap = new Human.utils.Map(); // Subscription handle pool\n            this._topicSubs = {}; // A [handle -> callback] map for each topic name\n            this._handleTopics = {}; // Maps handles to topic names\n            this._topicPubs = {}; // Maps topics to publications\n        },\n\n        /**\n         * Publishes to a topic.\n         *\n         * Immediately notifies existing subscriptions to that topic, retains the publication to give to\n         * any subsequent notifications on that topic as they are made.\n         *\n         * This is called internally by proxies. Only they create publications, which are subscribed\n         * to by client code.\n         *\n         * @param topic Publication topic\n         * @param pub The publication\n         * @param once True to publish once ie. not retain\n         * @private\n         */\n        publish:function (topic, pub, once) {\n            if (!once) {\n                this._topicPubs[topic] = pub; // Save notification\n            }\n            var subsForTopic = this._topicSubs[topic];\n            if (subsForTopic) { // Notify subscriptions\n                for (var handle in subsForTopic) {\n                    if (subsForTopic.hasOwnProperty(handle)) {\n                        subsForTopic[handle].call(this, pub);\n                    }\n                }\n            }\n        },\n\n        /**\n         * Listen for data changes at a particular location on this component.\n         *\n         * <p>This is the primary way to read data from the Human API. Your callback will be triggered for\n         * the initial data and again whenever the data changes. Use {@link #unsubscribe} to stop receiving updates.</p>\n         *\n         * <p>The callback is be called with this component as scope.</p>\n         *\n         * @param {String} topic Publication location\n         * @param {Function(data)} callback Called when fresh data is available at the location\n         * @return {String} Handle to the subscription, which may be used to unsubscribe with {@link #off}.\n         */\n        on:function (topic, callback) {\n            var subsForTopic = this._topicSubs[topic];\n            if (!subsForTopic) {\n                subsForTopic = {};\n                this._topicSubs[topic] = subsForTopic;\n            }\n            var handle = this._handleMap.addItem(); // Create unique handle\n            subsForTopic[handle] = callback;\n            this._handleTopics[handle] = topic;\n            var pub = this._topicPubs[topic];\n            if (pub) { // A publication exists, notify callback immediately\n                callback.call(this, pub);\n            }\n            return handle;\n        },\n\n        /**\n         * Unsubscribes from a publication on this proxy that was previously made with {@link #on}.\n         * @param handle Publication handle\n         */\n        off:function (handle, fn) {\n            var topic;\n            var topicSubs;\n            if (fn) {\n                topic = handle;\n                topicSubs = this._topicSubs[topic];\n                for (var h in topicSubs) {\n                    if (topicSubs[h] === fn) {\n                        handle = h;\n                        break;\n                    }\n                }\n            } else {\n                topic = this._handleTopics[handle];\n            }\n            if (topic) {\n                delete this._handleTopics[handle];\n                topicSubs = this._topicSubs[topic];\n                if (topicSubs) {\n                    delete topicSubs[handle];\n                }\n                this._handleMap.removeItem(handle); // Release handle\n            }\n        },\n\n        /**\n         * Listens for exactly one data update at the specified location, and then stops listening.\n         * <p>This is equivalent to calling {@link #on}, and then calling {@link #off} inside the callback function.</p>\n         * @param {String} topic Data location to listen to\n         * @param {Function(data)} callback Called when fresh data is available at the location\n         */\n        once:function (topic, callback) {\n            var self = this;\n            var sub = this.on(topic,\n                function (pub) {\n                    self.off(sub);\n                    callback(pub);\n                });\n        }\n    };\n\n})();\n\n;\n/**\n * @namespace Math functions\n * @private\n */\n\n(function() {\n    \"use strict\";\n\n    var HumanMath = Human.math = {\n        X_AXIS: vec3.fromValues(1, 0, 0),\n        Y_AXIS: vec3.fromValues(0, 1, 0),\n        Z_AXIS: vec3.fromValues(0, 0, 1),\n        VEC3_ZEROS: vec3.fromValues(0, 0, 0),\n        VEC3_ONES: vec3.fromValues(1, 1, 1),\n        TO_RADIANS: Math.PI / 180.0\n    };\n\n    var tempVec3a = vec3.create();\n    var tempVec3b = vec3.create();\n\n    HumanMath.clamp = function(u, min, max) {\n        return (u < min) ? min : ((u > max) ? max : u);\n    };\n\n    HumanMath.nextPowerOf2 = function(n) {\n        return Math.pow(2, Math.ceil( Math.log(n) / Math.log(2))); \n    };\n\n    HumanMath.sign = function(n) {\n        if (n > 0) {\n            return 1;\n        }\n\n        if (n < 0) {\n            return -1;\n        }\n\n        return 0;\n    };\n\n    HumanMath.lerpScalar = function(t, t1, t2, s1, s2) {\n        var f = (t - t1) / (t2 - t1);\n\n        return s1 + (f * (s2 - s1));\n    };\n\n    /**\n     *\n     */\n    HumanMath.lerpVec3 = function(t, t1, t2, p1, p2, dest) {\n        dest = dest || vec3.create();\n        var f = (t - t1) / (t2 - t1);\n\n        dest[0] = p1[0] + (f * (p2[0] - p1[0]));\n        dest[1] = p1[1] + (f * (p2[1] - p1[1]));\n        dest[2] = p1[2] + (f * (p2[2] - p1[2]));\n\n        return dest;\n    };\n\n    HumanMath.triangleNormal = function(v1, v2, v3, n) {\n        var e1 = tempVec3a;\n        var e2 = tempVec3b;\n\n        vec3.subtract(e1, v2, v1);\n        vec3.subtract(e2, v3, v1);\n        vec3.cross(n, e1, e2);\n        vec3.normalize(n, n);\n\n        return n;\n    };\n\n\n    /**\n     * @return short rotation from r1 to r2\n     */\n    HumanMath.getShortRotation = function (r1, r2) {\n        var flip = r2 > r1 ? 1 : -1;\n        var gap = (r2 - r1) * flip;\n        gap = (gap + Math.PI) % (Math.PI * 2) - Math.PI;\n        return gap * flip;\n    };\n\n    /**\n     * f: [0, 1]\n     * r1, r2 : [-PI, PI]\n     */\n    HumanMath.lerpRadian = function (f, r1, r2) {\n        var gap = HumanMath.getShortRotation(r1, r2);\n        var result = r1 + f * gap;\n        return result;\n    };\n\n    /**\n     *\n     */\n    HumanMath.lerpVec3Cylindrical = function(t, t1, t2, p1, p2, dest) {\n        dest = dest || vec3.create();\n        var f = (t - t1) / (t2 - t1);\n\n        dest[0] = p1[0] + (f * (p2[0] - p1[0]));\n        dest[1] = HumanMath.lerpRadian(f, p1[1], p2[1]);\n        dest[2] = p1[2] + (f * (p2[2] - p1[2]));\n\n        return dest;\n    };\n\n    // Faster than a full transform because we know it's a scale and a translation\n    Human.math.decompressPosition = function(out, position, decodeMatrix) {\n        out[0] = position[0] * decodeMatrix[0]  + decodeMatrix[12];\n        out[1] = position[1] * decodeMatrix[5]  + decodeMatrix[13];\n        out[2] = position[2] * decodeMatrix[10] + decodeMatrix[14];\n    };\n\n    // Faster than a full transform because we know it's a scale and a translation\n    Human.math.decompressUV = function(out, position, decodeMatrix) {\n        out[0] = position[0] * decodeMatrix[0]  + decodeMatrix[6];\n        out[1] = position[1] * decodeMatrix[4]  + decodeMatrix[7];\n    };\n\n    /**\n     *\n     */\n    Human.math.vec3ObjToArray = function(v, dest) {\n        var result = dest || vec3.create();\n\n        result[0] = v.x || 0;\n        result[1] = v.y || 0;\n        result[2] = v.z || 0;\n\n        return result;\n    };\n\n    /**\n     *\n     */\n    Human.math.vec3ArrayToObj = function(v) {\n        return { x: v[0], y: v[1], z: v[2] };\n    };\n\n    /** cartesian coordinate (x,y,z) to cylindrical coordinate (r, theta, h)\n     * x - left, y - up, z - in (right hand)\n     * r = x^2 + z^2\n     * theta = atan2(x, z)\n     * h = y\n     */\n    HumanMath.cartesianToCylindrical = function (v, dest) {\n        var result = dest || vec3.create();\n\n        result[0] = Math.sqrt( v[0] * v[0] + v[2] * v[2]);\n        result[1] = Math.atan2( v[0], v[2] );\n        result[2] = v[1];\n\n        return result;\n    };\n\n    /** cylindrical coordinate (r, theta, h) to cartesian coordinate (x,y,z)\n     * x - left, y - up, z - in (right hand)\n     * x = r * sin(theta)\n     * y = h\n     * z = r * cos(theta)\n     */\n    HumanMath.cylindricalToCartesian = function (v, dest) {\n        var result = dest || vec3.create();\n\n        result[0] = v[0] * Math.sin(v[1]);\n        result[1] = v[2];\n        result[2] = v[0] * Math.cos(v[1]);\n\n        return result;\n    };\n\n    /** @private\n     *\n     * @param min\n     * @param max\n     */\n    HumanMath.AxisBox3 = function(min, max) {\n        this.verts = [\n            [min[0], min[1], min[2]],\n            [max[0], min[1], min[2]],\n            [max[0], max[1], min[2]],\n            [min[0], max[1], min[2]],\n\n            [min[0], min[1], max[2]],\n            [max[0], min[1], max[2]],\n            [max[0], max[1], max[2]],\n            [min[0], max[1], max[2]]\n        ];\n    };\n\n    /**\n     * Note: Assume 0 <= t <= 1\n     */\n    HumanMath.easeOut = function (t, b, c) {\n        var ts = t * t;\n        var tc = ts * t;\n        return b + c * (-1 * ts * ts + 4 * tc + -6 * ts + 4 * t);\n    };\n\n    /**\n     * Note: Assume 0 <= t <= 1\n     */\n    HumanMath.easeIn = function (t, b, c) {\n        return 1 - HumanMath.easeOut(1 - t, b, c);\n    };\n\n    /**\n     * Note: Assume 0 <= t <= 1\n     */\n    HumanMath.easeInOut = function (t, b, c) {\n        if (t < 0.5) {\n            return HumanMath.easeIn(2 * t, b, c) / 2;\n        } else {\n            return HumanMath.easeOut(2 * t - 1, b, c) * 0.5 + 0.5;\n        }\n    };\n\n    /**\n     *\n     */\n    HumanMath.getBoundaryCenter = function(boundary, dest) {\n        var r = dest || vec3.create();\n\n        r[0] = (boundary.xmax + boundary.xmin ) * 0.5;\n        r[1] = (boundary.ymax + boundary.ymin ) * 0.5;\n        r[2] = (boundary.zmax + boundary.zmin ) * 0.5;\n\n        return r;\n    };\n    /**\n     *\n     */\n    var diag = vec3.create();\n    HumanMath.getBoundaryDiag = function(boundary) {\n\n        diag[0] = boundary.xmax - boundary.xmin;\n        diag[1] = boundary.ymax - boundary.ymin;\n        diag[2] = boundary.zmax - boundary.zmin;\n\n        return vec3.length(diag);\n    };\n\n    var scaleMat = mat4.create();\n    var rotateZMat = mat4.create();\n    var rotateYMat = mat4.create();\n    var rotateXMat = mat4.create();\n    var result = mat4.create();\n\n    HumanMath.buildRotationScaleMat3 = function(out, rotate, scale) {\n        rotate = rotate || this.VEC3_ZEROS;\n        scale = scale || this.VEC3_ONES;\n\n        mat4.fromScaling(scaleMat, scale);\n        mat4.fromZRotation(rotateZMat, rotate[2] * this.TO_RADIANS);\n        mat4.fromYRotation(rotateYMat, rotate[1] * this.TO_RADIANS);\n        mat4.fromXRotation(rotateXMat, rotate[0] * this.TO_RADIANS);\n\n\n        mat4.multiply(result, rotateXMat, scaleMat);\n        mat4.multiply(result, rotateYMat, result);\n        mat4.multiply(result, rotateZMat, result);\n\n        return mat3.fromMat4(out, result);\n    };\n\n})();\n;/**\n  A javascript Bezier curve library by Pomax.\n\n  Based on http://pomax.github.io/bezierinfo\n\n  This code is MIT licensed.\n**/\n(function() {\n  \"use strict\";\n\n    // math-inlining.\n  var abs = Math.abs,\n      cos = Math.cos,\n      sin = Math.sin,\n      atan2 = Math.atan2,\n      sqrt = Math.sqrt,\n      pow = Math.pow,\n      // a zero coordinate, which is surprisingly useful\n      ZERO = {x:0,y:0,z:0};\n\n\n  // Bezier utils \n  var bezierUtils = {\n    // Legendre-Gauss abscissae with n=24 (x_i values, defined at i=n as the roots of the nth order Legendre polynomial Pn(x))\n    Tvalues: [\n      -0.0640568928626056260850430826247450385909,\n      0.0640568928626056260850430826247450385909,\n      -0.1911188674736163091586398207570696318404,\n      0.1911188674736163091586398207570696318404,\n      -0.3150426796961633743867932913198102407864,\n      0.3150426796961633743867932913198102407864,\n      -0.4337935076260451384870842319133497124524,\n      0.4337935076260451384870842319133497124524,\n      -0.5454214713888395356583756172183723700107,\n      0.5454214713888395356583756172183723700107,\n      -0.6480936519369755692524957869107476266696,\n      0.6480936519369755692524957869107476266696,\n      -0.7401241915785543642438281030999784255232,\n      0.7401241915785543642438281030999784255232,\n      -0.8200019859739029219539498726697452080761,\n      0.8200019859739029219539498726697452080761,\n      -0.8864155270044010342131543419821967550873,\n      0.8864155270044010342131543419821967550873,\n      -0.9382745520027327585236490017087214496548,\n      0.9382745520027327585236490017087214496548,\n      -0.9747285559713094981983919930081690617411,\n      0.9747285559713094981983919930081690617411,\n      -0.9951872199970213601799974097007368118745,\n      0.9951872199970213601799974097007368118745\n    ],\n\n    // Legendre-Gauss weights with n=24 (w_i values, defined by a function linked to in the Bezier primer article)\n    Cvalues: [\n      0.1279381953467521569740561652246953718517,\n      0.1279381953467521569740561652246953718517,\n      0.1258374563468282961213753825111836887264,\n      0.1258374563468282961213753825111836887264,\n      0.1216704729278033912044631534762624256070,\n      0.1216704729278033912044631534762624256070,\n      0.1155056680537256013533444839067835598622,\n      0.1155056680537256013533444839067835598622,\n      0.1074442701159656347825773424466062227946,\n      0.1074442701159656347825773424466062227946,\n      0.0976186521041138882698806644642471544279,\n      0.0976186521041138882698806644642471544279,\n      0.0861901615319532759171852029837426671850,\n      0.0861901615319532759171852029837426671850,\n      0.0733464814110803057340336152531165181193,\n      0.0733464814110803057340336152531165181193,\n      0.0592985849154367807463677585001085845412,\n      0.0592985849154367807463677585001085845412,\n      0.0442774388174198061686027482113382288593,\n      0.0442774388174198061686027482113382288593,\n      0.0285313886289336631813078159518782864491,\n      0.0285313886289336631813078159518782864491,\n      0.0123412297999871995468056670700372915759,\n      0.0123412297999871995468056670700372915759\n    ],\n\n    arcfn: function(t, derivativeFn) {\n      var d = derivativeFn(t);\n      var l = d.x*d.x + d.y*d.y;\n      if(typeof d.z !== \"undefined\") {\n        l += d.z*d.z;\n      }\n      return sqrt(l);\n    },\n\n    length: function(derivativeFn) {\n      var z=0.5,sum=0,len=bezierUtils.Tvalues.length,i,t;\n      for(i=0; i<len; i++) {\n        t = z * bezierUtils.Tvalues[i] + z;\n        sum += bezierUtils.Cvalues[i] * bezierUtils.arcfn(t,derivativeFn);\n      }\n      return z * sum;\n    },\n\n    map: function(v, ds,de, ts,te) {\n      var d1 = de-ds, d2 = te-ts, v2 =  v-ds, r = v2/d1;\n      return ts + d2*r;\n    },\n\n    lerp: function(r, v1, v2) {\n      var ret = {\n        x: v1.x + r*(v2.x-v1.x),\n        y: v1.y + r*(v2.y-v1.y)\n      };\n      if(!!v1.z && !!v2.z) {\n        ret.z =  v1.z + r*(v2.z-v1.z);\n      }\n      return ret;\n    },\n\n    pointToString: function(p) {\n      var s = p.x+\"/\"+p.y;\n      if(typeof p.z !== \"undefined\") {\n        s += \"/\"+p.z;\n      }\n      return s;\n    },\n\n    pointsToString: function(points) {\n      return \"[\" + points.map(bezierUtils.pointToString).join(\", \") + \"]\";\n    },\n\n    angle: function(o,v1,v2) {\n      var dx1 = v1.x - o.x,\n          dy1 = v1.y - o.y,\n          dx2 = v2.x - o.x,\n          dy2 = v2.y - o.y,\n          cross = dx1*dy2 - dy1*dx2,\n          m1 = sqrt(dx1*dx1+dy1*dy1),\n          m2 = sqrt(dx2*dx2+dy2*dy2),\n          dot;\n      dx1/=m1; dy1/=m1; dx2/=m2; dy2/=m2;\n      dot = dx1*dx2 + dy1*dy2;\n      return atan2(cross, dot);\n    },\n\n    dist: function(p1, p2) {\n      var dx = p1.x - p2.x,\n          dy = p1.y - p2.y;\n      return sqrt(dx*dx+dy*dy);\n    },\n\n    abcratio: function(t, n) {\n      // see ratio(t) note on http://pomax.github.io/bezierinfo/#abc\n      if (n!==2 && n!==3) {\n        return false;\n      }\n      if (typeof t === \"undefined\") {\n        t = 0.5;\n      } else if (t===0 || t===1) {\n        return t;\n      }\n      var bottom = pow(t,n) + pow(1-t,n), top = bottom - 1;\n      return abs(top/bottom);\n    },\n\n    projectionratio: function(t, n) {\n      // see u(t) note on http://pomax.github.io/bezierinfo/#abc\n      if (n!==2 && n!==3) {\n        return false;\n      }\n      if (typeof t === \"undefined\") {\n        t = 0.5;\n      } else if (t===0 || t===1) {\n        return t;\n      }\n      var top = pow(1-t, n), bottom = pow(t,n) + top;\n      return top/bottom;\n    },\n\n    align: function(points, line) {\n      var tx = line.p1.x,\n          ty = line.p1.y,\n          a = -atan2(line.p2.y-ty, line.p2.x-tx),\n          d = function(v) {\n            return {\n              x: (v.x-tx)*cos(a) - (v.y-ty)*sin(a),\n              y: (v.x-tx)*sin(a) + (v.y-ty)*cos(a)\n            };\n          };\n      return points.map(d);\n    }\n\n  };\n  \n  //--------------------------------------\n\n\n  /**\n   * Bezier curve constructor. The constructor argument can be one of three things:\n   *\n   * 1. array/4 of {x:..., y:..., z:...}, z optional\n   * 2. numerical array/8 ordered x1,y1,x2,y2,x3,y3,x4,y4\n   * 3. numerical array/12 ordered x1,y1,z1,x2,y2,z2,x3,y3,z3,x4,y4,z4\n   *\n   */\n  var Bezier = Human.math.bezier = function(coords) {\n    var args = (coords && coords.forEach) ? coords : [].slice.call(arguments);\n    var coordlen = false;\n    if(typeof args[0] === \"object\") {\n      coordlen = args.length;\n      var newargs = [];\n      args.forEach(function(point) {\n        ['x','y','z'].forEach(function(d) {\n          if(typeof point[d] !== \"undefined\") {\n            newargs.push(point[d]);\n          }\n        });\n      });\n      args = newargs;\n    }\n    var higher = false;\n    var len = args.length;\n    if (coordlen) {\n      if(coordlen>4) {\n        if (arguments.length !== 1) {\n          throw new Error(\"Only new Bezier(point[]) is accepted for 4th and higher order curves\");\n        }\n        higher = true;\n      }\n    } else {\n      if(len!==6 && len!==8 && len!==9 && len!==12) {\n        if (arguments.length !== 1) {\n          throw new Error(\"Only new Bezier(point[]) is accepted for 4th and higher order curves\");\n        }\n      }\n    }\n    var _3d = (!higher && (len === 9 || len === 12)) || (coords && coords[0] && typeof coords[0].z !== \"undefined\");\n    this._3d = _3d;\n    var points = [];\n    for(var idx=0, step=(_3d ? 3 : 2); idx<len; idx+=step) {\n      var point = {\n        x: args[idx],\n        y: args[idx+1]\n      };\n      if(_3d) { point.z = args[idx+2]; }\n      points.push(point);\n    }\n    this.order = points.length - 1;\n    this.points = points;\n    var dims = ['x','y'];\n    if(_3d) {dims.push('z');}\n    this.dims = dims;\n    this.dimlen = dims.length;\n    (function(curve) {\n      var a = bezierUtils.align(points, {p1:points[0], p2:points[curve.order]});\n      for(var i=0; i<a.length; i++) {\n        if(abs(a[i].y) > 0.0001) {\n          curve._linear = false;\n          return;\n        }\n      }\n      curve._linear = true;\n    }(this));\n    this._t1 = 0;\n    this._t2 = 1;\n    this.update();\n  };\n\n  function getABC(n,S,B,E,t) {\n    if(typeof t === \"undefined\") { t = 0.5; }\n    var u = bezierUtils.projectionratio(t,n),\n        um = 1-u,\n        C = {\n          x: u*S.x + um*E.x,\n          y: u*S.y + um*E.y\n        },\n        s = bezierUtils.abcratio(t,n),\n        A = {\n          x: B.x + (B.x-C.x)/s,\n          y: B.y + (B.y-C.y)/s\n        };\n    return { A:A, B:B, C:C };\n  }\n\n  Bezier.quadraticFromPoints = function(p1,p2,p3, t) {\n    if(typeof t === \"undefined\") { t = 0.5; }\n    // shortcuts, although they're really dumb\n    if(t===0) { return new Bezier(p2,p2,p3); }\n    if(t===1) { return new Bezier(p1,p2,p2); }\n    // real fitting.\n    var abc = getABC(2,p1,p2,p3,t);\n    return new Bezier(p1, abc.A, p3);\n  };\n\n  Bezier.cubicFromPoints = function(S,B,E, t,d1) {\n    if(typeof t === \"undefined\") { t = 0.5; }\n    var abc = getABC(3,S,B,E,t);\n    if(typeof d1 === \"undefined\") { d1 = bezierUtils.dist(B,abc.C); }\n    var d2 = d1 * (1-t)/t;\n\n    var selen = bezierUtils.dist(S,E),\n        lx = (E.x-S.x)/selen,\n        ly = (E.y-S.y)/selen,\n        bx1 = d1 * lx,\n        by1 = d1 * ly,\n        bx2 = d2 * lx,\n        by2 = d2 * ly;\n    // derivation of new hull coordinates\n    var e1  = { x: B.x - bx1, y: B.y - by1 },\n        e2  = { x: B.x + bx2, y: B.y + by2 },\n        A = abc.A,\n        v1  = { x: A.x + (e1.x-A.x)/(1-t), y: A.y + (e1.y-A.y)/(1-t) },\n        v2  = { x: A.x + (e2.x-A.x)/(t), y: A.y + (e2.y-A.y)/(t) },\n        nc1 = { x: S.x + (v1.x-S.x)/(t), y: S.y + (v1.y-S.y)/(t) },\n        nc2 = { x: E.x + (v2.x-E.x)/(1-t), y: E.y + (v2.y-E.y)/(1-t) };\n    // ...done\n    return new Bezier(S,nc1,nc2,E);\n  };\n\n\n  Bezier.prototype = {\n    valueOf: function() {\n      return this.toString();\n    },\n    toString: function() {\n      return bezierUtils.pointsToString(this.points);\n    },\n    update: function() {\n      // one-time compute derivative coordinates\n      this.dpoints = [];\n      for(var p=this.points, d=p.length, c=d-1; d>1; d--, c--) {\n        var list = [];\n        for(var j=0, dpt; j<c; j++) {\n          dpt = {\n            x: c * (p[j+1].x - p[j].x),\n            y: c * (p[j+1].y - p[j].y)\n          };\n          if(this._3d) {\n            dpt.z = c * (p[j+1].z - p[j].z);\n          }\n          list.push(dpt);\n        }\n        this.dpoints.push(list);\n        p = list;\n      }\n      this.computedirection();\n    },\n    computedirection: function() {\n      var points = this.points;\n      var angle = bezierUtils.angle(points[0], points[this.order], points[1]);\n      this.clockwise = angle > 0;\n    },\n    length: function() {\n      return bezierUtils.length(this.derivative.bind(this));\n    },\n    _lut: [],\n    getLUT: function(steps) {\n      steps = steps || 100;\n      if (this._lut.length === steps) { return this._lut; }\n      this._lut = [];\n      for(var t=0; t<=steps; t++) {\n        this._lut.push(this.compute(t/steps));\n      }\n      return this._lut;\n    },\n    on: function(point, error) {\n      error = error || 5;\n      var lut = this.getLUT(), hits = [], c, t=0;\n      for(var i=0; i<lut.length; i++) {\n        c = lut[i];\n        if (bezierUtils.dist(c,point) < error) {\n          hits.push(c);\n          t += i / lut.length;\n        }\n      }\n      if(!hits.length) {return false;}\n      return t /= hits.length;\n    },\n    get: function(t) {\n      return this.compute(t);\n    },\n    point: function(idx) {\n      return this.points[idx];\n    },\n    compute: function(t) {\n      // shortcuts\n      if(t===0) { return this.points[0]; }\n      if(t===1) { return this.points[this.order]; }\n\n      var p = this.points;\n      var mt = 1-t;\n      var ret;\n\n      // linear?\n      if(this.order===1) {\n        ret = {\n          x: mt*p[0].x + t*p[1].x,\n          y: mt*p[0].y + t*p[1].y\n        };\n        if (this._3d) { ret.z = mt*p[0].z + t*p[1].z; }\n        return ret;\n      }\n\n      // quadratic/cubic curve?\n      if(this.order<4) {\n        var mt2 = mt*mt,\n            t2 = t*t,\n            a,b,c,d = 0;\n        if(this.order===2) {\n          p = [p[0], p[1], p[2], ZERO];\n          a = mt2;\n          b = mt*t*2;\n          c = t2;\n        }\n        else if(this.order===3) {\n          a = mt2*mt;\n          b = mt2*t*3;\n          c = mt*t2*3;\n          d = t*t2;\n        }\n        ret = {\n          x: a*p[0].x + b*p[1].x + c*p[2].x + d*p[3].x,\n          y: a*p[0].y + b*p[1].y + c*p[2].y + d*p[3].y\n        };\n        if(this._3d) {\n          ret.z = a*p[0].z + b*p[1].z + c*p[2].z + d*p[3].z;\n        }\n        return ret;\n      }\n\n      // higher order curves: use de Casteljau's computation\n      var dCpts = JSON.parse(JSON.stringify(this.points));\n      while(dCpts.length > 1) {\n        for (var i=0; i<dCpts.length-1; i++) {\n          dCpts[i] = {\n            x: dCpts[i].x + (dCpts[i+1].x - dCpts[i].x) * t,\n            y: dCpts[i].y + (dCpts[i+1].y - dCpts[i].y) * t\n          };\n          if (typeof dCpts[i].z !== \"undefined\") {\n            dCpts[i] = dCpts[i].z + (dCpts[i+1].z - dCpts[i].z) * t;\n          }\n        }\n        dCpts.splice(dCpts.length-1, 1);\n      }\n      return dCpts[0];\n    },\n    derivative: function(t) {\n      var mt = 1-t,\n          a,b,c=0,\n          p = this.dpoints[0];\n      if(this.order===2) { p = [p[0], p[1], ZERO]; a = mt; b = t; }\n      if(this.order===3) { a = mt*mt; b = mt*t*2; c = t*t; }\n      var ret = {\n        x: a*p[0].x + b*p[1].x + c*p[2].x,\n        y: a*p[0].y + b*p[1].y + c*p[2].y\n      };\n      if(this._3d) {\n        ret.z = a*p[0].z + b*p[1].z + c*p[2].z;\n      }\n      return ret;\n    }\n  };\n\n}());\n;(function() {\n    \"use strict\";\n\n    var Intersections = Human.math.intersections = {};\n\n    var EPSILON = 1e-8;\n\n    var tempVec3a = vec3.create();\n    var tempVec3b = vec3.create();\n\n    // NOTE(Tarek): 5 different rays tests\n    // to account for potential numerical errors\n    var POINT_POLYHEDRON_RAY_DIRS = [\n        new Float32Array([1, 0, 0]),\n        new Float32Array([0, 1, 0]),\n        new Float32Array([0, 0, 1]),\n        new Float32Array([-1, 0, 0]),\n        new Float32Array([0, -1, 0])\n    ];\n\n    // Test weather point p is in bounding box defined\n    // by min/max\n    Intersections.pointAabb = function(p, min, max) {\n        if (p[0] < min[0]) {\n            return false;\n        }\n\n        if (p[0] > max[0]) {\n            return false;\n        }\n\n        if (p[1] < min[1]) {\n            return false;\n        }\n\n        if (p[1] > max[1]) {\n            return false;\n        }\n\n        if (p[2] < min[2]) {\n            return false;\n        }\n\n        if (p[2] > max[2]) {\n            return false;\n        }\n\n        return true;\n    };\n\n    // Test whether bounding box defined by minA/maxA intersects\n    // the one defined by minB/maxB\n    Intersections.aabbAabb = function(minA, maxA, minB, maxB) {\n        if (maxA[0] < minB[0]) {\n            return false;\n        }\n\n        if (maxB[0] < minA[0]) {\n            return false;\n        }\n\n        if (maxA[1] < minB[1]) {\n            return false;\n        }\n\n        if (maxB[1] < minA[1]) {\n            return false;\n        }\n\n        if (maxA[2] < minB[2]) {\n            return false;\n        }\n\n        if (maxB[2] < minA[2]) {\n            return false;\n        }\n\n        return true;\n    };\n\n    // Test whether ray defined by origin/direct intersects\n    // the AABB defined by min/max.\n    // If an array of two elements is provided in result, result[0] will\n    // be set to tmin (where origin + tmin * direction is the near\n    // intersection point with the AABB), and result[1] will be set\n    // to tmax (where origin + tmax * direction is the far\n    // intersection point with the AABB).\n    Intersections.rayAabb = function(origin, direction, min, max, result) {\n        var tmin = 0;\n        var tmax = Number.POSITIVE_INFINITY;\n\n        var fabs = Math.abs;\n        var fmin = Math.min;\n        var fmax = Math.max;\n\n        for (var i = 0; i < 3; ++i) {\n            if (fabs(direction[i]) < EPSILON) {\n                if (origin[i] < min[i] || origin[i] > max[i]) {\n                    return false;\n                }\n            } else {\n                var t1 = (min[i] - origin[i]) / direction[i];\n                var t2 = (max[i] - origin[i]) / direction[i];\n\n                if (t1 > t2) {\n                    var tmp = t1;\n                    t1 = t2;\n                    t2 = tmp;\n                }\n\n                tmin = fmax(tmin, t1);\n                tmax = fmin(tmax, t2);\n\n                if (tmin > tmax) {\n                    return false;\n                }\n            }\n        }\n\n        if (result) {\n            result[0] = tmin;\n            result[1] = tmax;\n        }\n\n        return true;\n    };\n\n\n    // Test if the ray defined by origin/direction intersects the triangle\n    // defined by v1/v2/v3. If an object is provided in results, the following\n    // properties will be set:\n    // - u, v, w: the barycentric coords of the intersection point\n    // - t: origin + t * direction is the point of intersection\n\n    var e1 = new Float32Array(3);\n    var e2 = new Float32Array(3);\n    var s = new Float32Array(3);\n    var p = new Float32Array(3);\n    var q = new Float32Array(3);\n\n    // From: http://dl.acm.org/citation.cfm?id=272315\n    Intersections.rayTriangle = function(origin, direction, v1, v2, v3, result) {\n\n        vec3.sub(e1, v2, v1);\n        vec3.sub(e2, v3, v1);\n        vec3.cross(p, direction, e2);\n\n        var det = vec3.dot(p, e1);\n\n        if (det > -EPSILON && det < EPSILON) {\n            return false;\n        }\n\n        var invDet = 1 / det;\n        vec3.sub(s, origin, v1);\n        var u = invDet * vec3.dot(p, s);\n\n        if (u < 0 || u > 1) {\n            return false;\n        }\n\n        vec3.cross(q, s, e1);\n        var v = invDet * vec3.dot(q, direction);\n\n        if (v < 0 || u + v > 1) {\n            return false;\n        }\n\n        var t = invDet * vec3.dot(q, e2);\n\n        if (t < EPSILON) {\n            return false;\n        }\n\n        if (result && t < result.t) {\n            result.u = u;\n            result.v = v;\n            result.w = 1 - u - v;\n            result.t = t;\n        }\n\n        return true;\n\n    };\n\n    // Basic idea: cast a ray from the point of interest outward and\n    // count the number of intersections with the mesh. If it's an odd\n    // number, the point was inside the mesh, even number means it was\n    // outside. Five different rays are cast to account for potential\n    // numerical errors. A kdTree is used speed up queries. KdTree node\n    // format:\n    //   {\n    //       triangles: [NUMBER, NUMBER, ...],    // Indices of triangles in this leaf node (null if not leaf node)\n    //       left: kdTreeNode,                    // Left subtree (null if leaf node)\n    //       right: kdTreeNode,                   // Right subtree (null if leaf node)\n    //       bb: {                                // Bounding box of triangles in this node and its subtrees.\n    //           min: VEC3,\n    //           max: VEC3\n    //       }\n    //   }\n    //\n    Intersections.pointPolyhedron = function(p, geometry) {\n        var inside = 0;\n        var outside = 0;\n\n        var drawable = geometry.getObject();\n\n        if (!drawable) {\n            return false;\n        }\n\n        for (var i = 0, len = POINT_POLYHEDRON_RAY_DIRS.length; i < len; ++i) {\n            if (rayKdTreeCountIntersections(\n                    p,\n                    POINT_POLYHEDRON_RAY_DIRS[i],\n                    drawable.getKdTree(),\n                    drawable\n                ) % 2 === 1) {\n                ++inside;\n            } else {\n                ++outside;\n            }\n        }\n\n        return inside > outside;\n    };\n\n    // Check if the ray defined by origin/direction intersects the polyhedron\n    // defined by the SceneJS geometry node, geometry. If an intersect is found,\n    // the following data is provided in the returned result object:\n    // - u, v, w: the barycentric coords of the intersection point\n    // - t: origin + t * direction is the point of intersection\n    // - triangleIndex: the index of the triangle in the mesh description\n    Intersections.rayPolyhedron = function(origin, direction, geometry, result) {\n        var drawable = geometry.getObject();\n\n        if (!drawable) {\n            return null;\n        }\n\n        result = result || {\n            t: Number.POSITIVE_INFINITY,\n            u: 0,\n            v: 0,\n            w: 0,\n            triangleIndex: -1\n        };\n\n        if (rayKdTreeCountIntersections(\n              origin,\n              direction,\n              drawable.getKdTree(),\n              drawable,\n              result\n            ) > 0) {\n            return result;\n        } else {\n            return null;\n        }\n    };\n\n\n    // Test which side of a plane the plane defined by normal n and distance d\n    // the AABB defined by min/max is on.\n    // 1: completely inside, -1: completely outside, 0: intersect\n    Intersections.planeAabb = function(n, d, min, max) {\n        \n        var negx = max[0];\n        var negy = max[1];\n        var negz = max[2];\n\n        if (n[0] >= 0) {\n            negx = min[0];\n        }\n\n        if (n[1] >= 0) {\n            negy = min[1];\n        }\n\n        if (n[2] >= 0) {\n            negz = min[2];\n        }\n\n        if (negx * n[0] + negy * n[1] + negz * n[2] + d > 0) {\n            return -1;\n        }\n\n        var posx = min[0];\n        var posy = min[1];\n        var posz = min[2];\n\n        if (n[0] >= 0) {\n            posx = max[0];\n        }\n\n        if (n[1] >= 0) {\n            posy = max[1];\n        }\n\n        if (n[2] >= 0) {\n            posz = max[2];\n        }\n\n        if (posx * n[0] + posy * n[1] + posz * n[2] + d > 0) {\n            return 0;\n        }\n\n        return 1;\n\n    };\n\n    Intersections.planesAabb = function(planes, min, max, details) {\n        var result = 1; // Inside\n        var numPlanes = planes.length;\n\n        for (var i = 0; i < numPlanes; ++i) {\n            var plane = planes[i];\n            var test = this.planeAabb(plane.n, plane.d, min, max);\n\n            if (details) {\n                details[i] = test;\n            }\n\n            if (test < 1) {\n                result = test;\n            }\n\n            if (result === -1) {\n                break;\n            }\n        }\n\n        if (details && i < numPlanes) {\n            // NOTE(Tarek): details might be reused so\n            //   clear out any previous results.\n            for (var j = 5; j > i; --j) {\n                details[j] = undefined;\n            }\n        }\n\n        return result;\n    };\n\n    // Test if a point is inside a Human object\n    // First test point against object AABB.\n    // If that passes, perform full point-in-polyhedron\n    // test against object's kd-tree\n\n    var toModel = mat4.create();\n    var toModel3x3 = mat3.create();\n    var modelPoint = vec3.create();\n    var modelOrigin = vec3.create();\n    var modelDirection = vec3.create();\n    var boundaryMin = vec3.create();\n    var boundaryMax = vec3.create();\n\n    Intersections.pointObject = function(p, objectId) {\n        var object = Human.scene.objects[objectId];\n\n        var boundary = object.getBoundary();\n        boundaryMin[0] = boundary.xmin;\n        boundaryMin[1] = boundary.ymin;\n        boundaryMin[2] = boundary.zmin;\n\n        boundaryMax[0] = boundary.xmax;\n        boundaryMax[1] = boundary.ymax;\n        boundaryMax[2] = boundary.zmax;\n\n        if (!this.pointAabb(p, boundaryMin, boundaryMax)) {\n            return false;\n        }\n\n        mat4.invert(toModel, object.getWorldMatrix());\n        vec3.transformMat4(modelPoint, p, toModel);\n\n        for (var i = 0, len = object.renderables.length; i < len; ++i) {\n            var renderable = object.renderables[i];\n            boundary = renderable.boundary;\n            boundaryMin[0] = boundary.xmin;\n            boundaryMin[1] = boundary.ymin;\n            boundaryMin[2] = boundary.zmin;\n\n            boundaryMax[0] = boundary.xmax;\n            boundaryMax[1] = boundary.ymax;\n            boundaryMax[2] = boundary.zmax;\n\n            if (!this.pointAabb(modelPoint, boundaryMin, boundaryMax)) {\n                continue;\n            }\n\n            var geometry = renderable.geometryNode;\n\n            if (!geometry) {\n                continue;\n            }\n\n            if (this.pointPolyhedron(modelPoint, geometry)) {\n                return true;\n            }\n        }\n\n        return false;\n    };\n\n    // Test ray defined by origin/direction against an\n    // object's AABB. If result is provide, it will\n    // include the same data as rayAabb\n    Intersections.rayObjectAabb = function(origin, direction, objectId, result) {\n        var object = Human.scene.objects[objectId];\n\n        var boundary = object.getBoundary();\n        boundaryMin[0] = boundary.xmin;\n        boundaryMin[1] = boundary.ymin;\n        boundaryMin[2] = boundary.zmin;\n\n        boundaryMax[0] = boundary.xmax;\n        boundaryMax[1] = boundary.ymax;\n        boundaryMax[2] = boundary.zmax;\n\n        return this.rayAabb(origin, direction, boundaryMin, boundaryMax, result);\n    };\n\n    // Test if the ray defined by origin/direction intersects a Human object\n    // First test against object AABB.\n    // If that passes, perform full ray-polyhedron\n    // test against object's kd-tree\n    Intersections.rayObject = function(origin, direction, objectId, result, renderableTest) {\n        var object = Human.scene.objects[objectId];\n\n        if (!this.rayObjectAabb(origin, direction, objectId)) {\n            return null;\n        }\n\n        mat4.invert(toModel, object.getWorldMatrix());\n        vec3.transformMat4(modelOrigin, origin, toModel);\n\n        mat3.fromMat4(toModel3x3, toModel);\n        vec3.transformMat3(modelDirection, direction, toModel3x3);\n\n        for (var i = 0, len = object.renderables.length; i < len; ++i) {\n            var renderable = object.renderables[i];\n            if (renderableTest && !renderableTest(renderable)) {\n                continue;\n            }\n            var boundary = renderable.boundary;\n            boundaryMin[0] = boundary.xmin;\n            boundaryMin[1] = boundary.ymin;\n            boundaryMin[2] = boundary.zmin;\n\n            boundaryMax[0] = boundary.xmax;\n            boundaryMax[1] = boundary.ymax;\n            boundaryMax[2] = boundary.zmax;\n\n            if (!this.rayAabb(modelOrigin, modelDirection, boundaryMin, boundaryMax)) {\n                continue;\n            }\n\n            var geometry = renderable.geometryNode;\n\n            if (!geometry) {\n                continue;\n            }\n\n            var hit = this.rayPolyhedron(modelOrigin, modelDirection, geometry, result);\n\n            if (hit) {\n                return hit;\n            }\n        }\n\n        \n\n        return null;\n    };\n\n    // Test if the ray defined by origin/direction interesects any object AABBs\n    // in the scene. Returns an array of intersection results, which include\n    // tmin, tmax, and the object, sorted by tmin.\n    // The function objectTest will be called on each object\n    // traversed to filter them out of the traversal (if objectTest returns false\n    // the object will be excluded from consideration)\n    Intersections.raySceneAabb = function(origin, direction, objectTest) {\n        var results = [];\n\n        raySceneKdTreeNode(origin, direction, Human.scene.getKdTree(), objectTest, results);\n\n        if (results.length > 0) {\n            results.sort(rayAabbResultSort);\n            return results;\n        } else {\n            return null;\n        }\n\n    };\n\n    // Test if the ray defined by origin/direction interesects any objects\n    // in the scene. Returns an array of intersection results, which include\n    // the following data:\n    // - u, v, w: the barycentric coords of the intersection point\n    // - t: origin + t * direction is the point of intersection\n    // - triangleIndex: the index of the triangle in the object's mesh description\n    // - objectId: the object's objectId\n    // Results are sorted by tmin.\n    // The function objectTest will be called on each object\n    // traversed to filter them out of the traversal (if objectTest returns false\n    // the object will be excluded from consideration)\n    Intersections.rayScene = function(origin, direction, objectTest, renderableTest) {\n        var results = [];\n\n        var aabbResults = this.raySceneAabb(origin, direction, objectTest);\n\n        if (aabbResults) {\n            for (var i = 0, len = aabbResults.length; i < len; ++i) {\n                var objectId = aabbResults[i].object.objectId;\n\n                var result = {\n                    t: Number.POSITIVE_INFINITY,\n                    u: 0,\n                    v: 0,\n                    w: 0,\n                    triangleIndex: -1,\n                    objectId: objectId\n                };\n\n                if (this.rayObject(origin, direction, objectId, result, renderableTest)) {\n                    results.push(result);\n                }\n            }\n        }\n\n        if (results.length > 0) {\n            results.sort(rayIntersectResultSort);\n            return results;\n        } else {\n            return null;\n        }\n\n    };\n    \n    Intersections.spherePolyhedron = function(geometry, center, radius) {\n        var min = tempVec3a;\n        var max = tempVec3b;\n\n        min[0] = center[0] - radius;\n        min[1] = center[1] - radius;\n        min[2] = center[2] - radius;\n\n        max[0] = center[0] + radius;\n        max[1] = center[1] + radius;\n        max[2] = center[2] + radius;\n        //sphere should be object space\n        return shapePolyhedron(geometry, \n            function(kdTreeNode) {\n                return Intersections.aabbAabb(kdTreeNode.bb.min, kdTreeNode.bb.max, min, max);\n            },\n            function(v1, v2, v3) {\n                return triangleSphere(v1, v2, v3, center, radius);\n            }\n        );\n    };\n\n    Intersections.sphereInPolyhedron = function(geometry, center, radius) {\n        //sphere should be object space\n        var min = tempVec3a;\n        var max = tempVec3b;\n\n        min[0] = center[0] - radius;\n        min[1] = center[1] - radius;\n        min[2] = center[2] - radius;\n\n        max[0] = center[0] + radius;\n        max[1] = center[1] + radius;\n        max[2] = center[2] + radius;\n        //sphere should be object space\n        return shapePolyhedron(geometry,\n            function(kdTreeNode) {\n                return Intersections.aabbAabb(kdTreeNode.bb.min, kdTreeNode.bb.max, min, max);\n            },\n            function(v1, v2, v3) {\n                return triangleInSphere(v1, v2, v3, center, radius);\n            }\n        );\n    };\n\n    // Traverse a mesh kdTree and count the number of intersections.\n    function rayKdTreeCountIntersections(origin, direction, kdTreeNode, drawable, result) {\n        if (!Intersections.rayAabb(origin, direction, kdTreeNode.bb.min, kdTreeNode.bb.max)) {\n            return 0;\n        }\n\n        if (kdTreeNode.triangles) {\n            var triangles = kdTreeNode.triangles;\n            var intersections = 0;\n            for (var t = 0, len = triangles.length; t < len; ++t) {\n                // Get the three vertices of the triangle\n                drawable.getTrianglePositionOnSurface(triangles[t] * 3, v1, v2, v3);\n\n                // Perform triangle intersection test.\n                if (Intersections.rayTriangle(origin, direction, v1, v2, v3, result)) {\n                    if (result) {\n                        result.triangleIndex = triangles[t];\n                    }\n                    ++intersections;\n                }\n\n            }\n\n            return intersections;\n        } else {\n            return rayKdTreeCountIntersections(origin, direction, kdTreeNode.left, drawable, result) +\n                rayKdTreeCountIntersections(origin, direction, kdTreeNode.right, drawable, result);\n        }\n    }\n\n    // Traverse scene kdTree and check for intersections with object AABBs\n    var rayAabbResult = new Float32Array(2);\n\n    function raySceneKdTreeNode(origin, direction, kdTreeNode, objectTest, results) {\n\n        if (!kdTreeNode.left) {\n\n            var objects = kdTreeNode.objects;\n\n            for (var i = 0, len = objects.length; i < len; ++i) {\n                var object = objects[i];\n                var objectId = object.objectId;\n\n                if (objectTest && !objectTest(object)) {\n                    continue;\n                }\n\n                if (Intersections.rayObjectAabb(origin, direction, objectId, rayAabbResult)) {\n                    results.push({\n                        object: object,\n                        tmin: rayAabbResult[0],\n                        tmax: rayAabbResult[1]\n                    });\n                }\n            }\n\n            return results;\n        }\n\n        if (!Intersections.rayAabb(origin, direction, kdTreeNode.bb.min, kdTreeNode.bb.max)) {\n            return results;\n        }\n\n        raySceneKdTreeNode(origin, direction, kdTreeNode.left, objectTest, results);\n        raySceneKdTreeNode(origin, direction, kdTreeNode.right, objectTest, results);\n\n        return results;\n    }\n\n    function rayIntersectResultSort(a, b) {\n        return a.t - b.t;\n    }\n\n    function rayAabbResultSort(a, b) {\n        return a.tmin - b.tmin;\n    }\n\n    var v1 = new Float32Array(3);\n    var v2 = new Float32Array(3);\n    var v3 = new Float32Array(3);\n    var nodesToIntersect = [];\n    \n\n    // Takes geometry node and tests against arbitrary shape defined by two test functions\n    // returns list of triangle indices that intersect the shape.\n    // coarseTest: function (kdTreeNode)\n    // fineTest: function (v1, v2, v2) \n    function shapePolyhedron (geometry, coarseTest, fineTest) {\n        \n        var triangleList = [];\n        var drawable = geometry.getObject();\n\n        if (!drawable) {\n            return triangleList;\n        }\n\n        nodesToIntersect.length = 0;\n        nodesToIntersect.push(drawable.getKdTree());\n        \n        while (nodesToIntersect.length > 0) {\n            var node = nodesToIntersect.pop();\n            if(!coarseTest(node)){\n                continue;\n            }\n            if(node.left) {\n                nodesToIntersect.push(node.left);\n            }\n            if(node.right) {\n                nodesToIntersect.push(node.right);\n            }\n            if(node.triangles) {\n                for (var t = 0, len = node.triangles.length; t < len; ++t) {\n                    drawable.getTrianglePositionOnSurface(node.triangles[t] * 3, v1, v2, v3);\n                    if(fineTest(v1, v2, v3)){\n                        triangleList.push(node.triangles[t]);\n                    }\n                }\n            }\n        }\n\n        return triangleList;\n    }\n\n    var ac = new Float32Array(3);\n    var ab = new Float32Array(3);\n    var abXac = new Float32Array(3);\n    var toCircumsphereCenter = new Float32Array(3);\n    var tempa = new Float32Array(3);\n    var tempb = new Float32Array(3);\n    var ccs = new Float32Array(3);\n    var sub = new Float32Array(3);\n\n    function triangleSphere(v1, v2, v3, center, radius) {\n\n        //http://realtimecollisiondetection.net/blog/?p=103\n        //https://gamedev.stackexchange.com/questions/60630/how-do-i-find-the-circumcenter-of-a-triangle-in-3d\n\n        vec3.subtract(ac, v3, v1);\n        vec3.subtract(ab, v2, v1);\n        vec3.cross(abXac, ab, ac);\n        \n        // this is the vector from a TO the circumsphere center\n        // Vector3f toCircumsphereCenter = (abXac.cross( ab )*ac.len2() + ac.cross( abXac )*ab.len2()) / (2.f*abXac.len2()) ;\n\n        vec3.cross(tempa, abXac, ab);\n        var aclen2 = vec3.length(ac);\n        aclen2 *= aclen2;\n        vec3.scale(tempa, tempa, aclen2);\n\n        vec3.cross(tempb, ac, abXac);\n        var ablen2 = vec3.length(ab);\n        ablen2 *= ablen2;\n        vec3.scale(tempb, tempb, ablen2);\n\n        vec3.add(tempa, tempa, tempb);\n\n        var abXaclen2 = vec3.length(abXac);\n        abXaclen2 *= abXaclen2;\n        vec3.scale(toCircumsphereCenter, tempa, 1.0 / (2.0 * abXaclen2));\n\n        var circumsphereRadius = vec3.length(toCircumsphereCenter) ;\n        \n        // The 3 space coords of the circumsphere center then:\n        vec3.add(ccs, v1, toCircumsphereCenter);\n\n        vec3.subtract(sub, center, ccs);\n        var dist = vec3.length(sub);\n        if(dist <= circumsphereRadius + radius) {\n            return true;\n        }\n\n        return false;\n    }\n\n    function triangleInSphere(v1, v2, v3, center, radius) {\n        var r2 = radius * radius;\n        var dx = v1[0] - center[0];\n        var dy = v1[1] - center[1];\n        var dz = v1[2] - center[2];\n        var d2 = dx * dx + dy * dy + dz * dz;\n        if (d2 > r2) {\n            return false;\n        }\n        dx = v2[0] - center[0];\n        dy = v2[1] - center[1];\n        dz = v2[2] - center[2];\n        d2 = dx * dx + dy * dy + dz * dz;\n        if (d2 > r2) {\n            return false;\n        }\n        dx = v3[0] - center[0];\n        dy = v3[1] - center[1];\n        dz = v3[2] - center[2];\n        d2 = dx * dx + dy * dy + dz * dz;\n        if (d2 > r2) {\n            return false;\n        }\n        return true;\n    }\n\n})();;/** @namespace\n * @private\n */\n\n(function() {\n    \"use strict\";\n\n    Human.utils = Human.utils || {};\n\n    var hexMap = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"];\n\n    var PVR_MAGIC_NUMBER = 1347834371;\n\n    Human.utils.leftPad = function (value, padding, width) { \n        while (value.length < width) {\n            value = padding + value;\n        }\n\n        return value;\n    };\n\n    Human.utils.toHexString = function (value) {\n        var out = \"\";\n        while (value > 0) {\n            out = hexMap[value & 0xF] + out;\n            value >>= 4;\n        }\n\n        return out;\n    };\n\n    Human.utils.floatRGBToHexString = function (r, g, b) {\n        var rHex = this.leftPad(this.toHexString(Math.floor(r * 255)), \"0\", 2); \n        var gHex = this.leftPad(this.toHexString(Math.floor(g * 255)), \"0\", 2);\n        var bHex = this.leftPad(this.toHexString(Math.floor(b * 255)), \"0\", 2);\n        \n        return \"#\" + rHex + gHex + bHex;\n    };\n\n    /**\n     * Tests if the given object is an array (including typed arrays)\n     */\n    Human.utils.isArray = function (testObject) {\n        return testObject && !(testObject.propertyIsEnumerable('length')) &&\n                typeof testObject === 'object' && typeof testObject.length === 'number';\n    };\n\n    /**\n     * Tests if the given object is a simple object\n     */\n    Human.utils.isObject = function (testObject) {\n        return !!testObject && Object.prototype.toString.call(testObject) === \"[object Object]\";\n    };\n\n    /**\n     * Tests if the argument is of a primitive type\n     */\n    Human.utils.isPrimitive = function (value) {\n        return  value === null || !!(typeof value).match(/^(string|number|boolean|undefined)$/);\n    };\n\n    /* Tests if the given value is a string.\n     */\n    Human.utils.isString = function (value) {\n        return (typeof value === \"string\" || value instanceof String);\n    };\n\n    /* Filters elements from an array in place.\n     */\n    Human.utils.filterInPlace = function filter(array, fn) {\n        var skip = 0;\n\n        for (var i = 0, len = array.length; i < len; i++) {\n            if (!fn(array[i])) {\n                skip++;\n                continue;\n            }\n            array[i - skip] = array[i];\n        }\n\n        array.length = array.length - skip;\n\n        return array;\n    };\n\n    /**\n     * Return a string representing the current call stack\n     */\n    Human.utils.getStackTrace = function() {\n        var error = new Error();\n        var stack;\n        if (error.stack) {\n            stack = error.stack;\n        } else {\n            try {\n                throw error;\n            } catch (e) {\n                stack = e.stack;\n            }\n        }\n\n        return stack || null;\n    };\n\n    /**\n     * @private\n     * @param childObj\n     * @param parentObj\n     */\n    Human.utils.extend = function (childObj, parentObj) {\n        var TmpObj = function () {\n        };\n        TmpObj.prototype = parentObj.prototype;\n        childObj.prototype = new TmpObj();\n        childObj.prototype.constructor = childObj;\n    };\n\n    /** Add properties of o to o2, overwriting them on o2 if already there\n     */\n    Human.utils.apply = function (o, o2) {\n        for (var name in o) {\n            if (o.hasOwnProperty(name)) {\n                o2[name] = o[name];\n            }\n        }\n        return o2;\n    };\n\n    /**\n     * Add properties of o to o2 where undefined or null on o2\n     * @private\n     */\n    Human.utils.applyIf = function (o, o2) {\n        for (var name in o) {\n            if (o.hasOwnProperty(name)) {\n                if (o2[name] === undefined || o2[name] === null) {\n                    o2[name] = o[name];\n                }\n            }\n        }\n        return o2;\n    };\n\n    Human.utils.applyIf2 = function (p, q) {\n        p = p || {};\n        var r = {};\n        for (var key in q) {\n            if (q.hasOwnProperty(key)) {\n                r[key] = p[key] !== undefined ? p[key] : q[key];\n            }\n        }\n        return r;\n    };\n\n    /** Returns shallow copy of object\n     * @private\n     */\n    Human.utils.shallowClone = function (o) {\n        var o2 = {};\n        for (var name in o) {\n            if (o.hasOwnProperty(name)) {\n                o2[name] = o[name];\n            }\n        }\n        return o2;\n    };\n\n    /** Returns deep clone of JSON-like ojbect\n     */\n    Human.utils.deepClone = function(o) {\n        if (o === null || o === undefined || typeof(o) === \"string\" || typeof(o) === \"number\" || typeof(o) === \"boolean\") {\n            return o;\n        }\n\n        var out;\n\n        if (Array.isArray(o)) {\n            out = new Array(o.length);\n            for (var i = 0, len = o.length; i < len; ++i) {\n                out[i] = Human.utils.deepClone(o[i]);\n            }\n            return out;\n        }\n        \n        out = {};\n        for (var key in o){\n            out[key] = Human.utils.deepClone(o[key]);\n        }\n\n        return out;\n    };\n\n    /**\n     * Returns true if given map has no items\n     * @private\n     */\n    Human.utils.isEmpty = function (map) {\n        for (var key in map) {\n            if (map.hasOwnProperty(key)) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    /**\n     * Gets directory from given path\n     * @private\n     */\n    Human.utils.getDir = function (path) {\n        var i = path.lastIndexOf(\"/\");\n        return (i > -1) ? path.substring(0, i > 0 ? i + 1 : 0) : \"\";\n    };\n\n    /**\n     * Run function asynchronously (i.e. wait for next exec context)\n     * @private\n     */\n    Human.utils.async = function(fn) {\n        setTimeout(fn, 0);\n    };\n\n    /**\n     * Null function\n     * @private\n     */\n    Human.utils.noop = function () {\n    };\n\n    /**\n     * Gets keys on given map in array\n     * @private\n     */\n    Human.utils.getKeys = function (map) {\n        var keys = [];\n        for (var key in map) {\n            if (map.hasOwnProperty(key)) {\n                keys.push(key);\n            }\n        }\n        return keys;\n    };\n\n    /**\n     * Returns new universally unique ID\n     * @private\n     */\n    Human.utils.createUUID = function () {\n        var data = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"];\n        var data2 = [\"8\", \"9\", \"A\", \"B\"];\n        var uuid = [];\n        for (var i = 0; i < 38; i++) {\n            switch (i) {\n                case 8:\n                    uuid.push(\"-\");\n                    break;\n                case 13:\n                    uuid.push(\"-\");\n                    break;\n                case 18:\n                    uuid.push(\"-\");\n                    break;\n                case 14:\n                    uuid.push(\"4\");\n                    break;\n                case 19:\n                    uuid.push(data2[Math.round(Math.random() * 3)]);\n                    break;\n                default:\n                    uuid.push(data[Math.round(Math.random() * 15)]);\n                    break;\n            }\n        }\n        return uuid.join(\"\");\n    };\n\n    /**\n     * Look up interval in sorted array where value x resides.\n     * Returns both left-index,left-value, right-index, right-value.\n     * Out of Bounds cases:\n     *   - if target < first item in sequence return [null,null,0,sequence[0]]\n     *   - if target > last item in sequence return [end,sequence[end], null, null]\n     *\n     * @param lessThan(value, element) : function that returns true if value < element\n     *    - value is of whatever type you pass to target.\n     *    - element is the type of an element in the sequence.\n     *\n    */\n\n    function defaultCompare(arrayElement, target){\n        if (arrayElement < target){\n            return -1;\n        } else if (arrayElement > target){\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n    Human.utils.binarySearch = function (array, target, compare, result){\n        compare = compare || defaultCompare;\n        result = result || {\n            index1: null,\n            index2: null,\n            value1: null,\n            value2: null\n        };\n\n        var lowIndex = 0;\n        var highIndex = array.length - 1;\n        var mid, value1, value2;\n\n        // Boundary Cases\n        if (compare(array[0], target) > 0) {\n            result.index1 = null;\n            result.value1 = null;\n            result.index2 = 0;\n            result.value2 = array[0];\n            return result;\n        } else if (compare(array[highIndex], target) < 0){\n            result.index1 = highIndex;\n            result.value1 = array[highIndex];\n            result.index2 = null;\n            result.value2 = null;\n            return result;\n        }\n\n        // Do Bisection Search\n        while (lowIndex <= highIndex){\n            mid = Math.floor((lowIndex + highIndex) / 2);\n            value1 = array[mid];\n            value2 = array[mid + 1];\n\n            if (compare(value1, target) <= 0 && compare(value2, target) >= 0){\n                result.index1 = mid;\n                result.index2 = mid + 1;\n                result.value1 = value1;\n                result.value2 = value2;\n                return result;\n            } else if (compare(value1, target) > 0) {\n                highIndex = mid - 1;\n            } else {\n                lowIndex = mid + 1;\n            }\n        }\n    };\n\n    /**\n     * Converts binary buffer to string\n     * @private\n     */\n    Human.utils.atos = function(buffer, index, length) {\n        index = index || 0;\n        length = length || buffer.byteLength;\n        var view = new Uint8Array(buffer, index, length);\n        var str = new TextDecoder(\"utf-8\").decode(view);\n        return str;\n    };\n\n    /**\n     * Converts binary buffer to JSON\n     * @private\n     */\n    Human.utils.atoj = function(buffer, index, length) {\n        return JSON.parse(Human.utils.atos(buffer, index, length));\n    };\n\n    /**\n     * Benchmark a function.\n     * @private\n     */\n    Human.utils.benchmark = function(fn, iterations) {\n        iterations = iterations || 10000000;\n\n        var t = performance.now();\n\n        for (var i = 0; i < iterations; i++) {\n            fn();\n        }\n\n        t = performance.now() - t;\n\n        console.log(\"Total time: \" + t.toFixed(3) + \"ms\");\n        console.log(\"Time / operation: \" + (t / iterations).toExponential(3) + \"ms\");\n    };\n\n    /**\n     * Make n random objects visible\n     * @private\n     */\n    Human.utils.setRandomVisibleObjects = function(n) {\n        var objectIds = Object.keys(Human.scene.objects).filter(function(o) {\n            return Human.scene.objects[o].isLeaf();\n        });\n\n        var showObjectIds = {};\n\n        for (var i = 0; i < n; i++) {\n            var j = Math.floor(Math.random() * objectIds.length);\n            showObjectIds[objectIds.splice(j, 1)] = true;\n        }\n\n        Human.scene.setEnabledObjects({objectIds: showObjectIds, replace: true});\n    };\n\n    /**\n    * Load text data\n    */\n    Human.utils.getText = function (src, callback, error) {\n        networkGet(src, \"text\", callback, error);\n    };\n\n    /**\n    * Load json data\n    */\n    if (Human.XML_HTTP_JSON_SUPPORTED) {\n        Human.utils.getJSON = function (src, callback, error) {\n            networkGet(src, \"json\", callback, error);\n        };\n    } else {\n        // IE nonsense\n        Human.utils.getJSON = function (src, callback, error) {\n            this.getText(src, function(text) {\n                callback(JSON.parse(text));\n            }, error);\n        };\n    }\n\n    /**\n    * Load binary data\n    */\n    Human.utils.getBinary = function (src, callback, error) {\n        networkGet(src, \"arraybuffer\", callback, error);\n    };\n\n    // Stolen from jQuery\n    Human.utils.elementVisible = function (e) {\n        return !!(e.offsetWidth || e.offsetHeight || e.getClientRects().length);\n    };\n\n    if (Human.ELEMENT_REMOVE_SUPPORTED) {\n        Human.utils.removeElement = function (e) {\n            e.remove();\n        };\n    } else {\n        // IE nonsense\n        Human.utils.removeElement = function (e) {\n            if (e.parentNode !== null) {\n                e.parentNode.removeChild(e);\n            }\n        };\n    }\n\n    Human.utils.boundaryToScreen = function(boundary) {\n        var xmin = Number.POSITIVE_INFINITY;\n        var xmax = Number.NEGATIVE_INFINITY;\n        var ymin = Number.POSITIVE_INFINITY;\n        var ymax = Number.NEGATIVE_INFINITY;\n\n        var v1 = [boundary.xmin, boundary.ymin, boundary.zmin, 1];\n        var v2 = [boundary.xmin, boundary.ymin, boundary.zmax, 1];\n        var v3 = [boundary.xmin, boundary.ymax, boundary.zmin, 1];\n        var v4 = [boundary.xmin, boundary.ymax, boundary.zmax, 1];\n        var v5 = [boundary.xmax, boundary.ymin, boundary.zmin, 1];\n        var v6 = [boundary.xmax, boundary.ymin, boundary.zmax, 1];\n        var v7 = [boundary.xmax, boundary.ymax, boundary.zmin, 1];\n        var v8 = [boundary.xmax, boundary.ymax, boundary.zmax, 1];\n\n        var viewMatrix = Human.renderer.getViewMat();\n        var projMatrix = Human.renderer.getProjMat();\n\n        var viewProj = mat4.create();\n        mat4.multiply(viewProj, projMatrix, viewMatrix);\n\n        vec4.transformMat4(v1, v1, viewProj);\n        xmin = Math.min(xmin, v1[0] / v1[3]);\n        xmax = Math.max(xmax, v1[0] / v1[3]);\n        ymin = Math.min(ymin, v1[1] / v1[3]);\n        ymax = Math.max(ymax, v1[1] / v1[3]);\n\n        vec4.transformMat4(v2, v2, viewProj);\n        xmin = Math.min(xmin, v2[0] / v2[3]);\n        xmax = Math.max(xmax, v2[0] / v2[3]);\n        ymin = Math.min(ymin, v2[1] / v2[3]);\n        ymax = Math.max(ymax, v2[1] / v2[3]);\n\n        vec4.transformMat4(v3, v3, viewProj);\n        xmin = Math.min(xmin, v3[0] / v3[3]);\n        xmax = Math.max(xmax, v3[0] / v3[3]);\n        ymin = Math.min(ymin, v3[1] / v3[3]);\n        ymax = Math.max(ymax, v3[1] / v3[3]);\n\n        vec4.transformMat4(v4, v4, viewProj);\n        xmin = Math.min(xmin, v4[0] / v4[3]);\n        xmax = Math.max(xmax, v4[0] / v4[3]);\n        ymin = Math.min(ymin, v4[1] / v4[3]);\n        ymax = Math.max(ymax, v4[1] / v4[3]);\n\n        vec4.transformMat4(v5, v5, viewProj);\n        xmin = Math.min(xmin, v5[0] / v5[3]);\n        xmax = Math.max(xmax, v5[0] / v5[3]);\n        ymin = Math.min(ymin, v5[1] / v5[3]);\n        ymax = Math.max(ymax, v5[1] / v5[3]);\n\n        vec4.transformMat4(v6, v6, viewProj);\n        xmin = Math.min(xmin, v6[0] / v6[3]);\n        xmax = Math.max(xmax, v6[0] / v6[3]);\n        ymin = Math.min(ymin, v6[1] / v6[3]);\n        ymax = Math.max(ymax, v6[1] / v6[3]);\n\n        vec4.transformMat4(v7, v7, viewProj);\n        xmin = Math.min(xmin, v7[0] / v7[3]);\n        xmax = Math.max(xmax, v7[0] / v7[3]);\n        ymin = Math.min(ymin, v7[1] / v7[3]);\n        ymax = Math.max(ymax, v7[1] / v7[3]);\n\n        vec4.transformMat4(v8, v8, viewProj);\n        xmin = Math.min(xmin, v8[0] / v8[3]);\n        xmax = Math.max(xmax, v8[0] / v8[3]);\n        ymin = Math.min(ymin, v8[1] / v8[3]);\n        ymax = Math.max(ymax, v8[1] / v8[3]);\n\n        var canvas = Human.renderer.canvas.canvas[0];\n\n        var canvasXMin = (xmin * 0.5 + 0.5) * canvas.width;\n        var canvasXMax = (xmax * 0.5 + 0.5) * canvas.width;\n        var canvasYMin = canvas.height - (ymax * 0.5 + 0.5) * canvas.height;\n        var canvasYMax = canvas.height - (ymin * 0.5 + 0.5) * canvas.height;\n\n        var pixelCoverage = (canvasXMax - canvasXMin) * (canvasYMax - canvasYMin);\n\n        return {\n            min: [canvasXMin, canvasYMin],\n            max: [canvasXMax, canvasYMax],\n            pixelCoverage: pixelCoverage\n        };\n    };\n\n    Human.utils.visibleAssetReport = function() {\n        var report = {\n            totalVertices: 0,\n            totalTriangles: 0,\n            objectStats: {},\n            geometryStats: {},\n            textureStats: {},\n            objectsByTrianglesPerPixel: null,\n            objectsByTexelsPerPixel: null,\n            geometriesByTriangleCount: null,\n            texturesBySize: null,\n        };\n\n        var objects = Human.scene.objects;\n\n        var objectIds = Object.keys(Human.scene.enabledObjects).filter(function(objectId) {\n            return !!Human.scene.objects[objectId].geometry && !!Human.scene.objects[objectId].material;\n        });\n\n        report.objectsByTrianglesPerPixel = new Array(objectIds.length);\n        report.objectsByTexelsPerPixel = new Array(objectIds.length);\n\n        var geometryStats = report.geometryStats;\n        var textureStats = report.textureStats;\n\n        for (var i = 0, len = objectIds.length; i < len; ++i) {\n            var objectId = objectIds[i];\n            var object = objects[objectId];\n            var geometry = object.geometry._core.arrays;\n            var vertices = geometry.positions.length / 3;\n            var triangles = geometry.indices.length / 3;\n            var materialTextures = object.material.textures || [];\n            var objectTextures = new Array(materialTextures.length);\n\n            for (var t = 0; t < materialTextures.length; ++t) {\n                var texture = materialTextures[t]._core;\n                var src = texture.compressedSrc || texture.src || texture.uri;\n\n                objectTextures[t] = textureStats[src] = textureStats[src] || {\n                    src: src,\n                    width: texture.width,\n                    height: texture.height,\n                    objectIds: [],\n                    count: 0,\n                    atlasSharing: 0,\n                    atlas: false,\n                    adjustedTexels: texture.width * texture.height\n                };\n\n                textureStats[src].count++;\n\n                var atlasNew = true;\n                for (var o = 0, oLen = textureStats[src].objectIds.length; o < oLen; ++o) {\n                    var otherGeometryId = objects[textureStats[src].objectIds[o]].geometryId;\n\n                    if (otherGeometryId !== object.geometryId) {\n                        textureStats[src].atlas = true;\n                    }\n\n                    if (otherGeometryId === object.geometryId) {\n                        atlasNew = false;\n                    }\n                }\n\n                if (atlasNew) {\n                    textureStats[src].atlasSharing++;\n                }\n\n                textureStats[src].objectIds.push(objectId);\n            }\n\n            // NOTE(TAREK): There seems to be a bug in boundary calculations.\n            // They aren't always updated with the transforms.\n            object._setBoundaryDirty();\n            var canvasBounds = Human.utils.boundaryToScreen(object.getBoundary());\n\n            report.totalVertices += vertices;\n            report.totalTriangles += triangles;\n\n            report.objectsByTexelsPerPixel[i] = report.objectsByTrianglesPerPixel[i] = report.objectStats[objectId] = {\n                objectId: objectId,\n                vertices: vertices,\n                triangles: triangles,\n                textures: objectTextures,\n                canvasBounds: {\n                    min: canvasBounds.min,\n                    max: canvasBounds.max\n                },\n                pixelCoverage: canvasBounds.pixelCoverage,\n                trianglesPerPixel: triangles / canvasBounds.pixelCoverage,\n                texelsPerPixel: 0\n            };\n\n            geometryStats[object.geometryId] = geometryStats[object.geometryId] || {\n                geometryId: object.geometryId,\n                vertices: vertices,\n                triangles: triangles,\n                totalVertices: 0,\n                totalTriangles: 0,\n                objectIds: [],\n                count: 0\n            };\n\n            geometryStats[object.geometryId].count++;\n            geometryStats[object.geometryId].totalVertices += vertices;\n            geometryStats[object.geometryId].totalTriangles += triangles;\n            geometryStats[object.geometryId].objectIds.push(objectId);\n        }\n\n\n        Object.keys(textureStats).forEach(function(src) {\n            var texture = textureStats[src];\n            if (texture.atlas) {\n                texture.adjustedTexels /= texture.atlasSharing;\n            }\n        });\n\n        report.objectsByTrianglesPerPixel.sort(function(a, b) {\n            return b.trianglesPerPixel - a.trianglesPerPixel;\n        });\n\n        report.objectsByTexelsPerPixel.filter(function(object) {\n            return object.textures.length > 0;\n        }).forEach(function(object) {\n            var textures = object.textures;\n\n            textures.sort(function(a, b) {\n                return b.adjustedTexels - a.adjustedTexels;\n            });\n\n            object.texelsPerPixel = object.textures[0].adjustedTexels / object.pixelCoverage;\n        });\n        report.objectsByTexelsPerPixel.sort(function(a, b) {\n            return b.texelsPerPixel - a.texelsPerPixel;\n        });\n\n        report.geometriesByTriangleCount = Object.keys(geometryStats).map(function(geometryId) {\n            return geometryStats[geometryId];\n        }).sort(function(a, b) {\n            return b.triangles * b.count - a.triangles * a.count;\n        });\n\n        report.texturesBySize = Object.keys(textureStats).map(function(src) {\n            return textureStats[src];\n        }).sort(function(a, b) {\n            return b.adjustedTexels - a.adjustedTexels;\n        });\n\n        return report;\n    };\n\n    Human.utils.textGzipSize = function(str) {\n        if (window.pako) {\n            var binary = new TextEncoder().encode(str);\n            return pako.deflate(binary).byteLength;\n        }\n\n        return 0;\n    };\n\n    Human.utils.binaryGzipSize = function(data) {\n        if (window.pako) {\n            var binary = new Uint8Array(data);\n            return pako.deflate(binary).byteLength;\n        }\n\n        return 0;\n    };\n\n    Human.utils.drawKdTree = function(kdTree, node) {\n        kdTreeGeo(kdTree, node);\n    };\n\n    Human.utils.kdTreeStats = function(kdTree) {\n        var stats = {\n            numNodes: 0,\n            numLeaves: 0,\n            numObjects: 0,\n            averageLeafObjects: 0,\n            depthSum: 0,\n            averageDepth: 0\n        };\n\n        kdTreeStats(kdTree, 0, stats);\n        stats.averageDepth = stats.depthSum / stats.numLeaves;\n        stats.averageLeafObjects = stats.numObjects / stats.numLeaves;\n\n        return stats;\n    };\n\n    Human.utils.loadScript = function(path, onLoadFunc) {\n        var head = document.getElementsByTagName('head')[0];\n        var element = document.createElement('script');\n        element.type = 'text/javascript';\n        element.src = path;\n        if (onLoadFunc !== null) {\n            element.onload = onLoadFunc;\n        }\n        head.appendChild(element);\n    };\n\n    function networkGet(src, type, callback, error) {\n        function defaultOnload() {\n            if (request.status === 200) {\n                callback(request.response);\n            } else if (error) {\n                error(new Error(\"Failed network request (\" + src + \"): \" + request.status + \" - \" + request.statusText));\n            }\n        }\n\n        // offline get doesn't check response code, assumes valid content exists\n        // offline get can falsely report existence of compressed pvr textures and needs to fail\n        function offlineOnload() {\n            var didFail = src.endsWith(\"-etc1.pvr\") && new DataView(request.response).getInt32(0) !== PVR_MAGIC_NUMBER;\n            if (didFail) {\n                error(new Error(\"Failed offline PVR get request: \" + request.status + \" - \" + request.statusText));\n            } else {\n                callback(request.response);\n            }\n        }\n\n        var request = new XMLHttpRequest();\n        request.open(\"GET\", src, true);\n        request.timeout = 0;\n        request.responseType = type;\n        request.onerror = function() {\n            error(new Error(\"Failed request (\" + src + \"): \" + request.status + \" - \" +  request.statusText));\n        };\n        request.onload = window.localContentOnly ? offlineOnload : defaultOnload;\n\n        request.send(null);\n    }\n\n    function kdTreeGeo(kdTreeNode, graphNode) {\n        if (!kdTreeNode) {\n            return;\n        }\n\n        var min = kdTreeNode.bb.min;\n        var max = kdTreeNode.bb.max;\n\n        var minX = min[0];\n        var minY = min[1];\n        var minZ = min[2];\n\n        var maxX = max[0];\n        var maxY = max[1];\n        var maxZ = max[2];\n\n        graphNode.addNode({\n            type: \"geometry\",\n            primitive: \"lines\",\n            positions: [\n                minX, maxY, minZ,\n                maxX, maxY, minZ,\n\n                maxX, maxY, minZ,\n                maxX, minY, minZ,\n\n                maxX, minY, minZ,\n                minX, minY, minZ,\n\n                minX, minY, minZ,\n                minX, maxY, minZ,\n\n                minX, maxY, minZ,\n                minX, maxY, maxZ,\n\n                maxX, maxY, minZ,\n                maxX, maxY, maxZ,\n\n                minX, minY, minZ,\n                minX, minY, maxZ,\n\n                maxX, minY, minZ,\n                maxX, minY, maxZ,\n\n                minX, maxY, maxZ,\n                maxX, maxY, maxZ,\n\n                maxX, maxY, maxZ,\n                maxX, minY, maxZ,\n\n                maxX, minY, maxZ,\n                minX, minY, maxZ,\n\n                minX, minY, maxZ,\n                minX, maxY, maxZ\n            ]\n        });\n\n        kdTreeGeo(kdTreeNode.left, graphNode);\n        kdTreeGeo(kdTreeNode.right, graphNode);\n    }\n\n    function kdTreeStats(kdTreeNode, depth, stats) {\n        depth++;\n        stats.numNodes++;\n\n        var items = kdTreeNode.triangles || kdTreeNode.objects;\n\n        if (items) {\n            stats.numLeaves++;\n            stats.numObjects += items.length;\n            stats.depthSum += depth;\n        } else {\n            kdTreeStats(kdTreeNode.left, depth, stats);\n            kdTreeStats(kdTreeNode.right, depth, stats);\n        }\n    }\n})();\n;/**\n * @class Generic map of IDs to items - can generate own IDs or accept given IDs. IDs should be strings in order to not\n * clash with internally generated IDs, which are numbers.\n * @private\n */\nHuman.utils.Map = function (items, _baseId) {\n    \"use strict\";\n\n    /**\n     * @property Items in this map\n     */\n    this.items = items || [];\n\n\n    var baseId = _baseId || 0;\n    var lastUniqueId = baseId;\n    // Attach id number to make unique\n    if (typeof baseId !== \"number\") {\n        lastUniqueId = baseId + \"0\";\n    }\n\n    /**\n     * Adds an item to the map and returns the ID of the item in the map. If an ID is given, the item is\n     * mapped to that ID. Otherwise, the map automatically generates the ID and maps to that.\n     *\n     * id = myMap.addItem(\"foo\") // ID internally generated\n     *\n     * id = myMap.addItem(\"foo\", \"bar\") // ID is \"foo\"\n     *\n     */\n    this.addItem = function () {\n\n        var item;\n\n        if (arguments.length === 2) {\n\n            var id = arguments[0];\n\n            item = arguments[1];\n\n            if (this.items[id]) { // Won't happen if given ID is string\n                throw \"ID clash: '\" + id + \"'\";\n            }\n\n            this.items[id] = item;\n\n            return id;\n\n        } else {\n\n            while (true) {\n\n                item = arguments[0];\n\n                // Last unique id is either # or prefix + #\n                var findId;\n                if (typeof baseId === \"number\") {\n                    findId = lastUniqueId++;\n                } else {\n                    findId = baseId + parseInt(lastUniqueId.substr(baseId.length));\n                    lastUniqueId = baseId + (parseInt(lastUniqueId.substr(baseId.length)) + 1);\n                }\n\n                if (!this.items[findId]) {\n                    this.items[findId] = item;\n                    return findId;\n                }\n            }\n        }\n    };\n\n    /**\n     * Removes the item of the given ID from the map and returns it\n     */\n    this.removeItem = function (id) {\n        var item = this.items[id];\n\n        if (item !== undefined) {\n            // Remove id from item list\n            delete this.items[id];\n            // Update last unique id -- prevents holes\n            lastUniqueId = id;\n        }\n\n        return item;\n    };\n};;\n/**\n * A fast pool of reusable ids\n */\nHuman.utils.IDPool = function(cfg) {\n    \"use strict\";\n\n    cfg = cfg || {};\n\n    var prefix = cfg.prefix || \"id\";\n    var prefixLen = prefix.length;\n    var idNums = [];\n    var clientIds = {};    // IDs explicitly supplied by client\n    var internalIds = {};  // IDs internally generated\n\n    /** Gets new ID\n     */\n    this.getId = function(clientId) {\n        if (clientId) {\n            // Explicit user-supplied ID\n            if (clientIds[clientId] || internalIds[clientId]) {\n                throw \"ID already in use: \" + clientId;\n            }\n            clientIds[clientId] = true;\n            return clientId;\n        }\n        var internalId;\n        // Try to find hole in ID nums\n        for (var i = 0, len = idNums.length; i < len; i++) {\n            if (!idNums[i]) {\n                internalId = prefix + i;\n                if (!clientIds[internalId]) { // Don't clobber user ID\n                    idNums[i] = true;\n                    internalIds[internalId] = true;\n                    return internalId;\n                }\n            }\n        }\n        // No hole found in ID nums - append new one\n        idNums.push(true);\n        internalId = prefix + (idNums.length - 1);\n        internalIds[internalId] = true;\n        return internalId;\n    };\n\n    /** Returns true if given ID in use\n     *\n     * @param id\n     * @return {Boolean}\n     */\n    this.containsId = function(id) {\n        return clientIds[id] !== undefined || internalIds[id] !== undefined;\n    };\n\n    /** Releases ID to the pool for reuse\n     */\n    this.putId = function(id) {\n        if (clientIds[id]) {\n            delete clientIds[id];\n        } else if (internalIds[id]) {\n            // Additional check to make sure that id exists in pool\n\n            idNums[parseInt(id.substr(prefixLen))] = false;\n            delete internalIds[id];\n        }\n    };\n\n};\n;/* Tools for advanced selection from any knowledge graph.\n* Lexer, Parser, SetOperations\n*\n* Lexer: Turn an expression into tokens of accessors and logical conjunctions.\n* Parser: Sort tokens according to order of operations.\n* SetOperations: Wrappers for common logical set operations\n*\n* GraphMatcher: Get graph terms matching accessor/conjunction queries. This requires a graph object with an 'access' function to access the graph nodes implied or pointed to by accessor.\n*/\n\n(function () {\n    \"use strict\";\n    var HumanSelection = Human.utils.selection = {};\n\n    // LEXER ===================================================================\n    var Lexer = function(defunct){\n        if (typeof defunct !== \"function\") {\n            this.defunct = Lexer.defunct;\n        } else {\n            this.defunct = function(){return false;};\n        }\n        this.tokens = [];\n        this.rules = [];\n        this.remove = 0;\n        this.state = 0;\n        this.index = 0;\n        this.input = \"\";\n    };\n\n    Lexer.prototype.addRule = function (pattern, action, start) {\n          var global = pattern.global;\n\n          if (!global) {\n              var flags = \"g\";\n              if (pattern.multiline) {flags += \"m\";}\n              if (pattern.ignoreCase) {flags += \"i\";}\n              pattern = new RegExp(pattern.source, flags);\n          }\n\n          if (Object.prototype.toString.call(start) !== \"[object Array]\") {start = [0];}\n\n          this.rules.push({\n              pattern: pattern,\n              global: global,\n              action: action,\n              start: start\n          });\n\n          return this;\n      };\n\n    Lexer.prototype.setInput = function (input) {\n        this.remove = 0;\n        this.state = 0;\n        this.index = 0;\n        this.tokens.length = 0;\n        this.input = input;\n        return this;\n    };\n\n    Lexer.prototype.lex = function () {\n        if (this.tokens.length) {return this.tokens.shift();}\n\n        this.reject = true;\n        var token;\n        while (this.index <= this.input.length) {\n            var matches = this.scan().splice(this.remove);\n            var index = this.index;\n\n            while (matches.length) {\n                if (this.reject) {\n                    var match = matches.shift();\n                    var result = match.result;\n                    var length = match.length;\n                    this.index += length;\n                    this.reject = false;\n                    this.remove++;\n\n                    token = match.action.apply(this, result);\n                    if (this.reject) {this.index = result.index;}\n                    else if (typeof token !== \"undefined\") {\n                        switch (Object.prototype.toString.call(token)) {\n                        case \"[object Array]\":\n                            this.tokens = token.slice(1);\n                            token = token[0];\n                            /* falls through */\n                        default:\n                            if (length) {this.remove = 0;}\n                            return token;\n                        }\n                    }\n                } else {break;}\n            }\n\n            var input = this.input;\n\n            if (index < input.length) {\n                if (this.reject) {\n                    this.remove = 0;\n                    token = this.defunct.call(this, input.charAt(this.index++));\n                    if (typeof token !== \"undefined\") {\n                        if (Object.prototype.toString.call(token) === \"[object Array]\") {\n                            this.tokens = token.slice(1);\n                            return token[0];\n                        } else {return token;}\n                    }\n                } else {\n                    if (this.index !== index) {this.remove = 0;}\n                    this.reject = true;\n                }\n            } else if (matches.length) {\n                this.reject = true;\n            }\n\n            else {break;}\n        }\n    };\n\n    Lexer.prototype.scan = function() {\n        var matches = [];\n        var index = 0;\n\n        var state = this.state;\n        var lastIndex = this.index;\n        var input = this.input;\n\n        for (var i = 0, length = this.rules.length; i < length; i++) {\n            var rule = this.rules[i];\n            var start = rule.start;\n            var states = start.length;\n\n            if ((!states || start.indexOf(state) >= 0) ||\n                (state % 2 && states === 1 && !start[0])) {\n                var pattern = rule.pattern;\n                pattern.lastIndex = lastIndex;\n                var result = pattern.exec(input);\n\n                if (result && result.index === lastIndex) {\n                    var j = matches.push({\n                        result: result,\n                        action: rule.action,\n                        length: result[0].length\n                    });\n\n                    if (rule.global) {index = j;}\n\n                    while (--j > index) {\n                        var k = j - 1;\n\n                        if (matches[j].length > matches[k].length) {\n                            var temple = matches[j];\n                            matches[j] = matches[k];\n                            matches[k] = temple;\n                        }\n                    }\n                }\n            }\n        }\n        return matches;\n    };\n\n    // PARSER ==================================================================\n    // Parser taken from here https://gist.github.com/aaditmshah/6683499\n    var Parser = function(table){\n        this.table = table;\n    };\n\n    Parser.prototype.parse = function(input){\n        var length = input.length, table = this.table, output = [], stack = [];\n        var index = 0;\n        var token;\n        while (index < length) {\n            token = input[index++];\n            switch (token) {\n            case \"(\":\n              stack.unshift(token);\n              break;\n            case \")\":\n              while (stack.length) {\n                  token = stack.shift();\n                  if (token === \"(\") {break;}\n                  else {output.push(token);}\n              }\n\n              if (token !== \"(\") {\n                  throw new Error(\"Mismatched parentheses.\");\n              }\n              break;\n            default:\n              if (table.hasOwnProperty(token)) {\n                  while (stack.length) {\n                      var punctuator = stack[0];\n\n                      if (punctuator === \"(\") {break;}\n\n                      var operator = table[token],\n                          precedence = operator.precedence,\n                          antecedence = table[punctuator].precedence;\n\n                      if (precedence > antecedence ||\n                          precedence === antecedence &&\n                          operator.associativity === \"right\") {break;}\n                      else {output.push(stack.shift());}\n                  }\n\n                  stack.unshift(token);\n              } else {output.push(token);}\n            }\n        }\n\n        while (stack.length) {\n            token = stack.shift();\n            if (token !== \"(\") {output.push(token);}\n        }\n\n        return output;\n    };\n\n    // SET OPERATIONS  =========================================================\n    var uidList = [], uid;\n\n    // This can be extended to compare membership based on other attributes\n    uidList.push(uid = function(){return this;});\n\n    var SetOperations = {};\n\n    // Performs set membership analysis between two sets a and b and passes results to arbitrary evaluator function.\n    function process(a, b, evaluator) {\n        // Create a histogram of 'a'.\n        var hist = Object.create(null), out = [], ukey, k;\n        a.forEach(function(value) {\n          ukey = uid.call(value);\n          if(!hist[ukey]) {\n            hist[ukey] = { value: value, freq: 1 };\n          }\n        });\n        // Merge 'b' into the histogram.\n        b.forEach(function(value) {\n          ukey = uid.call(value);\n          if (hist[ukey]) {\n            if (hist[ukey].freq === 1) {\n                hist[ukey].freq = 3;\n            }\n          } else {\n            hist[ukey] = { value: value, freq: 2 };\n          }\n        });\n        // Call the given evaluator.\n        if (evaluator) {\n          for (k in hist) {\n            if (evaluator(hist[k].freq)) {out.push(hist[k].value);}\n          }\n          return out;\n        } else {\n          return hist;\n        }\n    }\n\n    // Join two sets together.\n    // Set.union([1, 2, 2], [2, 3]) => [1, 2, 3]\n    SetOperations.union = function(a, b) {\n        return process(a, b, function() {\n            return true;\n        });\n    };\n\n    // Return items common to both sets.\n    // Set.intersection([1, 1, 2], [2, 2, 3]) => [2]\n    SetOperations.intersection = function(a, b) {\n        return process(a, b, function(freq) {\n            return freq === 3;\n        });\n    };\n\n    // Symmetric difference. Items from either set that\n    // are not in both sets.\n    // Set.difference([1, 1, 2], [2, 3, 3]) => [1, 3]\n    SetOperations.difference = function(a, b) {\n        return process(a, b, function(freq) {\n            return freq < 3;\n        });\n    };\n\n    // Relative complement. Items from 'b' which are\n    // not also in 'a'.\n    // Set.complement([1, 2, 2], [2, 2, 3]) => [3]\n    SetOperations.complement = function(a, b) {\n        return process(a, b, function(freq) {\n            return freq === 1;\n        });\n    };\n\n    // Returns true if both sets are equivalent, false otherwise.\n    // Set.equals([1, 1, 2], [1, 2, 2]) => true\n    // Set.equals([1, 1, 2], [1, 2, 3]) => false\n    SetOperations.equals = function(a, b) {\n        var max = 0, min = Math.pow(2, 53), key, hist = process(a, b);\n        for (key in hist) {\n            max = Math.max(max, hist[key].freq);\n            min = Math.min(min, hist[key].freq);\n        }\n        return min === 3 && max === 3;\n    };\n\n    var MATCH_STRING_PARSE_CONFIG = {\n        \"<AND>\": {precedence:1, associativity: \"left\"},\n        \"<OR>\": {precedence:1, associativity: \"left\"},\n        \"<XOR>\": {precedence:1, associativity: \"left\"},\n        \"<NOT>\": {precedence:1, associativity: \"left\"}\n    };\n\n    var MATCH_STRING_OPERATORS = {\n        '<AND>': function(a,b) {return a && b;},\n        '<OR>': function(a,b) {return a || b;},\n        '<NOT>': function(a) { return !a;}\n    };\n\n    // Match any string according to rules.\n    HumanSelection.StringMatcher = function(){\n        this.lexer = new Lexer(function(){return false;});\n        this.parser = new Parser(MATCH_STRING_PARSE_CONFIG);\n        this.operators = MATCH_STRING_OPERATORS;\n\n        this.lexer.addRule(/[A-z0-9]+/i, function(lexeme){\n          return lexeme;\n        });\n        this.lexer.addRule(/(<[A-Z]+>)/,function(lexeme){\n          return lexeme;\n        });\n        this.lexer.addRule(/[\\(\\+\\-\\*\\/\\)]/, function (lexeme) {\n          return lexeme; // punctuation (i.e. \"(\", \"+\", \"-\", \"*\", \"/\", \")\")\n        });\n    };\n\n    // Get parsed tokens from query\n    HumanSelection.StringMatcher.prototype.parse = function(query) {\n        this.lexer.setInput(query);\n        var tokens = [], token = this.lexer.lex();\n        while (token){\n            tokens.push(token);\n            token = this.lexer.lex();\n        }\n        return this.parser.parse(tokens);\n    };\n\n    // Returns true if the query matches string term\n    HumanSelection.StringMatcher.prototype.match = function(term, query) {\n        var queryTokens = this.parse(query);\n\n        var stack = [], a,b;\n        queryTokens.forEach(function(c){\n            if (this.operators.hasOwnProperty(c)) {\n                if (c!==\"<NOT>\"){\n                    // takes only one token\n                    a = stack.pop();\n                    stack.push(this.operators[c](a));\n                } else {\n                    // takes two tokens\n                    b = stack.pop();\n                    a = stack.pop();\n                    stack.push(this.operators[c](a,b));\n                }\n            } else {\n                c = \"(\" + c + \")\";\n                stack.push(!!term.match(new RegExp(c, 'i')));\n            }\n        });\n        return stack[0];\n    };\n\n    var MATCH_GRAPH_PARSE_CONFIG = {\n        \"<AND>\": {precedence:1, associativity: \"left\"},\n        \"<OR>\": {precedence:1, associativity: \"left\"},\n        \"<XOR>\": {precedence:1, associativity: \"left\"},\n        \"<NOT>\": {precedence:1, associativity: \"left\"}\n    };\n\n    var MATCH_GRAPH_OPERATORS = {\n        '<AND>': function(a, b) {\n          return SetOperations.intersection(a,b);\n        },\n        '<OR>': function(a, b) {\n          return SetOperations.union(a,b);\n        },\n        '<XOR>': function(a,b) {\n          return SetOperations.difference(a,b);\n        },\n        '<NOT>': function(a, b) {\n          return SetOperations.complement(a,b);\n        }\n    };\n\n    //\n    HumanSelection.GraphMatcher = function(){\n        this.lexer = new Lexer(function(){return false;});\n        this.parser = new Parser(MATCH_GRAPH_PARSE_CONFIG);\n        this.operators = MATCH_GRAPH_OPERATORS;\n        this.lexer.addRule(/[A-z0-9\\-]+/i, function(lexeme){\n            return lexeme;\n        });\n        this.lexer.addRule(/(<[A-Z]+>)/,function(lexeme){\n            return lexeme;\n        });\n        this.lexer.addRule(/[\\(\\)]/, function (lexeme) {\n            return lexeme; // punctuation (i.e. \"(\", \")\" )\n        });\n    };\n\n    HumanSelection.GraphMatcher.prototype.parse = function(query) {\n        this.lexer.setInput(query);\n        var tokens = [], token = this.lexer.lex();\n        while (token) {\n            tokens.push(token);\n            token = this.lexer.lex();\n        }\n        return this.parser.parse(tokens);\n    };\n\n    // Returns array of graph nodes that match query term by subsumption.\n    HumanSelection.GraphMatcher.prototype.match = function(graph, query) {\n        var queryTokens = this.parse(query);\n        var stack = [], a, b;\n        var self = this;\n        queryTokens.forEach(function(c){\n            if (self.operators.hasOwnProperty(c)) {\n                // do operation\n                b = stack.pop();\n                a = stack.pop();\n                if (!Array.isArray(a)) {\n                    a = graph.access(a);\n                }\n                if (!Array.isArray(b)) {\n                    b = graph.access(b);\n                }\n                stack.push(self.operators[c](a,b));\n            } else {\n                if (!Array.isArray(c)) {\n                    stack.push(graph.access(c));\n                } else {\n                    stack.push(c);\n                }\n            }\n        });\n        return stack[0];\n    };\n\n})();\n;/**\n * @namespace Provides methods for sending and subscribing events.\n */\n(function () {\n    \"use strict\";\n\n    var HumanEvents = Human.events = {};\n\n    var eventBinders = {};\n\n    var DEFAULT_EVENT_CHANNEL = 0;\n\n    var eventChannels = [\n        {} // Default channel\n    ];\n\n    var enabledEventChannels = {};\n\n    var remembered = {};\n\n    var suspendEvents = false;   // If set to true, events will be blocked.\n\n    /**\n     * Injects a factory function which creates bindings for a given event type. This enables an event source\n     * to decide when to fire events based on an event-specific mask that may be optionally given to the .onEvent method.\n     *\n     * <h3>Works like this:</h3>\n     *\n     * Human.events.addBinder(\n     *      \"my-event-type\",\n     *      function(mask, fn) {  // The factory function\n     *\n     *          // Creates bindings where fn will be called\n     *          // by event source, passing event to it,\n     *          // when criteria in mask are met.\n     *\n     *      });\n     * </pre>\n     *\n     * @memberof Human.events\n     */\n    HumanEvents.addBinder = function (eventName, eventBinder) {\n        (eventBinders[eventName] || (eventBinders[eventName] = [])).push(eventBinder);\n    };\n\n    /**\n     * Creates an event channel. Events can be fired on these channels,\n     * which can be selectively enabled/disabled for efficient dynamic event\n     * subscription/unsubsubscription.\n     *\n     * <h3>Example:</h3>\n     * <pre>\n     *     var myNewChannel = createEventChannel({\n     *        enabled: true\n     *     });\n     * </pre>\n     *\n     * @memberof Human.events\n     */\n    HumanEvents.createChannel = function (cfg) {\n        var channel = eventChannels.length;\n        eventChannels.push({});\n        if (cfg && cfg.enabled) {\n            HumanEvents.enableChannel(channel, cfg.enabled);\n        }\n        return channel;\n    };\n\n    /**\n     * Enable or disable an event channel.\n     *\n     * @memberof Human.events\n     */\n    HumanEvents.enableChannel = function (channel, enable) {\n        enabledEventChannels[channel] = enable;\n    };\n\n    /**\n     * Registers a handler for a type of engine event.\n     *\n     * <p>The handler can be registered with an optional priority number which specifies the order it is\n     * called among the other handler already registered for the event.</p>\n     *\n     * <p>So, with n being the number of handlers registered for the given event:</p>\n     * <ul>\n     * <li>(priority <= 0)      - handler will be the first called</li>\n     * <li>(priority >= n)      - handler will be the last called</li>\n     * <li>(0 < priority < n)   - handler will be called at the order given by the priority</li>\n     *\n     * @param channel - Optional channel name, falls back on default channel when omitted\n     * @param type Event type - one of the values in SceneJS._eventModule\n     * @param fn - Handler function that will accept whatever parameter object accompanies the event\n     * @param priority - Optional priority number (see above)\n     * @memberof Human.events\n     */\n    HumanEvents.onEvent = HumanEvents.on = function () {\n        var channel;\n        var type;\n        var fn;\n        var options;\n        if (typeof arguments[0] === \"number\") {\n            channel = arguments[0];\n            if (channel > eventChannels.length - 1) {\n                Human.log.error(\"Human_event.onEvent\", \"Channel not created: \" + channel +\n                    \" - should be created first with Human.events.createChannel\");\n                return;\n            }\n            type = arguments[1];\n            fn = arguments[2];\n            options = arguments[3];\n        } else if (typeof arguments[0] === \"object\") {\n            var params = arguments[0];\n            type = params.type;\n            fn = params.fn;\n            // Masked subscriptions not (yet) channeled or prioritised\n            var binders = eventBinders[type];\n            if (binders) {\n                var mask = params.mask || {};\n                for (var i = 0, len = binders.length; i < len; i++) {\n                    binders[i](mask, fn);\n                }\n            }\n            channel = (params.channel !== undefined && params.channel !== null) ? params.channel : DEFAULT_EVENT_CHANNEL;\n            options = params.options;\n        } else {\n            channel = DEFAULT_EVENT_CHANNEL;\n            type = arguments[0];\n            fn = arguments[1];\n            options = arguments[2];\n        }\n        enabledEventChannels[channel] = (options && options.enable !== undefined && options.enable !== null) ? options.enable : true;\n        options = options || {};\n        var subscriberLists = eventChannels[channel];\n        if (!subscriberLists) {\n            subscriberLists = eventChannels[channel] = {};\n        }\n        var list = subscriberLists[type];\n        if (!list) {\n            list = [];\n            subscriberLists[type] = list;\n        }\n        var handler = {\n            fn: fn,\n            priority: (options.priority === undefined) ? list.length : options.priority,\n            once: options.once\n        };\n        for (i = 0; i < list.length; i++) {\n            if (list[i].priority > handler.priority) {\n                list.splice(i, 0, handler);\n                return;\n            }\n        }\n        list.push(handler);\n        if (remembered[type]) {\n            handler.fn(remembered[type]);\n        }\n    };\n\n    /** Single-shot event subscribe\n     *\n     * @param type\n     * @param ok\n     */\n    HumanEvents.once = function (type, ok) {\n        HumanEvents.on(type, ok, { once: true });\n    };\n\n    /**\n     * Fire an event.\n     * @param {String} type Event type name\n     * @param {{}} [params] Map of parameters to accompany the event - must be JSON-serializable.\n     * @memberof Human.events\n     */\n    HumanEvents.fireEvent = HumanEvents.fire = function (type, params, remember) {\n        if (suspendEvents) {\n            return;\n        }\n\n        var subscriberLists;\n        var list;\n        for (var channel = 0, numChannels = eventChannels.length; channel < numChannels; channel++) {\n            if (enabledEventChannels[channel]) {\n                subscriberLists = eventChannels[channel];\n                list = subscriberLists[type];\n                if (list) {\n                    if (!params) {\n                        params = {};\n                    }\n                    var toRemove;\n                    var handler;\n                    for (var i = 0, len = list.length; i < len; i++) {\n                        handler = list[i];\n                        // A handler could be undefined by this time,\n                        // should we ever unEvent it before we get here.\n                        if (handler) {\n                            try {\n                                handler.fn(params);\n                                if (handler.once) {\n                                    if (!toRemove) {\n                                        toRemove = [];\n                                    }\n                                    toRemove.push(i);\n                                }\n                            } catch(exception) {\n                                Human.log.error(exception);\n                            }\n                        }\n                    }\n                    if (toRemove) {\n                        for (i = toRemove.length - 1; i >= 0; i--) {\n                            list.splice(toRemove[i], 1);\n                        }\n                    }\n                }\n            }\n        }\n        if (remember) {\n            remembered[type] = params;\n        }\n    };\n\n    HumanEvents.blockEvents = function(fn) {\n        suspendEvents = true;\n        try {\n            fn();\n        } catch (e) {\n            Human.log.error(e.message);\n        }\n        suspendEvents = false;\n    };\n\n    /** Remove a Handler with a certain Function from the List of Handlers for\n     * an Event of a certain Type.\n     * @memberof Human.events\n     * @param channel to turn off -- default if undefined\n     * @param type of the channel\n     * @param fn -- function to call\n     */\n    HumanEvents.unEvent = HumanEvents.off = function (type, fn, channel) {  // TODO: unbind for optional channel\n        // If channel unspecified -- it is default channel\n        // If channel does not exist, nothing to turn off\n        if (channel === undefined || channel === null) {\n            channel = DEFAULT_EVENT_CHANNEL;\n        } else if (channel >= eventChannels.length || channel < 0) {\n            throw \"Channel does not exist: \" + channel;\n        }\n\n        var subscriberLists = eventChannels[ channel ];\n        if (!subscriberLists) {\n            subscriberLists = eventChannels[ channel ] = {};\n        }\n        var list = subscriberLists[ type ];\n        if (!list) {\n            list = [];\n            subscriberLists[ type ] = list;\n        }\n        for (var i = list.length; i--;) {\n            if (list[ i ].fn === fn) {\n                list.splice(i, 1);\n            }\n        }\n    };\n})();\n;/**\n @namespace Engine configs definition, update, subscription and query.\n\n <p>Properties are various engine configurations, such as background color in the 3D view, or mouse sensitivity.</p>\n\n <h3>Setting multiple properties:</h3>\n <pre>\n Human.properties.set({\n        \"annotation.teacher\" : {\n            pinHeadColor: { r: 1.0, g: 0.0, b: 0.0 },\n            pinShaftColor: { r: 1.0,b: 0.0, g: 1.0 }\n        }\n        \"annotation.student\" : {\n            pinHeadColor: { r: 1.0, g: 0.0, b: 0.0 }\n            pinShaftColor: { r: 1.0, b: 0.0, g: 1.0 }\n        }\n    });\n </pre>\n <h3>Querying properties</h3>\n <p>Querying all engine properties:</p>\n <pre>\n Human.properties.query();\n </pre>\n <p>Result:</p>\n <pre>\n {\n     \"annotation.default\" : {\n          pinHeadColor: { r: 1.0, g: 0.5, b: 0.5 },\n          pinShaftColor: { r: 1.0, b: 1.0, g: 0.0 }\n      },\n      \"annotation.teacher\" : {\n          pinHeadColor: { r: 1.0, g: 0.0, b: 0.0 },\n          pinShaftColor: { r: 1.0, b: 0.0, g: 1.0 }\n      },\n      \"annotation.student\" : {\n          pinHeadColor: { r: 1.0, g: 0.0, b: 0.0 },\n          pinShaftColor: { r: 1.0, b: 0.0, g: 1.0 }\n      }\n  }\n </pre>\n\n <p>Querying engine properties with keys matching a regular expression:</p>\n <pre>\n Human.properties.query(\"teacher\");\n </pre>\n <p>Result:</p>\n <pre>\n {\n      \"annotation.teacher\" : {\n          pinHeadColor: { r: 1.0, g: 0.0, b: 0.0 },\n          pinShaftColor: { r: 1.0, b: 0.0, g: 1.0 }\n      }\n  }\n </pre>\n\n <h3>Subscribing to a property</h3>\n <p>A property may be subscribed to by a consumer who wants to be notified of any change to its value.</p>\n <ul>\n <li>The property will be created first if it does not yet exist, and a subscriber can provide an initial value to assign to the property if\n it is being created.</li>\n <li>The subscription will return an ID which is a handle to the subscription which can be used to unsubscribe. By default,\n the subscription ID is automatically generated, but the subscriber may optionally provide their own subscription ID instead.</li>\n </ul>\n <pre>\n var subId = Human.properties.subscribe({\n\n          // Optional subscriber-managed ID.\n          // Auto-generated if not supplied.\n          subId: \"mySub\",\n\n          // Mandatory property ID\n          propId: \"annotation.student\",\n\n          // Default config properties - these are overridden by\n          // any properties that are previously or subsequently set\n          // by a Config.Set command:\n          value: {\n              pinHeadColor:  { r: 1, g: 0, b: 0 },\n              pinShaftColor: { r: 1, g: 1, b: 0 }\n          },\n\n          // Callback fired each time the config properties are set,\n          // and immediately when the config is bound in this call:\n          callback: function(props) {\n\n              if (props.pinHeadColor) {\n                 theAnnotation.setPinHeadColor(props.pinHeadColor);\n              }\n\n              if (props.pinShaftColor) {\n                theAnnotation.setPinShaftColor(props.pinShaftColor);\n             }\n\n          }\n  });\n </pre>\n\n <h3>Unsubscribing from a property:</h3>\n <pre>\n Human.properties.unsubscribe(subId);\n </pre>\n */\n(function () {\n    \"use strict\";\n\n    var HumanProperties = Human.properties = {};\n\n    // Subscription handle map, can internally generate new handles,\n    // as well as insert user-generated handles\n    var idPool = new Human.utils.IDPool();\n\n    /**\n     * Currently defined properties\n     * @type {{*}}\n     * @memberof Human.properties\n     */\n    HumanProperties.properties = {};\n\n    // Maps subscription handles to callbacks\n    var subCallbacks = {};\n\n    // For each style, a map of callbacks mapped to subscription IDs\n    var propSubCallbacks = {};\n\n    // Maps subscription handles to property IDs\n    var subProps = {};\n\n    /**\n     * Subscribes to a property, defining it first if not defined, and optionally setting its value\n     *\n     * <pre>\n     *\n     * // This format is extensible, eg. in case we want to add metadata etc\n     *\n     * var subId = Human.properties.subscribe({\n     *          subId: \"foo\", // Call can opt to manage subscription IDs themselves\n     *          propId: \"myProperty\",\n     *          value: {\n     *              color: { r: 0.2, g: 0.7, b: 1.0 },\n     *              width: 1.2\n     *          },\n     *          callback: function(config) {\n     *              someElement.setColor(config.color);\n     *              someElement.setWidth(config.width);\n     *          }\n     *     });\n     * </pre>\n     *\n     * @memberof Human.properties\n     * @return {String} Handle to the subscription, which can be given to {@link Human.properties.unsubscribe} to unsubscribe\n     */\n    HumanProperties.subscribe = function (params) {\n\n        params = params || {};\n\n        // Every property has an ID\n        var propId = params.propId;\n        if (!propId) {\n            Human.log.error(\"Human.properties.subscribe\", \"Param expected: propId\");\n            return null;\n        }\n\n        // Subscriber gets updates via callback\n        var callback = params.callback;\n        if (!callback) {\n            Human.log.error(\"Human.properties.subscribe\", \"Param expected: callback\");\n            return null;\n        }\n\n        // If caller supplies own subscription handle, ensure no clash with existing handles\n        if (params.subId) {\n            if (idPool.containsId(params.subId)) {\n                Human.log.error(\"Human.properties.subscribe\", \"Subscription already exists with this ID: \" + params.subId);\n                return null;\n            }\n        }\n\n        var value = params.value;\n        var subId = idPool.getId(params.subId); // Generate or insert subscription handle in map\n        var prop = HumanProperties.properties[propId];\n        var callbacks;\n\n        if (prop) {\n\n            // TODO (AC): check if callbacks assignment can be consolidated.\n            // Register callback for the new property\n            callbacks = (propSubCallbacks[propId] || (propSubCallbacks[propId] = {}));\n            callbacks[subId] = callback;\n\n            // Property already exists\n            if (value) {\n\n                // New value supplied; set the property\n                HumanProperties.properties[propId] = value;\n            }\n\n            // Map callback to subscription handle\n            subCallbacks[subId] = callback;\n\n            // Map property to subscription handle\n            subProps[subId] = propId;\n\n            // Notify callback of new property value\n            callback(value);\n\n            // Return subscription handle\n            return subId;\n        }\n\n        // Register callback for the new property\n        callbacks = (propSubCallbacks[propId] || (propSubCallbacks[propId] = {}));\n        callbacks[subId] = callback;\n\n        // Initial value not given, initialize to default\n        if (value === undefined || value === null) {\n            value = {}; // Might as well be a literal object\n        }\n\n        // Set property to new value\n        HumanProperties.properties[propId] = value;\n\n        // Map callback to subscription handle\n        subCallbacks[subId] = callback;\n\n        // Map property to subscription handle\n        subProps[subId] = propId;\n\n        // Notify callback of new property\n        callback(value);\n\n        // Return subscription handle\n        return subId;\n    };\n\n    /**\n     * Switches a subscription to a different property\n     *\n     * @param {String} subId Subscription handle that was obtained with {@link Human.properties.subscribe}\n     * @param {String} propId ID of property to switch the subscription to\n     * @memberof Human.properties\n     */\n    HumanProperties.resubscribe = function (subId, propId) {\n        var callback = subCallbacks[subId];\n        if (!callback) {\n            Human.log.warn(\"Human.properties.resubscribe\", \"Subscription not found: '\" + subId + \"'\");\n            return;\n        }\n        var oldPropId = subProps[subId];\n        var newProp = HumanProperties.properties[propId];\n        if (oldPropId && newProp) {\n            if (propSubCallbacks[oldPropId]) {\n                delete propSubCallbacks[oldPropId][subId];\n            }\n            (propSubCallbacks[propId] || (propSubCallbacks[propId] = {}))[subId] = callback;\n            subProps[subId] = propId;\n            callback(newProp);\n        }\n    };\n\n    /**\n     * Creates or edits one or more properties\n     * @memberof Human.properties\n     * @param {String} propId ID of config\n     * @param {*} props Properties to write to the config\n     */\n    HumanProperties.set = function (props) {\n        var value;\n        var callbacks;\n        for (var propId in props) {\n            if (props.hasOwnProperty(propId)) {\n                value = props[propId];\n                HumanProperties.properties[propId] = value;\n                callbacks = propSubCallbacks[propId];\n                if (callbacks) {\n                    for (var subId in callbacks) {\n                        if (callbacks.hasOwnProperty(subId)) {\n                            callbacks[subId](value);\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Unsubscribes from a property\n     * @memberof Human.properties\n     * @param {String} subId Subscription ID\n     */\n    HumanProperties.unsubscribe = function (subId) {\n        var propId = subProps[subId];\n        if (!propId) {\n            return;\n        }\n        delete subProps[subId];\n        delete propSubCallbacks[propId][subId];\n    };\n\n    /**\n     * Query existing props\n     * @param {String} [regex] Regular expression to select properties by name\n     * @returns {*} JSON map of queried props\n     */\n    HumanProperties.query = function (regex) {\n        if (!regex) {\n            return HumanProperties.properties;\n        }\n        var props;\n        if (regex) {\n            var pattern = new RegExp(regex);\n            props = {};\n            for (var propId in HumanProperties.properties) {\n                if (HumanProperties.properties.hasOwnProperty(propId)) {\n                    if (pattern.test(propId)) {\n                        props[propId] = HumanProperties.properties[propId];\n                    }\n                }\n            }\n        }\n        return props;\n    };\n\n\n    var defaults = {\n      \"annotations.margins\":{\n         \"top\":80,\n         \"left\":50,\n         \"right\":50,\n         \"bottom\":50\n      },\n      \"annotations.labelWidth\":120,\n      \"annotations.horizontalLines\":false,\n      \"annotations.fadeoutAngle\":100,\n      \"annotation.layout.labelWidth\":100,\n      \"annotations.layout.type\":\"draggable\",\n      'camera.optics.far': 5000,\n      'camera.optics.fov': 55,\n      'camera.optics.near': 0.1,\n      'camera.zoomLimits':{\n        max: 300,\n        min: 0.01\n      },\n      'fog.color': [1,1,1],\n      'fog.density': 0.01,\n      'fog.enabled': false,\n      'fog.end': 1000,\n      'fog.max': 1,\n      'fog.min': 0,\n      'fog.mode':1,\n      'fog.start':0,\n      'timeline.autoPlay.enabled': false,\n      'timeline.autoPlay.type': 'play',\n      'timeline.chapterCamerasEnabled': true,\n      'timeline.prevNextMode': 'scrub',\n      'ui.mouseWheel.capture': true,\n      'ui.zoom.mouseWheel.enabled': true\n    };\n\n    HumanProperties.getDefaults = function(prop){\n      if (prop) {\n            return defaults[prop];\n      } else {\n            return Human.utils.shallowClone(defaults);\n      }\n    };\n\n    HumanProperties.setDefaults = function (props) {\n        Human.utils.apply(props, defaults);\n    };\n\n    HumanProperties.applyDefaults = function () {\n        this.set(defaults);\n    };\n\n})();\n;/**\n * @namespace Provides methods for logging debug info, warnings and errors.\n */\n(function () {\n    \"use strict\";\n\n    var log = Human.log = {};\n\n    /**\n     * Logging level at which nothing is logged\n     * @memberof Human.log\n     * @private\n     */\n    log.LOG_NONE = 0;\n\n    /**\n     * Logging level at which everything is logged\n     * @memberof Human.log\n     * @private\n     */\n    log.LOG_DEBUG = 1;\n\n    /**\n     * Logging level at which only info, warnings and errors are logged\n     * @memberof Human.log\n     * @private\n     */\n    log.LOG_INFO = 2;\n\n    /**\n     * Logging level at which only warnings and errors are logged\n     * @memberof Human.log\n     * @private\n     */\n    log.LOG_WARN = 3;\n\n    /**\n     * Logging level at only errors are logged\n     * @memberof Human.log\n     * @private\n     */\n    log.LOG_ERROR = 4;\n\n    // Store messages for reporting\n    log.messages = [];\n    log.maxMessages = 100;\n\n    // Used in event that notifies on each logged message\n    var levelNames = [\"none\", \"debug\", \"info\", \"warn\", \"error\"];\n\n    // Buffers messages until engine ready, at which point\n    // they are each fired off in a Log.Message event\n    var messageBuf = log.messageBuf = [];\n    var maxMessageBuf = 200;\n\n    var minLogLevel = log.LOG_WARN;\n\n    // Reporters which may be registered to report logging messages as they happen\n    var reporters = log.reporters = {};\n\n    /**\n     * Sets minimum log level. Messages logged to levels below that will then not be reported.\n     * @memberof Human.log\n     * @private\n     */\n    log.setLevel = function (newLevel) {\n        minLogLevel = newLevel;\n    };\n\n    /**\n     * Returns the current minimum log level\n     * @memberof Human.log\n     * @private\n     */\n    log.getLevel = function () {\n        return minLogLevel;\n    };\n\n    /**\n     * Logs a message at the given logging level.\n     * @memberof Human.log\n     * @private\n     */\n    log.log = function (message, level) {\n        level = (level === undefined || level === null) ? log.INFO : level;\n        switch (level) {\n            case log.LOG_DEBUG:\n                if (minLogLevel <= log.LOG_DEBUG && window.console && window.console.debug) {\n                    window.console.debug(message);\n                    recordMessage(message, level);\n\n                    Human.events.fire('_log.debug', message); // Private debug event\n                }\n                break;\n            case log.LOG_ERROR:\n                if (minLogLevel <= log.LOG_ERROR && window.console && window.console.error) {\n                    window.console.error(message);\n                    recordMessage(message, level);\n\n                    Human.events.fire('_log.error', message);  // Private error event\n                }\n                break;\n            case log.LOG_INFO:\n                if (minLogLevel <= log.LOG_INFO && window.console && window.console.info) {\n                    window.console.info(message);\n                    recordMessage(message, level);\n\n                    Human.events.fire('_log.info', message);  // Private info event\n                }\n                break;\n            case log.LOG_WARN:\n                if (minLogLevel <= log.LOG_WARN && window.console && window.console.warn) {\n                    window.console.warn(message);\n                    recordMessage(message, level);\n\n                    Human.events.fire('_log.warn', message);  // Private warn event\n                }\n                break;\n        }\n        var event = {\n            message: message,\n            level: levelNames[level]\n        };\n        // Fire off to existing reporters\n        for (var reporterId in reporters) {\n            if (reporters.hasOwnProperty(reporterId)) {\n                Human.events.fire(reporterId, event);\n            }\n        }\n        // If message buffer now too long, flush and start it again with warning\n        if (messageBuf.length > maxMessageBuf) {\n            messageBuf.length = 0;\n            messageBuf.push({\n                message: \"Logging buffer exceeded max length of \" + maxMessageBuf +\n                    \" - messages to this point were flushed\",\n                level: levelNames[log.LOG_WARN]\n            });\n        }\n        // Buffer message for reporters which may be created later\n        messageBuf.push(event);\n    };\n\n    /** Logs a debugging message\n     * @memberof Human.log\n     * @param {String} [origin] ID of whatever module is doing the logging\n     * @param {String} message Message to log\n     */\n    log.debug = function () {\n        log.log((arguments.length === 1) ? arguments[0] : \"[\" + pad(arguments[0]) + \"] \" + arguments[1], log.LOG_DEBUG);\n    };\n\n    function pad(str) {\n        return (str.length < 45) ? str + \"                                                           \".substr(0, 45 - str.length) : str;\n    }\n\n    /** Logs an error message\n     * @name error\n     * @function\n     * @memberof Human.log\n     * @param {String} [origin] ID of whatever module is doing the logging\n     * @param {String} message Message to log\n     */\n    log.error = function () {\n        log.log((arguments.length === 1) ? arguments[0] : \"[\" + pad(arguments[0]) + \"] \" + arguments[1], log.LOG_ERROR);\n    };\n\n    /** Logs an info message\n     * @memberof Human.log\n     * @param {String} [origin] ID of whatever module is doing the logging\n     * @param {String} message Message to log\n     */\n    log.info = function () {\n        log.log((arguments.length === 1) ? arguments[0] : \"[\" + pad(arguments[0]) + \"] \" + arguments[1], log.LOG_INFO);\n    };\n\n    /** Logs a warning message\n     * @memberof Human.log\n     * @param {String} [origin] ID of whatever module is doing the logging\n     * @param {String} message Message to log\n     */\n    log.warn = function () {\n        log.log((arguments.length === 1) ? arguments[0] : \"[\" + pad(arguments[0]) + \"] \" + arguments[1], log.LOG_WARN);\n    };\n\n    // Relay engine errors through logging methods\n    Human.events.on(\"error\",\n        function (event) {\n            log.error(event.message);\n        });\n\n    function recordMessage(message, level) {\n        var levelName = levelNames[level].toUpperCase();\n\n        if (log.messages.length > log.maxMessages) {\n            log.messages.shift();\n        }\n\n        message = \"[\" + levelName + \"]\\t\" + message;\n\n        log.messages.push(message);\n    }\n\n})();\n\n\n\n;/**\n * @namespace Supports query of params on URL in browser location bar.\n */\n(function () {\n    \"use strict\";\n\n    var request = Human.request = {};\n\n    var prevHash;\n    var hashParams;\n    var searchParams;\n\n    request.getHashStr = function () {\n        return window.location.hash;\n    };\n\n    /**\n     * Gets all hash params.\n     * @memberof Human.request\n     * @return {*}\n     */\n    request.getHashParams = function () {\n        if (!hashParams || prevHash !== window.location.hash) {\n            hashParams = {};\n            var stringAfterHash = window.location.hash.slice(1);\n            var paramsAfterHash = stringAfterHash.split(',');\n            var tokens;\n            for (var i = 0, len = paramsAfterHash.length; i < len; i++) {\n                tokens = paramsAfterHash[i].split(\"=\");\n                hashParams[tokens[0]] = tokens[1];\n            }\n            prevHash = window.location.hash;\n        }\n        return hashParams;\n    };\n\n    /** Gets a selected hash param - those params after the hash in the URL.\n     * @memberof Human.request\n     *\n     * @param {String} key Hash parameter key\n     * @return {String} Value of the hash parameter\n     */\n    request.getHashParam = function (key) {\n        if (!hashParams || prevHash !== window.location.hash) {\n            request.getHashParams();\n        }\n        return hashParams[key];\n    };\n\n    /**\n     * Gets the search string - those params after the \"?\" in the URL.\n     * @memberof Human.request\n     * @return {String} The search string\n     */\n    request.getSearchStr = function () {\n        return window.location.search;\n    };\n\n    /**\n     * Get all search parameters.\n     * @memberof Human.request\n     * @return {*}\n     */\n    request.getSearchParams = function () {\n        if (!searchParams) {\n            searchParams = {};\n            var search = window.location.search.slice(1);\n            var params = search.split('&');\n            var tokens;\n            for (var i = 0, len = params.length; i < len; i++) {\n                tokens = params[i].split(\"=\");\n                searchParams[tokens[0]] = tokens[1];\n            }\n        }\n        return searchParams;\n    };\n\n    /** Gets a selected search parameter\n     * @memberof Human.request\n     *\n     * @param {String} key Search parameter key\n     * @return {String} Value of the search parameter\n     */\n    request.getSearchParam = function (key) {\n        if (!searchParams) {\n            request.getSearchParams();\n        }\n        return searchParams[key];\n    };\n\n})();;\n// This section is actually documenting rpc.js from human-rpc\n/**\n * Human API constructor\n * @param {string} iframeId - ID of the iFrame that the Human is loaded into\n * @returns A HumanAPI instance\n *\n * @class HumanAPI\n * @classdesc The HumanAPI class is the core of the BioDIgital Human API.  A\n * HumanAPI instance will be attached to an iframe containing BioDIgital Human\n * content and can be used to send messages to or receive messages from it.\n */\n\n/**\n * Send an API message to the Human.\n *\n * @param {string} message - Name of the API message\n * @param {object} [params] - Message parameters\n * @method\n * @name HumanAPI#send\n */\n\n/**\n * Subscribe to a Human event\n *\n * @function\n * @name HumanAPI#on\n * @param {string} eventName - Name of the API event\n * @param {function} callback - Event handler function\n */\n\n /**\n * Subscribe to the next Human event of the given type\n *\n * @function\n * @name HumanAPI#once\n * @param {string} eventName - Name of the API event\n * @param {function} callback - Event handler function\n */\n\n\n(function () {\n    \"use strict\";\n\n    var rpc = Human.rpc = {\n        windowClientEnabled: true\n    };\n\n    var MAX_LOG_SIZE = 10000;\n\n    /** Map of procedures that have been created with {@link Human.rpc.define}.\n     * @memberof Human.rpc\n     * @type {{}}\n     */\n    rpc._procedures = {};\n\n    // Map of RPC event names to engine event names.\n    rpc._eventMap = {};\n\n    // Callbacks registered with #onResult\n    var resultCallbacks = [];\n\n    // Allow definition of several deprecated functions at a time.\n    var globalHideDefinitions = false;\n\n    var hiddenProcedures = {};\n\n    var log = [];\n\n\n    /**\n     * Execution scope for a procedure execution.\n     * <p>A fresh one of these is instantiated for every procedure call, providing the procedure with\n     * methods for returning the procedure result and logging.</p>\n     * @param {string} procName Procedure name, for logging\n     * @param {string} callId ID of procedure call, against which procedure result, if any, will be published\n     * @constructor\n     */\n    function Scope(procName, callId) {\n        this.procName = procName;\n        this.callId = callId;\n    }\n\n    /**\n     * Publishes the result of the procedure call.\n     * <p>The result value is published against the ID of the caller,\n     * who may subscribe to that ID using methods like {#link Human.rpc.on} in order to get the result.</p>\n     * @param {{}} value The result value\n     */\n    Scope.prototype.setResult = function (value) {\n        for (var i = 0, len = resultCallbacks.length; i < len; i++) {\n            resultCallbacks[i](this.callId, value);\n        }\n    };\n\n    /**\n     * Logs debug info in the context of this procedure call.\n     * @param {string} msg The message\n     */\n    Scope.prototype.info = function (msg) {\n        Human.log.info(this.procName, msg);\n    };\n\n    /**\n     * Logs a warning in the context of this procedure call.\n     * @param {string} msg The message\n     */\n    Scope.prototype.warn = function (msg) {\n        Human.log.warn(this.procName, msg);\n    };\n\n    /**\n     * Logs an error in the context of this procedure call.\n     * @param {string} msg The message\n     */\n    Scope.prototype.error = function (msg) {\n        Human.log.error(this.procName, msg);\n    };\n\n    /**\n     * Registers a procedure, which may then be called with {@link #call}.\n     *\n     * @param {string} procName Procedure name\n     * @param {function} proc The procedure\n     */\n    rpc.define = function (procName, proc, params) {\n        if (rpc._procedures[procName]) {\n            Human.log.warn(\"Human.rpc.define\", \"Redefining procedure: \" + procName);\n        }\n\n        params = params || {};\n\n        if (params.hidden || globalHideDefinitions) {\n            hiddenProcedures[procName] = true;\n        }\n\n        rpc._procedures[procName] = function (callId, params) {\n            proc.call(new Scope(procName, callId), params || {});\n        };\n    };\n\n    rpc.defineEvent = function(rpcEventName, params) {\n\n        if (rpc._eventMap[rpcEventName]) {\n            Human.log.warn(\"Human.rpc.defineEvent\", \"Redefining event: \" + rpcEventName);\n        }\n\n        rpc._eventMap[rpcEventName] = params || rpcEventName;\n    };\n\n    rpc.enableEvent = function(scope, rpcEventName, once) {\n\n        if (!rpc._eventMap[rpcEventName]) {\n            Human.log.warn(\"Human.rpc.enableEvent\", \"Event: \" + rpcEventName + \" not defined.\");\n            return;\n        }\n\n        var params = rpc._eventMap[rpcEventName];\n\n        if (typeof params === \"string\") {\n            var eventFn = once ? \"once\" : \"on\";\n\n            Human.events[eventFn](params, function(event) {\n                scope.setResult(event);\n            });\n        } else {\n            mapEvents(scope, params, once);\n        }\n\n    };\n\n    function mapEvents(scope, params, once) {\n\n        var triggered = false;\n\n        var eventFn = once ? \"once\" : \"on\";\n\n        var eventNames = params.events;\n        var mapFn = params.map;\n\n        if (params.init) {\n            params.init();\n        }\n\n        function callback(event) {\n            if (once && triggered) {\n                return;\n            }\n\n            triggered = true;\n\n            var result = mapFn ? mapFn(event) : event;\n\n            if (result !== null) {\n                scope.setResult(result || {});\n            }\n\n        }\n\n        for (var i = 0, len = eventNames.length; i < len; i++) {\n\n            Human.events[eventFn](eventNames[i], callback);\n\n        }\n    }\n\n    // Get names of all available, public procedures\n    rpc.getProcedures = function() {\n        var procNames = Object.keys(rpc._procedures);\n\n        Human.utils.filterInPlace(procNames, function(name) {\n            return !hiddenProcedures[name];\n        });\n\n        return procNames;\n    };\n\n    // Get names of all available events\n    rpc.getEvents = function() {\n        return [\"human.ready\"].concat(Object.keys(rpc._eventMap));\n    };\n\n    // RPC procedures created in the callback function\n    // will be considered hidden.\n    rpc.hideDefinitions = function(fn) {\n        globalHideDefinitions = true;\n\n        try {\n            fn();\n        } finally {\n            globalHideDefinitions = false;\n        }\n    };\n\n    /**\n     * Subscribes to results of subsequent RPC calls.\n     *\n     * <p>Each time a procedure returns a result, the given callback will be fired\n     * with the the ID of the procedure call and the value that was returned.</p>\n     *\n     * <pre>\n     *     #onResult(function(callId, value) {\n     *         //..\n     *     });\n     *\n     * @param {function(callId, value)} callback The callback\n     * @function\n     * @name onResult\n     * @memberof Human.rpc\n     */\n    rpc.onResult = function (callback) {\n        resultCallbacks.push(callback);\n    };\n\n\n    rpc.call = function (callId, procName, params) {\n        var proc = rpc._procedures[procName];\n        if (!proc) {\n            Human.log.warn(\"Human.rpc.call\", \"Target procedure not found: \" + procName);\n            return;\n        }\n\n        proc(callId, params);\n    };\n\n    rpc.log = function(procName) {\n        if (log.length > MAX_LOG_SIZE) {\n            log.shift();\n        }\n\n        log.push({\n            \"engine_version\": Human.VERSION,\n            \"api_version\": Human.API_VERSION,\n            \"identifier\": procName,\n            \"category\": procName.split(\".\")[0]\n        });\n    };\n\n    rpc.getLog = function() {\n        return log;\n    };\n\n    rpc.logPending = function() {\n        return log.length > 0;\n    };\n\n    rpc.resetLog = function() {\n        log.length = 0;\n    };\n\n    rpc.filterUnsafeProperties = function(obj) {\n        if (!Human.utils.isObject(obj)) {\n            return obj;\n        }\n\n        var clean = {};\n\n        for (var key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                if (isSafe(obj[key])) {\n                    clean[key] = obj[key];\n                }\n            }\n        }\n\n        return clean;\n    };\n\n    function isSafe(obj) {\n        if (!obj || typeof obj !== \"object\") {\n            return true;\n        }\n\n        // Window\n        if (obj === window) {\n            return false;\n        }\n\n        // Dom Element\n        if (typeof obj.nodeName === \"string\" && typeof obj.querySelectorAll === \"function\" && typeof obj.getElementsByTagName === \"function\") {\n            return false;\n        }\n\n        // Event\n        if (typeof obj.preventDefault === \"function\" && typeof obj.stopPropagation === \"function\") {\n            return false;\n        }\n\n        return true;\n    }\n\n})();\n;/*\n * RPC procedures for subscription to engine events.\n *\n */\n\nHuman.rpc.hideDefinitions(function () {\n    \"use strict\";\n\n    Human.rpc.define(\"apiEvents.on\", function (eventName) {\n        Human.rpc.enableEvent(this, eventName, false);\n    });\n\n    Human.rpc.define(\"apiEvents.once\", function (eventName) {\n        Human.rpc.enableEvent(this, eventName, true);\n    });\n\n});\n;// legacy RPC methods and events\n\n/* NOTE: CURRENTLY UNDOCUMENTED\n    * Camera path animation\n    *\n    * @apimethod human.send\n    * @function path\n    * @memberof camera\n    *\n    * @param {object} params\n    * @param {object[]} params.points\n    *\n    * @param {object} params.points[].position - Camera position (eye)\n    * @param {number} params.points[].position.x\n    * @param {number} params.points[].position.y\n    * @param {number} params.points[].position.z\n    * @param {object} params.points[].target - Camera Target position (look at)\n    * @param {number} params.points[].target.x\n    * @param {number} params.points[].target.y\n    * @param {number} params.points[].target.z\n    * @param {object} [params.points[].up] - Camera Up Vector\n    * @param {number} params.points[].up.x\n    * @param {number} params.points[].up.y\n    * @param {number} params.points[].up.z\n    * @param {number} [params.velocity=1] - Camera velocity\n    * @param {boolean} [params.constrainUp=false] - Fix camera up vector\n    * @param {boolean} [params.easeIn=false] - Whether to ease in the animation\n    * @param {boolean} [params.easeOut=true] - Whether to ease out the animation\n    *\n    * @param {function} [callback]\n    *\n    * @example <caption>Define a camera path</caption> <codepen>http://codepen.io/biodigital/pen/88c88c62d9b9f4fd0a08209220cc8b7c</codepen>\n    * // Get initial camera position\n    * human.send(\"camera.info\", function(info) {\n    *\n    * // Define camera path.\n    * // Initial camera position is inserted into path\n    * // to avoid an initial jump.\n    * human.send(\"camera.path\", {\n    *     points: [\n    *     {\n    *         position: info.position,\n    *         target: info.target,\n    *         up: info.up\n    *     },\n    *     {\n    *         position: {\n    *             x: 7.2915048649119685,\n    *             y: 26.166339470455814,\n    *             z: -11.74759554602381\n    *         },\n    *         target: {\n    *             x: -0.06749999523162842,\n    *             y: 19.702000617980957,\n    *             z: 0.15849995613098145\n    *         },\n    *         up: {\n    *             y:1\n    *         }\n    *     },\n    *     ...\n    *     ],\n    *     velocity: 0.1,\n    *     easeIn: false,\n    *     easeOut: false,\n    *     constrainUp: true\n    * },\n    * function() {\n    *     console.log(\"Camera path animation complete!\");\n    * });\n    */\nHuman.rpc.define(\"camera.path\", function (params) {\n    \"use strict\";\n    var self = this;\n\n    Human.renderer.camera.fly.flyAlongCurvePath(params,\n        function () {\n            self.setResult(true);\n        });\n});\n\n/**\n * Set action to be triggered when an object is picked\n *\n * @apimethod human.send\n * @function pickingMode\n * @memberof scene\n *\n * @param {string} mode - Picking mode: \"dissect\" removes picked objects,\n * \"highlight\" highlights picked objects, \"annotate\" annotates picked objects\n *\n * @example <caption>Picking mode</caption> <codepen>http://codepen.io/biodigital/pen/17ae01cc6c14533f48c18a7e26fa4e15</codepen>\n * // Initialize API\n * var human = new HumanAPI(\"embeddedHuman\");\n *\n * console.log(\"Alternating between highlight and dissect picking modes\");\n *\n * var mode = \"highlight\";\n *\n * (function switchMode() {\n *     human.send(\"scene.pickingMode\", mode);\n *\n *     mode = mode === \"highlight\" ? \"dissect\" : \"highlight\";\n *\n *     setTimeout(switchMode, 4000);\n * })();\n *\n * human.on(\"scene.pickingModeUpdated\", function(event) {\n *     console.log(\"Enabling \" + event.pickingMode + \" mode. Click to \" + event.pickingMode + \" an object\");\n * });\n */\nHuman.rpc.define(\"scene.pickingMode\",\n    function (mode) {\n        \"use strict\";\n        if (mode === \"dissect\") {\n            Human.events.blockEvents(function() {\n                Human.view.annotations.setEnabled(false);\n            });\n            Human.view.dissect.setEnabled(true);\n        } else if (mode === \"annotate\") {\n            Human.events.blockEvents(function() {\n                Human.view.dissect.setEnabled(false);\n            });\n            Human.view.annotations.setEnabled(true);\n        } else if (mode === \"highlight\") {\n            Human.events.blockEvents(function() {\n                Human.view.dissect.setEnabled(false);\n                Human.view.annotations.setEnabled(false);\n            });\n            Human.view.highlight.setEnabled(true);\n        } else if (mode === \"none\") {\n            Human.events.blockEvents(function() {\n                Human.view.dissect.setEnabled(false);\n                Human.view.annotations.setEnabled(false);\n                Human.view.highlight.setEnabled(false);\n                Human.view.xray.setEnabled(false);\n            });\n        }\n\n        this.setResult(true);\n    });\n\n/**\n * Set behavior of selected objects\n *\n * @apimethod human.send\n * @function selectionMode\n * @memberof scene\n *\n * @fires scene.selectionModeUpdated\n *\n * @param {string} mode - Selection mode: \"isolate\" hides all unselected object,\n * \"highlight\" highlights selected objects, \"none\" does nothing\n *\n * @example <caption>Selection mode</caption> <codepen>http://codepen.io/biodigital/pen/6db6bbd189097f63aeec640a165e45ff</codepen>\n * // Initialize API\n * var human = new HumanAPI(\"embeddedHuman\");\n *\n * console.log(\"Switch between highlight and isolate selection modes\");\n *\n * // These commands will be buffered before Human is loaded\n * human.send(\"scene.selectObjects\", {\n *     \"maleAdult_standard-Left_Craniofacial_Bones_ID\": true\n * });\n *\n * var mode = \"highlight\";\n * var select = true;\n *\n * (function switchMode() {\n *     human.send(\"scene.selectionMode\", mode);\n *\n *     mode = mode === \"highlight\" ? \"isolate\" : \"highlight\";\n *\n *     setTimeout(switchMode, 6000);\n * })();\n *\n * (function toggleSelect() {\n *     console.log(\"Change selected object\")\n *     human.send(\"scene.selectObjects\", {\n *         \"maleAdult_standard-Left_Craniofacial_Bones_ID\": select,\n *         \"maleAdult_standard-Right_Craniofacial_Bones_ID\": !select\n *     });\n *\n *     select = !select;\n *\n *     setTimeout(toggleSelect, 2000);\n * })();\n *\n * human.on(\"scene.selectionModeUpdated\", function(event) {\n *     console.log(\"Enabling \" + event.selectionMode + \" mode. Will \" + event.selectionMode + \" selected objects\");\n * });\n */\nHuman.rpc.define(\"scene.selectionMode\",\n    function (mode) {\n        \"use strict\";\n        if (mode === \"isolate\") {\n            Human.events.blockEvents(function() {\n                Human.view.highlight.setEnabled(false);\n            });\n            Human.view.isolate.setEnabled(true);\n        } else if (mode === \"highlight\") {\n            Human.events.blockEvents(function() {\n                Human.view.isolate.setEnabled(false);\n            });\n            Human.view.highlight.setEnabled(true);\n        } else if (mode === \"none\") {\n            Human.events.blockEvents(function() {\n                Human.view.isolate.setEnabled(false);\n            });\n            Human.view.highlight.setEnabled(false);\n        }\n\n        this.setResult(true);\n    });\n\n// legacy RPC methods and events, hidden\n    \nHuman.rpc.hideDefinitions(function() {\n    \"use strict\";\n\n    Human.rpc.defineEvent(\"human.error\", {\n        events: [\"error\"]\n    });\n\n    /** Captures a bookmark of current Human state, returns it as JSON\n     *\n     */\n    Human.rpc.define(\"bookmarks.capture\",\n        function () {\n            this.setResult(Human.bookmarks.capture());\n        });\n\n    /** Restores Human state from given bookmark JSON\n     */\n    Human.rpc.define(\"bookmarks.restore\",\n        function (params) {\n            var self = this;\n            Human.bookmarks.restore(params, function () {\n                self.setResult(true);\n            });\n        });\n\n    /**\n     * Unsubscribes from an engine event\n     */\n    Human.rpc.define(\"events.off\",\n        function (params) {\n            if (params.id) {\n                // Undo specific subscription\n                unbindEvent(params.id);\n            } else if (params.ids) {\n                // Undo list of subscriptions\n                var ids = params.ids;\n                for (var i = 0, len = ids.length; i < len; i++) {\n                    unbindEvent(ids[i]);\n                }\n            } else {\n                // Undo all subscriptions\n                for (var id in callbacks) {\n                    if (callbacks.hasOwnProperty(id)) {\n                        unbindEvent(id);\n                    }\n                }\n            }\n        });\n\n    Human.rpc.define(\"camera.query\", function () {\n        var camera = Human.renderer.camera.getLookAt();\n        camera.zoom = Human.renderer.camera.getZoom();\n\n        this.setResult(camera);\n    });\n\n    Human.rpc.define(\"properties.query\",\n        function (params) {\n            this.setResult(Human.properties.query(params.regex));\n        });\n\n    Human.rpc.define(\"actions.doAction\",\n        function (params) {\n            Human.actions._doAction([params.action, params.arguments]);\n        });\n\n    Human.rpc.define(\"alert\",\n        function (params) {\n            window.alert(params.message || \"\");\n        });\n\n    Human.rpc.define(\"videos.getClips\",\n        function () {\n            this.setResult(Human.media.videos.clipsList);\n        });\n\n    Human.rpc.define(\"videos.open\",\n        function (params) {\n            var self = this;\n            Human.media.videos.open(params.clipId,\n                function () {\n                    self.setResult(true); // Opened\n                });\n        });\n\n    Human.rpc.define(\"videos.play\",\n        function (params) {\n            Human.media.videos.play(params.clipId);\n        });\n\n    Human.rpc.define(\"videos.scrub\",\n        function (params) {\n            Human.media.videos.scrub(params.clipId, params.time);\n        });\n\n    Human.rpc.define(\"videos.pause\",\n        function (params) {\n            Human.media.videos.pause(params.clipId);\n        });\n\n    Human.rpc.define(\"videos.stop\",\n        function (params) {\n            Human.media.videos.stop(params.clipId);\n        });\n\n    Human.rpc.define(\"videos.close\",\n        function (params) {\n            Human.media.videos.close(params.clipId);\n        });\n\n    Human.rpc.define(\"audio.getClips\",\n        function () {\n            this.setResult(Human.media.audio.clipsList);\n        });\n\n    Human.rpc.define(\"audio.open\",\n        function (params) {\n            var self = this;\n            Human.media.audio.open(params.clipId,\n                function () {\n                    self.setResult(true); // Opened\n                });\n        });\n\n    Human.rpc.define(\"audio.play\",\n        function (params) {\n            Human.media.audio.play(params.clipId);\n        });\n\n    Human.rpc.define(\"audio.scrub\",\n        function (params) {\n            Human.media.audio.scrub(params.clipId, params.time);\n        });\n\n    Human.rpc.define(\"audio.pause\",\n        function (params) {\n            Human.media.audio.pause(params.clipId);\n        });\n\n    Human.rpc.define(\"audio.stop\",\n        function (params) {\n            Human.media.audio.stop(params.clipId);\n        });\n\n    Human.rpc.define(\"audio.close\",\n        function (params) {\n            Human.media.videos.close(params.clipId);\n        });\n\n    Human.rpc.define(\"modules.getModules\",\n        function (params) {\n            this.setResult(Human.modules.query(params));\n        });\n\n    Human.rpc.define(\"modules.activate\",\n        function (params) {\n            var self = this;\n            Human.modules.activateModules(params,\n                function () {\n                    self.setResult(true); // Activated\n                });\n        });\n\n    Human.rpc.define(\"modules.deactivate\",\n        function (params) {\n            Human.modules.deactivateModules(params);\n        });\n\n    Human.rpc.define(\"properties.subscribe\",\n        function (params) {\n            var self = this;\n            Human.properties.subscribe({\n                subId: params.subId,\n                propId: \"myProperty\",\n                callback: function (value) {\n                    self.setResult(value);\n                }\n            });\n        });\n\n    Human.rpc.define(\"properties.resubscribe\",\n        function (params) {\n            Human.properties.resubscribe(params.subId, params.propId);\n        });\n\n    Human.rpc.define(\"properties.unsubscribe\",\n        function (params) {\n            Human.properties.unsubscribe(params.subId);\n        });\n\n    Human.rpc.define(\"renderer.getBGColor\", function () {\n        this.setResult(Human.renderer.bg.getBGColor());\n    });\n\n    Human.rpc.define(\"renderer.setBGColor\", function (params) {\n        Human.renderer.bg.setBGColor(params.color);\n    });\n\n    Human.rpc.define(\"request.getParams\",\n        function () {\n            this.setResult({\n                hashParams: Human.request.getHashParams(),\n                hashStr: Human.request.getHashStr(),\n                searchParams: Human.request.getSearchParams(),\n                searchStr: Human.request.getSearchStr()\n            });\n        });\n\n    /**\n     * @event scene.pickingModeUpdated\n     * @apimethod human.on\n     * @memberof scene\n     * @property {object} event\n     * @property {string} event.pickingMode\n     */\n    var pickingMode;\n\n    Human.rpc.defineEvent(\"scene.pickingModeUpdated\", {\n        events: [\"highlight.toggled\", \"dissect.toggled\", \"annotations.toggled\"],\n        map: function () {\n            var newPickingMode;\n\n            if (Human.view.dissect.enabled) {\n                newPickingMode = \"dissect\";\n            } else if (Human.view.annotations.enabled) {\n                newPickingMode = \"annotate\";\n            } else if (Human.view.highlight.enabled) {\n                newPickingMode = \"highlight\";\n            }\n\n            if (newPickingMode === pickingMode) {\n                return null;\n            }\n\n            pickingMode = newPickingMode;\n\n            return {\n                pickingMode: pickingMode\n            };\n        }\n    });\n\n    /**\n     * @event scene.selectionModeUpdated\n     * @apimethod human.on\n     * @memberof scene\n     * @property {object} event\n     * @property {string} event.selectionMode\n     */\n    var selectionMode;\n\n    Human.rpc.defineEvent(\"scene.selectionModeUpdated\", {\n        events: [\"highlight.toggled\", \"isolate.toggled\"],\n        map: function () {\n            var newSelectionMode;\n\n            if (Human.view.isolate.enabled) {\n                newSelectionMode = \"isolate\";\n            } else if (Human.view.highlight.enabled) {\n                newSelectionMode = \"highlight\";\n            } else {\n                newSelectionMode = \"none\";\n            }\n\n            if (newSelectionMode === selectionMode) {\n                return null;\n            }\n\n            selectionMode = newSelectionMode;\n\n            return {\n                selectionMode: selectionMode\n            };\n        }\n    });\n\n    Human.rpc.define(\"scene.queryBoundary\",\n        function (params) {\n            var boundary, object, fmaId;\n            if (params.objectId && Human.scene.objects[params.objectId]) {\n\n                // Get boundary of object by ID\n                boundary = Human.scene.objects[params.objectId].getBoundary();\n\n            } else if (params.fmaId) {\n\n                // get boundary of object by FMA ID\n                fmaId = params.fmaId;\n                object = Human.scene.objectsByFMAID[fmaId];\n                if (!object) {\n                    this.error(\"No scene object found for the given FMA ID: '\" + fmaId + \"'\");\n                    return;\n                }\n                boundary = object.getBoundary();\n\n            } else if (params.objectIds) {\n\n                // Get collective boundary of multiple objects by IDs\n                boundary = Human.scene.getBoundary({ objectIds: params.objectIds });\n\n            } else if (params.fmaIds) {\n\n                // Get collective boundary of multiple objects by FMA IDs\n                var fmaIds = params.fmaIds;\n                var objectIds = [];\n                for (var i = 0, len = fmaIds.length; i < len; i++) {\n                    fmaId = fmaIds[i];\n                    object = Human.scene.objectsByFMAID[fmaId];\n                    if (!object) {\n                        this.error(\"No scene object found for the given FMA ID: '\" + fmaId + \"'\");\n                        return;\n                    }\n                    objectIds.push(object.objectId);\n                }\n                boundary = Human.scene.getBoundary({ objectIds: objectIds });\n\n            } else if (params.selectedObjects) {\n\n                // Get collective boundary of all currently selected objects\n                boundary = Human.scene.getBoundary({ objects: Human.scene.selectedObjects });\n            } else if (params.enabledObjects) {\n\n                // Get collective boundary of all currently visible objects\n                boundary = Human.scene.getBoundary({ objects: Human.scene.enabledObjects });\n            } else {\n\n                // Default: get boundary of all objects\n                boundary = Human.scene.getBoundary();\n            }\n            this.setResult(boundary);\n        });\n\n\n    function fmaIdsToObjectIds(map) {\n        var result = {};\n        var objectsByFMA = Human.rpc.fmaIds;\n        var objectIds;\n        var maleStateId = Human.modules.MALE_STATE_ID;\n        var femaleStateId = Human.modules.FEMALE_STATE_ID;\n        for (var fmaId in map) {\n            if (map.hasOwnProperty(fmaId)) {\n                objectIds = objectsByFMA[fmaId];\n                for (var i = 0; i < objectIds.length; i++) {\n                    var object = Human.scene.objects[maleStateId + \"-\" + objectIds[i]] ||\n                        Human.scene.objects[femaleStateId + \"-\" + objectIds[i]];\n                    if (object) {\n                        result[object.objectId] = map[fmaId];\n                    }\n                }\n            }\n        }\n        return result;\n    }\n\n    (function () {\n        var canvas = document.getElementById('theCanvas');\n\n        var getCanvasPos = function (worldPos, offset) {\n            if(offset) {\n                vec3.add(worldPos, offset, worldPos);\n            }\n\n            var viewMat = Human.renderer.getViewMat();\n            var projMat = Human.renderer.getProjMat();\n            var projPos = vec4.create();\n\n            vec3.transformMat4(projPos, worldPos, viewMat);\n            projPos[3]  = 1; // Need homogeneous 'w' for perspective division\n            vec4.transformMat4(projPos, projPos, projMat);\n\n            var x = projPos[0];\n            var y = projPos[1];\n            var w = projPos[3];\n\n            return [\n                Math.round((1 + x / w) * canvas.width  / 2),\n                Math.round((1 - y / w) * canvas.height / 2)\n            ];\n        };\n\n        Human.rpc.define(\"scene.getObjectCanvasPos\",\n            function (params) {\n               var object = Human.scene.objects[params.objectId];\n\n               if(object) {\n                   var worldPos = object.getCenter();\n                   this.setResult(getCanvasPos(worldPos, params.offset));\n               }\n            });\n    })();\n\n        // Captures bookmark of timeline playing state\n    Human.rpc.define(\"timeline.getBookmark\",\n        function () {\n            this.setResult(Human.timeline.getBookmark());\n        });\n\n    // Restores playing state of timeline to given bookmark\n    Human.rpc.define(\"timeline.setBookmark\",\n        function (params) {\n            Human.timeline.setBookmark(params);\n        });\n\n     Human.rpc.define(\"clip.set\",\n        function (params) {\n            if (params.clips) {\n                var clips = params.clips;\n                var clip;\n                for (var clipId in clips) {\n                    if (clips.hasOwnProperty(clipId)) {\n                        clip = clips[clipId];\n                        clip.clipId = clipId;\n                        Human.renderer.clip.setClip(clip);\n                    }\n                }\n            } else if (params.clip) {\n                Human.renderer.clip.setClip(params.clip);\n            }\n        });\n\n    Human.rpc.define(\"clip.reset\",\n        function () {\n            Human.renderer.clip.reset();\n        });\n\n        /**\n     * Queries what effects exist\n     */\n    Human.rpc.define(\"effects.getEffects\",\n        function () {\n            var result = [];\n            var effect;\n            var effects = Human.view.effects.effects;\n            for (var effectId in effects) {\n                if (effects.hasOwnProperty(effectId)) {\n                    effect = effects[effectId];\n                    result.push({\n                        effectId: effectId,\n                        displayName: effect.displayName,\n                        description: effect.description,\n                        enabled: effect.enabled,\n                        params: effect.params\n                    });\n                }\n            }\n            this.setResult(result);\n        });\n\n    /**\n     * Enables or disables effects\n     */\n    Human.rpc.define(\"effects.setEnabled\",\n        function (params) {\n            Human.view.effects.setEnabled(params);\n        });\n\n    /**\n     * Sets parameters for effects\n     */\n    Human.rpc.define(\"effects.setParams\",\n        function (params) {\n            Human.view.effects.setParams(params);\n        });\n\n\n    // Human.rpc.define(\"labels.create\",\n    //     function (params) {\n    //         if (!params.objectId) {\n    //             this.error(\"parameter expected: 'objectId'\");\n    //             return;\n    //         }\n    //         if (params.replace) {\n    //             Human.view.labels.clearLabels();\n    //         }\n    //         Human.view.labels.createLabel(params);\n    //     });\n\n    // Human.rpc.define(\"labels.clear\",\n    //     function () {\n    //         Human.view.labels.clearLabels();\n    //     });\n\n    /**\n     * Queries what lights exist\n     */\n    Human.rpc.define(\"lights.getLights\",\n        function () {\n            var result = [];\n            var light;\n            var lights = Human.renderer.lights.lights;\n            for (var lightId in lights) {\n                if (lights.hasOwnProperty(lightId)) {\n                    light = lights[lightId];\n                    result.push({\n                        lightId: lightId,\n                        displayName: light.displayName,\n                        description: light.description,\n                        enabled: light.enabled,\n                        params: light.params\n                    });\n                }\n            }\n            this.setResult(result);\n        });\n\n    /**\n     * Enables or disables lights\n     */\n    Human.rpc.define(\"lights.setEnabled\",\n        function (params) {\n            Human.renderer.lights.setEnabled(params);\n        });\n\n    /**\n     * Sets parameters for lights\n     */\n    Human.rpc.define(\"lights.setParams\",\n        function (params) {\n            Human.renderer.lights.setParams(params);\n        });\n\n    Human.rpc.define(\"highlight.setEnabled\",\n        function (params) {\n            var enable = params.enable;\n            if (enable === undefined || enable === null) {                    // Toggle by default\n                enable = !Human.view.highlight.enabled;\n            }\n            Human.view.highlight.setEnabled(enable);\n            if (enable) {\n                Human.view.isolate.setEnabled(false);\n                Human.view.xray.setEnabled(false);\n            }\n        });\n\n    Human.rpc.define(\"isolate.setEnabled\",\n        function (params) {\n            var enable = params.enable;\n            if (enable === undefined || enable === null) {                    // Toggle by default\n                enable = !Human.view.isolate.enabled;\n            }\n            Human.view.isolate.setEnabled(enable);\n            if (enable) {\n                var selection = Human.scene.anySelected();\n                if (!selection) {\n                    return;\n                }\n            }\n            if (enable) {\n                Human.view.highlight.setEnabled(false);\n                Human.view.xray.setEnabled(false);\n                Human.renderer.pick.setSinglePickEnabled(true); // Multi-pick doesn't make sense in Isolate mode\n                Human.renderer.pick.setMultiPickEnabled(false);\n            }\n        });\n\n    Human.rpc.define(\"pick.doublePick\",\n        function (params) {\n            Human.renderer.pick.doublePick({ canvasX: params.canvasX, canvasY: params.canvasY });\n        });\n\n    Human.rpc.define(\"pick.hoverPick\",\n        function (params) {\n            Human.renderer.pick.hoverPick({ canvasX: params.canvasX, canvasY: params.canvasY });\n        });\n\n    Human.rpc.define(\"xray.setEnabled\",\n        function (params) {\n            var enable = params.enable;\n            if (enable === undefined || enable === null) {                    // Toggle by default\n                enable = !Human.view.xray.enabled;\n            }\n            Human.view.xray.setEnabled(enable);\n            if (enable) {\n                Human.view.highlight.setEnabled(false);\n                Human.view.isolate.setEnabled(false);\n            }\n        });\n\n    Human.rpc.define(\"queryModes\",\n        function () {\n            var data = {\n                xray: Human.view.xray.enabled,\n                highlight: Human.view.highlight.enabled,\n                annotation: Human.view.annotations.enabled,\n                singlePick: Human.renderer.pick.singleEnabled,\n                multipick: Human.renderer.pick.multiEnabled,\n                dissect: Human.view.dissect.enabled\n            };\n            this.setResult(data);\n        });\n\n    Human.rpc.define(\"navigation.setEnabled\",\n        function (params) {\n            _setUIEnabled('navigator_container', params.enable);\n        });\n\n    Human.rpc.define(\"fullscreen.setEnabled\",\n        function (params) {\n            _setUIEnabled('embed-full-screen', params.enable);\n        });\n\n    var reporters = Human.log.reporters;\n    var messageBuf = Human.log.messageBuf;\n\n    // Creates a log reporter\n    // For network efficiency, this allows networked clients to only get\n    // logging if they are interested in it. Potentially this is also\n    // good for compression of that logging.\n    Human.rpc.define(\"log.createReporter\",\n        function (params) {\n            if (!params.id) {\n                Human.log.error(\"param expected: id\");\n                return;\n            }\n            var id = \"log.reporters.\" + params.id;\n            if (reporters[id]) {\n                // TODO: complain\n                return;\n            }\n            reporters[id] = {};\n            // Update reporter with events so far\n            for (var i = 0, len = messageBuf.length; i < len; i++) {\n                Human.events.fire(id, messageBuf[i]);\n            }\n        });\n\n    // Destroys a log reporter\n    Human.rpc.define(\"log.destroyReporter\",\n        function (params) {\n            if (!params.id) {\n                Human.log.error(\"param expected: id\");\n                return;\n            }\n            var id = \"log.reporters.\" + params.id;\n            delete reporters[id];\n        });\n\n    // Annotation object -> plain result object, only primitives, no private props\n    function makeAnnotationResult(annotation) {\n        var result = {};\n        var value;\n\n        for (var key in annotation) {\n            if (annotation.hasOwnProperty(key)) {\n                value = annotation[key];\n\n                if(Human.utils.isPrimitive(value) && key[0] !== '_') {\n                    result[key] = value;\n                }\n            }\n        }\n\n        // special prop adapting\n        result.objectId = annotation.object ? annotation.object.objectId : \"\";\n\n        result.title = annotation.label.title;\n        result.description = annotation.label.description;\n\n        result.pos = annotation.pin.pos;\n        result.pinVec = annotation.pin.dir;\n        result.visible = annotation.pin.visible;\n\n        return result;\n    }\n\n    Human.rpc.define(\"annotations.getAnnotations\",\n        function () {\n            var annotations = Human.view.annotations.annotations;\n            var result = {};\n            var annotation;\n\n            for (var annotationId in annotations) {\n                if (annotations.hasOwnProperty(annotationId)) {\n                    annotation = annotations[annotationId];\n\n                    result[annotationId] = makeAnnotationResult(annotation);\n                }\n            }\n\n            this.setResult(result);\n        });\n\n    Human.rpc.define(\"camera.flyTo\", function (params) {\n        var self = this;\n        Human.renderer.camera.fly.flyTo(params,\n            function () {\n                self.setResult(true);\n            });\n    });\n\n\n    Human.rpc.define(\"camera.jumpTo\", function (params) {\n        var self = this;\n        Human.renderer.camera.fly.jumpTo(params,\n            function () {\n                self.setResult(true);\n            });\n    });\n\n    Human.rpc.define(\"camera.getZoom\", function () {\n        this.setResult(Human.renderer.camera.getZoom());\n    });\n\n    var callbacks = {};\n\n    /**\n     * Subscribes to an engine event\n     */\n    Human.rpc.define(\"events.on\",\n        function (params) {\n            var self = this;\n            var id = this.id;\n            if (id) {\n                if (callbacks[id]) {\n                    // Support \"events.off\" for this subscription\n                    this.error(\"an event is already bound to this ID: '\" + id + \"'\");\n                    return;\n                }\n            }\n            var type = params.type;\n            if (!type) {\n                this.error(\"parameter expected: 'type'\");\n                return;\n            }\n            var fn = function (event) {\n                self.setResult(event);\n            };\n            if (params.mask) {\n                params.fn = fn;\n                Human.events.on(params);\n            } else {\n                Human.events.on(params.type, fn);\n            }\n            if (id) { // So we can unbind with \"events.off\"\n                callbacks[id] = [type, fn];\n            }\n        });\n\n    /**\n     * Subscribes to the next engine event of the given type\n     */\n    Human.rpc.define(\"events.once\",\n        function (params) {\n            var self = this;\n            var type = params.type;\n            if (!type) {\n                this.error(\"parameter expected: 'type'\");\n                return;\n            }\n            Human.events.once(type, function (event) {\n                self.setResult(event);\n            });\n        });\n\n    function unbindEvent(id) {\n        var callback = callbacks[id];\n        if (callback) {\n            var type = callback[0];\n            var fn = callback[1];\n            Human.unEvent(type, fn);\n            delete callbacks[id];\n        }\n    }\n\n    /**\n     * Triggers an engine event\n     */\n    Human.rpc.define(\"events.fire\",\n        function (params) {\n            Human.events.fire(params.eventName, params.params);\n        });\n\n    Human.rpc.define(\"reset\",\n        function () {\n            var self = this;\n            Human.init.reset(function () {\n                    self.setResult(true);\n                });\n        });\n\n    Human.rpc.define(\"reload\",\n        function () {\n            Human.init.reload();\n        });\n\n    Human.rpc.define(\"pick.pick\",\n        function (params) {\n            Human.renderer.pick.pick({ canvasX: params.canvasX, canvasY: params.canvasY });\n        });\n\n\n    Human.rpc.define(\"pick.queryPick\",\n        function (params) {\n            this.setResult(Human.renderer.pick.queryPick({ canvasX: params.canvasX, canvasY: params.canvasY, rayPick: params.rayPick }) || {});\n        });\n\n    Human.rpc.define(\"scene.setEnabledObjects\",\n        function (params) {\n            var objectIds;\n            if (params.fmaIds) {\n                objectIds = fmaIdsToObjectIds(params.fmaIds);\n            } else {\n                // Convert objects from ID array to map of true flags if neccessary\n                if (Human.utils.isArray(params.objectIds)) {\n                    objectIds = {};\n                    for (var i = 0, len = params.objectIds.length; i < len; i++) {\n                        objectIds[params.objectIds[i]] = true;\n                    }\n                } else {\n                    objectIds = params.objectIds;\n                }\n            }\n            Human.scene.setEnabledObjects({ objects: objectIds, replace: params.replace });\n        });\n\n    Human.rpc.define(\"scene.setSelectedObjects\",\n        function (params) {\n            var objectIds;\n            if (params.fmaIds) {\n                objectIds = fmaIdsToObjectIds(params.fmaIds);\n            } else {\n                // Convert objects from ID array to map of true flags if neccessary\n                if (Human.utils.isArray(params.objectIds)) {\n                    objectIds = {};\n                    for (var i = 0, len = params.objectIds.length; i < len; i++) {\n                        objectIds[params.objectIds[i]] = true;\n                    }\n                } else {\n                    objectIds = params.objectIds;\n                }\n            }\n            params.objectIds = objectIds;\n            Human.scene.setSelectedObjects(params);\n        });\n\n    (function () {\n        Human.rpc.define(\"scene.getObjects\",\n            function (params) {\n                var result = [];\n                var object;\n                if (params.objectId) {\n                    var objectId = params.objectId;\n                    object = Human.scene.objects[objectId];\n                    if (object) {\n                        result.push(getObjectDescription(object));\n                    }\n                } else {\n                    // Get parent objects before their children so that on the API side we\n                    // will always create HumanAPI.Objects for the parents BEFORE those for\n                    // their children, so that each child's HumanAPI.Object can be instantiated\n                    // with a reference to its parent's HumanAPI.Object.\n                    for (var i = 0, len = Human.scene.rootObjects.length; i < len; i++) {\n                        traverseObjects(Human.scene.rootObjects[i], result);\n                    }\n                }\n                this.setResult(result);\n            });\n\n        function traverseObjects(object, result) {\n            if (!object) {\n                return;\n            }\n            result.push(getObjectDescription(object));\n            for (var i = 0, len = object.objects.length; i < len; i++) {\n                traverseObjects(object.objects[i], result);\n            }\n        }\n\n        function getObjectDescription(object) {\n            var desc = {};\n\n            for (var prop in object) {\n                if (object.hasOwnProperty(prop) && prop[0] !== \"_\") {\n                    var value = object[prop];\n\n                    if (Human.utils.isPrimitive(value)) {\n                        desc[prop] = value;\n                    }\n                }\n            }\n\n            desc.parentObjectId = object.parent ? object.parent.objectId : null;\n\n            return desc;\n        }\n    })();\n\n\n\n    Human.rpc.define(\"scene.setObjectTransform\",\n        function (params) {\n            var objectId = params.objectId;\n            var fmaId = params.fmaId;\n            var object;\n            if (objectId) { // Find object by ID\n                object = Human.scene.objects[objectId];\n                if (!object) {\n                    this.error(\"Scene object not found: '\" + objectId + \"'\");\n                    return;\n                }\n            } else if (fmaId) { // Find object by FMA ID\n                object = Human.scene.objectsByFMAID[fmaId];\n                if (!object) {\n                    this.error(\"scene object not found for the given FMA ID: '\" + fmaId + \"'\");\n                    return;\n                }\n            }\n            object.setTransform(params);\n        });\n\n    /**\n     * Scrub timeline to time or chapter\n     *\n     * Scrub to given time in seconds:\n     *\n     * {\n     *    time: 15\n     * }\n     *\n     * Scrub to start of given chapter:\n     *\n     * {\n     *    chapterId: \"makeIncision\"\n     * }\n     *\n     */\n    Human.rpc.define(\"timeline.scrub\",\n        function (params) {\n            Human.timeline.scrub(params);\n        });\n\n    // Stops timeline if currently playing\n    Human.rpc.define(\"timeline.stop\",\n        function () {\n            Human.timeline.stop();\n        });\n\n    // Winds timeline to start of previous chapter\n    Human.rpc.define(\"timeline.prev\",\n        function () {\n            Human.timeline.prev();\n        });\n\n    // Winds timeline to start of next chapter\n    Human.rpc.define(\"timeline.next\",\n        function () {\n            Human.timeline.next();\n        });\n\n    // Unpauses timeline if currently paused\n    Human.rpc.define(\"timeline.unpause\",\n        function () {\n            Human.timeline.unpause();\n        });\n\n    Human.rpc.define(\"properties.set\",\n        function (params) {\n            //backwards compatibility for older API libraries\n            var props = params.props || params;\n            Human.properties.set(props || {});\n        });\n\n    //Private methods\n\n    var _setUIEnabled = function (id, enable) {\n      var _enable = (typeof enable === 'undefined') ? true : enable;\n      var el = document.getElementById(id);\n      el.style.display = (_enable) ? 'block' : 'none';\n    };\n});\n;Human.rpc.fmaIds = {\n    \"3734\": [\n        \"Base_of_aorta_3734_ID\"\n    ],\n    \"3768\": [\n        \"Aortic_arch_3768_ID\"\n    ],\n    \"3784\": [\n        \"Descending_Aorta_3784_ID\"\n    ],\n    \"3818\": [\n        \"Marginal_branch_of_right_coronary_artery_3818_ID\"\n    ],\n    \"3829\": [\n        \"Anterior_atrial_branch_of_right_coronary_artery_3829_ID\"\n    ],\n    \"3837\": [\n        \"Posterior_left_ventricular_branch_of_left_coronary_artery_3837_ID\"\n    ],\n    \"3932\": [\n        \"left_lower_subclavian_artery_3932_ID\",\n        \"Right_Brachiocephalic_trunk_3932_ID\"\n    ],\n    \"3941\": [\n        \"Right_common_carotid_artery_3941_ID\"\n    ],\n    \"3945\": [\n        \"Right_external_carotid_artery_3945_ID\"\n    ],\n    \"3949\": [\n        \"Right_Internal_Carotid_Artery_3949_ID\"\n    ],\n    \"3950\": [\n        \"Right_Internal_Carotid_Artery_3950_ID\"\n    ],\n    \"3958\": [\n        \"Right_Vertebral_Artery_3958_ID\"\n    ],\n    \"3969\": [\n        \"Right_internal_thoracic_artery_3969_ID\"\n    ],\n    \"3988\": [\n        \"Superior_right_epigastric_artery_3988_ID\",\n        \"Right_Superior_epigastric_artery_3988_ID\"\n    ],\n    \"4058\": [\n        \"Left_common_carotid_artery_4058_ID\",\n        \"Base_of_left_common_carotid_artery_4058_ID\",\n        \"Base_of_Left_common_carotid_artery_4058_ID\"\n    ],\n    \"4060\": [\n        \"Left_external_carotid_artery_4060_ID\"\n    ],\n    \"4062\": [\n        \"Left_Internal_Carotid_Artery_4062_ID\"\n    ],\n    \"4066\": [\n        \"Left_Vertebral_Artery_4066_ID\"\n    ],\n    \"4068\": [\n        \"Left_internal_thoracic_artery_4068_ID\"\n    ],\n    \"4083\": [\n        \"Left_Superior_epigastric_artery_4083_ID\"\n    ],\n    \"4085\": [\n        \"Right_costocervical_trunk_4085_ID\"\n    ],\n    \"4086\": [\n        \"Right_costocervical_trunk_4086_ID\",\n        \"Left_costocervical_trunk_4086_ID\"\n    ],\n    \"4134\": [\n        \"Left_deep_cervical_artery_4134_ID\",\n        \"left_deep_cervical_artery_4134_ID\"\n    ],\n    \"4634\": [\n        \"Right_Subcostal_artery_4634_ID\",\n        \"Right_subcostal_artery_4634_ID\"\n    ],\n    \"4654\": [\n        \"Left_Subcostal_artery_4654_ID\",\n        \"Left_subcostal_artery_4654_ID\"\n    ],\n    \"4693\": [\n        \"Right_subclavian_artery_4693_ID\"\n    ],\n    \"4694\": [\n        \"left_subclavian_artery_4694_ID\",\n        \"Left_Lower_Subclavian_artery_4694_ID\",\n        \"right_subclavian_artery_4694_ID\"\n    ],\n    \"4706\": [\n        \"Coronary_sinus_4706_ID\"\n    ],\n    \"4707\": [\n        \"Great_cardiac_vein_4707_ID\"\n    ],\n    \"4712\": [\n        \"Posterior_vein_of_left_ventricle_4712_ID\"\n    ],\n    \"4713\": [\n        \"Middle_cardiac_vein_4713_ID\"\n    ],\n    \"4714\": [\n        \"Small_cardiac_vein_4714_ID\"\n    ],\n    \"4715\": [\n        \"Oblique_vein_of_left_atrium_4715_ID\"\n    ],\n    \"4720\": [\n        \"Superior_Vena_Cava_4720_ID\"\n    ],\n    \"4728\": [\n        \"Inferior_Thyroid_vein_4728_ID\"\n    ],\n    \"4751\": [\n        \"Right_Brachiocephalic_vein_4751_ID\",\n        \"Right_brachiocephalic_vein_4751_ID\"\n    ],\n    \"4755\": [\n        \"Right_internal_jugular_vein_4755_ID\"\n    ],\n    \"4756\": [\n        \"Right_Vertebral_vein_4756_ID\"\n    ],\n    \"4758\": [\n        \"Right_internal_thoracic_vein_4758_ID\"\n    ],\n    \"4761\": [\n        \"Left_Brachiocephalic_vein_4761_ID\",\n        \"Left_brachiocephalic_vein_4761_ID\"\n    ],\n    \"4763\": [\n        \"Left_internal_jugular_vein_4763_ID\"\n    ],\n    \"4764\": [\n        \"Left_Vertebral_vein_4764_ID\"\n    ],\n    \"4766\": [\n        \"Left_internal_thoracic_vein_4766_ID\"\n    ],\n    \"4771\": [\n        \"Right_Superior_epigastric_vein_4771_ID\",\n        \"Right_superior_epigastric_vein_4771_ID\"\n    ],\n    \"4785\": [\n        \"Left_superior_epigastric_vein_4785_ID\"\n    ],\n    \"4838\": [\n        \"Azygos_Vein_4838_ID\",\n        \"Azygos_vein_4838_ID\"\n    ],\n    \"4843\": [\n        \"Right_ascending_lumbar_vein_4843_ID\"\n    ],\n    \"4944\": [\n        \"Hemiazgos_vein_4944_ID\",\n        \"Hemiazygos_vein_4944_ID\"\n    ],\n    \"4950\": [\n        \"Left_ascending_lumbar_vein_4950_ID\"\n    ],\n    \"5011\": [\n        \"Left_Accessory_Hemiazgos_vein_5011_ID\",\n        \"Left_Accessory_Hemiazygos_vein_5011_ID\"\n    ],\n    \"5883\": [\n        \"Right_Splanchnic_Nerve_5883_ID\",\n        \"Left_Splanchnic_Nerve_5883_ID\"\n    ],\n    \"6192\": [\n        \"Right_Phrenic_Nerve_6192_ID\"\n    ],\n    \"6193\": [\n        \"Left_Phrenic_Nerve_6193_ID\"\n    ],\n    \"6246\": [\n        \"Left_Recurrent_Laryngeal_Nerve_6246_ID\",\n        \"Right_Recurrent_Laryngeal_Nerve_6246_ID\"\n    ],\n    \"6258\": [\n        \"Left_Sympathetic_Chain_6258_ID\",\n        \"Right_Sympathetic_Chain_6258_ID\"\n    ],\n    \"6259\": [\n        \"Right_Sympathetic_Chain_6259_ID\"\n    ],\n    \"6442\": [\n        \"Left_C1_Spinal_Nerve_6442_ID\",\n        \"Right_C1_Spinal_Nerve_6442_ID\"\n    ],\n    \"6451\": [\n        \"Left_C2_Spinal_Nerve_6451_ID\",\n        \"Right_C2_Spinal_Nerve_6451_ID\"\n    ],\n    \"6453\": [\n        \"Left_C3_Spinal_Nerve_6453_ID\",\n        \"Right_C3_Spinal_Nerve_6453_ID\"\n    ],\n    \"6456\": [\n        \"Left_C4_Spinal_Nerve_6456_ID\",\n        \"Right_C4_Spinal_Nerve_6456_ID\"\n    ],\n    \"6457\": [\n        \"Right_C5_Spinal_Nerve_6457_ID\",\n        \"Left_C5_Spinal_Nerve_6457_ID\"\n    ],\n    \"6459\": [\n        \"Left_C6_Spinal_Nerve_6459_ID\",\n        \"Right_C6_Spinal_Nerve_6459_ID\"\n    ],\n    \"6461\": [\n        \"Right_C7_Spinal_Nerve_Group_6461_ID\",\n        \"Left_C7_Spinal_Nerve_6461_ID\",\n        \"Right_C7_Spinal_Nerve_6461_ID\",\n        \"Left_C7_Spinal_Nerve_Group_6461_ID\"\n    ],\n    \"6465\": [\n        \"Left_C8_Spinal_Nerve_6465_ID\",\n        \"Right_C8_Spinal_Nerve_6465_ID\"\n    ],\n    \"6582\": [\n        \"Ansa_Subclavia_6582_ID\"\n    ],\n    \"6642\": [\n        \"Superior_hypogastric_nerve_plexus_6642_ID\"\n    ],\n    \"6643\": [\n        \"Inferior_hypogastric_nerve_plexus_6643_ID\"\n    ],\n    \"6647\": [\n        \"Prostatic_nerve_plexus_6647_ID\"\n    ],\n    \"7088\": [\n        \"Heart_7088_ID\"\n    ],\n    \"7096\": [\n        \"Right_atrium_7096_ID\"\n    ],\n    \"7097\": [\n        \"Left_atrium_7097_ID\"\n    ],\n    \"7098\": [\n        \"Right_Ventricle_7098_ID\"\n    ],\n    \"7101\": [\n        \"Left_Ventricle_7101_ID\"\n    ],\n    \"7131\": [\n        \"Esophagus_7131_ID\"\n    ],\n    \"7133\": [\n        \"Interventricular_Septum_7133_ID\"\n    ],\n    \"7148\": [\n        \"Stomach_7148_ID\"\n    ],\n    \"7196\": [\n        \"Spleen_7196_ID\"\n    ],\n    \"7197\": [\n        \"Liver_7197_ID\"\n    ],\n    \"7198\": [\n        \"Pancreas_7198_ID\"\n    ],\n    \"7200\": [\n        \"Small_intestine_7200_ID\"\n    ],\n    \"7202\": [\n        \"Gallbladder_7202_ID\"\n    ],\n    \"7204\": [\n        \"Left_Kidney_7204_ID\",\n        \"Right_Kidney_7204_ID\"\n    ],\n    \"7205\": [\n        \"Right_Kidney_7205_ID\",\n        \"Left_Kidney_7205_ID\"\n    ],\n    \"7206\": [\n        \"Duodenum_7206_ID\"\n    ],\n    \"7207\": [\n        \"Jejunum_7207_ID\"\n    ],\n    \"7208\": [\n        \"Ileum_7208_ID\"\n    ],\n    \"7209\": [\n        \"Ovaries_7209_ID\"\n    ],\n    \"7211\": [\n        \"Right_testis_7211_ID\"\n    ],\n    \"7212\": [\n        \"Left_testis_7212_ID\"\n    ],\n    \"7213\": [\n        \"Right_Ovary_7213_ID\"\n    ],\n    \"7214\": [\n        \"Left_Ovary_7214_ID\"\n    ],\n    \"7218\": [\n        \"Right_auricle_7218_ID\"\n    ],\n    \"7219\": [\n        \"Left_auricle_7219_ID\"\n    ],\n    \"7234\": [\n        \"Tricuspid_Valve_7234_ID\"\n    ],\n    \"7235\": [\n        \"Mitral_valve_7235_ID\"\n    ],\n    \"7236\": [\n        \"Aortic_Valve_7236_ID\"\n    ],\n    \"7246\": [\n        \"Pulmonary_Valve_7246_ID\"\n    ],\n    \"7309\": [\n        \"Right_Lung_7309_ID\"\n    ],\n    \"7310\": [\n        \"Left_Lung_7310_ID\"\n    ],\n    \"7333\": [\n        \"Right_Superior_Lobe_7333_ID\"\n    ],\n    \"7337\": [\n        \"Right_Inferior_Lobe_7337_ID\"\n    ],\n    \"7370\": [\n        \"Left_Superior_Lobe_7370_ID\"\n    ],\n    \"7371\": [\n        \"Left_Inferior_Lobe_7371_ID\"\n    ],\n    \"7383\": [\n        \"Right_Middle_Lobe_7383_ID\"\n    ],\n    \"7394\": [\n        \"Trachea_7394_ID\"\n    ],\n    \"7486\": [\n        \"manubrium_of_sternum_7486_ID\",\n        \"body_of_sternum_7486_ID\"\n    ],\n    \"7591\": [\n        \"Right_Costal_Cartilage_7591_ID\",\n        \"Left_Costal_Cartilage_7591_ID\"\n    ],\n    \"7592\": [\n        \"Left_Costal_Cartilage_7592_ID\",\n        \"Right_Costal_Cartilage_7592_ID\"\n    ],\n    \"7647\": [\n        \"spinal_cord_7647_ID\"\n    ],\n    \"7857\": [\n        \"Left_first_rib_7857_ID\",\n        \"Right_first_rib_7857_ID\"\n    ],\n    \"7882\": [\n        \"Right_second_rib_7882_ID\"\n    ],\n    \"7883\": [\n        \"Left_second_rib_7883_ID\"\n    ],\n    \"7909\": [\n        \"Right_third_rib_7909_ID\"\n    ],\n    \"7910\": [\n        \"Left_third_rib_7910_ID\"\n    ],\n    \"7957\": [\n        \"Right_fourth_rib_7957_ID\"\n    ],\n    \"7958\": [\n        \"Left_fourth_rib_7958_ID\"\n    ],\n    \"8066\": [\n        \"Right_fifth_rib_8066_ID\",\n        \"Left_fifth_rib_8066_ID\"\n    ],\n    \"8175\": [\n        \"Left_sixth_rib_8175_ID\",\n        \"Right_sixth_rib_8175_ID\"\n    ],\n    \"8229\": [\n        \"Left_seventh_rib_8229_ID\",\n        \"Right_seventh_rib_8229_ID\"\n    ],\n    \"8283\": [\n        \"Left_eighth_rib_8283_ID\",\n        \"Right_eighth_rib_8283_ID\"\n    ],\n    \"8364\": [\n        \"Left_ninth_rib_8364_ID\",\n        \"Right_ninth_rib_8364_ID\"\n    ],\n    \"8445\": [\n        \"Right_tenth_rib_8445_ID\",\n        \"Left_tenth_rib_8445_ID\"\n    ],\n    \"8531\": [\n        \"Left_eleventh_rib_8531_ID\",\n        \"Right_eleventh_rib_8531_ID\"\n    ],\n    \"8533\": [\n        \"Right_twelfth_rib_8533_ID\",\n        \"Left_twelfth_rib_8533_ID\"\n    ],\n    \"8612\": [\n        \"Pulmonary_trunk_8612_ID\"\n    ],\n    \"9165\": [\n        \"First_thoracic_vertebra_9165_ID\"\n    ],\n    \"9187\": [\n        \"Second_thoracic_vertebra_9187_ID\"\n    ],\n    \"9209\": [\n        \"Third_thoracic_vertebra_9209_ID\"\n    ],\n    \"9248\": [\n        \"Fourth_thoracic_vertebra_9248_ID\"\n    ],\n    \"9600\": [\n        \"Prostate_9600_ID\"\n    ],\n    \"9603\": [\n        \"Thyroid_Gland_9603_ID\"\n    ],\n    \"9615\": [\n        \"Cricoid_cartilage_9615_ID\"\n    ],\n    \"9706\": [\n        \"Bile_Ducts_9706_ID\"\n    ],\n    \"9707\": [\n        \"Penis_9707_ID\"\n    ],\n    \"9710\": [\n        \"Vomer_9710_ID\"\n    ],\n    \"9711\": [\n        \"Maxilla_9711_ID\"\n    ],\n    \"9761\": [\n        \"Right_Transversus_thoracis_9761_ID\"\n    ],\n    \"9762\": [\n        \"Right_Transversus_thoracis_9762_ID\",\n        \"Left_Transversus_thoracis_9762_ID\"\n    ],\n    \"9922\": [\n        \"Fifth_thoracic_vertebra_9922_ID\"\n    ],\n    \"9945\": [\n        \"Sixth_thoracic_vertebra_9945_ID\"\n    ],\n    \"9968\": [\n        \"Seventh_thoracic_vertebra_9968_ID\"\n    ],\n    \"9991\": [\n        \"Eighth_thoracic_vertebra_9991_ID\"\n    ],\n    \"10014\": [\n        \"Ninth_thoracic_vertebra_10014_ID\"\n    ],\n    \"10037\": [\n        \"Tenth_thoracic_vertebra_10037_ID\"\n    ],\n    \"10059\": [\n        \"Eleventh_thoracic_vertebra_10059_ID\"\n    ],\n    \"10081\": [\n        \"Twelfth_thoracic_vertebra_10081_ID\"\n    ],\n    \"10551\": [\n        \"Right_dorsal_scapular_artery_10551_ID\"\n    ],\n    \"10552\": [\n        \"right_dorsal_scapular_artery_10552_ID\",\n        \"left_dorsal_scapular_artery_10552_ID\"\n    ],\n    \"10660\": [\n        \"Right_deep_cervical_artery_10660_ID\"\n    ],\n    \"10679\": [\n        \"Right_inferior_thyroid_artery_10679_ID\"\n    ],\n    \"10680\": [\n        \"left_inferior_thyroid_artery_10680_ID\",\n        \"Right_suprascapular_artery_10680_ID\"\n    ],\n    \"10681\": [\n        \"left_suprascapular_artery_10681_ID\",\n        \"Right_transverse_cervical_artery_10681_ID\",\n        \"right_suprascapular_artery_10681_ID\"\n    ],\n    \"10682\": [\n        \"left_transverse_cervical_artery_10682_ID\",\n        \"Right_superficial_cervical_artery_10682_ID\"\n    ],\n    \"10683\": [\n        \"left_superficial_cervical_artery_10683_ID\"\n    ],\n    \"10951\": [\n        \"Inferior_vena_cava_10951_ID\",\n        \"base_of_inferior_vena_cava_10951_ID\"\n    ],\n    \"12519\": [\n        \"Atlas_C1_12519_ID\"\n    ],\n    \"12520\": [\n        \"Axis_C2_12520_ID\"\n    ],\n    \"12521\": [\n        \"Third_cervical_vertebra_12521_ID\"\n    ],\n    \"12522\": [\n        \"Fourth_cervical_vertebra_12522_ID\"\n    ],\n    \"12523\": [\n        \"Fifth_cervical_vertebra_12523_ID\"\n    ],\n    \"12524\": [\n        \"Sixth_cervical_vertebra_12524_ID\"\n    ],\n    \"12525\": [\n        \"Seventh_cervical_vertebra_12525_ID\"\n    ],\n    \"12770\": [\n        \"Deep_lateral_cervical_lymph_nodes_12770_ID\"\n    ],\n    \"12858\": [\n        \"Union_between_ascending_lumbar_veins_12858_ID\"\n    ],\n    \"13072\": [\n        \"First_lumbar_vertebra_13072_ID\"\n    ],\n    \"13073\": [\n        \"Second_lumbar_vertebra_13073_ID\"\n    ],\n    \"13074\": [\n        \"Third_lumbar_vertebra_13074_ID\"\n    ],\n    \"13075\": [\n        \"Fourth_lumbar_vertebra_13075_ID\"\n    ],\n    \"13076\": [\n        \"Fifth_lumbar_vertebra_13076_ID\"\n    ],\n    \"13111\": [\n        \"Right_external_jugular_vein_13111_ID\"\n    ],\n    \"13112\": [\n        \"Left_external_jugular_vein_13112_ID\",\n        \"Right_external_jugular_vein_13112_ID\"\n    ],\n    \"13113\": [\n        \"Left_external_jugular_vein_13113_ID\"\n    ],\n    \"13295\": [\n        \"Diaphragm_13295_ID\"\n    ],\n    \"13322\": [\n        \"Right_Clavicle_13322_ID\"\n    ],\n    \"13323\": [\n        \"Left_Clavicle_13323_ID\"\n    ],\n    \"13325\": [\n        \"Right_cephalic_vein_13325_ID\"\n    ],\n    \"13326\": [\n        \"right_cephalic_vein_13326_ID\",\n        \"left_cephalic_vein_13326_ID\"\n    ],\n    \"13328\": [\n        \"Left_Clavicle_13328_ID\"\n    ],\n    \"13336\": [\n        \"Right_external_oblique_13336_ID\"\n    ],\n    \"13337\": [\n        \"Left_external_oblique_13337_ID\"\n    ],\n    \"13346\": [\n        \"Right_Sternohyoid_13346_ID\"\n    ],\n    \"13347\": [\n        \"Left_Sternohyoid_13347_ID\"\n    ],\n    \"13350\": [\n        \"Right_Sternothyroid_13350_ID\"\n    ],\n    \"13351\": [\n        \"Left_Sternothyroid_13351_ID\"\n    ],\n    \"13352\": [\n        \"Right_Thyrohyoid_13352_ID\"\n    ],\n    \"13353\": [\n        \"Left_Thyrohyoid_13353_ID\"\n    ],\n    \"13354\": [\n        \"Intercostal_Muscles_of_Left_Thorax_13354_ID\",\n        \"Intercostal_Muscles_of_Right_Thorax_13354_ID\"\n    ],\n    \"13358\": [\n        \"Right_latissimus_dorsi_13358_ID\"\n    ],\n    \"13359\": [\n        \"Left_latissimus_dorsi_13359_ID\"\n    ],\n    \"13373\": [\n        \"Right_pectoralis_major_13373_ID\"\n    ],\n    \"13374\": [\n        \"Left_pectoralis_major_13374_ID\",\n        \"Right_pectoralis_major_13374_ID\"\n    ],\n    \"13375\": [\n        \"Right_Pectoralis_minor_13375_ID\"\n    ],\n    \"13376\": [\n        \"Left_Pectoralis_minor_13376_ID\",\n        \"Right_Pectoralis_minor_13376_ID\"\n    ],\n    \"13377\": [\n        \"Right_Rectus_Abdominis_13377_ID\"\n    ],\n    \"13378\": [\n        \"Left_Rectus_Abdominis_13378_ID\"\n    ],\n    \"13379\": [\n        \"Right_Rectus_Abdominis_13379_ID\"\n    ],\n    \"13381\": [\n        \"Right_Rhomboid_Major_13381_ID\"\n    ],\n    \"13382\": [\n        \"Left_Rhomboid_Major_13382_ID\"\n    ],\n    \"13383\": [\n        \"Right_Rhomboid_Minor_13383_ID\"\n    ],\n    \"13384\": [\n        \"Left_Rhomboid_Minor_13384_ID\"\n    ],\n    \"13395\": [\n        \"Right_Scapula_13395_ID\"\n    ],\n    \"13396\": [\n        \"Left_Scapula_13396_ID\",\n        \"Right_Scapula_13396_ID\"\n    ],\n    \"13398\": [\n        \"Right_serratus_anterior_13398_ID\"\n    ],\n    \"13399\": [\n        \"Left_serratus_anterior_13399_ID\"\n    ],\n    \"13403\": [\n        \"Right_Serratus_Posterior_Superior_13403_ID\"\n    ],\n    \"13404\": [\n        \"Left_Serratus_Posterior_Superior_13404_ID\"\n    ],\n    \"13405\": [\n        \"Right_Serratus_Posterior_Inferior_13405_ID\"\n    ],\n    \"13406\": [\n        \"Left_Serratus_Posterior_Inferior_13406_ID\"\n    ],\n    \"13408\": [\n        \"Right_Sternocleidomastoid_13408_ID\"\n    ],\n    \"13409\": [\n        \"Left_Sternocleidomastoid_13409_ID\"\n    ],\n    \"13410\": [\n        \"Right_Subclavius_13410_ID\"\n    ],\n    \"13411\": [\n        \"Left_Subclavius_13411_ID\",\n        \"Right_Subclavius_13411_ID\"\n    ],\n    \"13414\": [\n        \"Right_subscapularis_13414_ID\"\n    ],\n    \"13415\": [\n        \"Left_subscapularis_13415_ID\",\n        \"Right_subscapularis_13415_ID\"\n    ],\n    \"13417\": [\n        \"Right_Thoracoepigastric_vein_13417_ID\"\n    ],\n    \"13418\": [\n        \"Left_Thoracoepigastric_vein_13418_ID\"\n    ],\n    \"13419\": [\n        \"Right_Trapezius_13419_ID\"\n    ],\n    \"13420\": [\n        \"Left_Trapezius_13420_ID\"\n    ],\n    \"13421\": [\n        \"Ligamentum_arteriosum_13421_ID\"\n    ],\n    \"13478\": [\n        \"Vertebral_Column_13478_ID\"\n    ],\n    \"13889\": [\n        \"Pituitary_Gland_13889_ID\"\n    ],\n    \"13890\": [\n        \"Parathyroid_Glands_13890_ID\"\n    ],\n    \"13892\": [\n        \"Right_Internal_oblique_13892_ID\"\n    ],\n    \"13893\": [\n        \"Left_Internal_oblique_13893_ID\"\n    ],\n    \"13912\": [\n        \"Anterior_interventricular_artery_13912_ID\"\n    ],\n    \"14331\": [\n        \"splenic_vein_14331_ID\"\n    ],\n    \"14332\": [\n        \"superior_mesenteric_vein_14332_ID\"\n    ],\n    \"14335\": [\n        \"Right_renal_vein_14335_ID\"\n    ],\n    \"14336\": [\n        \"Left_renal_vein_14336_ID\"\n    ],\n    \"14338\": [\n        \"Right_Hepatic_Vein_14338_ID\"\n    ],\n    \"14339\": [\n        \"Left_Hepatic_Vein_14339_ID\"\n    ],\n    \"14341\": [\n        \"Right_testicular_vein_14341_ID\"\n    ],\n    \"14345\": [\n        \"Left_testicular_vein_14345_ID\"\n    ],\n    \"14384\": [\n        \"Right_median_nerve_14384_ID\"\n    ],\n    \"14385\": [\n        \"Left_median_nerve_14385_ID\"\n    ],\n    \"14468\": [\n        \"Right_Recurrent_Laryngeal_Nerve_14468_ID\"\n    ],\n    \"14469\": [\n        \"Left_Recurrent_Laryngeal_Nerve_14469_ID\"\n    ],\n    \"14542\": [\n        \"Appendix_14542_ID\"\n    ],\n    \"14543\": [\n        \"Colon_14543_ID\"\n    ],\n    \"14544\": [\n        \"Rectum_14544_ID\"\n    ],\n    \"14545\": [\n        \"Ascending_colon_14545_ID\"\n    ],\n    \"14546\": [\n        \"Transverse_colon_14546_ID\"\n    ],\n    \"14547\": [\n        \"Descending_Colon_14547_ID\"\n    ],\n    \"14548\": [\n        \"Sigmoid_Colon_14548_ID\"\n    ],\n    \"14735\": [\n        \"Right_Lumbar_artery_14735_ID\",\n        \"Left_Lumbar_Artery_14735_ID\",\n        \"Right_Lumbar_Artery_14735_ID\"\n    ],\n    \"14746\": [\n        \"Right_Inferior_Phrenic_Artery_14746_ID\"\n    ],\n    \"14747\": [\n        \"Left_Inferior_Phrenic_Artery_14747_ID\"\n    ],\n    \"14749\": [\n        \"superior_mesenteric_artery_14749_ID\"\n    ],\n    \"14750\": [\n        \"Inferior_Mesenteric_artery_14750_ID\"\n    ],\n    \"14752\": [\n        \"Right_renal_artery_14752_ID\"\n    ],\n    \"14753\": [\n        \"Left_Renal_artery_14753_ID\"\n    ],\n    \"14759\": [\n        \"Right_testicular_artery_14759_ID\"\n    ],\n    \"14760\": [\n        \"Left_testicular_artery_14760_ID\"\n    ],\n    \"14768\": [\n        \"Left_Gastric_Artery_14768_ID\"\n    ],\n    \"14771\": [\n        \"Common_hepatic_artery_14771_ID\"\n    ],\n    \"14772\": [\n        \"Hepatic_artery_proper_14772_ID\"\n    ],\n    \"14773\": [\n        \"Splenic_artery_14773_ID\"\n    ],\n    \"14775\": [\n        \"Gastroduodenal_artery_14775_ID\"\n    ],\n    \"14776\": [\n        \"Right_Gastric_artery_14776_ID\"\n    ],\n    \"14778\": [\n        \"Right_hepatic_artery_14778_ID\"\n    ],\n    \"14779\": [\n        \"Left_hepatic_artery_14779_ID\"\n    ],\n    \"14781\": [\n        \"Right_Gastroepiploic_artery_14781_ID\"\n    ],\n    \"14787\": [\n        \"Dorsal_pancreatic_artery_14787_ID\"\n    ],\n    \"14790\": [\n        \"Inferior_pancreatic_artery_14790_ID\"\n    ],\n    \"14791\": [\n        \"Prepancreatic_Artery_14791_ID\"\n    ],\n    \"14792\": [\n        \"Great_pancreatic_artery_14792_ID\"\n    ],\n    \"14793\": [\n        \"Caudal_pancreatic_artery_14793_ID\"\n    ],\n    \"14796\": [\n        \"Left_Gastroepiploic_artery_14796_ID\"\n    ],\n    \"14810\": [\n        \"middle_colic_artery_14810_ID\"\n    ],\n    \"14811\": [\n        \"Right_colic_artery_14811_ID\"\n    ],\n    \"14812\": [\n        \"Celiac_Trunk_14812_ID\"\n    ],\n    \"14815\": [\n        \"Ileocolic_artery_14815_ID\"\n    ],\n    \"14819\": [\n        \"ileal_branch_of_ileocolic_artery_14819_ID\"\n    ],\n    \"14820\": [\n        \"Ileal_branch_of_ileocolic_vein_14820_ID\",\n        \"Colic_branch_of_ileocolic_vein_14820_ID\"\n    ],\n    \"14822\": [\n        \"Superior_branch_of_ileocolic_artery_14822_ID\"\n    ],\n    \"14826\": [\n        \"Left_colic_artery_14826_ID\"\n    ],\n    \"14830\": [\n        \"Sigmoid_artery_14830_ID\"\n    ],\n    \"14831\": [\n        \"Marginal_artery_of_colon_14831_ID\"\n    ],\n    \"14832\": [\n        \"Superior_Rectal_artery_14832_ID\"\n    ],\n    \"14835\": [\n        \"Cystic_artery_14835_ID\"\n    ],\n    \"15388\": [\n        \"Pancreatic_tributary_of_splenic_vein_15388_ID\"\n    ],\n    \"15390\": [\n        \"left_gastroepiploic_vein_15390_ID\"\n    ],\n    \"15391\": [\n        \"Inferior_Mesenteric_vein_15391_ID\"\n    ],\n    \"15394\": [\n        \"Left_colic_vein_15394_ID\"\n    ],\n    \"15395\": [\n        \"Sigmoid_vein_15395_ID\"\n    ],\n    \"15397\": [\n        \"Right_gastroepiploic_vein_15397_ID\"\n    ],\n    \"15398\": [\n        \"Anterior_Superior_pancreaticoduodenal_vein_15398_ID\",\n        \"Anterior_Inferior_pancreaticoduodenal_vein_15398_ID\",\n        \"Pancreaticoduodenal_vein_15398_ID\",\n        \"Posterior_Superior_pancreaticoduodenal_vein_15398_ID\",\n        \"Posterior_Inferior_pancreaticoduodenal_vein_15398_ID\"\n    ],\n    \"15399\": [\n        \"Left_Gastric_vein_15399_ID\"\n    ],\n    \"15400\": [\n        \"Right_Gastric_vein_15400_ID\"\n    ],\n    \"15407\": [\n        \"right_colic_vein_15407_ID\"\n    ],\n    \"15408\": [\n        \"Ileocolic_vein_15408_ID\"\n    ],\n    \"15414\": [\n        \"Right_Hepatic_Portal_Vein_15414_ID\"\n    ],\n    \"15415\": [\n        \"Left_Hepatic_Portal_Vein_15415_ID\"\n    ],\n    \"15571\": [\n        \"Right_Ureter_15571_ID\"\n    ],\n    \"15572\": [\n        \"Left_Ureter_15572_ID\"\n    ],\n    \"15629\": [\n        \"Right_Adrenal_Gland_15629_ID\"\n    ],\n    \"15630\": [\n        \"Left_Adrenal_Gland_15630_ID\"\n    ],\n    \"15710\": [\n        \"Internal_anal_sphincter_15710_ID\"\n    ],\n    \"15900\": [\n        \"Bladder_15900_ID\"\n    ],\n    \"16202\": [\n        \"Sacrum_16202_ID\"\n    ],\n    \"16491\": [\n        \"Right_iliohypogastric_nerve_16491_ID\"\n    ],\n    \"16492\": [\n        \"Left_iliohypogastric_nerve_16492_ID\"\n    ],\n    \"16493\": [\n        \"Right_ilioinguinal_nerve_16493_ID\"\n    ],\n    \"16494\": [\n        \"Left_ilioinguinal_nerve_16494_ID\"\n    ],\n    \"16497\": [\n        \"Right_lateral_femoral_cutaneous_nerve_16497_ID\"\n    ],\n    \"16498\": [\n        \"Left_lateral_femoral_cutaneous_nerve_16498_ID\"\n    ],\n    \"16499\": [\n        \"Right_femoral_nerve_16499_ID\"\n    ],\n    \"16500\": [\n        \"Left_femoral_nerve_16500_ID\"\n    ],\n    \"16501\": [\n        \"Right_obturator_nerve_16501_ID\"\n    ],\n    \"16502\": [\n        \"Left_obturator_nerve_16502_ID\"\n    ],\n    \"17559\": [\n        \"Uterus_17559_ID\"\n    ],\n    \"17740\": [\n        \"Cervix_of_uterus_17740_ID\"\n    ],\n    \"18245\": [\n        \"Right_Fallopian_Tube_18245_ID\",\n        \"Left_Fallopian_Tube_18245_ID\"\n    ],\n    \"18256\": [\n        \"Right_epididymis_18256_ID\"\n    ],\n    \"18257\": [\n        \"Left_epididymis_18257_ID\"\n    ],\n    \"18806\": [\n        \"Right_external_iliac_artery_18806_ID\"\n    ],\n    \"18807\": [\n        \"Left_external_iliac_artery_18807_ID\"\n    ],\n    \"18809\": [\n        \"Right_internal_iliac_artery_18809_ID\"\n    ],\n    \"18810\": [\n        \"Left_internal_iliac_artery_18810_ID\"\n    ],\n    \"18824\": [\n        \"Right_inferior_vesical_artery_18824_ID\"\n    ],\n    \"18825\": [\n        \"Left_inferior_vesical_artery_18825_ID\"\n    ],\n    \"18829\": [\n        \"Left_Uterine_Artery_18829_ID\",\n        \"Right_Uterine_Artery_18829_ID\"\n    ],\n    \"18836\": [\n        \"Right_internal_pudendal_artery_18836_ID\"\n    ],\n    \"18837\": [\n        \"Left_internal_pudendal_artery_18837_ID\"\n    ],\n    \"18846\": [\n        \"Right_iliolumbar_artery_18846_ID\"\n    ],\n    \"18847\": [\n        \"Left_iliolumbar_artery_18847_ID\"\n    ],\n    \"18856\": [\n        \"Right_lateral_sacral_artery_18856_ID\"\n    ],\n    \"18857\": [\n        \"Left_lateral_sacral_artery_18857_ID\"\n    ],\n    \"18866\": [\n        \"Right_obturator_artery_18866_ID\"\n    ],\n    \"18867\": [\n        \"Left_obturator_artery_18867_ID\"\n    ],\n    \"18869\": [\n        \"Right_superior_gluteal_artery_18869_ID\"\n    ],\n    \"18870\": [\n        \"Right_superior_gluteal_artery_18870_ID\",\n        \"Left_superior_gluteal_artery_18870_ID\"\n    ],\n    \"18872\": [\n        \"Right_inferior_gluteal_artery_18872_ID\"\n    ],\n    \"18873\": [\n        \"Left_inferior_gluteal_artery_18873_ID\"\n    ],\n    \"18885\": [\n        \"Right_external_iliac_vein_18885_ID\"\n    ],\n    \"18886\": [\n        \"Left_external_iliac_vein_18886_ID\"\n    ],\n    \"18887\": [\n        \"Right_internal_iliac_vein_18887_ID\"\n    ],\n    \"18888\": [\n        \"Left_internal_iliac_vein_18888_ID\"\n    ],\n    \"18891\": [\n        \"Right_inferior_vesical_vein_18891_ID\"\n    ],\n    \"18892\": [\n        \"Left_inferior_vesical_vein_18892_ID\"\n    ],\n    \"18897\": [\n        \"Right_Uterine_Vein_18897_ID\"\n    ],\n    \"18898\": [\n        \"Left_Uterine_Vein_18898_ID\"\n    ],\n    \"18903\": [\n        \"Right_iliolumbar_vein_18903_ID\"\n    ],\n    \"18904\": [\n        \"Left_iliolumbar_vein_18904_ID\"\n    ],\n    \"18906\": [\n        \"Right_lateral_sacral_vein_18906_ID\"\n    ],\n    \"18907\": [\n        \"Left_lateral_sacral_vein_18907_ID\"\n    ],\n    \"18909\": [\n        \"Right_superior_gluteal_vein_18909_ID\"\n    ],\n    \"18910\": [\n        \"Left_superior_gluteal_vein_18910_ID\"\n    ],\n    \"18912\": [\n        \"Right_inferior_gluteal_vein_18912_ID\"\n    ],\n    \"18913\": [\n        \"Left_inferior_gluteal_vein_18913_ID\"\n    ],\n    \"18915\": [\n        \"Right_obturator_vein_18915_ID\"\n    ],\n    \"18916\": [\n        \"Left_obturator_vein_18916_ID\"\n    ],\n    \"18918\": [\n        \"Right_internal_pudendal_vein_18918_ID\"\n    ],\n    \"18919\": [\n        \"Left_internal_pudendal_vein_18919_ID\"\n    ],\n    \"19086\": [\n        \"Muscles_of_the_Pelvis_19086_ID\"\n    ],\n    \"19087\": [\n        \"Levator_Ani_19087_ID\"\n    ],\n    \"19090\": [\n        \"Pubococcygeus_19090_ID\"\n    ],\n    \"19091\": [\n        \"Puborectalis_19091_ID\"\n    ],\n    \"19119\": [\n        \"Right_Uterosacral_Ligament_19119_ID\"\n    ],\n    \"19120\": [\n        \"Left_Uterosacral_Ligament_19120_ID\"\n    ],\n    \"19235\": [\n        \"Right_vas_deferens_19235_ID\"\n    ],\n    \"19236\": [\n        \"Left_vas_deferens_19236_ID\"\n    ],\n    \"19387\": [\n        \"Right_Seminal_Vesicle_19387_ID\"\n    ],\n    \"19388\": [\n        \"Left_Seminal_Vesicle_19388_ID\"\n    ],\n    \"19617\": [\n        \"Corpus_spongiosum_of_penis_19617_ID\"\n    ],\n    \"19618\": [\n        \"Right_corporus_cavernosum_of_penis_19618_ID\",\n        \"Left_corporus_cavernosum_of_penis_19618_ID\"\n    ],\n    \"19667\": [\n        \"Urethra_19667_ID\"\n    ],\n    \"19668\": [\n        \"Male_urethra_19668_ID\"\n    ],\n    \"19730\": [\n        \"Left_Ischiocavernosus_19730_ID\",\n        \"Right_Ischiocavernosus_19730_ID\"\n    ],\n    \"19731\": [\n        \"Right_Superficial_Transverse_Perineal_Muscle_19731_ID\",\n        \"Left_Superficial_Transverse_Perineal_Muscle_19731_ID\"\n    ],\n    \"19732\": [\n        \"Deep_transverse_perineal_muscle_19732_ID\"\n    ],\n    \"19949\": [\n        \"Vagina_19949_ID\"\n    ],\n    \"20224\": [\n        \"Right_Ribs_20224_ID\"\n    ],\n    \"20225\": [\n        \"Right_Ribs_20225_ID\",\n        \"Left_Ribs_20225_ID\"\n    ],\n    \"20226\": [\n        \"Right_Bony_Pelvis_20226_ID\",\n        \"Left_Ribs_20226_ID\",\n        \"Right_side_of_bony_pelvis_20226_ID\"\n    ],\n    \"20227\": [\n        \"Left_Bony_Pelvis_20227_ID\",\n        \"Left_side_of_bony_pelvis_20227_ID\"\n    ],\n    \"20274\": [\n        \"Perineal_Body_20274_ID\"\n    ],\n    \"20630\": [\n        \"Right_genitofemoral_nerve_20630_ID\"\n    ],\n    \"20631\": [\n        \"Left_genitofemoral_nerve_20631_ID\"\n    ],\n    \"20632\": [\n        \"Genital_branch_of_right_genitofemoral_nerve_20632_ID\"\n    ],\n    \"20633\": [\n        \"Genital_branch_of_left_genitofemoral_nerve_20633_ID\"\n    ],\n    \"20634\": [\n        \"Femoral_branch_of_right_genitofemoral_nerve_20634_ID\"\n    ],\n    \"20635\": [\n        \"Femoral_branch_of_left_genitofemoral_nerve_20635_ID\"\n    ],\n    \"20688\": [\n        \"Right_Inferior_Epigastric_Artery_20688_ID\"\n    ],\n    \"20689\": [\n        \"Left_Inferior_Epigastric_Artery_20689_ID\"\n    ],\n    \"20735\": [\n        \"Right_Superficial_Epigastric_Artery_20735_ID\"\n    ],\n    \"20736\": [\n        \"Left_Superficial_Epigastric_Artery_20736_ID\"\n    ],\n    \"20796\": [\n        \"Right_deep_femoral_artery_20796_ID\"\n    ],\n    \"20797\": [\n        \"Left_deep_femoral_artery_20797_ID\"\n    ],\n    \"20801\": [\n        \"Right_lateral_circumflex_femoral_artery_20801_ID\"\n    ],\n    \"20802\": [\n        \"Left_lateral_circumflex_femoral_artery_20802_ID\"\n    ],\n    \"20807\": [\n        \"Right_Medial_circumflex_femoral_artery_20807_ID\"\n    ],\n    \"20808\": [\n        \"Left_Medial_circumflex_femoral_artery_20808_ID\"\n    ],\n    \"20818\": [\n        \"Right_dorsal_artery_of_penis_20818_ID\"\n    ],\n    \"20819\": [\n        \"Left_dorsal_artery_of_penis_20819_ID\"\n    ],\n    \"20967\": [\n        \"Prostatic_part_of_right_inferior_vesical_artery_20967_ID\"\n    ],\n    \"20968\": [\n        \"Prostatic_part_of_left_inferior_vesical_artery_20968_ID\"\n    ],\n    \"21163\": [\n        \"Right_Inferior_Epigastric_Vein_21163_ID\"\n    ],\n    \"21164\": [\n        \"Left_Inferior_Epigastric_Vein_21164_ID\"\n    ],\n    \"21188\": [\n        \"Right_Femoral_Vein_21188_ID\"\n    ],\n    \"21189\": [\n        \"Left_Femoral_Vein_21189_ID\"\n    ],\n    \"21378\": [\n        \"Superficial_Veins_of_the_Left_Leg_21378_ID\",\n        \"Superficial_Veins_of_the_Right_Leg_21378_ID\"\n    ],\n    \"21379\": [\n        \"Right_Great_Saphenous_Vein_21379_ID\"\n    ],\n    \"21380\": [\n        \"Left_Great_Saphenous_Vein_21380_ID\"\n    ],\n    \"21422\": [\n        \"Descending_branch_of_right_lateral_circumflex_femoral_artery_21422_ID\"\n    ],\n    \"21423\": [\n        \"Descending_branch_of_left_lateral_circumflex_femoral_artery_21423_ID\"\n    ],\n    \"21863\": [\n        \"Right_Pudendal_nerve_21863_ID\"\n    ],\n    \"21864\": [\n        \"Left_Pudendal_nerve_21864_ID\"\n    ],\n    \"21919\": [\n        \"Right_superficial_transverse_perineal_muscle_21919_ID\"\n    ],\n    \"21920\": [\n        \"Left_superficial_transverse_perineal_muscle_21920_ID\"\n    ],\n    \"21921\": [\n        \"Right_bulbospongiosus_21921_ID\"\n    ],\n    \"21922\": [\n        \"Left_bulbospongiosus_21922_ID\"\n    ],\n    \"21923\": [\n        \"Right_ischiocavernosus_21923_ID\"\n    ],\n    \"21924\": [\n        \"Left_ischiocavernosus_21924_ID\"\n    ],\n    \"21930\": [\n        \"External_Anal_Sphincter_21930_ID\"\n    ],\n    \"22109\": [\n        \"Right_Tibial_nerve_22109_ID\"\n    ],\n    \"22110\": [\n        \"Left_Tibial_nerve_22110_ID\"\n    ],\n    \"22111\": [\n        \"Right_sciatic_nerve_22111_ID\"\n    ],\n    \"22112\": [\n        \"Left_sciatic_nerve_22112_ID\"\n    ],\n    \"22171\": [\n        \"Right_inferior_ulnar_collateral_artery_22171_ID\"\n    ],\n    \"22172\": [\n        \"right_inferior_ulnar_collateral_artery_22172_ID\",\n        \"left_inferior_ulnar_collateral_artery_22172_ID\"\n    ],\n    \"22322\": [\n        \"Right_Iliacus_22322_ID\"\n    ],\n    \"22323\": [\n        \"Left_Iliacus_22323_ID\"\n    ],\n    \"22324\": [\n        \"Right_Obturator_Internus_22324_ID\"\n    ],\n    \"22325\": [\n        \"Left_Obturator_Internus_22325_ID\"\n    ],\n    \"22326\": [\n        \"Right_Obturator_externus_22326_ID\"\n    ],\n    \"22327\": [\n        \"Left_Obturator_externus_22327_ID\"\n    ],\n    \"22328\": [\n        \"Right_gluteus_maximus_22328_ID\"\n    ],\n    \"22329\": [\n        \"Left_gluteus_maximus_22329_ID\"\n    ],\n    \"22330\": [\n        \"Right_gluteus_medius_22330_ID\"\n    ],\n    \"22331\": [\n        \"Left_gluteus_medius_22331_ID\"\n    ],\n    \"22332\": [\n        \"Right_Gluteus_minimus_22332_ID\"\n    ],\n    \"22333\": [\n        \"Left_Gluteus_minimus_22333_ID\"\n    ],\n    \"22334\": [\n        \"Right_superior_gemellus_22334_ID\"\n    ],\n    \"22335\": [\n        \"Left_superior_gemellus_22335_ID\"\n    ],\n    \"22336\": [\n        \"Right_inferior_gemellus_22336_ID\"\n    ],\n    \"22337\": [\n        \"Left_inferior_gemellus_22337_ID\"\n    ],\n    \"22338\": [\n        \"Right_Quadratus_femoris_22338_ID\"\n    ],\n    \"22339\": [\n        \"Left_Quadratus_femoris_22339_ID\"\n    ],\n    \"22340\": [\n        \"Right_Piriformis_22340_ID\"\n    ],\n    \"22341\": [\n        \"Left_Piriformis_22341_ID\"\n    ],\n    \"22342\": [\n        \"Right_Psoas_Major_22342_ID\"\n    ],\n    \"22343\": [\n        \"Left_Psoas_Major_22343_ID\"\n    ],\n    \"22344\": [\n        \"Right_Transversus_abdominis_22344_ID\"\n    ],\n    \"22345\": [\n        \"Left_Transversus_abdominis_22345_ID\"\n    ],\n    \"22348\": [\n        \"Right_Quadratus_lumborum_22348_ID\"\n    ],\n    \"22349\": [\n        \"Left_Quadratus_lumborum_22349_ID\"\n    ],\n    \"22351\": [\n        \"Right_Psoas_Minor_22351_ID\"\n    ],\n    \"22352\": [\n        \"Left_Psoas_Minor_22352_ID\"\n    ],\n    \"22354\": [\n        \"Right_Sartorius_22354_ID\"\n    ],\n    \"22355\": [\n        \"Left_Sartorius_22355_ID\"\n    ],\n    \"22358\": [\n        \"Right_Semitendinosus_22358_ID\"\n    ],\n    \"22359\": [\n        \"Left_Semitendinosus_22359_ID\"\n    ],\n    \"22360\": [\n        \"Right_Biceps_Femoris_22360_ID\"\n    ],\n    \"22361\": [\n        \"Left_Biceps_Femoris_22361_ID\"\n    ],\n    \"22425\": [\n        \"Right_Tensor_Fasciae_Latae_22425_ID\"\n    ],\n    \"22426\": [\n        \"Left_Tensor_Fasciae_Latae_22426_ID\"\n    ],\n    \"22444\": [\n        \"Right_quadriceps_femoris_22444_ID\"\n    ],\n    \"22445\": [\n        \"Left_quadriceps_femoris_22445_ID\"\n    ],\n    \"22446\": [\n        \"Right_Articularis_Genus_22446_ID\"\n    ],\n    \"22447\": [\n        \"Left_Articularis_Genus_22447_ID\"\n    ],\n    \"22448\": [\n        \"Right_Semimembranosus_22448_ID\"\n    ],\n    \"22449\": [\n        \"Left_Semimembranosus_22449_ID\"\n    ],\n    \"22450\": [\n        \"Right_Pectineus_22450_ID\"\n    ],\n    \"22451\": [\n        \"Left_Pectineus_22451_ID\"\n    ],\n    \"22456\": [\n        \"Right_Adductor_Longus_22456_ID\"\n    ],\n    \"22457\": [\n        \"Right_Adductor_Longus_22457_ID\",\n        \"Left_Adductor_Longus_22457_ID\"\n    ],\n    \"22458\": [\n        \"Left_Adductor_Longus_22458_ID\"\n    ],\n    \"22459\": [\n        \"Right_Adductor_Magnus_22459_ID\"\n    ],\n    \"22460\": [\n        \"Left_Adductor_Magnus_22460_ID\"\n    ],\n    \"22507\": [\n        \"Right_descending_genicular_artery_22507_ID\"\n    ],\n    \"22508\": [\n        \"Left_descending_genicular_artery_22508_ID\"\n    ],\n    \"22539\": [\n        \"Right_Fibularis_tertius_22539_ID\",\n        \"Left_Fibularis_tertius_22539_ID\"\n    ],\n    \"22545\": [\n        \"Right_Tibialis_anterior_22545_ID\",\n        \"Left_Tibialis_anterior_22545_ID\"\n    ],\n    \"22547\": [\n        \"Left_Extensor_hallucis_longus_22547_ID\",\n        \"Right_Extensor_hallucis_longus_22547_ID\"\n    ],\n    \"22548\": [\n        \"Right_Extensor_hallucis_longus_22548_ID\",\n        \"Left_Extensor_hallucis_longus_22548_ID\"\n    ],\n    \"22549\": [\n        \"Right_extensor_digitorum_longus_22549_ID\",\n        \"Left_extensor_digitorum_longus_22549_ID\"\n    ],\n    \"22551\": [\n        \"Right_Fibularis_tertius_22551_ID\",\n        \"Left_Fibularis_tertius_22551_ID\"\n    ],\n    \"22553\": [\n        \"Right_Fibularis_longus_22553_ID\",\n        \"Left_Fibularis_longus_22553_ID\"\n    ],\n    \"22555\": [\n        \"Left_Fibularis_brevis_22555_ID\",\n        \"Right_Fibularis_brevis_22555_ID\"\n    ],\n    \"22556\": [\n        \"Right_Gastrocnemius_22556_ID\"\n    ],\n    \"22557\": [\n        \"Left_Gastrocnemius_22557_ID\"\n    ],\n    \"22559\": [\n        \"Right_Soleus_22559_ID\",\n        \"Left_Soleus_22559_ID\"\n    ],\n    \"22561\": [\n        \"Left_Plantaris_22561_ID\",\n        \"Right_Plantaris_22561_ID\"\n    ],\n    \"22586\": [\n        \"Right_superior_medial_genicular_artery_22586_ID\"\n    ],\n    \"22587\": [\n        \"Left_superior_medial_genicular_artery_22587_ID\"\n    ],\n    \"22588\": [\n        \"Right_superior_lateral_genicular_artery_22588_ID\"\n    ],\n    \"22589\": [\n        \"Left_superior_lateral_genicular_artery_22589_ID\"\n    ],\n    \"22592\": [\n        \"Right_Popliteus_22592_ID\",\n        \"Left_Popliteus_22592_ID\"\n    ],\n    \"22655\": [\n        \"Right_Axillary_artery_22655_ID\"\n    ],\n    \"22656\": [\n        \"Left_Axillary_artery_22656_ID\",\n        \"Right_Axillary_artery_22656_ID\"\n    ],\n    \"22669\": [\n        \"right_superior_thoracic_artery_22669_ID\"\n    ],\n    \"22670\": [\n        \"left_superior_thoracic_artery_22670_ID\"\n    ],\n    \"22675\": [\n        \"Right_lateral_thoracic_artery_22675_ID\"\n    ],\n    \"22676\": [\n        \"right_lateral_thoracic_artery_22676_ID\",\n        \"left_lateral_thoracic_artery_22676_ID\"\n    ],\n    \"22679\": [\n        \"Right_subscapular_artery_22679_ID\"\n    ],\n    \"22680\": [\n        \"left_subscapular_artery_22680_ID\",\n        \"right_subscapular_artery_22680_ID\"\n    ],\n    \"22682\": [\n        \"Right_anterior_humeral_circumflex_artery_22682_ID\"\n    ],\n    \"22683\": [\n        \"right_anterior_humeral_circumflex_artery_22683_ID\",\n        \"left_anterior_humeral_circumflex_artery_22683_ID\"\n    ],\n    \"22686\": [\n        \"Right_posterior_humeral_circumflex_artery_22686_ID\"\n    ],\n    \"22687\": [\n        \"left_posterior_humeral_circumflex_artery_22687_ID\",\n        \"right_posterior_humeral_circumflex_artery_22687_ID\"\n    ],\n    \"22691\": [\n        \"Right_brachial_artery_22691_ID\"\n    ],\n    \"22692\": [\n        \"right_brachial_artery_22692_ID\",\n        \"left_brachial_artery_22692_ID\"\n    ],\n    \"22696\": [\n        \"Right_deep_brachial_artery_22696_ID\"\n    ],\n    \"22697\": [\n        \"right_deep_brachial_artery_22697_ID\",\n        \"left_deep_brachial_artery_22697_ID\"\n    ],\n    \"22707\": [\n        \"Right_superior_ulnar_collateral_artery_22707_ID\"\n    ],\n    \"22708\": [\n        \"right_superior_ulnar_collateral_artery_22708_ID\",\n        \"left_superior_ulnar_collateral_artery_22708_ID\"\n    ],\n    \"22726\": [\n        \"Right_Splenius_cervicis_22726_ID\"\n    ],\n    \"22727\": [\n        \"Left_Splenius_cervicis_22727_ID\"\n    ],\n    \"22728\": [\n        \"Right_Splenius_capitis_22728_ID\"\n    ],\n    \"22729\": [\n        \"Left_Splenius_capitis_22729_ID\"\n    ],\n    \"22733\": [\n        \"Right_radial_artery_22733_ID\"\n    ],\n    \"22734\": [\n        \"Right_radial_artery_22734_ID\",\n        \"Left_radial_artery_22734_ID\"\n    ],\n    \"22740\": [\n        \"Right_Iliocostalis_Lumborum_22740_ID\"\n    ],\n    \"22741\": [\n        \"Left_Iliocostalis_Lumborum_22741_ID\"\n    ],\n    \"22742\": [\n        \"Right_Iliocostalis_Thoracis_22742_ID\"\n    ],\n    \"22743\": [\n        \"Left_Iliocostalis_Thoracis_22743_ID\"\n    ],\n    \"22744\": [\n        \"Right_Iliocostalis_Cervicis_22744_ID\"\n    ],\n    \"22745\": [\n        \"Left_Iliocostalis_Cervicis_22745_ID\"\n    ],\n    \"22751\": [\n        \"Right_Longissimus_Thoracis_22751_ID\"\n    ],\n    \"22753\": [\n        \"Left_Longissimus_Thoracis_22753_ID\"\n    ],\n    \"22754\": [\n        \"Right_Longissimus_Capitis_22754_ID\"\n    ],\n    \"22756\": [\n        \"Left_Longissimus_Capitis_22756_ID\"\n    ],\n    \"22757\": [\n        \"Right_Longissimus_Cervicis_22757_ID\"\n    ],\n    \"22758\": [\n        \"Left_Longissimus_Cervicis_22758_ID\"\n    ],\n    \"22765\": [\n        \"Right_radial_recurrent_artery_22765_ID\"\n    ],\n    \"22766\": [\n        \"left_radial_recurrent_artery_22766_ID\",\n        \"right_radial_recurrent_artery_22766_ID\"\n    ],\n    \"22772\": [\n        \"dorsal_carpal_branch_of_Right_radial_artery_22772_ID\"\n    ],\n    \"22773\": [\n        \"dorsal_carpal_branch_of_left_radial_artery_22773_ID\",\n        \"dorsal_carpal_branch_of_right_radial_artery_22773_ID\"\n    ],\n    \"22779\": [\n        \"Right_Spinalis_Thoracis_22779_ID\"\n    ],\n    \"22780\": [\n        \"Left_Spinalis_Thoracis_22780_ID\"\n    ],\n    \"22781\": [\n        \"Right_Spinalis_Cervicis_22781_ID\"\n    ],\n    \"22782\": [\n        \"Left_Spinalis_Cervicis_22782_ID\"\n    ],\n    \"22783\": [\n        \"Right_Spinalis_Capitis_22783_ID\"\n    ],\n    \"22784\": [\n        \"Left_Spinalis_Capitis_22784_ID\"\n    ],\n    \"22798\": [\n        \"Right_ulnar_artery_22798_ID\",\n        \"Left_ulnar_artery_22798_ID\"\n    ],\n    \"22801\": [\n        \"Right_anterior_ulnar_recurrent_artery_22801_ID\"\n    ],\n    \"22802\": [\n        \"right_anterior_ulnar_recurrent_artery_22802_ID\",\n        \"left_anterior_ulnar_recurrent_artery_22802_ID\"\n    ],\n    \"22804\": [\n        \"Right_posterior_ulnar_recurrent_artery_22804_ID\"\n    ],\n    \"22805\": [\n        \"right_posterior_ulnar_recurrent_artery_22805_ID\",\n        \"left_posterior_ulnar_recurrent_artery_22805_ID\"\n    ],\n    \"22807\": [\n        \"Right_common_interosseous_artery_22807_ID\"\n    ],\n    \"22808\": [\n        \"left_common_interosseous_artery_22808_ID\",\n        \"right_common_interosseous_artery_22808_ID\"\n    ],\n    \"22812\": [\n        \"Right_anterior_interosseous_artery_22812_ID\"\n    ],\n    \"22813\": [\n        \"left_anterior_interosseous_artery_22813_ID\",\n        \"right_anterior_interosseous_artery_22813_ID\"\n    ],\n    \"22821\": [\n        \"dorsal_carpal_branch_of_Right_ulnar_artery_22821_ID\"\n    ],\n    \"22822\": [\n        \"dorsal_carpal_branch_of_left_ulnar_artery_22822_ID\",\n        \"dorsal_carpal_branch_of_right_ulnar_artery_22822_ID\"\n    ],\n    \"22836\": [\n        \"Right_superficial_palmar_arch_22836_ID\"\n    ],\n    \"22837\": [\n        \"left_superficial_palmar_arch_22837_ID\",\n        \"right_superficial_palmar_arch_22837_ID\"\n    ],\n    \"22839\": [\n        \"Right_deep_palmar_arterial_arch_22839_ID\"\n    ],\n    \"22840\": [\n        \"left_deep_palmar_venous_arch_22840_ID\",\n        \"right_deep_palmar_venous_arch_22840_ID\",\n        \"right_deep_palmar_arterial_arch_22840_ID\",\n        \"left_deep_palmar_arterial_arch_22840_ID\",\n        \"right_deep_palmar_arch_22840_ID\",\n        \"left_deep_palmar_arch_22840_ID\"\n    ],\n    \"22872\": [\n        \"Right_Semispinalis_thoracis_22872_ID\"\n    ],\n    \"22873\": [\n        \"Left_Semispinalis_thoracis_22873_ID\"\n    ],\n    \"22874\": [\n        \"Right_Semispinalis_cervicis_22874_ID\"\n    ],\n    \"22875\": [\n        \"Left_Semispinalis_cervicis_22875_ID\"\n    ],\n    \"22876\": [\n        \"Right_Semispinalis_capitis_22876_ID\"\n    ],\n    \"22877\": [\n        \"Left_Semispinalis_capitis_22877_ID\"\n    ],\n    \"22878\": [\n        \"Right_Multifidus_22878_ID\"\n    ],\n    \"22879\": [\n        \"Left_Multifidus_22879_ID\"\n    ],\n    \"22909\": [\n        \"Right_basilic_vein_22909_ID\"\n    ],\n    \"22910\": [\n        \"right_basilic_vein_22910_ID\",\n        \"left_basilic_vein_22910_ID\",\n        \"Left_basilic_vein_22910_ID\"\n    ],\n    \"22920\": [\n        \"Right_palmar_metacarpal_veins_22920_ID\"\n    ],\n    \"22921\": [\n        \"right_palmar_metacarpal_veins_22921_ID\",\n        \"left_palmar_metacarpal_veins_22921_ID\"\n    ],\n    \"22935\": [\n        \"Right_medial_brachial_vein_22935_ID\"\n    ],\n    \"22936\": [\n        \"right_medial_brachial_vein_22936_ID\",\n        \"left_medial_brachial_vein_22936_ID\"\n    ],\n    \"22948\": [\n        \"Right_radial_vein_22948_ID\"\n    ],\n    \"22949\": [\n        \"left_radial_vein_22949_ID\",\n        \"right_radial_vein_22949_ID\"\n    ],\n    \"22951\": [\n        \"right_ulnar_vein_22951_ID\"\n    ],\n    \"22952\": [\n        \"right_ulnar_vein_22952_ID\",\n        \"left_ulnar_vein_22952_ID\"\n    ],\n    \"22964\": [\n        \"Right_median_cubital_vein_22964_ID\"\n    ],\n    \"22965\": [\n        \"right_median_cubital_vein_22965_ID\",\n        \"left_median_cubital_vein_22965_ID\"\n    ],\n    \"22968\": [\n        \"Right_median_antebrachial_vein_22968_ID\"\n    ],\n    \"22969\": [\n        \"left_median_antebrachial_vein_22969_ID\",\n        \"right_median_antebrachial_vein_22969_ID\"\n    ],\n    \"23111\": [\n        \"Right_deep_dorsal_vein_23111_ID\"\n    ],\n    \"23112\": [\n        \"right_deep_dorsal_vein_23112_ID\",\n        \"left_deep_dorsal_vein_23112_ID\"\n    ],\n    \"23123\": [\n        \"Right_medial_collateral_artery_23123_ID\"\n    ],\n    \"23124\": [\n        \"right_medial_collateral_artery_23124_ID\",\n        \"left_medial_collateral_artery_23124_ID\"\n    ],\n    \"23126\": [\n        \"Right_radial_collateral_artery_23126_ID\"\n    ],\n    \"23127\": [\n        \"right_radial_collateral_artery_23127_ID\",\n        \"left_radial_collateral_artery_23127_ID\"\n    ],\n    \"23130\": [\n        \"Right_Humerus_23130_ID\",\n        \"Left_Humerus_23130_ID\"\n    ],\n    \"23180\": [\n        \"Right_circumflex_scapular_artery_23180_ID\"\n    ],\n    \"23181\": [\n        \"right_circumflex_scapular_artery_23181_ID\",\n        \"left_circumflex_scapular_artery_23181_ID\"\n    ],\n    \"23464\": [\n        \"Left_radius_23464_ID\",\n        \"Right_radius_23464_ID\"\n    ],\n    \"23467\": [\n        \"Left_Ulna_23467_ID\",\n        \"Right_Ulna_23467_ID\"\n    ],\n    \"23707\": [\n        \"Right_Interosseous_membrane_23707_ID\"\n    ],\n    \"23708\": [\n        \"Left_Interosseous_membrane_23708_ID\"\n    ],\n    \"24160\": [\n        \"Bones_of_the_Right_Arm_24160_ID\"\n    ],\n    \"24162\": [\n        \"Bones_of_the_Left_Arm_24162_ID\"\n    ],\n    \"24435\": [\n        \"Right_scaphoid_bone_24435_ID\",\n        \"Left_scaphoid_bone_24435_ID\"\n    ],\n    \"24437\": [\n        \"Left_lunate_bone_24437_ID\",\n        \"Right_lunate_bone_24437_ID\"\n    ],\n    \"24439\": [\n        \"Left_triquetral_bone_24439_ID\",\n        \"Right_triquetral_bone_24439_ID\"\n    ],\n    \"24441\": [\n        \"Right_pisiform_24441_ID\",\n        \"Left_pisiform_24441_ID\"\n    ],\n    \"24443\": [\n        \"Right_trapezium_24443_ID\",\n        \"Left_trapezium_24443_ID\"\n    ],\n    \"24444\": [\n        \"Right_trapezoid_bone_24444_ID\",\n        \"Left_trapezoid_bone_24444_ID\"\n    ],\n    \"24446\": [\n        \"Right_capitate_bone_24446_ID\",\n        \"Left_capitate_bone_24446_ID\"\n    ],\n    \"24448\": [\n        \"Left_hamate_bone_24448_ID\",\n        \"Right_hamate_bone_24448_ID\"\n    ],\n    \"24474\": [\n        \"Right_femur_24474_ID\"\n    ],\n    \"24475\": [\n        \"Left_femur_24475_ID\"\n    ],\n    \"24477\": [\n        \"Right_tibia_24477_ID\"\n    ],\n    \"24478\": [\n        \"Right_tibia_24478_ID\",\n        \"Left_tibia_24478_ID\"\n    ],\n    \"24480\": [\n        \"Right_fibula_24480_ID\"\n    ],\n    \"24481\": [\n        \"Right_fibula_24481_ID\",\n        \"Left_fibula_24481_ID\"\n    ],\n    \"24482\": [\n        \"Right_talus_24482_ID\"\n    ],\n    \"24483\": [\n        \"Right_talus_24483_ID\",\n        \"Left_talus_24483_ID\"\n    ],\n    \"24486\": [\n        \"Right_patella_24486_ID\"\n    ],\n    \"24487\": [\n        \"Right_patella_24487_ID\",\n        \"Left_patella_24487_ID\"\n    ],\n    \"24497\": [\n        \"Right_calcaneus_24497_ID\"\n    ],\n    \"24498\": [\n        \"Right_calcaneus_24498_ID\",\n        \"Left_calcaneus_24498_ID\"\n    ],\n    \"24500\": [\n        \"Navicular_bone_of_right_foot_24500_ID\"\n    ],\n    \"24501\": [\n        \"Navicular_of_right_foot_24501_ID\",\n        \"Navicular_of_left_foot_24501_ID\",\n        \"Navicular_bone_of_left_foot_24501_ID\"\n    ],\n    \"24521\": [\n        \"Right_medial_Cuneiform_bone_24521_ID\"\n    ],\n    \"24522\": [\n        \"Left_medial_Cuneiform_bone_24522_ID\",\n        \"Right_medial_Cuneiform_bone_24522_ID\"\n    ],\n    \"24523\": [\n        \"Right_intermediate_Cuneiform_bone_24523_ID\"\n    ],\n    \"24524\": [\n        \"Right_intermediate_Cuneiform_bone_24524_ID\",\n        \"Left_intermediate_Cuneiform_bone_24524_ID\"\n    ],\n    \"24525\": [\n        \"Right_lateral_Cuneiform_bone_24525_ID\"\n    ],\n    \"24526\": [\n        \"Right_lateral_Cuneiform_bone_24526_ID\",\n        \"Left_lateral_Cuneiform_bone_24526_ID\"\n    ],\n    \"24528\": [\n        \"Right_cuboid_bone_24528_ID\"\n    ],\n    \"24529\": [\n        \"Left_cuboid_bone_24529_ID\",\n        \"Right_cuboid_bone_24529_ID\"\n    ],\n    \"25005\": [\n        \"Anterior_atlanto_occipital_membrane_25005_ID\",\n        \"Anterior_atlantooccipital_membrane_25005_ID\"\n    ],\n    \"29711\": [\n        \"Prostatic_venous_plexus_29711_ID\"\n    ],\n    \"31893\": [\n        \"Anterior_longitudinal_ligament_31893_ID\"\n    ],\n    \"32530\": [\n        \"Right_Rectus_capitis_posterior_major_32530_ID\"\n    ],\n    \"32531\": [\n        \"Left_Rectus_Capitis_posterior_major_32531_ID\"\n    ],\n    \"32532\": [\n        \"Right_Rectus_capitis_posterior_minor_32532_ID\"\n    ],\n    \"32533\": [\n        \"Left_Rectus_capitis_posterior_minor_32533_ID\",\n        \"Right_Rectus_Capitis_posterior_major_32533_ID\"\n    ],\n    \"32535\": [\n        \"Right_Rectus_capitis_posterior_minor_32535_ID\"\n    ],\n    \"32540\": [\n        \"Right_Levator_Scapulae_32540_ID\",\n        \"Right_Levator_scapulae_32540_ID\"\n    ],\n    \"32541\": [\n        \"Left_Levator_scapulae_32541_ID\"\n    ],\n    \"32542\": [\n        \"Right_Deltoid_32542_ID\"\n    ],\n    \"32543\": [\n        \"Left_Deltoid_32543_ID\",\n        \"Right_Deltoid_32543_ID\"\n    ],\n    \"32544\": [\n        \"Right_supraspinatus_32544_ID\",\n        \"Right_Supraspinatus_32544_ID\"\n    ],\n    \"32545\": [\n        \"Left_Supraspinatus_32545_ID\"\n    ],\n    \"32547\": [\n        \"Right_infraspinatus_32547_ID\"\n    ],\n    \"32548\": [\n        \"Left_infraspinatus_32548_ID\"\n    ],\n    \"32551\": [\n        \"Right_Teres_Major_32551_ID\"\n    ],\n    \"32552\": [\n        \"Left_Teres_Major_32552_ID\"\n    ],\n    \"32553\": [\n        \"Right_teres_minor_32553_ID\"\n    ],\n    \"32554\": [\n        \"Left_teres_minor_32554_ID\"\n    ],\n    \"33098\": [\n        \"Right_Rotatores_short_fibers_33098_ID\",\n        \"Right_Rotatores_long_fibers_33098_ID\"\n    ],\n    \"33099\": [\n        \"Left_Rotatores_long_fibers_33099_ID\",\n        \"Left_Rotatores_short_fibers_33099_ID\"\n    ],\n    \"33520\": [\n        \"Right_pectoral_girdle_muscles_33520_ID\"\n    ],\n    \"33521\": [\n        \"Left_pectoral_girdle_muscles_33521_ID\",\n        \"Right_pectoral_girdle_muscles_33521_ID\"\n    ],\n    \"37318\": [\n        \"Right_ulnar_nerve_37318_ID\"\n    ],\n    \"37319\": [\n        \"Left_ulnar_nerve_37319_ID\"\n    ],\n    \"37386\": [\n        \"Right_Abductor_pollicis_brevis_37386_ID\"\n    ],\n    \"37387\": [\n        \"Left_Abductor_pollicis_brevis_37387_ID\"\n    ],\n    \"37388\": [\n        \"Right_Flexor_pollicis_brevis_37388_ID\"\n    ],\n    \"37389\": [\n        \"Left_Flexor_pollicis_brevis_37389_ID\"\n    ],\n    \"37390\": [\n        \"Right_Opponens_pollicis_37390_ID\"\n    ],\n    \"37391\": [\n        \"Left_Opponens_pollicis_37391_ID\"\n    ],\n    \"37392\": [\n        \"Right_Adductor_pollicis_37392_ID\"\n    ],\n    \"37393\": [\n        \"Left_Adductor_pollicis_37393_ID\",\n        \"Right_Palmaris_brevis_37393_ID\"\n    ],\n    \"37395\": [\n        \"Left_Palmaris_brevis_37395_ID\"\n    ],\n    \"37396\": [\n        \"Right_Abductor_digiti_minimi_37396_ID\"\n    ],\n    \"37397\": [\n        \"Left_Abductor_digiti_minimi_37397_ID\"\n    ],\n    \"37398\": [\n        \"Right_Flexor_digiti_minimi_brevis_37398_ID\"\n    ],\n    \"37399\": [\n        \"Left_Flexor_digiti_minimi_brevis_37399_ID\"\n    ],\n    \"37400\": [\n        \"Right_Opponens_digiti_minimi_37400_ID\"\n    ],\n    \"37401\": [\n        \"Left_Opponens_digiti_minimi_37401_ID\"\n    ],\n    \"37460\": [\n        \"Right_Abductor_hallucis_37460_ID\",\n        \"Left_Abductor_hallucis_37460_ID\"\n    ],\n    \"37462\": [\n        \"Right_Flexor_digiti_minimi_brevis_37462_ID\",\n        \"Left_Flexor_digiti_minimi_brevis_37462_ID\"\n    ],\n    \"37464\": [\n        \"Abductor_digiti_minimi_of_right_foot_37464_ID\",\n        \"Abductor_digiti_minimi_of_left_foot_37464_ID\"\n    ],\n    \"37468\": [\n        \"Left_Flexor_hallucis_brevis_37468_ID\",\n        \"Right_Flexor_hallucis_brevis_37468_ID\"\n    ],\n    \"37470\": [\n        \"Left_Adductor_hallucis_37470_ID\",\n        \"Left_Adductor_hallucis_oblique_head_37470_ID\",\n        \"Left_Adductor_hallucis_transverse_head_37470_ID\",\n        \"Right_Adductor_hallucis_37470_ID\",\n        \"Right_Adductor_hallucis_oblique_head_37470_ID\",\n        \"Right_Adductor_hallucis_transverse_head_37470_ID\"\n    ],\n    \"37665\": [\n        \"Right_Coracobrachialis_37665_ID\"\n    ],\n    \"37666\": [\n        \"Left_Coracobrachialis_37666_ID\",\n        \"Right_Coracobrachialis_37666_ID\"\n    ],\n    \"37668\": [\n        \"Right_Brachialis_37668_ID\"\n    ],\n    \"37669\": [\n        \"Left_Brachialis_37669_ID\"\n    ],\n    \"37671\": [\n        \"Right_Biceps_Brachii_37671_ID\"\n    ],\n    \"37672\": [\n        \"Right_Biceps_Brachii_37672_ID\",\n        \"Left_Biceps_Brachii_37672_ID\"\n    ],\n    \"37689\": [\n        \"Right_Triceps_Brachii_37689_ID\"\n    ],\n    \"37690\": [\n        \"Right_Triceps_Brachii_37690_ID\",\n        \"Left_Triceps_Brachii_37690_ID\"\n    ],\n    \"37705\": [\n        \"Right_anconeus_37705_ID\"\n    ],\n    \"37706\": [\n        \"Left_anconeus_37706_ID\",\n        \"Right_anconeus_37706_ID\"\n    ],\n    \"38451\": [\n        \"Right_Pronator_teres_38451_ID\"\n    ],\n    \"38452\": [\n        \"Left_Pronator_teres_38452_ID\"\n    ],\n    \"38454\": [\n        \"Right_Pronator_quadratus_38454_ID\"\n    ],\n    \"38455\": [\n        \"Left_Pronator_quadratus_38455_ID\"\n    ],\n    \"38460\": [\n        \"Right_Flexor_carpi_radialis_longus_38460_ID\"\n    ],\n    \"38461\": [\n        \"Left_Flexor_carpi_radialis_longus_38461_ID\"\n    ],\n    \"38463\": [\n        \"Right_Palmaris_longus_38463_ID\"\n    ],\n    \"38464\": [\n        \"Left_Palmaris_longus_38464_ID\"\n    ],\n    \"38466\": [\n        \"Right_Flexor_carpi_ulnaris_38466_ID\"\n    ],\n    \"38467\": [\n        \"Left_Flexor_carpi_ulnaris_38467_ID\"\n    ],\n    \"38483\": [\n        \"Right_flexor_pollicis_longus_38483_ID\"\n    ],\n    \"38484\": [\n        \"Left_flexor_pollicis_longus_38484_ID\"\n    ],\n    \"38486\": [\n        \"Right_Brachioradialis_38486_ID\"\n    ],\n    \"38487\": [\n        \"Left_Brachioradialis_38487_ID\"\n    ],\n    \"38495\": [\n        \"Right_Extensor_carpi_radialis_longus_38495_ID\"\n    ],\n    \"38496\": [\n        \"Left_Extensor_carpi_radialis_longus_38496_ID\"\n    ],\n    \"38498\": [\n        \"Right_Extensor_carpi_radialis_brevis_38498_ID\"\n    ],\n    \"38499\": [\n        \"Left_Extensor_carpi_radialis_brevis_38499_ID\"\n    ],\n    \"38504\": [\n        \"Right_Extensor_digiti_minimi_38504_ID\"\n    ],\n    \"38505\": [\n        \"Left_Extensor_digiti_minimi_38505_ID\"\n    ],\n    \"38507\": [\n        \"Right_Extensor_carpi_ulnaris_38507_ID\"\n    ],\n    \"38508\": [\n        \"Left_Extensor_carpi_ulnaris_38508_ID\"\n    ],\n    \"38513\": [\n        \"Right_Supinator_38513_ID\"\n    ],\n    \"38514\": [\n        \"Left_Supinator_38514_ID\"\n    ],\n    \"38516\": [\n        \"Right_Abductor_pollicis_longus_38516_ID\"\n    ],\n    \"38517\": [\n        \"Left_Abductor_pollicis_longus_38517_ID\"\n    ],\n    \"38519\": [\n        \"Right_Extensor_pollicis_brevis_38519_ID\"\n    ],\n    \"38520\": [\n        \"Left_Extensor_pollicis_brevis_38520_ID\"\n    ],\n    \"38522\": [\n        \"Right_Extensor_pollicis_longus_38522_ID\"\n    ],\n    \"38523\": [\n        \"Left_Extensor_pollicis_longus_38523_ID\"\n    ],\n    \"38525\": [\n        \"Right_Extensor_indicis_38525_ID\"\n    ],\n    \"38526\": [\n        \"Left_Extensor_indicis_38526_ID\"\n    ],\n    \"38928\": [\n        \"Right_Rectus_Femoris_38928_ID\"\n    ],\n    \"38929\": [\n        \"Left_Rectus_Femoris_38929_ID\"\n    ],\n    \"38930\": [\n        \"Right_Vastus_Lateralis_38930_ID\"\n    ],\n    \"38931\": [\n        \"Left_Vastus_Lateralis_38931_ID\"\n    ],\n    \"38932\": [\n        \"Right_Vastus_Medialis_38932_ID\"\n    ],\n    \"38933\": [\n        \"Left_Vastus_Medialis_38933_ID\"\n    ],\n    \"38934\": [\n        \"Right_Vastus_Intermedius_38934_ID\"\n    ],\n    \"38935\": [\n        \"Left_Vastus_Intermedius_38935_ID\"\n    ],\n    \"39091\": [\n        \"Left_forearm_muscles_39091_ID\"\n    ],\n    \"39092\": [\n        \"Right_forearm_muscles_39092_ID\"\n    ],\n    \"39987\": [\n        \"Right_Extensor_retinaculum_of_hand_39987_ID\",\n        \"Left_Extensor_retinaculum_of_hand_39987_ID\"\n    ],\n    \"39988\": [\n        \"Right_Flexor_retinaculum_of_hand_39988_ID\",\n        \"Left_Flexor_retinaculum_of_hand_39988_ID\"\n    ],\n    \"42313\": [\n        \"Right_Pisohamate_Ligament_42313_ID\",\n        \"Left_Pisohamate_Ligament_42313_ID\"\n    ],\n    \"42369\": [\n        \"Right_hand_muscles_42369_ID\"\n    ],\n    \"42370\": [\n        \"Left_hand_muscles_42370_ID\"\n    ],\n    \"43883\": [\n        \"Right_Gracilis_43883_ID\"\n    ],\n    \"43884\": [\n        \"Left_Gracilis_43884_ID\"\n    ],\n    \"43890\": [\n        \"Right_inferior_medial_genicular_artery_43890_ID\"\n    ],\n    \"43891\": [\n        \"Left_inferior_medial_genicular_artery_43891_ID\",\n        \"Right_inferior_medial_genicular_artery_43891_ID\"\n    ],\n    \"43892\": [\n        \"Right_inferior_lateral_genicular_artery_43892_ID\"\n    ],\n    \"43893\": [\n        \"Left_inferior_lateral_genicular_artery_43893_ID\"\n    ],\n    \"43896\": [\n        \"Right_anterior_tibial_artery_43896_ID\"\n    ],\n    \"43897\": [\n        \"Right_anterior_tibial_artery_43897_ID\",\n        \"Left_anterior_tibial_artery_43897_ID\"\n    ],\n    \"43898\": [\n        \"Left_anterior_tibial_artery_43898_ID\",\n        \"Right_posterior_tibial_artery_43898_ID\"\n    ],\n    \"43899\": [\n        \"Left_posterior_tibial_artery_43899_ID\"\n    ],\n    \"43907\": [\n        \"Right_anterior_tibial_recurrent_artery_43907_ID\"\n    ],\n    \"43908\": [\n        \"Left_anterior_tibial_recurrent_artery_43908_ID\"\n    ],\n    \"43916\": [\n        \"Right_dorsalis_pedis_artery_43916_ID\"\n    ],\n    \"43917\": [\n        \"Left_dorsalis_pedis_artery_43917_ID\"\n    ],\n    \"43922\": [\n        \"Right_fibular_artery_43922_ID\"\n    ],\n    \"43923\": [\n        \"Left_fibular_artery_43923_ID\"\n    ],\n    \"43929\": [\n        \"Right_medial_plantar_artery_43929_ID\"\n    ],\n    \"43930\": [\n        \"Left_medial_plantar_artery_43930_ID\"\n    ],\n    \"43931\": [\n        \"Right_lateral_plantar_artery_43931_ID\"\n    ],\n    \"43932\": [\n        \"Left_lateral_plantar_artery_43932_ID\"\n    ],\n    \"43935\": [\n        \"Right_deep_medial_plantar_artery_43935_ID\"\n    ],\n    \"43936\": [\n        \"Left_deep_medial_plantar_artery_43936_ID\"\n    ],\n    \"43943\": [\n        \"Right_plantar_arch_43943_ID\"\n    ],\n    \"43944\": [\n        \"Left_plantar_arch_43944_ID\"\n    ],\n    \"43950\": [\n        \"Calcaneal_branch_of_right_fibular_artery_43950_ID\"\n    ],\n    \"43951\": [\n        \"Calcaneal_branch_of_left_fibular_artery_43951_ID\"\n    ],\n    \"44227\": [\n        \"Left_Popliteal_Lymph_Nodes_44227_ID\",\n        \"Right_Popliteal_Lymph_Nodes_44227_ID\"\n    ],\n    \"44249\": [\n        \"Right_Long_plantar_ligament_44249_ID\",\n        \"Left_Long_plantar_ligament_44249_ID\"\n    ],\n    \"44310\": [\n        \"Lymphatics_of_the_Lower_Limb_44310_ID\"\n    ],\n    \"44326\": [\n        \"Descending_branch_of_right_lateral_circumflex_femoral_Vein_44326_ID\"\n    ],\n    \"44327\": [\n        \"Descending_branch_of_left_lateral_circumflex_femoral_Vein_44327_ID\"\n    ],\n    \"44328\": [\n        \"Right_Popliteal_vein_44328_ID\"\n    ],\n    \"44329\": [\n        \"Left_Popliteal_vein_44329_ID\"\n    ],\n    \"44334\": [\n        \"Right_small_saphenous_vein_44334_ID\"\n    ],\n    \"44335\": [\n        \"Left_small_saphenous_vein_44335_ID\"\n    ],\n    \"44336\": [\n        \"Right_Anterior_Tibial_Vein_44336_ID\"\n    ],\n    \"44337\": [\n        \"Left_Anterior_Tibial_Vein_44337_ID\"\n    ],\n    \"44338\": [\n        \"Right_Posterior_Tibial_Vein_44338_ID\"\n    ],\n    \"44339\": [\n        \"Left_Posterior_Tibial_Vein_44339_ID\"\n    ],\n    \"44340\": [\n        \"Right_superficial_epigastric_vein_44340_ID\"\n    ],\n    \"44341\": [\n        \"Left_superficial_epigastric_vein_44341_ID\"\n    ],\n    \"44583\": [\n        \"Right_Oblique_Popliteal_Ligament_44583_ID\"\n    ],\n    \"44584\": [\n        \"Left_Oblique_Popliteal_Ligament_44584_ID\"\n    ],\n    \"44585\": [\n        \"Right_Patellar_Ligament_44585_ID\"\n    ],\n    \"44586\": [\n        \"Left_Patellar_Ligament_44586_ID\"\n    ],\n    \"44597\": [\n        \"Right_Arcuate_Popliteal_Ligament_44597_ID\"\n    ],\n    \"44599\": [\n        \"Left_Arcuate_Popliteal_Ligament_44599_ID\"\n    ],\n    \"44601\": [\n        \"Right_Tibial_Collateral_Ligament_44601_ID\"\n    ],\n    \"44602\": [\n        \"Left_Tibial_Collateral_Ligament_44602_ID\"\n    ],\n    \"44609\": [\n        \"Right_Fibular_Collateral_Ligament_44609_ID\"\n    ],\n    \"44610\": [\n        \"Left_Fibular_Collateral_Ligament_44610_ID\"\n    ],\n    \"44615\": [\n        \"Right_Anterior_Cruciate_Ligament_44615_ID\"\n    ],\n    \"44616\": [\n        \"Left_Anterior_Cruciate_Ligament_44616_ID\"\n    ],\n    \"44618\": [\n        \"Right_Posterior_Cruciate_Ligament_44618_ID\"\n    ],\n    \"44619\": [\n        \"Left_Posterior_Cruciate_Ligament_44619_ID\"\n    ],\n    \"44741\": [\n        \"Right_proper_plantar_digital_nerves_44741_ID\"\n    ],\n    \"44742\": [\n        \"Left_proper_plantar_digital_nerves_44742_ID\"\n    ],\n    \"44874\": [\n        \"Right_dorsal_branch_of_ulnar_nerve_44874_ID\"\n    ],\n    \"44875\": [\n        \"Left_dorsal_branch_of_ulnar_nerve_44875_ID\"\n    ],\n    \"44881\": [\n        \"Branch_of_Dorsal_venous_arch_of_Right_foot_44881_ID\",\n        \"Right_Dorsalis_pedis_vein_44881_ID\",\n        \"Dorsal_venous_arch_of_Right_foot_44881_ID\"\n    ],\n    \"44882\": [\n        \"Branch_of_Dorsal_venous_arch_of_Left_foot_44882_ID\",\n        \"Dorsal_venous_arch_of_Left_foot_44882_ID\",\n        \"Left_Dorsalis_pedis_vein_44882_ID\"\n    ],\n    \"44883\": [\n        \"Medial_branch_of_Plantar_venous_arch_of_right_foot_44883_ID\",\n        \"Plantar_venous_arch_of_Right_foot_44883_ID\",\n        \"Lateral_branch_of_Plantar_venous_arch_of_right_foot_44883_ID\"\n    ],\n    \"44884\": [\n        \"Medial_branch_of_Plantar_venous_arch_of_left_foot_44884_ID\",\n        \"Lateral_branch_of_Plantar_venous_arch_of_left_foot_44884_ID\",\n        \"Plantar_venous_arch_of_Left_foot_44884_ID\"\n    ],\n    \"44885\": [\n        \"Right_Fibular_vein_44885_ID\"\n    ],\n    \"44886\": [\n        \"Left_Fibular_vein_44886_ID\"\n    ],\n    \"44887\": [\n        \"Right_Superior_Medial_Genicular_vein_44887_ID\",\n        \"Right_Genicular_Veins_44887_ID\",\n        \"Right_Inferior_Medial_Genicular_Vein_44887_ID\",\n        \"Right_Superior_Lateral_Genicular_vein_44887_ID\",\n        \"Right_Inferior_Lateral_Genicular_Vein_44887_ID\"\n    ],\n    \"44888\": [\n        \"Left_Inferior_Lateral_Genicular_Vein_44888_ID\",\n        \"Left_Genicular_Veins_44888_ID\",\n        \"Left_Inferior_Medial_Genicular_Vein_44888_ID\",\n        \"Left_Superior_Medial_Genicular_vein_44888_ID\",\n        \"Left_Superior_Lateral_Genicular_vein_44888_ID\"\n    ],\n    \"44918\": [\n        \"Right_medial_circumflex_femoral_vein_44918_ID\"\n    ],\n    \"44919\": [\n        \"Left_medial_circumflex_femoral_vein_44919_ID\"\n    ],\n    \"44920\": [\n        \"Right_lateral_circumflex_femoral_vein_44920_ID\"\n    ],\n    \"44922\": [\n        \"Left_lateral_circumflex_femoral_vein_44922_ID\"\n    ],\n    \"45257\": [\n        \"Right_Intermediate_Femoral_Cutaneous_Nerve_45257_ID\"\n    ],\n    \"45258\": [\n        \"Left_Intermediate_Femoral_Cutaneous_Nerve_45258_ID\"\n    ],\n    \"45263\": [\n        \"Right_saphenous_nerve_45263_ID\"\n    ],\n    \"45264\": [\n        \"Left_saphenous_nerve_45264_ID\"\n    ],\n    \"45338\": [\n        \"Right_Posterior_femoral_cutaneous_nerve_45338_ID\"\n    ],\n    \"45339\": [\n        \"Left_Posterior_femoral_cutaneous_nerve_45339_ID\"\n    ],\n    \"45357\": [\n        \"Right_common_fibular_nerve_45357_ID\"\n    ],\n    \"45358\": [\n        \"Left_common_fibular_nerve_45358_ID\"\n    ],\n    \"45363\": [\n        \"Right_superficial_fibular_nerve_45363_ID\"\n    ],\n    \"45364\": [\n        \"Left_superficial_fibular_nerve_45364_ID\"\n    ],\n    \"45387\": [\n        \"Right_deep_fibular_nerve_45387_ID\"\n    ],\n    \"45388\": [\n        \"Left_deep_fibular_nerve_45388_ID\"\n    ],\n    \"45389\": [\n        \"Right_Lateral_terminal_branch_of_deep_fibular_nerve_45389_ID\"\n    ],\n    \"45390\": [\n        \"Left_Lateral_terminal_branch_of_deep_fibular_nerve_45390_ID\"\n    ],\n    \"45426\": [\n        \"Right_sural_nerve_45426_ID\"\n    ],\n    \"45427\": [\n        \"Left_sural_nerve_45427_ID\"\n    ],\n    \"45434\": [\n        \"Right_medial_proper_plantar_nerve_45434_ID\"\n    ],\n    \"45435\": [\n        \"Left_medial_proper_plantar_nerve_45435_ID\"\n    ],\n    \"45450\": [\n        \"Right_lateral_plantar_nerve_45450_ID\"\n    ],\n    \"45451\": [\n        \"Left_lateral_plantar_nerve_45451_ID\"\n    ],\n    \"45654\": [\n        \"Female_Internal_Genitalia_45654_ID\"\n    ],\n    \"45739\": [\n        \"Right_platysma_45739_ID\"\n    ],\n    \"45740\": [\n        \"Left_platysma_45740_ID\"\n    ],\n    \"45769\": [\n        \"Internal_Urethral_Sphincter_45769_ID\"\n    ],\n    \"45826\": [\n        \"Right_Stylohyoid_45826_ID\"\n    ],\n    \"45827\": [\n        \"Left_Stylohyoid_45827_ID\"\n    ],\n    \"45858\": [\n        \"Right_Iliococcygeus_45858_ID\"\n    ],\n    \"45859\": [\n        \"Left_Iliococcygeus_45859_ID\"\n    ],\n    \"45890\": [\n        \"Right_Biceps_Femoris_Short_Head_45890_ID\"\n    ],\n    \"45891\": [\n        \"Left_Biceps_Femoris_Short_Head_45891_ID\"\n    ],\n    \"46283\": [\n        \"Superior_oblique_part_of_right_longus_colli_46283_ID\"\n    ],\n    \"46284\": [\n        \"Superior_oblique_part_of_left_longus_colli_46284_ID\"\n    ],\n    \"46285\": [\n        \"Vertical_Intermediate_part_of_right_longus_colli_46285_ID\"\n    ],\n    \"46286\": [\n        \"Vertical_Intermediate_part_of_left_longus_colli_46286_ID\"\n    ],\n    \"46287\": [\n        \"Inferior_oblique_part_of_right_longus_colli_46287_ID\"\n    ],\n    \"46288\": [\n        \"Inferior_oblique_part_of_left_longus_colli_46288_ID\"\n    ],\n    \"46292\": [\n        \"Right_Digastric_46292_ID\",\n        \"Right_Digastric_muscle_46292_ID\"\n    ],\n    \"46293\": [\n        \"Left_Digastric_46293_ID\",\n        \"Left_Digastric_muscle_46293_ID\"\n    ],\n    \"46309\": [\n        \"Right_Longus_capitis_46309_ID\"\n    ],\n    \"46310\": [\n        \"Left_Longus_capitis_46310_ID\"\n    ],\n    \"46313\": [\n        \"Right_Rectus_capitis_anterior_46313_ID\"\n    ],\n    \"46314\": [\n        \"Left_Rectus_capitis_anterior_46314_ID\"\n    ],\n    \"46317\": [\n        \"Right_Rectus_capitis_lateralis_46317_ID\"\n    ],\n    \"46318\": [\n        \"Right_Rectus_capitis_lateralis_46318_ID\",\n        \"Left_Rectus_capitis_lateralis_46318_ID\"\n    ],\n    \"46319\": [\n        \"Left_Rectus_capitis_lateralis_46319_ID\"\n    ],\n    \"46321\": [\n        \"Right_Mylohyoid_muscle_46321_ID\",\n        \"Right_Mylohyoid_Muscle_46321_ID\"\n    ],\n    \"46322\": [\n        \"Left_Mylohyoid_46322_ID\",\n        \"Left_Mylohyoid_Muscle_46322_ID\"\n    ],\n    \"46326\": [\n        \"Right_Geniohyoid_46326_ID\"\n    ],\n    \"46327\": [\n        \"Left_Geniohyoid_46327_ID\"\n    ],\n    \"46443\": [\n        \"Right_Coccygeus_46443_ID\"\n    ],\n    \"46444\": [\n        \"Left_Coccygeus_46444_ID\"\n    ],\n    \"46563\": [\n        \"Vertical_part_of_left_cricothyroid_muscle_46563_ID\",\n        \"Right_Cricothyroid_muscle_46563_ID\",\n        \"Oblique_part_of_left_cricothyroid_muscle_46563_ID\"\n    ],\n    \"46564\": [\n        \"Vertical_part_of_left_cricothyroid_muscle_46564_ID\",\n        \"Left_Cricothyroid_muscle_46564_ID\",\n        \"Oblique_part_of_left_cricothyroid_muscle_46564_ID\"\n    ],\n    \"46621\": [\n        \"Superior_Pharyngeal_Constrictor_46621_ID\"\n    ],\n    \"46622\": [\n        \"Middle_Pharyngeal_Constrictor_46622_ID\"\n    ],\n    \"46623\": [\n        \"Inferior_Pharyngeal_Constrictor_46623_ID\"\n    ],\n    \"46690\": [\n        \"Genioglossus_46690_ID\"\n    ],\n    \"46703\": [\n        \"Right_Hyoglossus_46703_ID\"\n    ],\n    \"46704\": [\n        \"Left_Hyoglossus_46704_ID\"\n    ],\n    \"46705\": [\n        \"Right_Styloglossus_46705_ID\"\n    ],\n    \"46706\": [\n        \"Right_Styloglossus_46706_ID\",\n        \"Left_Styloglossus_46706_ID\"\n    ],\n    \"46759\": [\n        \"Right_frontalis_46759_ID\"\n    ],\n    \"46760\": [\n        \"Left_frontalis_46760_ID\"\n    ],\n    \"46761\": [\n        \"Right_occipitalis_46761_ID\"\n    ],\n    \"46762\": [\n        \"Left_occipitalis_46762_ID\"\n    ],\n    \"46768\": [\n        \"Epicranial_aponeurosis_46768_ID\"\n    ],\n    \"46777\": [\n        \"Depressor_septi_nasi_46777_ID\"\n    ],\n    \"46792\": [\n        \"Right_orbicularis_oculi_46792_ID\"\n    ],\n    \"46793\": [\n        \"Left_orbicularis_oculi_46793_ID\"\n    ],\n    \"46796\": [\n        \"Right_corrugator_supercilii_46796_ID\"\n    ],\n    \"46797\": [\n        \"Left_corrugator_supercilii_46797_ID\"\n    ],\n    \"46803\": [\n        \"Right_levator_labii_superioris_alaeque_nasi_46803_ID\"\n    ],\n    \"46804\": [\n        \"Left_levator_labii_superioris_alaeque_nasi_46804_ID\"\n    ],\n    \"46806\": [\n        \"Right_levator_labii_superioris_46806_ID\"\n    ],\n    \"46807\": [\n        \"Left_levator_labii_superioris_46807_ID\"\n    ],\n    \"46812\": [\n        \"Right_zygomaticus_major_46812_ID\"\n    ],\n    \"46813\": [\n        \"Left_zygomaticus_major_46813_ID\"\n    ],\n    \"46814\": [\n        \"Right_zygomaticus_minor_46814_ID\"\n    ],\n    \"46815\": [\n        \"Left_zygomaticus_minor_46815_ID\"\n    ],\n    \"46817\": [\n        \"Right_depressor_labii_inferioris_46817_ID\"\n    ],\n    \"46818\": [\n        \"Left_depressor_labii_inferioris_46818_ID\"\n    ],\n    \"46823\": [\n        \"Right_levator_anguli_oris_46823_ID\"\n    ],\n    \"46824\": [\n        \"Left_levator_anguli_oris_46824_ID\"\n    ],\n    \"46826\": [\n        \"Right_mentalis_46826_ID\"\n    ],\n    \"46827\": [\n        \"Left_mentalis_46827_ID\"\n    ],\n    \"46829\": [\n        \"Right_depressor_anguli_oris_46829_ID\"\n    ],\n    \"46830\": [\n        \"Left_depressor_anguli_oris_46830_ID\"\n    ],\n    \"46835\": [\n        \"Right_buccinator_46835_ID\"\n    ],\n    \"46836\": [\n        \"Left_buccinator_46836_ID\"\n    ],\n    \"46839\": [\n        \"Right_risorius_46839_ID\"\n    ],\n    \"46840\": [\n        \"Left_risorius_46840_ID\"\n    ],\n    \"46841\": [\n        \"Orbicularis_oris_46841_ID\"\n    ],\n    \"48025\": [\n        \"Left_Tendon_of_Digastric_48025_ID\",\n        \"Right_Tendon_of_Digastric_48025_ID\",\n        \"Right_Tendon_of_Digastric_Muscle_48025_ID\",\n        \"Left_Tendon_of_Digastric_Muscle_48025_ID\"\n    ],\n    \"48957\": [\n        \"Right_auricularis_superior_48957_ID\"\n    ],\n    \"48958\": [\n        \"Left_auricularis_superior_48958_ID\"\n    ],\n    \"48959\": [\n        \"Right_auricularis_anterior_48959_ID\"\n    ],\n    \"48960\": [\n        \"Left_auricularis_anterior_48960_ID\"\n    ],\n    \"48961\": [\n        \"Right_auricularis_posterior_48961_ID\"\n    ],\n    \"48962\": [\n        \"Left_auricularis_posterior_48962_ID\"\n    ],\n    \"48997\": [\n        \"Right_masseter_48997_ID\"\n    ],\n    \"48998\": [\n        \"Left_masseter_48998_ID\"\n    ],\n    \"49007\": [\n        \"Right_temporalis_49007_ID\"\n    ],\n    \"49008\": [\n        \"Left_temporalis_49008_ID\"\n    ],\n    \"49012\": [\n        \"Right_Medial_Pterygoid_49012_ID\"\n    ],\n    \"49013\": [\n        \"Left_Medial_Pterygoid_49013_ID\"\n    ],\n    \"49016\": [\n        \"Right_inferior_lateral_pterygoid_49016_ID\",\n        \"Right_superior_lateral_pterygoid_49016_ID\"\n    ],\n    \"49017\": [\n        \"Left_superior_lateral_pterygoid_49017_ID\",\n        \"Left_inferior_lateral_pterygoid_49017_ID\"\n    ],\n    \"49036\": [\n        \"Left_inferior_rectus_49036_ID\"\n    ],\n    \"49044\": [\n        \"Right_superior_rectus_49044_ID\"\n    ],\n    \"49045\": [\n        \"Left_superior_rectus_49045_ID\"\n    ],\n    \"49046\": [\n        \"Right_inferior_rectus_49046_ID\"\n    ],\n    \"49047\": [\n        \"Left_inferior_rectus_49047_ID\"\n    ],\n    \"49048\": [\n        \"Right_levator_palpebrae_superioris_49048_ID\"\n    ],\n    \"49049\": [\n        \"Left_levator_palpebrae_superioris_49049_ID\"\n    ],\n    \"49050\": [\n        \"Right_inferior_oblique_49050_ID\"\n    ],\n    \"49051\": [\n        \"Left_inferior_oblique_49051_ID\"\n    ],\n    \"49052\": [\n        \"Right_superior_oblique_49052_ID\"\n    ],\n    \"49053\": [\n        \"Left_superior_oblique_49053_ID\"\n    ],\n    \"49054\": [\n        \"Right_lateral_rectus_49054_ID\"\n    ],\n    \"49055\": [\n        \"Left_lateral_rectus_49055_ID\"\n    ],\n    \"49056\": [\n        \"Right_medial_rectus_49056_ID\"\n    ],\n    \"49057\": [\n        \"Left_medial_rectus_49057_ID\"\n    ],\n    \"49152\": [\n        \"Right_Ciliary_Muscle_49152_ID\"\n    ],\n    \"49153\": [\n        \"Left_Ciliary_Muscle_49153_ID\"\n    ],\n    \"49177\": [\n        \"Upper_Gastrointestinal_Tract_49177_ID\"\n    ],\n    \"49386\": [\n        \"Right_Inferior_extensor_retinaculum_49386_ID\",\n        \"Left_Inferior_extensor_retinaculum_49386_ID\"\n    ],\n    \"49388\": [\n        \"Right_Superior_extensor_retinaculum_49388_ID\",\n        \"Left_Superior_extensor_retinaculum_49388_ID\"\n    ],\n    \"49481\": [\n        \"Right_superior_laryngeal_artery_49481_ID\"\n    ],\n    \"49482\": [\n        \"Left_superior_laryngeal_artery_49482_ID\"\n    ],\n    \"49486\": [\n        \"Right_superior_thyroid_artery_49486_ID\"\n    ],\n    \"49487\": [\n        \"Left_superior_thyroid_artery_49487_ID\"\n    ],\n    \"49498\": [\n        \"Right_ascending_pharyngeal_artery_49498_ID\"\n    ],\n    \"49499\": [\n        \"Left_ascending_pharyngeal_artery_49499_ID\"\n    ],\n    \"49550\": [\n        \"Right_facial_artery_49550_ID\"\n    ],\n    \"49551\": [\n        \"Left_facial_artery_49551_ID\",\n        \"Right_facial_artery_49551_ID\"\n    ],\n    \"49552\": [\n        \"Left_facial_artery_49552_ID\"\n    ],\n    \"49556\": [\n        \"Right_ascending_palatine_artery_49556_ID\"\n    ],\n    \"49557\": [\n        \"Left_ascending_palatine_artery_49557_ID\"\n    ],\n    \"49559\": [\n        \"Right_tonsillar_artery_49559_ID\"\n    ],\n    \"49560\": [\n        \"Left_tonsillar_artery_49560_ID\"\n    ],\n    \"49561\": [\n        \"Right_tonsillar_artery_49561_ID\"\n    ],\n    \"49567\": [\n        \"Inferior_labial_artery_49567_ID\"\n    ],\n    \"49570\": [\n        \"Superior_labial_artery_49570_ID\"\n    ],\n    \"49584\": [\n        \"Right_angular_artery_49584_ID\"\n    ],\n    \"49585\": [\n        \"Left_angular_artery_49585_ID\"\n    ],\n    \"49625\": [\n        \"Right_posterior_auricular_artery_49625_ID\"\n    ],\n    \"49626\": [\n        \"Left_posterior_auricular_artery_49626_ID\"\n    ],\n    \"49651\": [\n        \"Right_superficial_temporal_artery_49651_ID\"\n    ],\n    \"49652\": [\n        \"Left_superficial_temporal_artery_49652_ID\"\n    ],\n    \"49658\": [\n        \"Right_transverse_facial_artery_49658_ID\"\n    ],\n    \"49659\": [\n        \"Left_transverse_facial_artery_49659_ID\"\n    ],\n    \"49660\": [\n        \"Right_transverse_facial_artery_49660_ID\"\n    ],\n    \"49676\": [\n        \"Right_maxillary_artery_49676_ID\"\n    ],\n    \"49677\": [\n        \"Left_maxillary_artery_49677_ID\"\n    ],\n    \"49678\": [\n        \"Right_maxillary_artery_49678_ID\"\n    ],\n    \"49705\": [\n        \"Right_mental_artery_49705_ID\",\n        \"branch_of_right_mental_artery_49705_ID\"\n    ],\n    \"49706\": [\n        \"Left_mental_artery_49706_ID\",\n        \"branch_of_left_mental_artery_49706_ID\"\n    ],\n    \"49712\": [\n        \"Right_middle_meningeal_artery_49712_ID\"\n    ],\n    \"49713\": [\n        \"Left_middle_meningeal_artery_49713_ID\"\n    ],\n    \"49743\": [\n        \"Right_deep_temporal_artery_49743_ID\"\n    ],\n    \"49744\": [\n        \"Left_deep_temporal_artery_49744_ID\"\n    ],\n    \"49755\": [\n        \"Right_buccal_artery_49755_ID\"\n    ],\n    \"49756\": [\n        \"Left_buccal_artery_49756_ID\"\n    ],\n    \"49768\": [\n        \"Right_infraorbital_artery_49768_ID\"\n    ],\n    \"49769\": [\n        \"Left_infraorbital_artery_49769_ID\"\n    ],\n    \"49792\": [\n        \"Right_descending_palatine_artery_49792_ID\"\n    ],\n    \"49793\": [\n        \"Left_descending_palatine_artery_49793_ID\"\n    ],\n    \"49799\": [\n        \"Left_greater_palatine_artery_49799_ID\"\n    ],\n    \"49800\": [\n        \"Right_greater_palatine_artery_49800_ID\"\n    ],\n    \"49802\": [\n        \"Right_lesser_palatine_artery_49802_ID\"\n    ],\n    \"49803\": [\n        \"Left_lesser_palatine_artery_49803_ID\"\n    ],\n    \"49805\": [\n        \"Right_sphenopalatine_artery_49805_ID\"\n    ],\n    \"49806\": [\n        \"Left_sphenopalatine_artery_49806_ID\"\n    ],\n    \"49810\": [\n        \"Right_posterior_lateral_nasal_artery_49810_ID\"\n    ],\n    \"49811\": [\n        \"Left_posterior_lateral_nasal_artery_49811_ID\"\n    ],\n    \"49812\": [\n        \"Posterior_septal_branch_of_right_sphenopalatine_artery_49812_ID\"\n    ],\n    \"49813\": [\n        \"Posterior_septal_branch_of_left_sphenopalatine_artery_49813_ID\"\n    ],\n    \"49869\": [\n        \"Right_opthalmic_artery_49869_ID\",\n        \"Right_ophthalmic_artery_49869_ID\"\n    ],\n    \"49870\": [\n        \"Left_opthalmic_artery_49870_ID\",\n        \"Left_ophthalmic_artery_49870_ID\"\n    ],\n    \"49881\": [\n        \"Right_central_retinal_artery_49881_ID\",\n        \"Left_central_retinal_artery_49881_ID\"\n    ],\n    \"49911\": [\n        \"Right_Inferior_Pulmonary_vein_49911_ID\"\n    ],\n    \"49913\": [\n        \"Left_Inferior_Pulmonary_vein_49913_ID\"\n    ],\n    \"49914\": [\n        \"Right_Superior_Pulmonary_vein_49914_ID\"\n    ],\n    \"49916\": [\n        \"Left_Superior_Pulmonary_vein_49916_ID\"\n    ],\n    \"49928\": [\n        \"Right_lacrimal_artery_49928_ID\"\n    ],\n    \"49929\": [\n        \"Left_lacrimal_artery_49929_ID\"\n    ],\n    \"49974\": [\n        \"Right_supraorbital_artery_49974_ID\"\n    ],\n    \"49975\": [\n        \"Left_supraorbital_artery_49975_ID\"\n    ],\n    \"49987\": [\n        \"Right_anterior_ethmoidal_artery_49987_ID\"\n    ],\n    \"49988\": [\n        \"Left_anterior_ethmoidal_artery_49988_ID\"\n    ],\n    \"49990\": [\n        \"Right_posterior_ethmoidal_artery_49990_ID\"\n    ],\n    \"49991\": [\n        \"Left_posterior_ethmoidal_artery_49991_ID\"\n    ],\n    \"50001\": [\n        \"Right_dorsal_nasal_artery_50001_ID\"\n    ],\n    \"50002\": [\n        \"Left_dorsal_nasal_artery_50002_ID\"\n    ],\n    \"50026\": [\n        \"Right_supratrochlear_artery_50026_ID\"\n    ],\n    \"50027\": [\n        \"Left_supratrochlear_artery_50027_ID\",\n        \"Right_supratrochlear_artery_50027_ID\"\n    ],\n    \"50028\": [\n        \"Left_supratrochlear_artery_50028_ID\"\n    ],\n    \"50029\": [\n        \"Right_anterior_cerebral_artery_50029_ID\"\n    ],\n    \"50030\": [\n        \"Left_anterior_cerebral_artery_50030_ID\"\n    ],\n    \"50031\": [\n        \"Left_anterior_cerebral_artery_50031_ID\"\n    ],\n    \"50038\": [\n        \"Left_coronary_artery_50038_ID\"\n    ],\n    \"50039\": [\n        \"Right_Coronary_Artery_50039_ID\"\n    ],\n    \"50082\": [\n        \"Right_Middle_Cerebral_Artery_50082_ID\"\n    ],\n    \"50083\": [\n        \"Left_Middle_Cerebral_Artery_50083_ID\"\n    ],\n    \"50085\": [\n        \"Right_Posterior_Communicating_Artery_50085_ID\"\n    ],\n    \"50086\": [\n        \"Left_Posterior_Communicating_Artery_50086_ID\"\n    ],\n    \"50169\": [\n        \"Anterior_Communicating_Artery_50169_ID\"\n    ],\n    \"50197\": [\n        \"Muscles_of_the_Right_Arm_50197_ID\"\n    ],\n    \"50198\": [\n        \"Muscles_of_the_Right_Arm_50198_ID\",\n        \"Muscles_of_the_Left_Arm_50198_ID\"\n    ],\n    \"50203\": [\n        \"Right_upper_arm_muscles_50203_ID\"\n    ],\n    \"50204\": [\n        \"Right_upper_arm_muscles_50204_ID\",\n        \"Left_upper_arm_muscles_50204_ID\"\n    ],\n    \"50221\": [\n        \"Right_shoulder_muscles_50221_ID\",\n        \"Left_shoulder_muscles_50221_ID\"\n    ],\n    \"50222\": [\n        \"Left_shoulder_muscles_50222_ID\",\n        \"Right_shoulder_muscles_50222_ID\"\n    ],\n    \"50542\": [\n        \"Basilar_Artery_50542_ID\"\n    ],\n    \"50545\": [\n        \"Right_Anterior_Inferior_cerebellar_artery_50545_ID\",\n        \"Right_anterior_Inferior_cerebellar_artery_50545_ID\"\n    ],\n    \"50546\": [\n        \"Left_Anterior_Inferior_cerebellar_artery_50546_ID\",\n        \"Left_anterior_Inferior_cerebellar_artery_50546_ID\"\n    ],\n    \"50574\": [\n        \"Right_Superior_Cerebellar_artery_50574_ID\"\n    ],\n    \"50575\": [\n        \"Left_Superior_Cerebellar_Artery_50575_ID\",\n        \"Left_Superior_Cerebellar_artery_50575_ID\"\n    ],\n    \"50584\": [\n        \"Right_Posterior_cerebral_artery_50584_ID\",\n        \"Right_posterior_cerebral_artery_50584_ID\"\n    ],\n    \"50585\": [\n        \"Left_Posterior_cerebral_artery_50585_ID\",\n        \"Left_posterior_cerebral_artery_50585_ID\"\n    ],\n    \"50718\": [\n        \"Superior_Terminal_Branch_of_Right_Middle_Cerebral_Artery_50718_ID\"\n    ],\n    \"50719\": [\n        \"Superior_Terminal_Branch_of_Left_Middle_Cerebral_Artery_50719_ID\"\n    ],\n    \"50735\": [\n        \"Hepatic_Portal_and_Associated_Branches_50735_ID\"\n    ],\n    \"50764\": [\n        \"Right_transverse_sinus_50764_ID\"\n    ],\n    \"50765\": [\n        \"Left_transverse_sinus_50765_ID\"\n    ],\n    \"50767\": [\n        \"Superior_sagittal_sinus_50767_ID\"\n    ],\n    \"50768\": [\n        \"Inferior_Sagittal_Sinus_50768_ID\"\n    ],\n    \"50769\": [\n        \"Straight_Sinus_50769_ID\"\n    ],\n    \"50773\": [\n        \"Intercavernous_sinus_50773_ID\"\n    ],\n    \"50781\": [\n        \"Occipital_Sinus_50781_ID\"\n    ],\n    \"50784\": [\n        \"Sinus_Confluence_50784_ID\"\n    ],\n    \"50808\": [\n        \"Right_superior_thyroid_vein_50808_ID\"\n    ],\n    \"50809\": [\n        \"Left_superior_thyroid_vein_50809_ID\"\n    ],\n    \"50852\": [\n        \"Right_posterior_auricular_vein_50852_ID\"\n    ],\n    \"50853\": [\n        \"Left_posterior_auricular_vein_50853_ID\"\n    ],\n    \"50859\": [\n        \"Right_suprascapular_vein_50859_ID\"\n    ],\n    \"50860\": [\n        \"Left_suprascapular_vein_50860_ID\",\n        \"Right_suprascapular_vein_50860_ID\"\n    ],\n    \"50872\": [\n        \"Right_Pulmonary_artery_50872_ID\"\n    ],\n    \"50873\": [\n        \"Left_Pulmonary_artery_50873_ID\"\n    ],\n    \"50875\": [\n        \"Right_optic_nerve_50875_ID\"\n    ],\n    \"50876\": [\n        \"Left_Facial_Vein_50876_ID\",\n        \"Right_Facial_Vein_50876_ID\"\n    ],\n    \"50877\": [\n        \"Right_Facial_Vein_50877_ID\",\n        \"Left_Facial_Vein_50877_ID\"\n    ],\n    \"50878\": [\n        \"Left_optic_nerve_50878_ID\"\n    ],\n    \"50879\": [\n        \"Right_oculomotor_nerve_50879_ID\"\n    ],\n    \"50880\": [\n        \"Left_oculomotor_nerve_50880_ID\"\n    ],\n    \"50881\": [\n        \"Right_trochlear_nerve_50881_ID\"\n    ],\n    \"50882\": [\n        \"Left_trochlear_nerve_50882_ID\"\n    ],\n    \"50886\": [\n        \"Right_abducens_nerve_50886_ID\"\n    ],\n    \"50887\": [\n        \"Left_abducens_nerve_50887_ID\"\n    ],\n    \"50888\": [\n        \"Right_facial_nerve_50888_ID\"\n    ],\n    \"50889\": [\n        \"Left_facial_nerve_50889_ID\"\n    ],\n    \"50890\": [\n        \"Right_vestibulocochlear_nerve_50890_ID\"\n    ],\n    \"50891\": [\n        \"Left_vestibulocochlear_nerve_50891_ID\"\n    ],\n    \"50892\": [\n        \"Right_glossopharyngeal_nerve_50892_ID\"\n    ],\n    \"50894\": [\n        \"Left_glossopharyngeal_nerve_50894_ID\"\n    ],\n    \"50897\": [\n        \"Right_spinal_accessory_nerve_50897_ID\",\n        \"Left_spinal_accessory_nerve_50897_ID\"\n    ],\n    \"50899\": [\n        \"Left_spinal_accessory_nerve_50899_ID\"\n    ],\n    \"50902\": [\n        \"Right_hypoglossal_nerve_50902_ID\"\n    ],\n    \"50903\": [\n        \"Left_hypoglossal_Nerve_50903_ID\"\n    ],\n    \"50929\": [\n        \"Right_retromandibular_vein_50929_ID\"\n    ],\n    \"50930\": [\n        \"Left_retromandibular_vein_50930_ID\"\n    ],\n    \"50933\": [\n        \"Right_Superficial_Temporal_Vein_50933_ID\"\n    ],\n    \"50934\": [\n        \"Left_Superficial_Temporal_Vein_50934_ID\"\n    ],\n    \"51042\": [\n        \"Right_Deep_Femoral_vein_51042_ID\"\n    ],\n    \"51043\": [\n        \"Left_Deep_Femoral_vein_51043_ID\"\n    ],\n    \"51085\": [\n        \"Tendon_of_left_flexor_digitorum_brevis_51085_ID\",\n        \"Tendon_of_right_flexor_digitorum_brevis_51085_ID\",\n        \"Right_flexor_digitorum_longus_51085_ID\",\n        \"Left_flexor_digitorum_longus_51085_ID\"\n    ],\n    \"51289\": [\n        \"Right_superior_petrosal_sinus_51289_ID\"\n    ],\n    \"51290\": [\n        \"Left_superior_petrosal_sinus_51290_ID\"\n    ],\n    \"51402\": [\n        \"Right_Cavernous_sinus_51402_ID\"\n    ],\n    \"51403\": [\n        \"Left_Cavernous_Sinus_51403_ID\"\n    ],\n    \"51489\": [\n        \"Right_occipital_vein_51489_ID\"\n    ],\n    \"51490\": [\n        \"Left_occipital_vein_51490_ID\"\n    ],\n    \"51885\": [\n        \"Left_central_retinal_vein_51885_ID\",\n        \"Right_central_retinal_vein_51885_ID\"\n    ],\n    \"51942\": [\n        \"Right_superior_central_retinal_artery_51942_ID\",\n        \"Left_superior_central_retinal_artery_51942_ID\"\n    ],\n    \"51944\": [\n        \"Right_inferior_central_retinal_artery_51944_ID\",\n        \"Left_inferior_central_retinal_artery_51944_ID\"\n    ],\n    \"52619\": [\n        \"Right_trigeminal_ganglion_52619_ID\"\n    ],\n    \"52620\": [\n        \"Left_trigeminal_ganglion_52620_ID\"\n    ],\n    \"52629\": [\n        \"Right_lacrimal_nerve_52629_ID\"\n    ],\n    \"52630\": [\n        \"Left_lacrimal_nerve_52630_ID\"\n    ],\n    \"52639\": [\n        \"Right_opthalmic_nerve_52639_ID\"\n    ],\n    \"52640\": [\n        \"Left_opthalmic_nerve_52640_ID\"\n    ],\n    \"52643\": [\n        \"Right_supratrochlear_nerve_52643_ID\"\n    ],\n    \"52644\": [\n        \"Left_supratrochlear_nerve_52644_ID\"\n    ],\n    \"52661\": [\n        \"Medial_branch_of_right_supraorbital_nerve_52661_ID\"\n    ],\n    \"52662\": [\n        \"Medial_branch_of_left_supraorbital_nerve_52662_ID\"\n    ],\n    \"52663\": [\n        \"Lateral_branch_of_right_supraorbital_nerve_52663_ID\"\n    ],\n    \"52664\": [\n        \"Lateral_branch_of_left_supraorbital_nerve_52664_ID\"\n    ],\n    \"52669\": [\n        \"Right_nasociliary_nerve_52669_ID\"\n    ],\n    \"52670\": [\n        \"Left_nasociliary_nerve_52670_ID\"\n    ],\n    \"52725\": [\n        \"Right_maxillary_nerve_52725_ID\"\n    ],\n    \"52726\": [\n        \"Left_maxillary_nerve_52726_ID\"\n    ],\n    \"52734\": [\n        \"Frontal_bone_52734_ID\"\n    ],\n    \"52735\": [\n        \"Occipital_bone_52735_ID\"\n    ],\n    \"52736\": [\n        \"Sphenoid_bone_52736_ID\"\n    ],\n    \"52738\": [\n        \"Right_temporal_bone_52738_ID\"\n    ],\n    \"52739\": [\n        \"Left_temporal_bone_52739_ID\"\n    ],\n    \"52740\": [\n        \"Ethmoid_bone_52740_ID\"\n    ],\n    \"52745\": [\n        \"Nasal_bone_52745_ID\"\n    ],\n    \"52746\": [\n        \"Palatine_bone_52746_ID\"\n    ],\n    \"52748\": [\n        \"Mandible_52748_ID\"\n    ],\n    \"52749\": [\n        \"Hyoid_bone_52749_ID\"\n    ],\n    \"52784\": [\n        \"Left_lateral_posterior_superior_nasal_nerve_52784_ID\"\n    ],\n    \"52785\": [\n        \"Right_lateral_posterior_superior_nasal_nerve_52785_ID\"\n    ],\n    \"52788\": [\n        \"Right_parietal_bone_52788_ID\"\n    ],\n    \"52789\": [\n        \"Left_parietal_bone_52789_ID\"\n    ],\n    \"52803\": [\n        \"Right_greater_palatine_nerve_52803_ID\"\n    ],\n    \"52804\": [\n        \"Left_greater_palatine_nerve_52804_ID\"\n    ],\n    \"52806\": [\n        \"Right_lesser_palatine_nerve_52806_ID\"\n    ],\n    \"52807\": [\n        \"Left_lesser_palatine_nerve_52807_ID\"\n    ],\n    \"52824\": [\n        \"Left_posterior_inferior_nasal_nerve_52824_ID\"\n    ],\n    \"52825\": [\n        \"Right_posterior_inferior_nasal_nerve_52825_ID\"\n    ],\n    \"52892\": [\n        \"Right_zygomatic_bone_52892_ID\"\n    ],\n    \"52893\": [\n        \"Left_zygomatic_bone_52893_ID\"\n    ],\n    \"52974\": [\n        \"Zygomaticotemporal_branch_of_right_zygomatic_nerve_52974_ID\"\n    ],\n    \"52975\": [\n        \"Zygomaticotemporal_branch_of_left_zygomatic_nerve_52975_ID\"\n    ],\n    \"52976\": [\n        \"Zygomaticofacial_branch_of_right_zygomatic_nerve_52976_ID\"\n    ],\n    \"52977\": [\n        \"Zygomaticotemporal_branch_of_right_zygomatic_nerve_52977_ID\",\n        \"Zygomaticofacial_branch_of_left_zygomatic_nerve_52977_ID\"\n    ],\n    \"52978\": [\n        \"Zygomaticotemporal_branch_of_left_zygomatic_nerve_52978_ID\"\n    ],\n    \"52979\": [\n        \"Right_infraorbital_nerve_52979_ID\"\n    ],\n    \"52980\": [\n        \"Left_infra_orbital_nerve_52980_ID\",\n        \"Left_infraorbital_nerve_52980_ID\"\n    ],\n    \"52997\": [\n        \"Right_Mandibular_Nerve_52997_ID\"\n    ],\n    \"52998\": [\n        \"Left_Mandibular_Nerve_52998_ID\"\n    ],\n    \"53001\": [\n        \"Right_auriculotemporal_nerve_53001_ID\"\n    ],\n    \"53002\": [\n        \"Left_auriculotemporal_nerve_53002_ID\"\n    ],\n    \"53069\": [\n        \"Right_pterygopalatine_ganglion_53069_ID\"\n    ],\n    \"53070\": [\n        \"Left_pterygopalatine_ganglion_53070_ID\"\n    ],\n    \"53121\": [\n        \"Right_zygomatic_bone_53121_ID\"\n    ],\n    \"53122\": [\n        \"Left_zygomatic_bone_53122_ID\"\n    ],\n    \"53185\": [\n        \"Buccal_branch_of_right_facial_nerve_53185_ID\",\n        \"Buccal_branch_of_Right_Facial_Nerve_53185_ID\"\n    ],\n    \"53186\": [\n        \"Buccal_branch_of_Left_Facial_Nerve_53186_ID\"\n    ],\n    \"53219\": [\n        \"Right_lingual_nerve_53219_ID\"\n    ],\n    \"53220\": [\n        \"Left_lingual_nerve_53220_ID\"\n    ],\n    \"53244\": [\n        \"Right_Inferior_Alveolar_Nerve_53244_ID\"\n    ],\n    \"53245\": [\n        \"Left_Inferior_Alveolar_Nerve_53245_ID\"\n    ],\n    \"53251\": [\n        \"Right_mental_nerve_53251_ID\",\n        \"Left_mental_nerve_53251_ID\"\n    ],\n    \"53252\": [\n        \"Left_mental_nerve_53252_ID\"\n    ],\n    \"53279\": [\n        \"Right_posterior_auricular_nerve_53279_ID\"\n    ],\n    \"53280\": [\n        \"Left_posterior_auricular_nerve_53280_ID\"\n    ],\n    \"53290\": [\n        \"Temporal_branch_of_the_right_facial_nerve_53290_ID\"\n    ],\n    \"53291\": [\n        \"Temporal_branch_of_the_left_facial_nerve_53291_ID\",\n        \"Temporal_branch_of_the_right_facial_nerve_53291_ID\"\n    ],\n    \"53366\": [\n        \"Marginal_mandibular_branch_of_right_facial_nerve_53366_ID\"\n    ],\n    \"53367\": [\n        \"Marginal_mandibular_branch_of_left_facial_nerve_53367_ID\"\n    ],\n    \"53398\": [\n        \"Cervical_branch_of_right_facial_nerve_53398_ID\"\n    ],\n    \"53399\": [\n        \"Cervical_branch_of_left_facial_nerve_53399_ID\"\n    ],\n    \"53549\": [\n        \"Right_ciliary_ganglion_53549_ID\"\n    ],\n    \"53550\": [\n        \"Left_ciliary_ganglion_53550_ID\"\n    ],\n    \"53641\": [\n        \"Right_ear_53641_ID\"\n    ],\n    \"53642\": [\n        \"Left_ear_53642_ID\"\n    ],\n    \"53643\": [\n        \"Left_ear_53643_ID\"\n    ],\n    \"53645\": [\n        \"Right_Lacrimal_Bone_53645_ID\"\n    ],\n    \"53646\": [\n        \"Left_lacrimal_bone_53646_ID\"\n    ],\n    \"53654\": [\n        \"Palatine_bone_53654_ID\"\n    ],\n    \"54375\": [\n        \"Nasal_septum_54375_ID\"\n    ],\n    \"54449\": [\n        \"Right_eye_54449_ID\"\n    ],\n    \"54450\": [\n        \"Left_eye_54450_ID\"\n    ],\n    \"54640\": [\n        \"Tongue_54640_ID\"\n    ],\n    \"55099\": [\n        \"Thyroid_Cartilage_55099_ID\"\n    ],\n    \"55123\": [\n        \"Lower_part_of_cricopharyngeus_55123_ID\"\n    ],\n    \"55132\": [\n        \"Thyrohyoid_Membrane_55132_ID\"\n    ],\n    \"55143\": [\n        \"Right_ansa_cervicalis_nerve_55143_ID\"\n    ],\n    \"55144\": [\n        \"left_ansa_cervicalis_nerve_55144_ID\"\n    ],\n    \"55145\": [\n        \"Right_ansa_cervicalis_nerve_55145_ID\"\n    ],\n    \"55233\": [\n        \"Cricothyroid_ligament_55233_ID\"\n    ],\n    \"55560\": [\n        \"Right_Superior_Parathyroid_55560_ID\"\n    ],\n    \"55561\": [\n        \"Left_Superior_Parathyroid_55561_ID\"\n    ],\n    \"55562\": [\n        \"Right_Inferior_Parathyroid_55562_ID\"\n    ],\n    \"55563\": [\n        \"Left_Inferior_Parathyroid_55563_ID\"\n    ],\n    \"55610\": [\n        \"Right_procerus_55610_ID\"\n    ],\n    \"55611\": [\n        \"Left_procerus_55611_ID\"\n    ],\n    \"55612\": [\n        \"Transverse_part_of_right_nasalis_55612_ID\"\n    ],\n    \"55613\": [\n        \"Transverse_part_of_left_nasalis_55613_ID\"\n    ],\n    \"55614\": [\n        \"Alar_part_of_right_nasalis_55614_ID\"\n    ],\n    \"55615\": [\n        \"Alar_part_of_left_nasalis_55615_ID\"\n    ],\n    \"56103\": [\n        \"Right_Internal_acoustic_meatus_56103_ID\"\n    ],\n    \"56104\": [\n        \"Left_Internal_acoustic_meatus_56104_ID\"\n    ],\n    \"56427\": [\n        \"Right_tympanic_membrane_56427_ID\"\n    ],\n    \"56428\": [\n        \"Left_tympanic_membrane_56428_ID\"\n    ],\n    \"58236\": [\n        \"Right_Iris_58236_ID\"\n    ],\n    \"58237\": [\n        \"Left_Iris_58237_ID\"\n    ],\n    \"58242\": [\n        \"Right_Lens_58242_ID\"\n    ],\n    \"58243\": [\n        \"Left_Lens_58243_ID\"\n    ],\n    \"58271\": [\n        \"Right_Sclera_58271_ID\"\n    ],\n    \"58272\": [\n        \"Left_Sclera_58272_ID\"\n    ],\n    \"58299\": [\n        \"Right_Choroid_58299_ID\"\n    ],\n    \"58300\": [\n        \"Left_Choroid_58300_ID\"\n    ],\n    \"58302\": [\n        \"Right_Retina_58302_ID\"\n    ],\n    \"58303\": [\n        \"Left_Retina_58303_ID\"\n    ],\n    \"58841\": [\n        \"Right_Hyaloid_Canal_58841_ID\"\n    ],\n    \"58842\": [\n        \"Left_Hyaloid_Canal_58842_ID\"\n    ],\n    \"59102\": [\n        \"Right_lacrimal_gland_59102_ID\"\n    ],\n    \"59103\": [\n        \"Left_lacrimal_gland_59103_ID\"\n    ],\n    \"59505\": [\n        \"Right_major_alar_cartilage_59505_ID\"\n    ],\n    \"59506\": [\n        \"Left_major_alar_cartilage_59506_ID\"\n    ],\n    \"59512\": [\n        \"Right_lateral_nasal_cartilage_59512_ID\"\n    ],\n    \"59513\": [\n        \"Left_lateral_nasal_cartilage_59513_ID\"\n    ],\n    \"59545\": [\n        \"Right_lacrimal_sac_59545_ID\"\n    ],\n    \"59546\": [\n        \"Left_lacrimal_sac_59546_ID\"\n    ],\n    \"59797\": [\n        \"Left_Parotid_Gland_59797_ID\",\n        \"Right_Parotid_Gland_59797_ID\"\n    ],\n    \"59798\": [\n        \"Right_Parotid_Gland_59798_ID\",\n        \"Left_Parotid_Gland_59798_ID\"\n    ],\n    \"59802\": [\n        \"Right_Submandibular_Gland_59802_ID\"\n    ],\n    \"59803\": [\n        \"Left_Submandibular_Gland_59803_ID\"\n    ],\n    \"59804\": [\n        \"Right_Sublingual_Gland_59804_ID\"\n    ],\n    \"59805\": [\n        \"Left_Sublingual_Gland_59805_ID\"\n    ],\n    \"59866\": [\n        \"Right_Parotid_Duct_59866_ID\"\n    ],\n    \"59867\": [\n        \"Left_Parotid_Duct_59867_ID\"\n    ],\n    \"59964\": [\n        \"Right_Submandibular_Duct_59964_ID\"\n    ],\n    \"59965\": [\n        \"Left_Submandibular_Duct_59965_ID\"\n    ],\n    \"60180\": [\n        \"Right_osseous_labyrinth_60180_ID\"\n    ],\n    \"60181\": [\n        \"Left_osseous_labyrinth_60181_ID\"\n    ],\n    \"60188\": [\n        \"Right_Anterior_semicircular_canal_60188_ID\"\n    ],\n    \"60189\": [\n        \"Left_Anterior_semicircular_canal_60189_ID\"\n    ],\n    \"60191\": [\n        \"Right_Posterior_semicircular_canal_60191_ID\"\n    ],\n    \"60192\": [\n        \"Left_Posterior_semicircular_canal_60192_ID\"\n    ],\n    \"60194\": [\n        \"Right_Lateral_semicircular_canal_60194_ID\"\n    ],\n    \"60195\": [\n        \"Left_Lateral_semicircular_canal_60195_ID\"\n    ],\n    \"60202\": [\n        \"Right_Cochlea_60202_ID\"\n    ],\n    \"60203\": [\n        \"Left_Cochlea_60203_ID\"\n    ],\n    \"61020\": [\n        \"Right_Internal_Ear_61020_ID\"\n    ],\n    \"61021\": [\n        \"Left_Internal_Ear_61021_ID\"\n    ],\n    \"61735\": [\n        \"Right_external_acoustic_tube_61735_ID\"\n    ],\n    \"61736\": [\n        \"Left_external_acoustic_tube_61736_ID\"\n    ],\n    \"61965\": [\n        \"fornix_61965_ID\"\n    ],\n    \"62008\": [\n        \"hypothalamus_62008_ID\"\n    ],\n    \"62033\": [\n        \"Pineal_Gland_62033_ID\"\n    ],\n    \"62045\": [\n        \"optic_chiasm_62045_ID\"\n    ],\n    \"64919\": [\n        \"Right_Iliopsoas_64919_ID\"\n    ],\n    \"64920\": [\n        \"Left_Iliopsoas_64920_ID\"\n    ],\n    \"65015\": [\n        \"Left_Flexor_hallucis_longus_65015_ID\",\n        \"Right_Flexor_hallucis_longus_65015_ID\"\n    ],\n    \"65019\": [\n        \"Left_Tibialis_posterior_65019_ID\",\n        \"Right_Tibialis_posterior_65019_ID\"\n    ],\n    \"65281\": [\n        \"Right_long_thoracic_nerve_65281_ID\"\n    ],\n    \"65282\": [\n        \"Left_long_thoracic_nerve_65282_ID\"\n    ],\n    \"65536\": [\n        \"Right_lumbosacral_trunk_nerve_65536_ID\"\n    ],\n    \"65537\": [\n        \"Left_lumbosacral_trunk_nerve_65537_ID\",\n        \"Left_lumbosacral_trunk_65537_ID\"\n    ],\n    \"66321\": [\n        \"Right_thoracodorsal_artery_66321_ID\"\n    ],\n    \"66322\": [\n        \"right_thoracodorsal_artery_66322_ID\",\n        \"left_thoracodorsal_artery_66322_ID\"\n    ],\n    \"67584\": [\n        \"Left_nerve_of_pterygoid_canal_67584_ID\",\n        \"Right_nerve_of_pterygoid_canal_67584_ID\"\n    ],\n    \"67944\": [\n        \"cerebellum_67944_ID\"\n    ],\n    \"69316\": [\n        \"Right_Brachiocephalic_trunk_69316_ID\"\n    ],\n    \"69490\": [\n        \"Right_lateral_tarsal_artery_69490_ID\"\n    ],\n    \"69491\": [\n        \"Left_lateral_tarsal_artery_69491_ID\"\n    ],\n    \"69494\": [\n        \"Right_arcuate_artery_69494_ID\"\n    ],\n    \"69495\": [\n        \"Left_arcuate_artery_69495_ID\"\n    ],\n    \"69514\": [\n        \"Right_deep_plantar_artery_69514_ID\"\n    ],\n    \"69515\": [\n        \"Right_deep_plantar_artery_69515_ID\"\n    ],\n    \"69516\": [\n        \"Left_deep_plantar_artery_69516_ID\"\n    ],\n    \"69726\": [\n        \"Calcaneal_branch_of_right_posterior_tibial_artery_69726_ID\"\n    ],\n    \"69727\": [\n        \"Calcaneal_branch_of_left_posterior_tibial_artery_69727_ID\"\n    ],\n    \"70249\": [\n        \"Right_femoral_artery_70249_ID\"\n    ],\n    \"70250\": [\n        \"Left_femoral_artery_70250_ID\"\n    ],\n    \"70799\": [\n        \"Right_dorsal_metacarpal_arteries_70799_ID\"\n    ],\n    \"70800\": [\n        \"left_dorsal_metacarpal_arteries_70800_ID\",\n        \"right_dorsal_metacarpal_arteries_70800_ID\"\n    ],\n    \"70801\": [\n        \"left_dorsal_digital_arteries_70801_ID\",\n        \"right_dorsal_digital_arteries_70801_ID\",\n        \"Right_dorsal_digital_arteries_70801_ID\",\n        \"Right_palmar_metacarpal_arteries_70801_ID\"\n    ],\n    \"70802\": [\n        \"left_palmar_metacarpal_arteries_70802_ID\",\n        \"right_palmar_metacarpal_arteries_70802_ID\",\n        \"Right_common_palmar_digital_arteries_70802_ID\"\n    ],\n    \"70803\": [\n        \"right_common_palmar_digital_arteries_70803_ID\",\n        \"Right_proper_palmar_digital_arteries_70803_ID\",\n        \"left_common_palmar_digital_arteries_70803_ID\"\n    ],\n    \"70804\": [\n        \"left_proper_palmar_digital_arteries_70804_ID\",\n        \"right_proper_palmar_digital_arteries_70804_ID\",\n        \"left_common_palmar_digital_arteries_70804_ID\"\n    ],\n    \"70809\": [\n        \"Set_of_Jejunal_arteries_70809_ID\"\n    ],\n    \"70810\": [\n        \"Set_of_ileal_arteries_70810_ID\"\n    ],\n    \"70815\": [\n        \"Perforating_arteries_of_left_deep_fibular_artery_70815_ID\",\n        \"Perforating_arteries_of_right_deep_fibular_artery_70815_ID\"\n    ],\n    \"70889\": [\n        \"Left_lumbar_vein_70889_ID\",\n        \"Right_lumbar_vein_70889_ID\"\n    ],\n    \"70917\": [\n        \"Right_palmar_digital_veins_70917_ID\"\n    ],\n    \"70918\": [\n        \"right_palmar_digital_veins_70918_ID\",\n        \"left_palmar_digital_veins_70918_ID\"\n    ],\n    \"70922\": [\n        \"Right_distal_perforating_veins_70922_ID\",\n        \"Perforating_veins_of_right_deep_femoral_artery_70922_ID\",\n        \"Perforating_veins_of_left_deep_femoral_artery_70922_ID\",\n        \"Left_distal_perforating_veins_70922_ID\"\n    ],\n    \"70927\": [\n        \"Set_of_jejunal_veins_70927_ID\"\n    ],\n    \"70928\": [\n        \"Set_of_ileal_veins_70928_ID\"\n    ],\n    \"71132\": [\n        \"Gastrointestinal_Tract_71132_ID\"\n    ],\n    \"71211\": [\n        \"Right_lateral_thoracic_vein_71211_ID\"\n    ],\n    \"71212\": [\n        \"Left_lateral_thoracic_vein_71212_ID\",\n        \"Right_lateral_thoracic_vein_71212_ID\"\n    ],\n    \"71214\": [\n        \"Right_thoracodorsal_vein_71214_ID\",\n        \"Left_thoracodorsal_vein_71214_ID\"\n    ],\n    \"71215\": [\n        \"Right_thoracodorsal_vein_71215_ID\"\n    ],\n    \"71287\": [\n        \"Muscles_of_the_Head_and_Neck_71287_ID\"\n    ],\n    \"71291\": [\n        \"Muscles_of_the_Back_71291_ID\"\n    ],\n    \"71293\": [\n        \"Muscles_of_the_Thorax_71293_ID\"\n    ],\n    \"71310\": [\n        \"Left_Intertransversarii_71310_ID\",\n        \"Right_Intertransversarii_71310_ID\"\n    ],\n    \"71398\": [\n        \"Left_Radiate_Sternocostal_Ligaments_71398_ID\",\n        \"Right_Radiate_Sternocostal_Ligaments_71398_ID\"\n    ],\n    \"71894\": [\n        \"Right_carpal_bones_71894_ID\",\n        \"Left_carpal_bones_71894_ID\"\n    ],\n    \"71898\": [\n        \"Right_metacarpal_bones_of_hand_71898_ID\",\n        \"Left_metacarpal_bones_of_hand_71898_ID\"\n    ],\n    \"71900\": [\n        \"Phalanges_of_right_hand_71900_ID\",\n        \"Phalanges_of_left_hand_71900_ID\"\n    ],\n    \"72063\": [\n        \"Set_of_cervical_vertebrae_72063_ID\"\n    ],\n    \"72064\": [\n        \"Set_of_thoracic_vertebrae_72064_ID\"\n    ],\n    \"72065\": [\n        \"Set_of_lumbar_vertebrae_72065_ID\"\n    ],\n    \"72309\": [\n        \"Right_Stylohyoid_Ligament_72309_ID\"\n    ],\n    \"72311\": [\n        \"Left_Stylohyoid_Ligament_72311_ID\"\n    ],\n    \"72316\": [\n        \"Set_of_intervertebral_discs_72316_ID\"\n    ],\n    \"72826\": [\n        \"right_caudate_nucleus_72826_ID\"\n    ],\n    \"72827\": [\n        \"left_caudate_nucleus_72827_ID\"\n    ],\n    \"72828\": [\n        \"right_putamen_72828_ID\"\n    ],\n    \"72829\": [\n        \"left_putamen_72829_ID\"\n    ],\n    \"72832\": [\n        \"right_amygdaloid_body_72832_ID\"\n    ],\n    \"72833\": [\n        \"left_amygdaloid_body_72833_ID\"\n    ],\n    \"72856\": [\n        \"right_lateral_globus_pallidus_72856_ID\"\n    ],\n    \"72857\": [\n        \"left_lateral_globus_pallidus_72857_ID\"\n    ],\n    \"72858\": [\n        \"right_medial_globus_pallidus_72858_ID\"\n    ],\n    \"72859\": [\n        \"left_medial_globus_pallidus_72859_ID\"\n    ],\n    \"74048\": [\n        \"Right_stapes_74048_ID\"\n    ],\n    \"74049\": [\n        \"Left_stapes_74049_ID\"\n    ],\n    \"74050\": [\n        \"Right_Incus_74050_ID\"\n    ],\n    \"74051\": [\n        \"Left_Incus_74051_ID\"\n    ],\n    \"74052\": [\n        \"Right_malleus_74052_ID\"\n    ],\n    \"74053\": [\n        \"Left_malleus_74053_ID\"\n    ],\n    \"74073\": [\n        \"Right_Levatores_costarum_74073_ID\"\n    ],\n    \"74074\": [\n        \"Left_Levatores_costarum_74074_ID\"\n    ],\n    \"74075\": [\n        \"Right_Levatores_costarum_longi_74075_ID\"\n    ],\n    \"74076\": [\n        \"Left_Levatores_costarum_longi_74076_ID\"\n    ],\n    \"74079\": [\n        \"Right_Subcostales_74079_ID\"\n    ],\n    \"74080\": [\n        \"Left_Subcostales_74080_ID\"\n    ],\n    \"74525\": [\n        \"Occipital_74525_ID\"\n    ],\n    \"75150\": [\n        \"Teeth_75150_ID\"\n    ],\n    \"75398\": [\n        \"Superficial_dorsal_vein_of_penis_75398_ID\"\n    ],\n    \"75492\": [\n        \"Right_common_plantar_digital_nerves_75492_ID\"\n    ],\n    \"75493\": [\n        \"Left_common_plantar_digital_nerves_75493_ID\"\n    ],\n    \"76767\": [\n        \"Anterior_cardiac_vein_76767_ID\"\n    ],\n    \"76829\": [\n        \"Right_Zonula_Fibers_76829_ID\",\n        \"Left_Zonula_Fibers_76829_ID\"\n    ],\n    \"77161\": [\n        \"Intermediate_Hepatic_Vein_77161_ID\"\n    ],\n    \"77380\": [\n        \"Right_popliteal_artery_77380_ID\"\n    ],\n    \"77381\": [\n        \"Left_popliteal_artery_77381_ID\"\n    ],\n    \"77596\": [\n        \"Hypogastric_nerve_77596_ID\"\n    ],\n    \"77949\": [\n        \"Right_circumflex_scapular_vein_77949_ID\"\n    ],\n    \"77950\": [\n        \"Right_circumflex_scapular_vein_77950_ID\",\n        \"Left_circumflex_scapular_vein_77950_ID\"\n    ],\n    \"78023\": [\n        \"Right_lateral_brachial_vein_78023_ID\"\n    ],\n    \"78024\": [\n        \"right_lateral_brachial_vein_78024_ID\",\n        \"left_lateral_brachial_vein_78024_ID\"\n    ],\n    \"78209\": [\n        \"trunk_of_Hepatic_portal_vein_78209_ID\"\n    ],\n    \"78508\": [\n        \"Right_tarsal_bones_78508_ID\"\n    ],\n    \"78509\": [\n        \"Left_tarsal_bones_78509_ID\"\n    ],\n    \"78510\": [\n        \"Right_metatarsal_bones_78510_ID\"\n    ],\n    \"79468\": [\n        \"Right_accessory_meningeal_artery_79468_ID\"\n    ],\n    \"79469\": [\n        \"Left_accessory_meningeal_artery_79469_ID\"\n    ],\n    \"82695\": [\n        \"trunk_of_Hepatic_portal_vein_82695_ID\"\n    ],\n    \"82933\": [\n        \"Right_Nerve_to_levator_ani_82933_ID\"\n    ],\n    \"82934\": [\n        \"Left_Nerve_to_levator_ani_82934_ID\"\n    ],\n    \"85274\": [\n        \"External_Urethral_Sphincter_85274_ID\"\n    ],\n    \"86233\": [\n        \"Lymphatics_of_the_Upper_Limb_86233_ID\"\n    ],\n    \"86917\": [\n        \"Muscles_of_the_Abdomen_86917_ID\"\n    ],\n    \"87217\": [\n        \"Descending_aorta_thoracic_87217_ID\",\n        \"Descending_thoracic_aorta_87217_ID\"\n    ],\n    \"228738\": [\n        \"Muscles_of_the_Throat_228738_ID\"\n    ],\n    \"231317\": [\n        \"Phalanges_of_the_right_foot_231317_ID\"\n    ],\n    \"231319\": [\n        \"Phalanges_of_the_left_foot_231319_ID\"\n    ],\n    \"258714\": [\n        \"right_thalamus_258714_ID\"\n    ],\n    \"258716\": [\n        \"left_thalamus_258716_ID\"\n    ],\n    \"258847\": [\n        \"Right_Calcaneal_Tendon__aka_Achilles_Tendon_258847_ID\"\n    ],\n    \"258848\": [\n        \"Left_Calcaneal_Tendon__aka_Achilles_Tendon_258848_ID\"\n    ],\n    \"268668\": [\n        \"Right_interosseous_recurrent_artery_268668_ID\"\n    ],\n    \"268669\": [\n        \"right_interosseous_recurrent_artery_268669_ID\",\n        \"left_interosseous_recurrent_artery_268669_ID\"\n    ]\n};\n;/**\n *  @namespace Manages network sockets to which remote clients can attach.\n */\n(function () {\n    \"use strict\";\n\n    var HumanClients = Human.clients = {};\n\n    /**\n     * Number of remote clients connected to this engine\n     * @type {number}\n     */\n    HumanClients.numConnections = 0;\n\n    /**\n     * Registers a client type\n     * @param clazz\n     */\n    HumanClients.addClient = function (clientFn) {\n        clientFn({\n            connected: function () {\n                HumanClients.numConnections++;\n                Human.events.fire(\"clients.connected\", {});\n            },\n            disconnected: function () {\n                HumanClients.numConnections--;\n                Human.events.fire(\"clients.disconnected\", {});\n            }\n        });\n    };\n\n})();\n;/**\n Window messaging\n\n */\nHuman.clients.addClient(\n    function (cfg) {\n        \"use strict\";\n\n        var client;\n        var clientOrigin;\n        var responseQueue = [];\n        var rpcQueue = [];\n        // TODO (Tarek): Human.processes no longer exists, so the queuing logic should be removed.\n        var countProcesses = 0; // Stalls rpcQueue when > 0\n        var pQueueInterval;\n\n        Human.events.on(\"started\",\n            function () {\n                sendResponse({ message: \"status\", status: \"ready\" });\n            });\n\n        if (window.addEventListener) {\n\n            // Relay errors back to client\n            Human.events.on(\"error\",\n                function (error) {\n                    sendResponse({ error: error });\n                });\n\n            // Relay any RPC procedure call results back to client\n            Human.rpc.onResult(\n                function (key, value) {\n                    var results = {};\n                    results[key] = Human.rpc.filterUnsafeProperties(value);\n                    sendResponse({ results: results });\n                });\n\n            // Handle messages from client\n            addEventListener(\"message\",\n                function (event) {\n                    var msg;\n                    try {\n                        msg = JSON.parse(event.data);\n                    } catch (e) {\n                        return;\n                    }\n                    if (msg.action === \"connect\") {\n                        // Connection request\n                        if (!client) {\n                            Human.log.info(\"Human.clients.windowClient\", \"Client connected\");\n                            cfg.connected();\n                            client = event.source;\n                            clientOrigin = event.origin;\n                            sendResponse({ message: \"connected\" });\n                            flushResponseQueue();\n                        }\n                    } else {\n                        // RPC call\n                        if (msg.call) {\n                            handleCall(msg);\n                        }\n                    }\n                }, false);\n        } else {\n            Human.log.error(\"Human.clients.windowClient\", \"Browser does not support cross-window messaging\");\n        }\n\n        function sendResponse(json) {\n            var message = JSON.stringify(json);\n            if (!client) {\n                responseQueue.push(message);\n                return;\n            }\n            client.postMessage(message, clientOrigin);\n        }\n\n        function flushResponseQueue() {\n            while (responseQueue.length > 0) {\n                client.postMessage(responseQueue.pop(), clientOrigin);\n            }\n        }\n\n        function handleCall(msg) {\n            var procName = msg.call;\n            // Execute camera commands immediately to avoid queue lag\n            if (procName === \"camera.pan\" ||\n                procName === \"camera.orbit\" ||\n                procName === \"camera.flyTo\" ||\n                procName === \"camera.jumpTo\" ||\n                procName === \"camera.zoom\" ||\n                //allow procedures marked with connected param to execute immediately (they are not related to the Human)\n                (msg.params && msg.params.connected)) {\n                executeCall(msg);\n                return;\n            }\n            if (countProcesses === 0) {      // Execute immediately if Human not busy\n                executeCall(msg);\n            } else {\n                rpcQueue.push(msg);        // Else enqueue\n                if (!pQueueInterval) {\n                    pQueueInterval = setInterval(\n                        function () {\n                            if (rpcQueue.length > 0 && countProcesses === 0) {\n                                executeCall(rpcQueue.shift());\n                            }\n                            if (rpcQueue.length === 0) {\n                                clearInterval(pQueueInterval);\n                            }\n                        }, 20);\n                }\n            }\n        }\n\n        function executeCall(msg) {\n            if (!Human.rpc.windowClientEnabled) {\n                return;\n            }\n            try {\n                Human.rpc.call(msg.id, msg.call, msg.params);\n                Human.rpc.log(msg.call);\n            } catch (e) {\n                Human.log.error(\"Human.clients.windowClient\", \"Error executing RPC call [callId: \" + msg.id + \", procedure: \" + msg.call + \"]: \" + e);\n            }\n        }\n\n    });\n\n\n;(function () {\n    \"use strict\";\n\n    var HumanCookies = Human.cookies = {};\n\n//    /**\n//     * Values of all available cookies\n//     * @type {String:String}\n//     */\n//    HumanCookies.cookies = {};\n//\n//    // Get the document's cookies\n//    var c = document.cookie.split(';');\n//    var tokens;\n//    for (var i = 0, len = c.length; i < len; i++) {\n//        tokens = c[i].split('=');\n//        if (tokens.length == 2) {\n//            HumanCookies.cookies[tokens[0]] = tokens[1];\n//        }\n//    }\n//\n//    /**\n//     * Sets or removes a cookie\n//     *\n//     * @memberof Human.cookies\n//     * @param {String} name Cookie name\n//     * @param {String} [value] Cookie value - clears the cookie when null or omitted\n//     */\n//    HumanCookies.setCookie = function (name, value) {\n//        if (value == undefined || value == null) {\n//            // Clear cookie\n//            delete HumanCookies.cookies[name];\n//        } else {\n//            // Set cookie\n//            HumanCookies.cookies[name] = value;\n//        }\n//        save.call(this);\n//    };\n//\n//    // Saves cookies on the document\n//    function save() {     // TODO: Deferred call on tick if called frequently?\n//        var list = [];\n//        var numCookies = 0;\n//        for (var name in HumanCookies.cookies) {\n//            if (HumanCookies.cookies.hasOwnProperty(name)) {\n//                if (numCookies++ > 0) {\n//                    list.push(\";\");\n//                }\n//                list.push(name);\n//                list.push(\"=\");\n//                list.push(HumanCookies.cookies[name]);\n//            }\n//        }\n//        document.cookie = list.join(\"\");\n//    }\n\n    HumanCookies.setCookie = function (name, value, days) {\n        var expires;\n\n        if (days) {\n            var date = new Date();\n            date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n            expires = \"; expires=\" + date.toGMTString();\n        }\n        else {\n            expires = \"\";\n        }\n        document.cookie = name + \"=\" + value + expires + \"; path=/\";\n    };\n\n    HumanCookies.getCookie = function (name) {\n        var nameEQ = name + \"=\";\n        var ca = document.cookie.split(';');\n        for (var i = 0; i < ca.length; i++) {\n            var c = ca[i];\n            while (c.charAt(0) === ' ') {\n                c = c.substring(1, c.length);\n            }\n            if (c.indexOf(nameEQ) === 0) {\n                return c.substring(nameEQ.length, c.length);\n            }\n        }\n        return null;\n    };\n\n    HumanCookies.eraseCookie = function (name) {\n        HumanCookies.setCookie(name, \"\", -1);\n    };\n})();;/**\n * @namespace Provides methods for installing initialization scripts and resetting the engine.\n */\n(function () {\n    \"use strict\";\n\n    var HumanInit = Human.init = {};\n\n    var started = false;\n\n    /**\n     * Bookmark of Human's initial state. An full engine reset is performed by restoring this bookmark.\n     * @type {{}}\n     * @memberof Human.init\n     */\n    HumanInit.bookmark = {};\n\n    /**\n     * Bookmark of Human's initial camera state. A camera reset is performed by restoring this bookmark.\n     * @type {{}}\n     * @memberof Human.init\n     */\n    HumanInit.cameraBookmark = {};\n\n    /**\n     * Saves engine state to restore to when {@link #reset} is called.\n     * If the engine has multiple modules currently active, then the bookmark will capture only\n     * the activation of the first module that was activated. For example, is we have two modules active,\n     * say, male anatomy and healthy heart beat, then restoring the bookmark will put the engine back\n     * into the state it was in right after loading, before the user selected a condition or\n     * bookmark, or whatever additional content.\n     */\n    HumanInit.saveReset = function () {\n        var bookmark = Human.bookmarks.capture();\n        var modules = bookmark.modules;\n        if (modules) {\n            var active = modules.active;\n            if (active && active.length > 1) {\n                // Ensure only first active module will be reactivated when bookmark restored\n                modules.active = [modules.active[0]];\n            }\n        }\n        HumanInit.bookmark = bookmark;\n        if (!!Human.timeline.activeRoot){\n            // If engine loaded with a module.\n            HumanInit.bookmark.camera = Human.timeline.activeRoot._chapters[0].camera.location;\n        }\n\n    };\n\n    /**\n     * Resets Human state to how it was just after it started up, ie before the user modifies the\n     * view, activates a module, or loads a bookmark.\n     *\n     * @name reset\n     * @function\n     * @param {Function} [ok] Callback which signals when reset complete\n     * @memberof Human.init\n     */\n    HumanInit.reset = function (ok) {\n        // Resets app by restoring its state to the\n        // bookmark that was captured after startup\n        if (!HumanInit.bookmark) {\n            Human.log.error(\"Human.init.reset\", \"Bookmark for reset was not captured\");\n            if (ok) {\n                ok();\n            }\n            return;\n        }\n        Human.renderer.lights.restoreDefaults();\n        Human.bookmarks.restore(HumanInit.bookmark,\n            function () {\n                Human.events.fire(\"init.reset\");\n                if(ok) {\n                    ok();\n                }\n            },\n            function (err) {\n                Human.log.error(\"Human.init.reset\", \"Reset failed: \" + err);\n                if (ok) {\n                    ok();\n                }\n            });\n    };\n\n    /**\n     * Resets Human camera state to how it was just after it started up, ie before the user modifies the\n     * view, activates a module, or loads a bookmark.\n     *\n     * @name resetCamera\n     * @function\n     * @param {Function} [ok] Callback which signals when camera reset complete\n     * @memberof Human.init\n     */\n    HumanInit.resetCamera = function (ok) {\n\n        // try to reset to camera of current chapter\n        var currentChapterLookat = Human.timeline.getCurrentChapterCamera();\n        if (currentChapterLookat) {\n            Human.renderer.camera.fly.flyTo(currentChapterLookat, ok);\n            return;\n        }\n\n        // Try to reset to the initial camera position off the most recently activated module,\n        // otherwise reset to the camera that was captured after the engine started up.\n\n        var mostRecentModule;\n        var module;\n        var time = 0;\n        var activeModules = Human.modules.activeModules;\n        for (var moduleId in activeModules) {\n            if (activeModules.hasOwnProperty(moduleId)) {\n                module = activeModules[moduleId];\n                if (module.camera && module.timeActivated > time) {\n                    mostRecentModule = module;\n                }\n            }\n        }\n        if (mostRecentModule) {\n            Human.renderer.camera.fly.flyTo(mostRecentModule.camera, ok);\n            return;\n        }\n\n        // Reset to camera bookmarked after startup\n        if (!HumanInit.bookmark) {\n            Human.log.error(\"Human.init.resetCamera\", \"Bookmark for reset was not captured\");\n            if (ok) {\n                ok();\n            }\n            return;\n        }\n        Human.renderer.camera.fly.flyTo(HumanInit.bookmark.camera, ok);\n    };\n\n    /** Init the engine\n     *\n     */\n    HumanInit.init = function (ok) {\n        // Initialize websocket for assets\n        Human.renderer.init();\n        Human.assets.init();\n\n        // Renderer ready and all engine JS scripts loaded\n        Human.events.fire(\"loaded\");\n\n        if (ok) {\n            ok();\n        }\n    };\n\n    /** Start the engine\n     *\n     */\n    HumanInit.start = function () {\n        started = true;\n        HumanInit.saveReset();\n        Human.events.fire(\"started\");\n    };\n\n})();\n;/**\n * Human.renderer\n *\n * @namespace Provides access to the SceneJS WebGL engine\n */\n(function () {\n\n    \"use strict\";\n\n    var TIME_MAX = 14;\n    var FRAME_SAMPLES = 100;\n\n    var HumanRenderer = Human.renderer = {\n        highlightColor: new Float32Array([1.5, 1.5, 0.5]),\n        xrayBGColor: new Float32Array([0.2, 0.2, 0.3]),\n        frameRateThrottled: false,\n        testContextLoss: false,\n        viewportDirty: true,\n        lastFrameStats: {\n            gpuTime: 0,\n            cpuTime: 0\n        }\n    };\n\n    var transparencyModeMap = {\n        alpha: SceneJS.TRANSPARENCY_FLAGS.ALPHA,\n        improvedAlpha: SceneJS.TRANSPARENCY_FLAGS.IMPROVED_ALPHA,\n        addAlpha: SceneJS.TRANSPARENCY_FLAGS.ADD_ALPHA,\n        alphaToCoverage: SceneJS.TRANSPARENCY_FLAGS.ALPHA_TO_COVERAGE,\n        weightedOIT: SceneJS.TRANSPARENCY_FLAGS.WEIGHTED_OIT\n    };\n\n    var scene;\n    var sceneGlobalsDirty = false;\n    var paused = false;\n\n    var enableFog = false;\n    var fogMode = SceneJS.DISPLAY_FLAGS.FOG_LINEAR;\n    var fogDensity = 0.01;\n    var fogStart = 0;\n    var fogEnd = 1000;\n    var fogMin = 0.0;\n    var fogMax = 1.0;\n    var fogColor = new Float32Array([1, 1, 1]);\n\n    var testTickCount = 0;\n    var gpuTimeTotal = 0;\n    var cpuTimeTotal = 0;\n\n    var setTicksPerRender = 1;\n    var ticksPerRenderCount = 0;\n\n    var gpuTimerQueryInProgress = false;\n\n    var tickEvent = {\n        timeStarted: 0,\n        timeLast: 0,\n        timeNow: 0,\n        tick: 0\n    };\n\n    var frameStartEvent = {\n        frameStart: 0,\n        lastFrameStart: 0\n    };\n\n    var frameEndEvent = {\n        frameStart: 0,\n        frameEnd: 0,\n        lastFrameEnd: 0,\n    };\n\n    // reusable\n    var tempMat4a = mat4.create();\n    var tempMat4b = mat4.create();\n    var tempVec3 = vec3.create();\n    var tempVec4 = vec4.create();\n\n    Human.properties.subscribe({\n        propId: \"highlight.color\",\n        value: HumanRenderer.highlightColor,\n        callback: function (value) {\n            HumanRenderer.highlightColor = value;\n            sceneGlobalsDirty = true;\n        }\n    });\n\n    Human.properties.subscribe({\n        propId: \"fog.enabled\",\n        value: enableFog,\n        callback: function (value) {\n            enableFog = value;\n            sceneGlobalsDirty = true;\n\n        }\n    });\n\n    Human.properties.subscribe({\n        propId: \"fog.mode\",\n        value: fogMode,\n        callback: function (value) {\n            fogMode = value;\n            sceneGlobalsDirty = true;\n        }\n    });\n\n    Human.properties.subscribe({\n        propId: \"fog.start\",\n        value: fogStart,\n        callback: function (value) {\n            fogStart = value;\n            sceneGlobalsDirty = true;\n        }\n    });\n\n    Human.properties.subscribe({\n        propId: \"fog.end\",\n        value: fogEnd,\n        callback: function (value) {\n            fogEnd = value;\n            sceneGlobalsDirty = true;\n        }\n    });\n\n    Human.properties.subscribe({\n        propId: \"fog.min\",\n        value: fogMin,\n        callback: function (value) {\n            fogMin = value;\n            sceneGlobalsDirty = true;\n        }\n    });\n\n    Human.properties.subscribe({\n        propId: \"fog.max\",\n        value: fogMax,\n        callback: function (value) {\n            fogMax = value;\n            sceneGlobalsDirty = true;\n        }\n    });\n\n    Human.properties.subscribe({\n        propId: \"fog.density\",\n        value: fogDensity,\n        callback: function (value) {\n            fogDensity = value;\n            sceneGlobalsDirty = true;\n        }\n    });\n\n    Human.properties.subscribe({\n        propId: \"fog.color\",\n        value: fogColor,\n        callback: function (value) {\n            fogColor = value;\n            sceneGlobalsDirty = true;\n        }\n    });\n\n    HumanRenderer.init = function () {\n\n        if (SceneJS.WEBGL_INFO.SOFTWARE_RENDERER) {\n            Human.log.error(\"This browser is using a software renderer for WebGL. Expect substantially reduced rendering performance.\");\n        }\n\n        var timeStarted = Date.now();\n        var timeLast = timeStarted;\n        var tick = 0;\n\n        SceneJS.setMaxPointSize(255);\n\n        scene = this.graph.init();\n\n        this.postprocess.init(scene);\n\n        this.canvas.init();\n        this.lights.init();\n\n        this.setXrayBGColor(this.xrayBGColor);\n\n        requestAnimationFrame(function frame() {\n            requestAnimationFrame(frame);\n\n            var gpuTimer = scene.getGPUTimer();\n            var gpuTimerQuery = scene.getGPUTimerQuery();\n            var gl = scene.getGL();\n\n            if (gpuTimer && gpuTimerQueryInProgress) {\n                var gpuTimerAvailable = gpuTimer.getQueryObjectEXT(gpuTimerQuery, gpuTimer.QUERY_RESULT_AVAILABLE_EXT);\n                var gpuTimerDisjoint = gl.getParameter(gpuTimer.GPU_DISJOINT_EXT);\n\n                if (gpuTimerAvailable) {\n                    gpuTimerQueryInProgress = false;\n                }\n\n                if (gpuTimerAvailable && !gpuTimerDisjoint) {\n                    HumanRenderer.lastFrameStats.gpuTime = gpuTimer.getQueryObjectEXT(gpuTimerQuery, gpuTimer.QUERY_RESULT_EXT) / 1000000;\n                }\n            }\n\n            if (paused) {\n                return;\n            }\n\n            ++ticksPerRenderCount;\n            if (ticksPerRenderCount < setTicksPerRender) {\n                return;\n            }\n\n            ticksPerRenderCount = 0;\n\n            var startTime = Human.timer.now();\n\n            if (gpuTimer && !gpuTimerQueryInProgress) {\n                gpuTimer.beginQueryEXT(gpuTimer.TIME_ELAPSED_EXT, gpuTimerQuery);\n            }\n\n\n            frameStartEvent.frameStart = Human.timer.now();\n            Human.events.fire(\"frameStart\", frameStartEvent);\n            frameStartEvent.lastFrameStart = frameStartEvent.frameStart;\n\n            if (sceneGlobalsDirty) {\n                updateSceneGlobals();\n            }\n\n            if (HumanRenderer.viewportDirty) {\n                scene.setViewport(0, 0, HumanRenderer.canvas.width, HumanRenderer.canvas.height);\n                HumanRenderer.viewportDirty = false;\n            }\n\n            var timeNow = Human.timer.now();\n            tickEvent.timeStarted = timeStarted;\n            tickEvent.timeLast = timeLast;\n            tickEvent.timeNow = timeNow;\n            tickEvent.tick = tick;\n\n            Human.events.fire(\"tick\", tickEvent);\n\n            timeLast = timeNow;\n            tick++;\n\n            if (!HumanRenderer.frameRateThrottled) {\n                var stats = scene.stats.frame;\n\n                gpuTimeTotal += stats.gpuTime;\n                cpuTimeTotal += stats.cpuTime;\n\n                if (++testTickCount === FRAME_SAMPLES) {\n                    var gpuTimeAve = gpuTimeTotal / testTickCount;\n                    var cpuTimeAve = cpuTimeTotal / testTickCount;\n\n                    if (cpuTimeAve > TIME_MAX || gpuTimeAve > TIME_MAX) {\n                        HumanRenderer.setTicksPerRender(2);\n                        HumanRenderer.frameRateThrottled = true;\n                    }\n\n                    gpuTimeTotal = 0;\n                    cpuTimeTotal = 0;\n                    testTickCount = 0;\n                }\n            }\n\n            HumanRenderer.prepareFrame(tickEvent);\n\n            scene.render();\n\n            frameEndEvent.frameStart = frameStartEvent.frameStart;\n            frameEndEvent.frameEnd = Human.timer.now();\n            Human.events.fire(\"frameEnd\", frameEndEvent);\n            frameEndEvent.lastFrameEnd = frameEndEvent.frameEnd;\n\n\n            if (gpuTimer && !gpuTimerQueryInProgress) {\n                gpuTimer.endQueryEXT(gpuTimer.TIME_ELAPSED_EXT);\n                gpuTimerQueryInProgress = true;\n            }\n\n            HumanRenderer.lastFrameStats.cpuTime = Human.timer.now() - startTime;\n        });\n    };\n\n    HumanRenderer.prepareFrame = function () {\n\n        // Execute animations\n        //      Must be first because of affect\n        //      on camera, objects\n        Human.timeline.onFrame();\n\n        // Push updates to SceneJS\n        //      Must come before annotations,\n        //      which use view/proj matrices from\n        //      SceneJS\n        Human.renderer.lights.onFrame();\n        Human.renderer.clip.onFrame();\n        Human.renderer.camera.onFrame();\n\n        // Apply pending updates to scenegraph\n        //      Must come before annonations and\n        //      labels to ensure that xforms are\n        //      correct.\n        Human.scene.onFrame();\n\n        // Position annotations\n        Human.scene.markers.onFrame();\n\n        Human.events.fire(\"cull\", tickEvent);\n\n        // Frustum and clip culling.\n        //      Must come last.\n        Human.scene.cull();\n    };\n\n    HumanRenderer.updateDisplayForBG = function () {\n        sceneGlobalsDirty = true;\n    };\n\n    /**\n     * Pauses the renderer.\n     *\n     * <p>This actually pushes a 'pause' directive onto a stack. Only once the same number of pops are done\n     * with {@link #popPause} will the renderer unpause again.</p>\n     *\n     * <p>You would normally do this when you want to do batches of content creation, to prevent the\n     * renderer from slowing things down as it works to keeps the 3D view in synch. Then when you've\n     * done all your creation, you'd unpause the renderer again.</p>\n     */\n    HumanRenderer.pushPause = function () {\n        HumanRenderer._pauses = (!HumanRenderer._pauses) ? 1 : HumanRenderer._pauses + 1;\n        if (HumanRenderer._pauses === 1) {\n            paused = true;\n        }\n    };\n\n    /**\n     * Un-pauses the renderer.\n     *\n     * <p>As described in {@link #pushPause}, this pops a pause directive that was made with that method. Only once the same\n     * number of pops are done with this method will the renderer unpause again.</p>\n     */\n    HumanRenderer.popPause = function () {\n        if (!HumanRenderer._pauses) {\n            return;\n        }\n        if (--HumanRenderer._pauses === 0) {\n            paused = false;\n            scene.render();   // Forces garbage collection\n        }\n    };\n\n\n    HumanRenderer.pauseCompilation = function () {\n        scene.pauseCompilation();\n    };\n\n    HumanRenderer.resumeCompilation = function () {\n        scene.resumeCompilation();\n    };\n\n    HumanRenderer.setTicksPerRender = function (n) {\n        setTicksPerRender = n;\n        ticksPerRenderCount = 0;\n    };\n\n    HumanRenderer.resetFrameThrottling = function () {\n        if (HumanRenderer.frameRateThrottled) {\n            HumanRenderer.setTicksPerRender(1);\n            HumanRenderer.frameRateThrottled = false;\n        }\n\n    };\n\n    HumanRenderer.setTransparencyMode = function (mode) {\n        var transparencyEnum = transparencyModeMap[mode];\n        if (transparencyEnum === undefined) {\n            Human.log.error(\"Unrecognized transparency mode: \" + mode);\n            return;\n        }\n\n        scene.setTransparencyMode(transparencyEnum);\n\n        if (mode === \"alphaToCoverage\") {\n            Human.renderer.postprocess.disable();\n        } else {\n            Human.renderer.postprocess.enable();\n        }\n    };\n\n    HumanRenderer.setDepthSort = function (sort) {\n        scene.setDepthSort(sort);\n    };\n\n    /**\n     * Fires callback as soon as current task count is zero\n     */\n    HumanRenderer.onTasksComplete = function (ok) {\n        if (HumanRenderer._pauses !== undefined && HumanRenderer._pauses !== null && HumanRenderer._pauses > 0) {\n            Human.log.error(\"Human.renderer.onTaskComplete\", \"Renderer deadlock: Human.renderer.pushPause has \" +\n                \"paused renderer. Renderer needs to be unpaused in order to complete pending tasks.\");\n        }\n        var numTasks = Human.renderer.getScene().getStatus().numTasks;\n        if (!numTasks || numTasks === 0) {\n            ok();\n            return;\n        }\n        if (HumanRenderer.__checkLoaded) {\n            throw \"Human.renderer.onTasksComplete: already blocking\";\n        }\n        HumanRenderer.__checkLoaded = window.setInterval(\n            function () {\n                var numTasks = Human.renderer.getScene().getStatus().numTasks;\n                if (!numTasks || numTasks === 0) {\n                    window.clearInterval(HumanRenderer.__checkLoaded);\n                    HumanRenderer.__checkLoaded = null;\n                    ok();\n                }\n            }, 200);\n    };\n\n    // Force compilation of the SceneJS scenegraph\n    HumanRenderer.compile = function () {\n        scene.compile();\n    };\n\n    /** Forces renderer to render a frame\n     */\n    HumanRenderer.forceRenderFrame = function (params) {\n        params = params || {};\n        params.force = true;\n        scene.render(params);\n    };\n\n    HumanRenderer.getScene = function () {\n        return scene;\n    };\n\n    HumanRenderer.getLibraryRoot = function () {\n        return scene;\n    };\n\n    HumanRenderer.getNode = function (nodeId) {\n        return scene.findNode(nodeId);\n    };\n\n    HumanRenderer.nodeExists = function (nodeId) {\n        var node = scene.findNode(nodeId);\n        return (node !== null && node !== undefined);\n    };\n\n    HumanRenderer.loseContext = function() {\n        scene.loseWebGLContext();\n    };\n\n    /**\n     * Returns the 4x4 View transform matrix.\n     * <p>Transform World-space coordinates by this matrix to obtain View-space coordinates.</p>\n     */\n    HumanRenderer.getViewMat = function () {\n        return scene.getViewMatrix();\n    };\n\n    /**\n     * Returns the 4x4 Projection transform matrix.\n     * <p>Transform View-space coordinates by this matrix to obtain Canvas-space coordinates.</p>\n     */\n    HumanRenderer.getProjMat = function () {\n        return scene.getProjectionMatrix();\n    };\n\n    /**\n    *    Check if a WebGL extension is supported on the client\n    */\n    HumanRenderer.checkWebGLExtension = function(extension) {\n        return SceneJS.checkExtension(extension);\n    };\n\n    HumanRenderer.setXrayBGColor = function(color) {\n        this.xrayBGColor.set(color);\n        scene.setXrayColor(color[0], color[1], color[2]);\n    };\n\n    HumanRenderer.viewPositionToCanvas = function(viewPosition, canvasPosition) {\n        var pMat = HumanRenderer.getProjMat();\n\n        // position in view space\n        tempVec4.set(viewPosition);\n        tempVec4[3] = 1;\n\n        vec4.transformMat4(tempVec4, tempVec4, pMat);\n        var w = tempVec4[3];\n        canvasPosition[0] = 0.5 * this.canvas.width * (1 + tempVec4[0] / w);\n        canvasPosition[1] = 0.5 * this.canvas.height * (1 - tempVec4[1] / w);\n        return canvasPosition;\n    };\n\n    /**\n     * Given a vec3 or vec4 point in world space, returns the corresponding\n     * canvas coordinate.\n     */\n    HumanRenderer.worldPositionToCanvas = function(worldPosition, canvasPosition) {\n        vec3.transformMat4(tempVec3, worldPosition, HumanRenderer.getViewMat());\n\n        return HumanRenderer.viewPositionToCanvas(tempVec3, canvasPosition);\n    };\n\n    HumanRenderer.getResolutionScalingSupported = (function () {\n\n        /* Resolution scaling is only supported if the canvas element has\n         * explicit, non-inline, stylesheet CSS rules for \"width\" and \"height\", eg. #myCanvas { width: 100%; height: 100%; }\n        */\n\n        var testDone = false;\n        var resolutionScalingSupported = false;\n\n        function doTest() {\n\n            var proto = Element.prototype;\n            var slice = Function.call.bind(Array.prototype.slice);\n            var matches = Function.call.bind(proto.matchesSelector ||\n                proto.mozMatchesSelector || proto.webkitMatchesSelector ||\n                proto.msMatchesSelector || proto.oMatchesSelector);\n\n            var elementMatchCSSRule = function (element, cssRule) { // Returns true if a DOM Element matches a cssRule\n                return matches(element, cssRule.selectorText);\n            };\n\n            var propertyInCSSRule = function (prop, cssRule) { // Returns true if a property is defined in a cssRule\n                return prop in cssRule.style && cssRule.style[prop] !== \"\";\n            };\n\n            var cssRules = slice(document.styleSheets).reduce(function (rules, styleSheet) { // Get the cssRules across all the stylesheets in one array\n                return rules.concat(slice(styleSheet.cssRules));\n            }, []);\n\n            var elementRules = cssRules.filter(elementMatchCSSRule.bind(null, HumanRenderer.canvas.canvas)); // get only the css rules that matches that element\n            var hasWidth = propertyInCSSRule.bind(null, \"width\");\n            var hasHeight = propertyInCSSRule.bind(null, \"height\");\n\n            resolutionScalingSupported = (elementRules.some(hasWidth) && elementRules.some(hasHeight));\n\n            testDone = true;\n        }\n\n        return function () { // SSAA needs CSS width & height on the canvas\n            if (!testDone) {\n                doTest();\n            }\n            return resolutionScalingSupported;\n        };\n\n    })();\n\n    HumanRenderer.setResolutionScaling = function(scale) {\n        if (scale < 1) {\n            scale = 1;\n        }\n        scene.setResolutionScaling(scale);\n    };\n\n    HumanRenderer.canvasPositionToWorldRay = function(x, y, origin, direction){\n        var px = 2 * x / Human.renderer.canvas.width - 1;\n        var py = 1 - 2 * y / Human.renderer.canvas.height;\n        var eye = Human.renderer.camera.eye;\n        origin[0] = eye.x;\n        origin[1] = eye.y;\n        origin[2] = eye.z;\n        direction[0] = px;\n        direction[1] = py;\n        direction[2] = 0.5;\n        var inverseProjMat =  mat4.invert(tempMat4a, this.getProjMat());\n        var inverseViewMat =  mat4.invert(tempMat4b, this.getViewMat());\n        vec3.transformMat4(direction, direction, inverseProjMat);\n        vec3.transformMat4(direction, direction, inverseViewMat);\n        vec3.subtract(direction, direction, origin);\n        vec3.normalize(direction, direction);\n    };\n\n    var centerVec = vec3.create(); // Eye -> sphere center\n    var edgePos = vec3.create(); // Sphere edge position\n    var edgeVec = vec3.create(); // Eye -> sphere edge\n    var rVec = vec3.create();    // Sphere center -> sphere edge\n    var origin = vec3.create();\n    var direction = vec3.create();\n    HumanRenderer.canvasCircleToWorldSphereRadius = function(canvasX, canvasY, canvasRadius, worldCenter) {\n        this.canvasPositionToWorldRay(canvasX, canvasY + canvasRadius, origin, direction);\n        var forward = Human.renderer.camera.getLookDir(tempVec3);\n        var denom = vec3.dot(forward, direction);\n        if(denom > 0.001) {\n            vec3.subtract(centerVec, worldCenter, origin);\n            var t = vec3.dot(centerVec, forward) / denom;\n            vec3.scale(edgeVec, direction, t);\n            vec3.add(edgePos, origin, edgeVec);\n            vec3.subtract(rVec, edgePos, worldCenter);\n\n            return vec3.length(rVec);\n        }\n        return 0;\n    };\n\n    function updateSceneGlobals() {\n        scene.setFogEnabled(enableFog);\n        scene.setFogMode(fogMode);\n        scene.setFogStart(fogStart);\n        scene.setFogEnd(fogEnd);\n        scene.setFogMin(fogMin);\n        scene.setFogMax(fogMax);\n        scene.setFogDensity(fogDensity);\n        scene.setFogColor(fogColor[0], fogColor[1], fogColor[2]);\n\n        sceneGlobalsDirty = false;\n    }\n\n})();\n;(function() {\n    \"use strict\";\n\n    var sceneRootNode;\n\n    var NODE_ORDER_RANK = {\n        xform:          1,\n        properties:     2,\n        texture:        3,\n        material:       3,\n        cubemap:        3,\n        fresnel:        3,\n        billboard:      3,\n        morphGeometry:  4,\n        geometry:       5\n    };\n\n    var graph = Human.renderer.graph = {\n        libraryRootNode: null\n    };\n\n    // Create scene graph\n    var SCENE_DEFINITION = {\n        type: \"scene\",\n        canvasId: Human.canvasId,\n        // transparent canvas\n        transparent: true,\n\n        contextAttr: {\n\n            // Default: false. If false, once the drawing buffer is presented as described in theDrawing Buffer\n            // section, the contents of the drawing buffer are cleared to their default values. All elements of the\n            // drawing buffer (color, depth and stencil) are cleared. If the value is true the buffers will not be\n            // cleared and will preserve their values until cleared or overwritten by the author.\n            // On some hardware setting the preserveDrawingBuffer flag to true can have significant performance implications.\n            // http://code.google.com/p/chromium/issues/detail?id=82086\n            preserveDrawingBuffer: false,\n            antialias: true\n        }\n    };\n\n    graph.init = function() { // TODO: Why not build whole scene graph here?\n\n        SCENE_DEFINITION.canvasId = Human.canvasId;\n\n        sceneRootNode = SceneJS.createScene(SCENE_DEFINITION, {\n            simulateWebGLContextLost: Human.renderer.testContextLoss\n        });\n\n        this.libraryRootNode = sceneRootNode.addNode({\n            type: \"library\"\n        });\n\n        sceneRootNode.setCamera({\n            eye: [0 , 0, 55],\n            look: [0, 0, 0],\n            up: [0, 1, 0]\n        });\n\n        sceneRootNode.setProjection({\n            type: \"perspective\",\n            fov: 60,\n            near: 0.01,\n            far: 400.0,\n            fovAxis: \"y\",\n            pan: {\n                x: 0,\n                y: 0,\n                z: 0\n            }\n        });\n\n        return sceneRootNode;\n    };\n\n    /**\n     * Creates a subtree within this render graph. You can then call #insertNode to create nodes\n     * within the subtree, or #destroySubtree to destroy the subtree.\n     *\n     * @param {SceneJS.Node} [parent] Optional leaf node belonging to a parent Human.sceneObject.\n     * @returns {SceneJS.Node} Root of new subtree.\n     */\n    graph.createSubtree = function(node) {\n        return sceneRootNode.addNode(node);\n    };\n\n    /**\n     * Inserts a SceneJS node into the given subtree, which must have been created earlier with #createSubtree.\n     *\n     * @param {SceneJS.Node} rootNode Root of subtree.\n     * @param {SceneJS.Node | *} insertNode Node to insert, given as either instance or JSON config.\n     * @returns {SceneJS.Node} Node that was newly inserted.\n     */\n    graph.insertNode = function(rootNode, insertNode) {\n\n        if (insertNode instanceof SceneJS.Node) {\n            if (insertNode.parent && insertNode.parent.type === \"library\") {\n                insertNode.disconnect();\n            } else {\n                insertNode = {\n                    type: insertNode.type,\n                    coreId: insertNode.getCoreId()\n                };\n            }\n        } else {\n            if (insertNode.type === \"reflect\") {\n                insertNode.type = \"cubemap\";\n            }\n        }\n\n        var type = insertNode.type;\n        var insertNodeScore = NODE_ORDER_RANK[type];\n\n        var currentNode = rootNode;\n\n        while(currentNode) {\n            var currentNodeScore = NODE_ORDER_RANK[currentNode.type] ? NODE_ORDER_RANK[currentNode.type] : 0;\n\n            if(insertNodeScore < currentNodeScore) {\n                var parent = currentNode.parent;\n\n                currentNode.disconnect();\n                insertNode = parent.addNode(insertNode);\n\n                insertNode.addNode(currentNode);\n\n                return insertNode;\n            } else if(currentNode.nodes.length === 0) {\n                return currentNode.addNode(insertNode);\n            }\n\n            currentNode = currentNode.nodes[0];\n        }\n    };\n\n    // Disconnect a node from an object chain\n    graph.disconnectNode = function(node) {\n        var parent = node.parent;\n        var children = node.disconnectNodes();\n        node.disconnect();\n        parent.addNodes(children);\n    };\n\n    /**\n     * Destroys the given subtree, which must have been created earlier with #createSubtree.\n     * Also destroys all nodes that were inserted into the subtree with #insertNode.\n     *\n     * @param {SceneJS.Node} rootNode Root of subtree to destroy.\n     */\n    graph.destroySubtree = function(rootNode) {\n        rootNode.destroy();\n    };\n\n})();\n;/**\n * Human.renderer.bg\n *\n * @namespace Get and set the background color\n */\n(function () {\n    \"use strict\";\n\n    var HumanRendererBG = Human.renderer.bg = {};\n    var bgColor = null;\n\n    HumanRendererBG.getBGColor = function () {\n        var _bgColor = null;\n\n        if (bgColor) {\n            _bgColor = [];\n\n            for (var i = 0; i < bgColor.length; i++) {\n                _bgColor.push(bgColor[i]);\n            }\n        }\n\n        return _bgColor;\n    };\n\n    HumanRendererBG.setBGColor = function (_bgColor) {\n      if(Array.isArray(_bgColor)) {\n        bgColor = _bgColor;\n      }\n    };\n\n})();\n;/**\n * Human.renderer.canvas\n *\n * @namespace Manages the WebGL canvas\n */\n(function () {\n    \"use strict\";\n    \n    Human.renderer.canvas = {\n        canvas: null,\n        annotationCanvas: null,\n        context2D: null,\n        width: 0,\n        height: 0\n    };\n\n    Human.renderer.canvas.init = function() {\n        this.canvas = document.getElementById(Human.canvasId);\n        this.annotationCanvas = document.getElementById(Human.annotationCanvasId);\n        this.context2D = this.annotationCanvas.getContext(\"2d\");\n        this.width = this.canvas.clientWidth;\n        this.height = this.canvas.clientHeight;\n\n        resize();\n    };\n\n    // HACK for UI compatibility\n    Human.renderer.resize = resize;\n    window.addEventListener(\"resize\", resize);\n\n    function resize() {\n        var canvas = Human.renderer.canvas.canvas;\n        var annotationCanvas = Human.renderer.canvas.annotationCanvas;\n\n        var canvasBody = canvas.parentNode;\n\n        var canvasWidth = canvasBody.clientWidth;\n        var canvasHeight = canvasBody.clientHeight;\n\n        Human.renderer.canvas.width = canvasWidth;\n        Human.renderer.canvas.height = canvasHeight;\n\n        canvas.width = canvasWidth;\n        canvas.height = canvasHeight;\n\n        annotationCanvas.width = canvasWidth;\n        annotationCanvas.height = canvasHeight;\n\n        Human.renderer.viewportDirty = true;\n        Human.renderer.camera.updateCanvas();\n        Human.renderer.postprocess.updateCanvas();\n        Human.renderer.draw.updateCanvas();\n\n        Human.events.fire(\"canvas.resized\", {\n            canvasWidth: canvasWidth,\n            canvasHeight: canvasHeight\n        });\n    }\n\n})();\n;/**\n * @namespace Manages the camera\n */\n(function () {\n    \"use strict\";\n\n    var HumanRendererCamera = Human.renderer.camera = {\n        FRUSTUM_TOP:    0,\n        FRUSTUM_BOTTOM: 1,\n        FRUSTUM_LEFT:   2,\n        FRUSTUM_RIGHT:  3,\n        FRUSTUM_NEAR:   4,\n        FRUSTUM_FAR:    5,\n        autoSetNearFar: true,    // Automaticallly set near and far plane to scene boundaries.\n        nearFarDirty: false\n    };\n\n    // Used in some methods for distance calculations\n    var eyeVec = vec3.create();\n    var lookVec = vec3.create();\n    var upVec = vec3.create();\n    var leftVec = vec3.create();\n    var rightVec = vec3.create();\n    var nearCenter = vec3.create();\n    var farCenter = vec3.create();\n    var panVec = vec3.create();\n    var eyeVecNorm = vec3.create();\n    var upVecNorm = vec3.create();\n    var viewDirVec = vec3.create();\n    var tempVec = vec3.create();\n    var tempMat4 = mat4.create();\n    // [top, bottom, left, right, near, far]\n    var frustum = [\n        { n: vec3.create(), d: 0},\n        { n: vec3.create(), d: 0},\n        { n: vec3.create(), d: 0},\n        { n: vec3.create(), d: 0},\n        { n: vec3.create(), d: 0},\n        { n: vec3.create(), d: 0}\n    ];\n    var frustumDirty = true;\n\n    /**\n     Current eye position\n     @type {{x: number, y: number, z: number}}\n     @readonly\n     */\n    HumanRendererCamera.eye = { x: 0, y: 0, z: -80 };\n\n    /**\n     Current point-of-interest\n     @type {{x: number, y: number, z: number}}\n     @readonly\n     */\n    HumanRendererCamera.look = { x: 0, y: 0, z: 0 };\n\n    /**\n     Current \"up\" vector\n     @type {{x: number, y: number, z: number}}\n     @readonly\n     */\n    HumanRendererCamera.up = { x: 0, y: 1, z: 0 };\n\n    HumanRendererCamera.rotationCenter = vec3.create();\n\n    HumanRendererCamera.lookDistance = 80;\n\n    /**\n     * Offset added to the \"look\" point in View-space, allows camera to orbit\n     * about an arbitrary offset from the point-of-interest.\n     * @type {{x: number, y: number, z: number}}\n     */\n    HumanRendererCamera._screenPan = {x: 0, y: 0, z: 0 };\n\n    HumanRendererCamera._startcamera = {\n      eye: HumanRendererCamera.eye,\n      look: HumanRendererCamera.look,\n      up: HumanRendererCamera.up\n    };\n\n    // Schedules scene graph updates when true\n\n    var lookatNodeDirty = true;\n    var cameraNodeDirty = true;\n\n    // True when no scene graph updates pending\n    var rested = false;\n\n    /**\n     * When true, causes camera to ignore calls to pan or rotate.\n     * This is set and unset by Human.camera.fly to stop the user from panning or rotating\n     * the camera while flight is in progress, which screws things up.\n     */\n    HumanRendererCamera.lock = false;\n\n    /**\n     Camera aspect ration\n     @type {number}\n     @readonly\n     */\n    HumanRendererCamera.aspect = 1;\n\n    /**\n     Field-ov-view angle on Y-axis\n     @type {number}\n     @readonly\n     */\n    HumanRendererCamera.fovy = 55;\n\n    // Field-of-View angle in degrees\n    Human.properties.subscribe({\n        propId: \"camera.optics.fov\",\n        value: HumanRendererCamera.fovy,\n        callback: function (value) {\n            HumanRendererCamera.fovy = value;\n            cameraNodeDirty = true;\n        }\n    });\n\n    /**\n     Distance to the near clipping plane\n     @type {number}\n     @readonly\n     */\n    HumanRendererCamera.near = 0.1;\n\n    /**\n     Distance to the near clipping plane\n     @type {number}\n     @readonly\n     */\n    HumanRendererCamera.far = 5000;\n\n\n    /**\n     Minimum allowed distance between {@link #eye} and {@link #look}\n     @type {number}\n     @readonly\n     */\n    HumanRendererCamera.minZoom = 0.01;\n\n    /**\n     Maximum allowed distance between {@link #eye} and {@link #look}\n     @type {number}\n     @readonly\n     */\n    HumanRendererCamera.maxZoom = 150;\n\n    // Zoom limits - distance between eye and look\n    Human.properties.subscribe({\n        propId: \"camera.zoomLimits\",\n        value: {\n            min: 0.01,\n            max: 150\n        },\n        callback: function (value) {\n            if (value.min < 0.01) {\n                Human.log.error(\"Human.renderer.camera\", \"Property 'camera.zoomLimits.min' too small - should be >= 0.01\");\n                return;\n            }\n            if (value.min >= value.max) {\n                Human.log.error(\"Human.renderer.camera\", \"Property 'camera.zoomLimits.min' should be less than camera.zoomLimits.max\");\n                return;\n            }\n            HumanRendererCamera.minZoom = value.min;\n            HumanRendererCamera.maxZoom = value.max;\n            lookatNodeDirty = true;\n        }\n    });\n\n    // Adjust camera aspect on canvas resize\n    HumanRendererCamera.updateCanvas = function () {\n        HumanRendererCamera.setAspect(Human.renderer.canvas.width / Human.renderer.canvas.height);\n    };\n\n    \n\n    /**\n     Sets the position of the camera.\n\n     @param params\n     @param [params.eye]\n     @param [params.look]\n     @param [params.up]\n     */\n    HumanRendererCamera.setLookAt = function (params) {\n        var eye = params.eye || HumanRendererCamera.eye;\n        var look = params.look || HumanRendererCamera.look;\n        var up = params.up || HumanRendererCamera.up;\n\n        // Not constrained, set state and schedule scene update\n\n        HumanRendererCamera.eye = eye;\n        HumanRendererCamera.look = look;\n        HumanRendererCamera.up = up;\n\n        Human.math.vec3ObjToArray(HumanRendererCamera.eye, eyeVec);\n        Human.math.vec3ObjToArray(HumanRendererCamera.look, lookVec);\n\n        HumanRendererCamera.lookDistance = vec3.distance(eyeVec, lookVec);\n\n        if (params.look && !params.preserveCenter) {\n            this.setRotationCenter(params.look.x, params.look.y, params.look.z);\n        }\n\n        lookatNodeDirty = true;\n    };\n\n    HumanRendererCamera.setRotationCenter = function (x, y, z) {\n        HumanRendererCamera.rotationCenter[0] = x;\n        HumanRendererCamera.rotationCenter[1] = y;\n        HumanRendererCamera.rotationCenter[2] = z;\n    };\n\n    /**\n     Returns the position of this camera.\n     @returns {{eye: *, look: *, up: *}}\n     */\n    HumanRendererCamera.getLookAt = function () {\n        return {\n            eye: HumanRendererCamera.eye,\n            look: HumanRendererCamera.look,\n            up: HumanRendererCamera.up\n        };\n    };\n\n    // Camera direction in world space\n    HumanRendererCamera.getLookDir = function (dir) {\n        var eye = this.eye;\n        var look = this.look;\n\n        dir[0] = look.x - eye.x;\n        dir[1] = look.y - eye.y;\n        dir[2] = look.z - eye.z;\n\n        vec3.normalize(dir, dir);\n\n        return dir;\n    };\n\n    /**\n     * Sets offset added to the \"look\" position in View-space, which allows camera to orbit\n     * about an arbitrary offset from the point-of-interest.\n     *\n     * @param {{x: number, y: number, z: number}} screenPan The View-space pan vector\n     */\n    HumanRendererCamera.setScreenPan = function (screenPan) {\n        HumanRendererCamera._screenPan.x = screenPan.x || 0;\n        HumanRendererCamera._screenPan.y = screenPan.y || 0;\n        HumanRendererCamera._screenPan.z = screenPan.z || 0;\n        cameraNodeDirty = true;\n    };\n\n    /**\n     * Gets offset that's added to the \"look\" point in View-space, which allows camera to orbit\n     * about an arbitrary offset from the point-of-interest.\n     *\n     * @return {{x: number, y: number, z: number}} The View-space pan vector\n     */\n    HumanRendererCamera.getScreenPan = function () {\n        return HumanRendererCamera._screenPan;\n    };\n\n    HumanRendererCamera._reset = {\n        eye: { x: HumanRendererCamera.eye.x, y: HumanRendererCamera.eye.y, z: HumanRendererCamera.eye.z },\n        look: { x: HumanRendererCamera.look.x, y: HumanRendererCamera.look.y, z: HumanRendererCamera.look.z },\n        up: { x: HumanRendererCamera.up.x, y: HumanRendererCamera.up.y, z: HumanRendererCamera.up.z }\n    };\n\n    /**\n     * Resets this camera to initial position\n     */\n    HumanRendererCamera.reset = function () {\n        HumanRendererCamera.yaw = 0;\n        HumanRendererCamera.pitch = 90;\n        HumanRendererCamera._eye = { x: HumanRendererCamera._reset.eye.x, y: HumanRendererCamera._reset.eye.y, z: HumanRendererCamera._reset.eye.z };\n        HumanRendererCamera._look = { x: HumanRendererCamera._reset.look.x, y: HumanRendererCamera._reset.look.y, z: HumanRendererCamera._reset.look.z };\n        HumanRendererCamera._up = { x: HumanRendererCamera._reset.up.x, y: HumanRendererCamera._reset.up.y, z: HumanRendererCamera._reset.up.z };\n        HumanRendererCamera.rotationCenter.set([HumanRendererCamera._reset.look.x, HumanRendererCamera._reset.look.y, HumanRendererCamera._reset.look.z]);\n        lookatNodeDirty = true;\n    };\n\n\n    /**\n     * Rotate 'eye' about 'look', around the 'up' vector\n     *\n     * <p>Applies constraints added with {@link #addConstraint}.</p>\n     *\n     * @param {Number} angle Angle of rotation in degrees\n     */\n\n    HumanRendererCamera.rotateY = function (angle) {\n\n        if (HumanRendererCamera.lock) {\n            // Camera is being animated, don't allow interaction\n            return;\n        }\n\n        Human.math.vec3ObjToArray(HumanRendererCamera.eye, eyeVec);\n        Human.math.vec3ObjToArray(HumanRendererCamera.look, lookVec);\n        Human.math.vec3ObjToArray(HumanRendererCamera.up, upVec);\n\n        vec3.subtract(eyeVec, eyeVec, HumanRendererCamera.rotationCenter);\n        vec3.subtract(lookVec, lookVec, HumanRendererCamera.rotationCenter);\n\n        var sign = Human.math.sign(upVec[1]) || 1;\n\n        // Rotate 'eye' vector about 'up' vector\n        mat4.fromRotation(tempMat4, sign * angle * 0.0174532925, Human.math.Y_AXIS);\n        vec3.transformMat4(eyeVec, eyeVec, tempMat4);\n        vec3.transformMat4(lookVec, lookVec, tempMat4);\n        vec3.transformMat4(upVec, upVec, tempMat4); // NOTE(Tarek): Works because there's no translation in tempMat4\n\n        vec3.add(eyeVec, eyeVec, HumanRendererCamera.rotationCenter);\n        vec3.add(lookVec, lookVec, HumanRendererCamera.rotationCenter);\n\n        // Update scene graph camera\n        HumanRendererCamera.setLookAt({\n            eye: {\n                x: eyeVec[0],\n                y: eyeVec[1],\n                z: eyeVec[2]\n            },\n\n            look: {\n                x: lookVec[0],\n                y: lookVec[1],\n                z: lookVec[2]\n            },\n\n            up: {\n                x: upVec[0],\n                y: upVec[1],\n                z: upVec[2]\n            },\n            preserveCenter: true\n        });\n    };\n\n\n\n    /**\n     * Rotate 'eye' about 'look' around the Orthogonal Vector\n     *\n     * <p>Applies constraints added with {@link #addConstraint}.</p>\n     *\n     * @param {Number} angle Angle of rotation in degrees\n     */\n\n    HumanRendererCamera.rotateX = function (angle) {\n\n        if (HumanRendererCamera.lock) {\n            // Camera is being animated, don't allow interaction\n            return;\n        }\n\n        Human.math.vec3ObjToArray(HumanRendererCamera.eye, eyeVec);\n        Human.math.vec3ObjToArray(HumanRendererCamera.look, lookVec);\n        Human.math.vec3ObjToArray(HumanRendererCamera.up, upVec);\n\n        vec3.subtract(eyeVec, eyeVec, HumanRendererCamera.rotationCenter);\n        vec3.subtract(lookVec, lookVec, HumanRendererCamera.rotationCenter);\n\n        // Get 'eye' -> 'look' vector\n        vec3.subtract(eyeVecNorm, lookVec, eyeVec);\n\n        vec3.normalize(eyeVecNorm, eyeVecNorm);\n        vec3.normalize(upVecNorm, upVec);\n\n        // Get orthogonal vector from 'eye' and 'up'\n        vec3.cross(leftVec, upVecNorm, eyeVecNorm);\n\n        // Rotate 'eye' vector about orthogonal vector\n        mat4.fromRotation(tempMat4, angle * 0.0174532925, leftVec);\n        vec3.transformMat4(eyeVec, eyeVec, tempMat4);\n        vec3.transformMat4(lookVec, lookVec, tempMat4);\n        vec3.transformMat4(upVec, upVec, tempMat4);    // NOTE(Tarek): Works because there's not translation in tempMat4\n\n        vec3.add(eyeVec, eyeVec, HumanRendererCamera.rotationCenter);\n        vec3.add(lookVec, lookVec, HumanRendererCamera.rotationCenter);\n\n        // Update scene graph camera\n        HumanRendererCamera.setLookAt({\n            eye: {\n                x: eyeVec[0],\n                y: eyeVec[1],\n                z: eyeVec[2]\n            },\n\n            look: {\n                x: lookVec[0],\n                y: lookVec[1],\n                z: lookVec[2]\n            },\n\n            up: {\n                x: upVec[0],\n                y: upVec[1],\n                z: upVec[2]\n            },\n            preserveCenter: true\n        });\n    };\n\n    /**\n     * Pans the camera along X and Y axis.\n     * Applies constraints added with {@link #addConstraint}.\n     * @param pan The pan vector\n     */\n\n    var eyeVec2 = vec3.create();\n\n    HumanRendererCamera.pan = function (pan) {\n\n        if (HumanRendererCamera.lock) {\n            // Camera is being animated, don't allow interaction\n            return;\n        }\n\n        // Get eye, look and up as arrays\n        Human.math.vec3ObjToArray(HumanRendererCamera.eye, eyeVec);\n        Human.math.vec3ObjToArray(HumanRendererCamera.look, lookVec);\n        Human.math.vec3ObjToArray(HumanRendererCamera.up, upVec);\n\n        // Get 'look' -> 'eye' vector\n        vec3.subtract(eyeVec2, eyeVec, lookVec);\n\n        // Building this pan vector\n        panVec[0] = panVec[1] = panVec[2] = 0;\n\n        if (pan.x !== undefined) {\n\n            // Pan along orthogonal vector to 'look' and 'up'\n\n            vec3.normalize(eyeVecNorm, eyeVec2);\n            vec3.normalize(upVecNorm, upVec);\n\n            var left = vec3.cross(leftVec, eyeVec2, upVec);\n            vec3.normalize(left, vec3.cross(leftVec, eyeVec2, upVec));\n\n            vec3.scale(tempVec, left, pan.x);\n\n            panVec[0] += tempVec[0];\n            panVec[1] += tempVec[1];\n            panVec[2] += tempVec[2];\n        }\n\n        if (pan.y !== undefined) {\n\n            // Pan along 'up' vector\n            vec3.normalize(upVecNorm, upVec);\n\n            vec3.scale(tempVec, upVecNorm, pan.y);\n\n            panVec[0] += tempVec[0];\n            panVec[1] += tempVec[1];\n            panVec[2] += tempVec[2];\n        }\n\n        if (pan.z !== undefined) {\n\n            // Pan along 'eye'- -> 'look' vector\n\n            vec3.normalize(eyeVecNorm, eyeVec);\n\n            vec3.scale(tempVec, eyeVecNorm, pan.z);\n\n            panVec[0] += tempVec[0];\n            panVec[1] += tempVec[1];\n            panVec[2] += tempVec[2];\n        }\n\n        vec3.add(eyeVec, eyeVec, panVec);\n        vec3.add(lookVec, lookVec, panVec);\n\n        HumanRendererCamera.setLookAt({\n            eye: {\n                x: eyeVec[0],\n                y: eyeVec[1],\n                z: eyeVec[2]\n            },\n            look: {\n                x: lookVec[0],\n                y: lookVec[1],\n                z: lookVec[2]\n            },\n            preserveCenter: true\n        });\n    };\n\n    /** Sets the projection aspect ratio\n     */\n    HumanRendererCamera.setAspect = function (aspect) {\n        HumanRendererCamera.aspect = aspect;\n        cameraNodeDirty = true;\n    };\n\n    /**\n     Positions camera to look at the scene from along the -X axis.\n     */\n    HumanRendererCamera.viewRight = function () {\n\n        if (HumanRendererCamera.lock) {\n            // Camera is being animated, don't allow interaction\n            return;\n        }\n\n        var eye = Human.init.bookmark.camera.eye;\n        var dist = eye.z;\n        var elev = eye.y;\n\n        HumanRendererCamera.setLookAt({\n            look: { x: 0, y: elev, z: 0 },\n            eye: { x: -dist, y: elev, z: 0 },\n            up: {x: 0, y: 1, z: 0 }\n        });\n\n    };\n\n    /**\n     Positions camera to look at the scene from along the +X axis.\n     */\n    HumanRendererCamera.viewLeft = function () {\n\n        if (HumanRendererCamera.lock) {\n            // Camera is being animated, don't allow interaction\n            return;\n        }\n\n        var eye = Human.init.bookmark.camera.eye;\n        var dist = eye.z;\n        var elev = eye.y;\n\n        HumanRendererCamera.setLookAt({\n            look: { x: 0, y: elev, z: 0 },\n            eye: { x: dist, y: elev, z: 0 },\n            up: {x: 0, y: 1, z: 0 }\n        });\n\n    };\n\n    /**\n     Positions camera to look at the scene from along the +Z axis.\n     */\n    HumanRendererCamera.viewPosterior = function () {\n\n        if (HumanRendererCamera.lock) {\n            // Camera is being animated, don't allow interaction\n            return;\n        }\n\n        var eye = Human.init.bookmark.camera.eye;\n        var dist = eye.z;\n        var elev = eye.y;\n\n        HumanRendererCamera.setLookAt({\n            look: { x: 0, y: elev, z: 0 },\n            eye: { x: 0, y: elev, z: -dist },\n            up: {x: 0, y: 1, z: 0 }\n        });\n\n    };\n\n    /**\n     Positions camera to look at the scene from along the -Z axis.\n     */\n    HumanRendererCamera.viewAnterior = function () {\n\n        if (HumanRendererCamera.lock) {\n            // Camera is being animated, don't allow interaction\n            return;\n        }\n\n        var eye = Human.init.bookmark.camera.eye;\n        var dist = eye.z;\n        var elev = eye.y;\n\n        HumanRendererCamera.setLookAt({\n            look: { x: 0, y: elev, z: 0 },\n            eye: { x: 0, y: elev, z: dist },\n            up: {x: 0, y: 1, z: 0 }\n        });\n\n    };\n\n    /**\n     Positions camera to look at the scene from along the +Y axis.\n     */\n    HumanRendererCamera.viewSuperior = function () {\n\n        if (HumanRendererCamera.lock) {\n            // Camera is being animated, don't allow interaction\n            return;\n        }\n\n        var eye = Human.init.bookmark.camera.eye;\n        var dist = eye.z;\n        var elev = eye.y;\n\n        HumanRendererCamera.setLookAt({\n            look: { x: 0, y: elev, z: 0 },\n            eye: { x: 0, y: -dist + elev, z: 0 },\n            up: {x: 0, y: 0, z: 1 }\n        });\n\n    };\n\n    /**\n     Positions camera to look at the scene from along the +Y axis.\n     */\n    HumanRendererCamera.viewInferior = function () {\n\n        if (HumanRendererCamera.lock) {\n            // Camera is being animated, don't allow interaction\n            return;\n        }\n\n        var eye = Human.init.bookmark.camera.eye;\n        var dist = eye.z;\n        var elev = eye.y;\n\n        HumanRendererCamera.setLookAt({\n            look: { x: 0, y: elev, z: 0 },\n            eye: { x: 0, y: dist + elev, z: 0 },\n            up: {x: 0, y: 0, z: -1 }\n        });\n\n    };\n\n    /**\n     * Increments/decrements zoom factor, ie. distance between eye and look.\n     *\n     * Applies constraints added with {@link #addConstraint}.\n     *\n     * @param delta\n     */\n    HumanRendererCamera.zoom = function (delta) {\n\n        if (HumanRendererCamera.lock) {\n            // Camera is being animated, don't allow interaction\n            return;\n        }\n\n        Human.math.vec3ObjToArray(HumanRendererCamera.eye, eyeVec);\n        Human.math.vec3ObjToArray(HumanRendererCamera.look, lookVec);\n        vec3.subtract(eyeVec, eyeVec, lookVec);            // Get vector from eye to look\n        var lenLook = Math.abs(vec3.length(eyeVec));    // Get len of that vector\n        var newLenLook = Math.abs(lenLook + delta);         // Get new len after zoom\n\n        if (HumanRendererCamera.minZoom && HumanRendererCamera.maxZoom) {\n\n            var f = (lenLook / HumanRendererCamera.maxZoom) * 0.6;\n\n            delta = (40 * delta) * f;\n\n            newLenLook = Math.abs(lenLook + delta);\n\n            if (newLenLook < HumanRendererCamera.minZoom) {\n                newLenLook = HumanRendererCamera.minZoom;\n\n            } else if (newLenLook > HumanRendererCamera.maxZoom) {\n                newLenLook = HumanRendererCamera.maxZoom;\n            }\n        }\n\n        vec3.normalize(eyeVecNorm, eyeVec);  // Get normalised vector\n        vec3.scale(eyeVec, eyeVecNorm, newLenLook);\n        vec3.add(eyeVec, lookVec, eyeVec);\n\n        HumanRendererCamera.setLookAt({\n            eye: {\n                x: eyeVec[0],\n                y: eyeVec[1],\n                z: eyeVec[2]\n            },\n            preserveCenter: true\n        });\n    };\n\n    /**\n     * Sets the zoom as a factor indicating a position between {@link #minZoom} and {@link #maxZoom}.\n     *\n     * Applies constraints added with {@link #addConstraint}.\n     *\n     * @param {Number} zoomFactor The factor\n     */\n    HumanRendererCamera.setZoom = function (zoomFactor) {\n\n        if (HumanRendererCamera.lock) {\n            // Camera is being animated, don't allow interaction\n            return;\n        }\n\n        Human.math.vec3ObjToArray(HumanRendererCamera.eye, eyeVec);\n        Human.math.vec3ObjToArray(HumanRendererCamera.look, lookVec);\n\n        vec3.subtract(eyeVec, eyeVec, lookVec);  // Get vector from eye to look\n        vec3.normalize(eyeVecNorm, eyeVec);  // Get normalised vector\n        vec3.scale(eyeVec, eyeVecNorm, HumanRendererCamera.minZoom + (1.0 - zoomFactor) * (HumanRendererCamera.maxZoom - HumanRendererCamera.minZoom));\n\n        vec3.add(eyeVec, lookVec, eyeVec);\n\n        HumanRendererCamera.setLookAt({\n            eye: {\n                x: eyeVec[0],\n                y: eyeVec[1],\n                z: eyeVec[2]\n            },\n            preserveCenter: true\n        });\n    };\n\n    /**\n     * Returns the zoom as a factor indicating a position between {@link #minZoom} and {@link #maxZoom}.\n     *\n     * @return {Number} The zoom factor\n     */\n    HumanRendererCamera.getZoom = function () {\n\n        Human.math.vec3ObjToArray(HumanRendererCamera.eye, eyeVec);\n        Human.math.vec3ObjToArray(HumanRendererCamera.look, lookVec);\n\n        vec3.subtract(eyeVec, eyeVec, lookVec);            // Get vector from eye to look\n        var lenLook = Math.abs(vec3.length(eyeVec));    // Get len of that vector\n\n        return 1 - (((lenLook - HumanRendererCamera.minZoom) / HumanRendererCamera.maxZoom));\n    };\n\n\n    /**\n     * Sets the zoom via a percentage factor which indicates a position between {@link #minZoom} and {@link #maxZoom}.\n     *\n     * Applies constraints added with {@link #addConstraint}.\n     *\n     * @deprecated\n     * @param {Number} zoomPercent The percentage factor\n     */\n    HumanRendererCamera.setZoomPercent = function (zoomPercent) {\n\n        if (HumanRendererCamera.lock) {\n            // Camera is being animated, don't allow interaction\n            return;\n        }\n\n        Human.math.vec3ObjToArray(HumanRendererCamera.eye, eyeVec);\n        Human.math.vec3ObjToArray(HumanRendererCamera.look, lookVec);\n\n        vec3.subtract(eyeVec, eyeVec, lookVec);  // Get vector from eye to look\n        vec3.normalize(eyeVecNorm, eyeVec);  // Get normalised vector\n\n        vec3.scale(eyeVec, eyeVecNorm, HumanRendererCamera.minZoom + (100.0 - zoomPercent) * 0.01 * (HumanRendererCamera.maxZoom - HumanRendererCamera.minZoom));\n\n        HumanRendererCamera.setLookAt({\n            eye: {\n                x: lookVec[0] + eyeVec[0],\n                y: lookVec[1] + eyeVec[1],\n                z: lookVec[2] + eyeVec[2]\n            },\n            preserveCenter: true\n        });\n    };\n\n    /**\n     * @deprecated\n     */\n    HumanRendererCamera.getZoomPercent = function () {\n\n        Human.math.vec3ObjToArray(HumanRendererCamera.eye, eyeVec);\n        Human.math.vec3ObjToArray(HumanRendererCamera.look, lookVec);\n\n        vec3.subtract(eyeVec, eyeVec, lookVec);            // Get vector from eye to look\n        var lenLook = Math.abs(vec3.length(eyeVec));    // Get len of that vector\n\n        return 100 - (((lenLook - HumanRendererCamera.minZoom) / HumanRendererCamera.maxZoom) * 100);\n    };\n\n    HumanRendererCamera.getFrustum = function () {\n        if (frustumDirty) {\n            buildFrustum();\n            frustumDirty = false;\n        }\n\n        return frustum;\n    };\n\n    function buildFrustum() {\n        var camera = HumanRendererCamera;\n        var near = camera.near;\n        var far = camera.far;\n        var aspect = camera.aspect;\n        var fov = camera.fovy * Math.PI / 180;\n\n        eyeVec[0] = camera.eye.x;\n        eyeVec[1] = camera.eye.y;\n        eyeVec[2] = camera.eye.z;\n        lookVec[0] = camera.look.x;\n        lookVec[1] = camera.look.y;\n        lookVec[2] = camera.look.z;\n        upVec[0] = camera.up.x;\n        upVec[1] = camera.up.y;\n        upVec[2] = camera.up.z;\n\n        var nearHalfHeight = Math.tan(fov * 0.5) * near;\n        var nearHalfWidth = nearHalfHeight * aspect;\n\n        vec3.subtract(viewDirVec, lookVec, eyeVec);\n        vec3.normalize(viewDirVec, viewDirVec);\n\n        vec3.cross(rightVec, viewDirVec, upVec);\n        vec3.normalize(rightVec, rightVec);\n\n        // Orthogonalize upVec\n        vec3.cross(upVec, rightVec, viewDirVec);\n\n        vec3.scale(tempVec, viewDirVec, near);\n        vec3.add(nearCenter, eyeVec, tempVec);\n\n        vec3.scale(tempVec, viewDirVec, far);\n        vec3.add(farCenter, eyeVec, tempVec);\n\n        vec3.scale(frustum[camera.FRUSTUM_NEAR].n, viewDirVec, -1);\n        frustum[camera.FRUSTUM_NEAR].d = -vec3.dot(nearCenter, frustum[camera.FRUSTUM_NEAR].n);\n\n        frustum[camera.FRUSTUM_FAR].n.set(viewDirVec);\n        frustum[camera.FRUSTUM_FAR].d = -vec3.dot(farCenter, frustum[camera.FRUSTUM_FAR].n);\n\n        vec3.scale(tempVec, rightVec, nearHalfWidth);\n        vec3.add(tempVec, nearCenter, tempVec);\n        vec3.subtract(tempVec, tempVec, eyeVec);\n        vec3.normalize(tempVec, tempVec);\n        vec3.cross(frustum[camera.FRUSTUM_RIGHT].n, tempVec, upVec);\n        frustum[camera.FRUSTUM_RIGHT].d = -vec3.dot(eyeVec, frustum[camera.FRUSTUM_RIGHT].n);\n\n        vec3.scale(tempVec, rightVec, -nearHalfWidth);\n        vec3.add(tempVec, nearCenter, tempVec);\n        vec3.subtract(tempVec, tempVec, eyeVec);\n        vec3.normalize(tempVec, tempVec);\n        vec3.cross(frustum[camera.FRUSTUM_LEFT].n, upVec, tempVec);\n        frustum[camera.FRUSTUM_LEFT].d = -vec3.dot(eyeVec, frustum[camera.FRUSTUM_LEFT].n);\n\n        vec3.scale(tempVec, upVec, nearHalfHeight);\n        vec3.add(tempVec, nearCenter, tempVec);\n        vec3.subtract(tempVec, tempVec, eyeVec);\n        vec3.normalize(tempVec, tempVec);\n        vec3.cross(frustum[camera.FRUSTUM_TOP].n, rightVec, tempVec);\n        frustum[camera.FRUSTUM_TOP].d = -vec3.dot(eyeVec, frustum[camera.FRUSTUM_TOP].n);\n\n        vec3.scale(tempVec, upVec, -nearHalfHeight);\n        vec3.add(tempVec, nearCenter, tempVec);\n        vec3.subtract(tempVec, tempVec, eyeVec);\n        vec3.normalize(tempVec, tempVec);\n        vec3.cross(frustum[camera.FRUSTUM_BOTTOM].n, tempVec, rightVec);\n        frustum[camera.FRUSTUM_BOTTOM].d = -vec3.dot(eyeVec, frustum[camera.FRUSTUM_BOTTOM].n);\n    }\n\n    /* Calculate and return data for all 6 planes in the frustum\n        NOTE: conver input to pixel units\n        INPUT:\n            X: offset (in pixels) of sub-region left edge from canvas left edge\n            Y: offset (in pixels) of sub-region top edge from canvas top edge\n            width: width of sub-region in pixels\n            height: height of sub-region in pixels\n        NOTE: Assumes that the inner near plane is defined to be a subregion of the true near plane\n    **/\n    HumanRendererCamera.getSubRegionFrustum = function(x, y, width, height){\n        // Camera and Perspective Info\n        var camera = HumanRendererCamera;\n        var near = camera.near;\n        var far = camera.far;\n        var aspect = camera.aspect;\n        var fov = camera.fovy * Math.PI / 180;\n\n        eyeVec[0] = camera.eye.x;\n        eyeVec[1] = camera.eye.y;\n        eyeVec[2] = camera.eye.z;\n        lookVec[0] = camera.look.x;\n        lookVec[1] = camera.look.y;\n        lookVec[2] = camera.look.z;\n        upVec[0] = camera.up.x;\n        upVec[1] = camera.up.y;\n        upVec[2] = camera.up.z;\n\n        // Camera Orthonormal Axes\n        vec3.subtract(viewDirVec, lookVec, eyeVec);\n        vec3.normalize(viewDirVec, viewDirVec);\n        vec3.cross(rightVec, viewDirVec, upVec);\n        vec3.normalize(rightVec, rightVec);\n        vec3.cross(upVec, rightVec, viewDirVec); // Orthogo-normalize upVec\n        vec3.normalize(upVec, upVec);\n\n        // NearCenter: World coordinate of near plane's center point\n        vec3.scale(tempVec, viewDirVec, near);\n        vec3.add(nearCenter, eyeVec, tempVec);\n\n        // Frustum Planes Data\n        var _frustum = [\n            {n:vec3.create(), d:0},\n            {n:vec3.create(), d:0},\n            {n:vec3.create(), d:0},\n            {n:vec3.create(), d:0},\n            {n:vec3.create(), d:0},\n            {n:vec3.create(), d:0}\n        ];\n\n        // Whole Near Plane Information\n        var nearHalfHeight = Math.tan(fov * 0.5) * near;\n        var nearHalfWidth = nearHalfHeight * aspect;\n\n        // Convert canvas points to magnitudes along canvas axis\n        var cHalfWidth = Human.renderer.canvas.width/2.0;\n        var cHalfHeight = Human.renderer.canvas.height/2.0;\n        var left =  (x - cHalfWidth)/cHalfWidth;\n        var right = left + width/(cHalfWidth);\n        var top = (cHalfHeight - y)/cHalfHeight;\n        var bottom = top - height/(cHalfHeight);\n\n        // Near Plane\n        _frustum[HumanRendererCamera.FRUSTUM_NEAR].n.set(viewDirVec);\n        _frustum[HumanRendererCamera.FRUSTUM_NEAR].d = -vec3.dot(_frustum[HumanRendererCamera.FRUSTUM_NEAR].n, nearCenter);\n\n        // Far Plane\n        vec3.scale(tempVec, viewDirVec, far);\n        vec3.add(farCenter, eyeVec, tempVec);\n        _frustum[HumanRendererCamera.FRUSTUM_FAR].n.set([-viewDirVec[0], -viewDirVec[1], -viewDirVec[2]]);\n        _frustum[HumanRendererCamera.FRUSTUM_FAR].d = -vec3.dot(_frustum[HumanRendererCamera.FRUSTUM_FAR].n, farCenter);\n\n        // Left Plane: point along right-vec some distance from center\n        vec3.scale(tempVec, rightVec, left*nearHalfWidth);\n        vec3.add(tempVec, nearCenter, tempVec);\n        vec3.subtract(tempVec, tempVec, eyeVec);\n        vec3.normalize(tempVec, tempVec);\n        vec3.cross(tempVec, tempVec, upVec);\n        vec3.normalize(tempVec, tempVec);\n        _frustum[HumanRendererCamera.FRUSTUM_LEFT].n.set(tempVec);\n        _frustum[HumanRendererCamera.FRUSTUM_LEFT].d = -vec3.dot(tempVec, eyeVec);\n\n        // Right Plane:  point along right-vec some distance from center\n        vec3.scale(tempVec, rightVec, right*nearHalfWidth);\n        vec3.add(tempVec, nearCenter, tempVec);\n        vec3.subtract(tempVec, tempVec, eyeVec);\n        vec3.normalize(tempVec, tempVec);\n        vec3.cross(tempVec, upVec, tempVec);\n        vec3.normalize(tempVec, tempVec);\n        _frustum[HumanRendererCamera.FRUSTUM_RIGHT].n.set(tempVec);\n        _frustum[HumanRendererCamera.FRUSTUM_RIGHT].d = -vec3.dot(tempVec, eyeVec);\n\n        // Bottom Plane: point along up-vec some distance from center\n        vec3.scale(tempVec, upVec, bottom*nearHalfHeight);\n        vec3.add(tempVec, nearCenter, tempVec);\n        vec3.subtract(tempVec, tempVec, eyeVec);\n        vec3.normalize(tempVec, tempVec);\n        vec3.cross(tempVec, rightVec, tempVec);\n        vec3.normalize(tempVec, tempVec);\n        _frustum[HumanRendererCamera.FRUSTUM_BOTTOM].n.set(tempVec);\n        _frustum[HumanRendererCamera.FRUSTUM_BOTTOM].d = -vec3.dot(tempVec, eyeVec);\n\n        // Top Plane: point along up-vec some additional distance from center\n        vec3.scale(tempVec, upVec, top*nearHalfHeight);\n        vec3.add(tempVec, nearCenter, tempVec);\n        vec3.subtract(tempVec, tempVec, eyeVec);\n        vec3.normalize(tempVec, tempVec);\n        vec3.cross(tempVec, tempVec, rightVec);\n        vec3.normalize(tempVec, tempVec);\n        _frustum[HumanRendererCamera.FRUSTUM_TOP].n.set(tempVec);\n        _frustum[HumanRendererCamera.FRUSTUM_TOP].d = -vec3.dot(tempVec, eyeVec);\n\n        return _frustum;\n    };\n\n    HumanRendererCamera.onFrame = function () {\n\n        if (lookatNodeDirty) {\n            Human.math.vec3ObjToArray(HumanRendererCamera.eye, eyeVec);\n            Human.math.vec3ObjToArray(HumanRendererCamera.look, lookVec);\n            Human.math.vec3ObjToArray(HumanRendererCamera.up, upVec);\n\n            // View transform update scheduled for scene graph\n            var scene = Human.renderer.getScene();\n            scene.setCamera({eye:eyeVec, look:lookVec, up:upVec});\n\n            vec3.subtract(tempVec, eyeVec, lookVec);\n\n            Human.events.fire(\"camera.updated\", {\n\n                // Camera position\n                eye: HumanRendererCamera.eye,\n                look: HumanRendererCamera.look,\n                up: HumanRendererCamera.up,\n\n                // Distance from viewpoint to point-of-interest\n                dist: Math.abs(vec3.length(tempVec))\n            });\n\n            // Camera not at rest now\n            rested = false;\n\n            // Scene camera position now up to date\n            lookatNodeDirty = false;\n            frustumDirty = true;\n            HumanRendererCamera.nearFarDirty = true;\n\n        } else {\n\n            // Else camera position now at rest\n\n            if (!rested) {\n\n                rested = true;\n\n                Human.math.vec3ObjToArray(HumanRendererCamera.eye, eyeVec);\n                Human.math.vec3ObjToArray(HumanRendererCamera.look, lookVec);\n                vec3.subtract(tempVec, eyeVec, lookVec);\n\n                Human.events.fire(\"camera.rested\", {\n\n                    // Camera position\n                    eye: HumanRendererCamera.eye,\n                    look: HumanRendererCamera.look,\n                    up: HumanRendererCamera.up,\n\n                    // Distance from viewpoint to point-of-interest\n                    dist: Math.abs(vec3.length(tempVec))\n                });\n            }\n        }\n\n        if (HumanRendererCamera.autoSetNearFar && HumanRendererCamera.nearFarDirty) {\n            var sceneBb = Human.scene.getBoundary();\n            var particleBb = Human.particles.getBoundary();\n\n            var xmin = Math.min(sceneBb.xmin, particleBb.xmin);\n            var ymin = Math.min(sceneBb.ymin, particleBb.ymin);\n            var zmin = Math.min(sceneBb.zmin, particleBb.zmin);\n            var xmax = Math.max(sceneBb.xmax, particleBb.xmax);\n            var ymax = Math.max(sceneBb.ymax, particleBb.ymax);\n            var zmax = Math.max(sceneBb.zmax, particleBb.zmax);\n\n            var viewMat = Human.renderer.getViewMat();\n            var vx = viewMat[2]; \n            var vy = viewMat[6]; \n            var vz = viewMat[10]; \n            var vw = viewMat[14];\n\n            var dx = xmax - xmin;\n            var dy = ymax - ymin;\n            var dz = zmax - zmin;\n\n            var range = Math.sqrt(dx * dx + dy * dy + dz * dz);  // Bounding box diagonal\n\n            var maxZ = xmin * vx + ymin * vy + zmin * vz + vw;\n\n            if (isFinite(maxZ)) {\n                maxZ = Math.max(maxZ, xmax * vx + ymin * vy + zmin * vz + vw);\n                maxZ = Math.max(maxZ, xmin * vx + ymax * vy + zmin * vz + vw);\n                maxZ = Math.max(maxZ, xmin * vx + ymin * vy + zmax * vz + vw);\n                maxZ = Math.max(maxZ, xmax * vx + ymax * vy + zmin * vz + vw);\n                maxZ = Math.max(maxZ, xmax * vx + ymin * vy + zmax * vz + vw);\n                maxZ = Math.max(maxZ, xmin * vx + ymax * vy + zmax * vz + vw);\n                maxZ = Math.max(maxZ, xmax * vx + ymax * vy + zmax * vz + vw);\n\n                HumanRendererCamera.near = Math.max(-maxZ, 0.1);\n                HumanRendererCamera.far  = HumanRendererCamera.near + range;\n\n                HumanRendererCamera.nearFarDirty = false;\n                cameraNodeDirty = true;\n            }\n        }\n\n        if (cameraNodeDirty) {\n            // Update the scene graph\n            Human.renderer.getScene().setProjection({\n                    type: \"perspective\",\n                    fov: HumanRendererCamera.fovy,\n                    near: HumanRendererCamera.near,\n                    far: HumanRendererCamera.far,\n                    aspect: HumanRendererCamera.aspect,\n                    pan: HumanRendererCamera._screenPan\n                });\n\n            // Scene projection now up to date\n            cameraNodeDirty = false;\n            frustumDirty = true;\n\n            Human.renderer.postprocess.updateProjection();\n        }\n\n    };\n\n})();\n;/** @namespace Manages picking of {@link Human.scene.Object}s in the {@link Human.scene}.\n */\n(function () {\n    \"use strict\";\n\n    var HumanRendererPick = Human.renderer.pick = {};\n\n    /**\n     * Performs a pick at the given X,Y canvas coordinates\n     * @memberof Human.renderer.pick\n     * @param params\n     * @param {Number} params.canvasX Canvas X-coordinate\n     * @param {Number} params.canvasY Canvas Y-coordinate\n     * @param {Boolean} params.mouseDownLeft True when left mouse key is down\n     * @param {Boolean} params.mouseDownRight True when right mouse key is down\n     * @param {Boolean} params.ctrlDown True when ALT key is down\n     * @param {Boolean} hover Set true to do a hover-pick\n     * @param {Boolean} doubleClick Set true to do a \"double click\" pick\n     * @return\n     */\n    HumanRendererPick.pick = function (x, y, params) {\n\n        var scene = Human.renderer.getScene();\n\n        if (!scene) {\n            return null;\n        }\n\n        var result = { objectId: null };\n        var object = null;\n\n        var hit = scene.pick(x, y, params) || null;\n\n\n        if (hit) {\n            object = Human.scene.objects[hit.name];\n            var renderObjectId = hit.objectId;\n            result = Human.utils.apply(hit, result);\n            if (object) {\n                result.objectId = object.objectId;\n                if (renderObjectId) {\n                    for (var i = 0, len = object.renderables.length; i < len; ++i) {\n                        var renderObject = object.renderables[i].getRenderObject();\n                        if (renderObject && renderObject.id === renderObjectId) {\n                            result.renderableIndex = i;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        if (object) {\n            Human.events.fire(\"pick.picked\", result);\n        } else {\n            Human.events.fire(\"pick.missed\", result);\n        }\n\n        return result;\n    };\n\n})();\n;/**\n * @namespace Manages clip planes for cross-section views\n */\n/*\nNOTE: Clipping Planes do not play nicely with progressive loading.\nThe plane is set relative to the bounding box of the current view.\nHowever, the bounding box is unknown before the geometry assets are progressively\nloaded into the scene. Perhaps the engine should consider only the world coordinates\nof the plane center and direction, and let the 0-to-100% progress bar be managed by applications.\nThe absolute planes can be created and enforced with or without pre-loaded geometry assets (boundaries);\n*/\n(function () {\n    \"use strict\";\n\n    var HumanRendererClip = Human.renderer.clip = {};\n\n    HumanRendererClip.LEFT = 0;\n    HumanRendererClip.RIGHT = 1;\n    HumanRendererClip.BOTTOM = 2;\n    HumanRendererClip.TOP = 3;\n    HumanRendererClip.FRONT = 4;\n    HumanRendererClip.BACK = 5;\n\n    var clipConfigs = [\n        {n: new Float32Array([-1.0, 0.0, 0.0]), d: 0, fade: false, fadeDistance: 0 }, // left\n        {n: new Float32Array([1.0, 0.0, 0.0]), d: 0, fade: false, fadeDistance: 0 }, // right\n        {n: new Float32Array([0.0, -1.0, 0.0]), d: 0, fade: false, fadeDistance: 0 }, // bottom\n        {n: new Float32Array([0.0, 1.0, 0.0]), d: 0, fade: false, fadeDistance: 0 }, // top\n        {n: new Float32Array([0.0, 0.0, -1.0]), d: 0, fade: false, fadeDistance: 0 }, // front\n        {n: new Float32Array([0.0, 0.0, 1.0]), d: 0, fade: false, fadeDistance: 0 } // back\n    ];\n\n    var boundary = {\n        xmin: Infinity,\n        xmax: -Infinity,\n        ymin: Infinity,\n        ymax: -Infinity,\n        zmin: Infinity,\n        zmax: -Infinity,\n    };\n\n    var enabledClips = new Array(clipConfigs.length);\n    var clipProgress = new Float32Array(clipConfigs.length);\n    var clipBoundaries = new Array(clipConfigs.length);\n\n    var activeClips = [];\n\n    var clipsDirty = true;\n\n    // Allows strings to be used for clipId, e.g. \"front\", \"back\"\n    var ID_MAP = {\n        left: HumanRendererClip.LEFT,\n        right: HumanRendererClip.RIGHT,\n        bottom: HumanRendererClip.BOTTOM,\n        top: HumanRendererClip.TOP,\n        front: HumanRendererClip.FRONT,\n        back: HumanRendererClip.BACK\n    };\n\n    var propertiesNode = null;\n    var xformNode = null;\n    var translationMat = mat4.create();\n    var rotationMat = mat4.create();\n    var scalingMat = mat4.create();\n    var xformMat = mat4.create();\n    var translation = vec3.create();\n    var scale = vec3.fromValues(1, 1, 1);\n\n    /**\n     * Update state of a clipping plane.\n     */\n    HumanRendererClip.setClip = function (params) {\n        var id = ID_MAP[params.clipId] !== undefined ? ID_MAP[params.clipId] : params.clipId;\n\n        var clip = clipConfigs[id];\n        var sceneBoundary = clipBoundaries[id] = params.boundary || Human.scene.getBoundary();\n\n        if (params.enabled !== undefined) {\n            enabledClips[id] = params.enabled;\n        }\n\n        if (params.fade !== undefined) {\n            clip.fade = params.fade;\n        }\n\n        if (params.fadeDistance !== undefined) {\n            clip.fadeDistance = params.fadeDistance;\n        }\n\n        if (params.progress !== undefined) {\n            var progress = clipProgress[id] = params.progress;\n            var range = 0;\n            var mid = 0;\n\n            if (id === HumanRendererClip.LEFT || id === HumanRendererClip.RIGHT) {\n                range = sceneBoundary.xmax - sceneBoundary.xmin;\n                mid = sceneBoundary.xmin + 0.5 * range;\n            }\n\n            if (id === HumanRendererClip.TOP || id === HumanRendererClip.BOTTOM) {\n                range = sceneBoundary.ymax - sceneBoundary.ymin;\n                mid = sceneBoundary.ymin + 0.5 * range;\n            }\n\n            if (id === HumanRendererClip.FRONT || id === HumanRendererClip.BACK) {\n                range = sceneBoundary.zmax - sceneBoundary.zmin;\n                mid = sceneBoundary.zmin + 0.5 * range;\n            }\n\n            if (id === HumanRendererClip.LEFT || id === HumanRendererClip.BOTTOM || id === HumanRendererClip.FRONT) {\n                mid *= -1;\n            }\n\n            progress = 1 - progress;\n\n            progress -= 0.5;\n\n            clip.d = -(progress * range + mid);\n        }\n\n\n\n        clipsDirty = true;\n\n        // Notify of new clip plane state\n        Human.events.fire(\"clip.updated\", {\n            clipId: id,\n            progress: params.progress || this.getProgress(id),\n            enabled: !!enabledClips[id],\n            fade: clip.fade,\n            fadeDistance: clip.fadeDistance\n        });\n\n    };\n\n    HumanRendererClip.getActiveClips = function() {\n        return activeClips;\n    };\n\n    HumanRendererClip.isEnabled = function(id) {\n        return !!enabledClips[ID_MAP[id] || id];\n    };\n\n    HumanRendererClip.getProgress = function(id) {\n        return clipProgress[ID_MAP[id] || id];\n    };\n\n    HumanRendererClip.serialize = function() {\n        var serializedClips = {};\n\n        for (var i = 0, len = clipConfigs.length; i < len; ++i) {\n            serializedClips[i] = {\n                clipId: i,\n                enabled: !!enabledClips[i],\n                progress: clipProgress[i],\n                fade: clipConfigs[i].fade,\n                fadeDistance: clipConfigs[i].fadeDistance,\n                boundary: clipBoundaries[i]\n            };\n        }\n\n        return serializedClips;\n    };\n\n    HumanRendererClip.show = function (id) {\n        if (!propertiesNode) {\n            initGeo();\n        }\n\n        var clip = clipConfigs[id];\n        var sceneBoundary = Human.scene.getBoundary();\n        var rangeX = sceneBoundary.xmax - sceneBoundary.xmin;\n        var rangeY = sceneBoundary.ymax - sceneBoundary.ymin;\n        var rangeZ = sceneBoundary.zmax - sceneBoundary.zmin;\n        var midX = (sceneBoundary.xmin + sceneBoundary.xmax) * 0.5;\n        var midY = (sceneBoundary.ymin + sceneBoundary.ymax) * 0.5;\n        var midZ = (sceneBoundary.zmin + sceneBoundary.zmax) * 0.5;\n\n        propertiesNode.setEnabled(true);\n\n        if (id === HumanRendererClip.LEFT || id === HumanRendererClip.RIGHT) {\n            mat4.fromYRotation(rotationMat, Math.PI * 0.5);\n            translation[0] = -clip.d * clip.n[0];\n            translation[1] = midY;\n            translation[2] = midZ;\n            scale[0] = rangeZ;\n            scale[1] = rangeY;\n        }\n\n        if (id === HumanRendererClip.TOP || id === HumanRendererClip.BOTTOM) {\n            mat4.fromXRotation(rotationMat, Math.PI * 0.5);\n            translation[0] = midX;\n            translation[1] = -clip.d * clip.n[1];\n            translation[2] = midZ;\n            scale[0] = rangeX;\n            scale[1] = rangeZ;\n        }\n\n        if (id === HumanRendererClip.FRONT || id === HumanRendererClip.BACK) {\n            mat4.identity(rotationMat);\n            translation[0] = midX;\n            translation[1] = midY;\n            translation[2] = -clip.d * clip.n[2];\n            scale[0] = rangeX;\n            scale[1] = rangeY;\n        }\n\n        mat4.fromScaling(scalingMat, scale);\n        mat4.fromTranslation(translationMat, translation);\n\n        mat4.multiply(xformMat, rotationMat, scalingMat);\n        mat4.multiply(xformMat, translationMat, xformMat);\n\n        xformNode.setElements(xformMat);\n    };\n\n    HumanRendererClip.hide = function() {\n        if (!propertiesNode) {\n            return;\n        }\n\n        propertiesNode.setEnabled(false);\n    };\n\n    /**\n     * Reset cross-sections to dormant state\n     */\n    HumanRendererClip.reset = function () {\n        for (var i = 0, len = clipConfigs.length; i < len; ++i) {\n            enabledClips[i] = false;\n        }\n\n        clipsDirty = true;\n\n        Human.events.fire(\"CrossSections.Reset\");\n    };\n\n    HumanRendererClip.onFrame = function () {\n        if (clipsDirty) {\n            activeClips.length = 0;\n\n            for (var i = 0, len = clipConfigs.length; i < len; ++i) {\n                if (enabledClips[i]) {\n                    activeClips.push(clipConfigs[i]);\n                }\n            }\n\n            Human.renderer.getScene().setClips(activeClips);\n            clipsDirty = false;\n        }\n    };\n\n    // Get boundary created by canonical axis clipping planes\n    HumanRendererClip.getBoundary = function(){\n        boundary.xmin = enabledClips[HumanRendererClip.LEFT] ? clipConfigs[HumanRendererClip.LEFT].d       : -Infinity;\n        boundary.xmax = enabledClips[HumanRendererClip.RIGHT] ? -clipConfigs[HumanRendererClip.RIGHT].d    : Infinity;\n        boundary.ymin = enabledClips[HumanRendererClip.BOTTOM] ? clipConfigs[HumanRendererClip.BOTTOM].d   : -Infinity;\n        boundary.ymax = enabledClips[HumanRendererClip.TOP] ? -clipConfigs[HumanRendererClip.TOP].d        : Infinity;\n        boundary.zmin = enabledClips[HumanRendererClip.BACK] ? clipConfigs[HumanRendererClip.BACK].d       : -Infinity;\n        boundary.zmax = enabledClips[HumanRendererClip.FRONT] ? -clipConfigs[HumanRendererClip.FRONT].d    : Infinity;\n\n        return boundary;\n    };\n\n    function initGeo() {\n        propertiesNode = Human.renderer.getScene().addNode({\n            type: \"properties\",\n            properties: {\n                enabled: false,\n                backfaces: true,\n                clipping: false,\n                picking: false,\n                noDepthMask: true\n            }\n        });\n\n        xformNode = propertiesNode.addNode({ type: \"xform\" });\n\n        xformNode.addNode({\n            type: \"material\",\n            emit: 0.9,\n            baseColor: {r: 0.3, g: 0.3, b: 0.4},\n            specularColor: {r: 0.3, g: 0.3, b: 0.4},\n            specular: 0.0,\n            shine: 100.0,\n            alpha: 0.2,\n\n            nodes: [\n                {\n                    type: \"geometry/plane\"\n                }\n            ]\n        });\n    }\n\n})();\n;/**\n\n @namespace Dynamic lighting support\n\n <p>Usage:</p>\n\n <pre>\n\n // Add some lights\n\n Human.renderer.lights.addLight({\n                lightId: \"light0\",\n                displayName: \"Default ambient\",\n                description: \"Default ambient light source\",\n                params: {\n                    mode: \"ambient\",\n                    color: { r: 0.15, g: 0.15, b: 0.15 },\n                    diffuse: true\n                }\n            });\n\n Human.renderer.lights.addLight({\n                lightId: \"light1\",\n                displayName: \"Default directional\",\n                description: \"Default directional light source\",\n                params: {\n                    mode: \"dir\",\n                    color: { r: 0.15, g: 0.15, b: 0.2 },\n                    dir: { x: -0.3, y: 0.4, z: 0.5 },\n                    diffuse: true,\n                    specular: true,\n                    space: \"view\"\n                }\n            });\n\n Human.renderer.lights.addLight({\n                lightId: \"light2\",\n                displayName: \"Default directional\",\n                description: \"Default directional light source\",\n                params: {\n                    mode: \"point\",\n                    color: { r: 1.3, g: 1.3, b: 1.2 },\n                    pos: { x: -1.0, y: 0.0, z: 1.0},\n                    diffuse: true,\n                    specular: true,\n                    space: \"view\"\n                }\n            });\n\n // Enable and disable lights in a batch\n\n Human.renderer.lights.setEnabled({\n        lights: {\n            \"light0\": true,\n            \"light1\": true,\n            \"light2\": false\n        },\n        replace: true // Disable all previously active lights\n });\n\n // Set light parameters in a batch\n\n </pre>\n */\n(function () {\n    \"use strict\";\n\n    var HumanRendererLights = Human.renderer.lights = {};\n\n    /**\n     * Lights mapped to their IDs\n     *\n     * @type {{String:Human.renderer.lights.Light}}\n     */\n    HumanRendererLights.lights = {};\n\n    /**\n     * Default lights should be stored for re-enabling after custom\n     * lights are disabled.\n    */\n    HumanRendererLights.defaultLightIds = [];\n    var lightConfigs = [];\n    var configDirty = true;\n    var sceneDirty = true;\n\n    // Create default lights once engine code has loaded, all enabled\n    HumanRendererLights.init = function () {\n        // Need exactly one ambient light\n        HumanRendererLights.addLight({\n            lightId: 'light0',\n            enabled: true,\n            params: {\n                mode: 'ambient',\n                color: {\n                    r: 0.2,\n                    g: 0.2,\n                    b: 0.2,\n                    diffuse: true\n                }\n            }\n        });\n\n        HumanRendererLights.addLight({\n            lightId: 'light1',\n            enabled: true,\n            params: {\n                mode: 'dir',\n                dir: {\n                    x: 1.0,\n                    y: 0.0,\n                    z: -0.5\n                },\n                color: {\n                    r: 0.1,\n                    g: 0.1,\n                    b: 0.2\n                },\n                diffuse: true,\n                specular: true,\n                space: 'view'\n            }\n        });\n\n        HumanRendererLights.addLight({\n            lightId: 'light2',\n            enabled: true,\n            params: {\n                mode: 'dir',\n                dir: {\n                    x: -1,\n                    y: 0.0,\n                    z: 1.0\n                },\n                color: {\n                    r: 0.55,\n                    g: 0.5,\n                    b: 0.5\n                },\n                diffuse: true,\n                specular: true,\n                space: 'view'\n            }\n        });\n\n        HumanRendererLights.addLight({\n            lightId: 'light3',\n            enabled: true,\n            params: {\n                mode: 'dir',\n                dir: {\n                    x: 0.25,\n                    y: 0.0,\n                    z: -1.0\n                },\n                color: {\n                    r: 0.9,\n                    g: 0.9,\n                    b: 0.9\n                },\n                diffuse: true,\n                specular: false,\n                space: 'view'\n            }\n        });\n\n        HumanRendererLights.defaultLightIds.push('light0');\n        HumanRendererLights.defaultLightIds.push('light1');\n        HumanRendererLights.defaultLightIds.push('light2');\n        HumanRendererLights.defaultLightIds.push('light3');\n\n    };\n\n    /**\n     * Adds a light\n     * @param params\n     */\n    HumanRendererLights.addLight = function (params) {\n\n        if (HumanRendererLights.lights.hasOwnProperty(params.lightId)) {\n            Human.log.warn(\"Human.renderer.lights.addLights\", \"The lightId already exists: \" + params.lightId);\n            return;\n        }\n\n        HumanRendererLights.lights[params.lightId] = {\n            lightId: params.lightId,\n            enabled: !!params.enabled,\n            params: params.params,\n            index: lightConfigs.length\n        };\n\n        configDirty = true;\n        sceneDirty = true;\n    };\n\n    /**\n     * Add Lights from a map of lights\n     */\n    HumanRendererLights.addLights = function(lights){\n        for (var lightId in lights){\n            if (lights.hasOwnProperty(lightId)){\n                HumanRendererLights.addLight(lights[lightId]);\n            }\n        }\n    };\n\n    /**\n     * Removes a light\n     * @param lightId ID of light to remove\n     */\n    HumanRendererLights.removeLight = function (lightId) {\n        if (HumanRendererLights.lights[lightId]) {\n            delete HumanRendererLights.lights[lightId];\n            configDirty = true;\n            sceneDirty = true;\n        }\n    };\n\n    /**\n     * Removes all lights\n     */\n    HumanRendererLights.removeAllLights = function () {\n        HumanRendererLights.lights = {};\n        lightConfigs.length = 0;\n        sceneDirty = true;\n    };\n\n    /**\n     * Remove all non default lights\n     */\n    HumanRendererLights.removeCustomLights = function(){\n        for (var lightId in HumanRendererLights.lights) {\n            if (HumanRendererLights.lights.hasOwnProperty(lightId) &&\n                HumanRendererLights.defaultLightIds.indexOf(lightId) < 0) {\n                    delete HumanRendererLights.lights[lightId];\n                    sceneDirty = true;\n                }\n        }\n    };\n\n    /**\n     * Enables or disables one or more lights\n     *\n     * <p>Examples:</p>\n     *\n     * <pre>\n     *\n     *  Human.renderer.lights.setEnabled({\n     *      lightId: \"myLight\",\n     *      enable: true\n     *  });\n     *\n     *  Human.renderer.lights.setEnabled({\n     *      lights: {\n     *          \"myLight\": true,\n     *          \"myOtherlight\": false\n     *      },\n     *      replace: true // Disable any lights that are previously enabled\n     *  });\n     * </pre>\n     * @param params\n     */\n    HumanRendererLights.setEnabled = function (lights) {\n        var dirty = false;\n        for (var lightId in lights) {\n            var light = HumanRendererLights.lights[lightId];\n            if (!light) {\n                Human.log.error(\"Human.renderer.lights.setEnabled\", \"Light not found: \" + lightId);\n                continue;\n            }\n            var val = !!lights[lightId];\n            if (light.enabled !== val) {\n                light.enabled = val;\n                dirty = true;\n            }\n        }\n\n        if (dirty) {\n            configDirty = true;\n            sceneDirty = true;\n        }\n    };\n\n    /**\n     * Disables all lights\n     */\n    HumanRendererLights.clearEnabled = function () {\n        var dirty = false;\n        for (var lightId in HumanRendererLights.lights) {\n            HumanRendererLights.lights[lightId].enabled = false;\n            dirty = true;\n        }\n        if (dirty) {\n            configDirty = true;\n            sceneDirty = true;\n        }\n    };\n\n    /**\n     * Sets parameters for lights\n     * @param params\n     */\n    HumanRendererLights.setLight = function (params) {\n        var lightId = params.lightId;\n        var light = HumanRendererLights.lights[lightId];\n\n        if (!light) {\n            Human.log.error(\"Light \" + lightId + \" does not exist\");\n            return;\n        }\n\n        if (params.mode !== undefined) {\n            light.params.mode = params.mode;\n        }\n\n        if (params.color !== undefined) {\n            light.params.color = params.color;\n        }\n\n        if (params.dir !== undefined) {\n            light.params.dir = params.dir;\n        }\n\n        if (params.pos !== undefined) {\n            light.params.pos = params.pos;\n        }\n\n        if (params.diffuse !== undefined) {\n            light.params.diffuse = params.diffuse;\n        }\n\n        if (params.specular !== undefined) {\n            light.params.specular = params.specular;\n        }\n\n        if (params.innerCone !== undefined) {\n            light.params.innerCone = params.innerCone;\n        }\n\n        if (params.outerCone !== undefined) {\n            light.params.outerCone = params.outerCone;\n        }\n\n        if (params.constantAttenuation !== undefined) {\n            light.params.constantAttenuation = params.constantAttenuation;\n        }\n\n        if (params.linearAttenuation !== undefined) {\n            light.params.linearAttenuation = params.linearAttenuation;\n        }\n\n        if (params.quadraticAttenuation !== undefined) {\n            light.params.quadraticAttenuation = params.quadraticAttenuation;\n        }\n\n        if (params.space !== undefined){\n            light.params.space = params.space;\n        }\n\n        sceneDirty = true;\n    };\n\n    /* Restore Defaults (currently only one set of defaults)\n    */\n    HumanRendererLights.restoreDefaults = function(){\n        var lights = {};\n\n        HumanRendererLights.defaultLightIds.forEach(function(id){\n            lights[id] = true;\n        });\n\n        HumanRendererLights.clearEnabled();\n        HumanRendererLights.setEnabled(lights);\n    };\n\n    HumanRendererLights.onFrame = function() {\n        if (configDirty) {\n            var count = 0;\n            lightConfigs.length = 0;\n            for (var lightId in HumanRendererLights.lights) {\n                var light = HumanRendererLights.lights[lightId];\n                if (light.enabled) {\n                    lightConfigs.push(light.params);\n                    light.index = count++;\n                }\n            }\n            configDirty = false;\n            sceneDirty = true;\n        }\n\n        if (sceneDirty) {\n            Human.renderer.getScene().setLights(lightConfigs);\n            sceneDirty = false;\n        }\n    };\n\n})();\n;/**\n @namespace Reflections control\n\n Human.renderer.reflections.setEnabled([\"environments:sky\"]);\n\n */\n(function () {\n    \"use strict\";\n\n    var HumanRendererReflections = Human.renderer.reflections = {};\n\n    HumanRendererReflections.setEnabled = function (reflectionId) {\n        var cubemapAsset = Human.assets.reflections.reflections[reflectionId];\n        if (!cubemapAsset) {\n            Human.log.error(\"Human.renderer.reflections.setEnabled\", \"reflection not found: \" + reflectionId);\n            return;\n        }\n        activateReflection(cubemapAsset);\n    };\n\n    function activateReflection(cubemapAsset) {\n        var scene = Human.renderer.getScene();\n        if (!scene) { // Scene not ready yet\n            return;\n        }\n        swapReflectionsRecursive(scene, cubemapAsset);\n    }\n\n    function swapReflectionsRecursive(node, cubemapAsset) {\n        if (node.type === \"cubemap\" || node.applyTo === \"reflection\") {\n            swapReflections(node, cubemapAsset);\n        }\n        while (node.nodes && node.nodes.length > 0) {\n            var child = node.nodes[0];\n            swapReflectionsRecursive(child, cubemapAsset);\n        }\n    }\n\n    function swapReflections(cubemap, cubemapAsset) {\n        if (cubemap.getCoreId() === cubemapAsset.node.getCoreId()) {\n            return;\n        }\n        var parent = cubemap.getParent();\n        var nodes = cubemap.disconnectNodes();\n        cubemap.destroy();\n        // HACK: Because node destroys are deferred to next animation loop, in this case we need to make\n        // our destroy() happen immediately.\n        cubemap._engine._doDestroyNodes();\n        var newCubemap = parent.addNode({\n            type: \"cubemap\",\n            coreId: cubemapAsset.node.getCoreId()\n        });\n        newCubemap.addNodes(nodes);\n    }\n\n    HumanRendererReflections.clearEnabled = function () {\n\n    };\n})();\n;/**\n @namespace Lightmaps control\n\n Human.renderer.lightmaps.setEnabled([\"environments:sky\"]);\n\n */\n(function () {\n    \"use strict\";\n\n    var HumanRendererLightmaps = Human.renderer.lightmaps = {};\n\n    HumanRendererLightmaps.setEnabled = function (reflectionId) {\n        var cubemapAsset = Human.assets.reflections.reflections[reflectionId];\n        if (!cubemapAsset) {\n            Human.log.error(\"Human.renderer.lightmaps.setEnabled\", \"reflection not found: \" + reflectionId);\n            return;\n        }\n        activateReflection(cubemapAsset);\n    };\n\n    function activateReflection(cubemapAsset) {\n        var scene = Human.renderer.getScene();\n        if (!scene) { // Scene not ready yet\n            return;\n        }\n        swapLightmapsRecursive(scene, cubemapAsset);\n    }\n\n    function swapLightmapsRecursive(node, cubemapAsset) {\n        if (node.type === \"cubemap\" || node.applyTo === \"lightmap\") {\n            swapLightmaps(node, cubemapAsset);\n        }\n        while (node.nodes && node.nodes.length > 0) {\n            var child = node.nodes[0];\n            swapLightmapsRecursive(child, cubemapAsset);\n        }\n    }\n\n    function swapLightmaps(cubemap, cubemapAsset) {\n        if (cubemap.getCoreId() === cubemapAsset.node.getCoreId()) {\n            return;\n        }\n        var parent = cubemap.getParent();\n        var nodes = cubemap.disconnectNodes();\n        cubemap.destroy();\n        // HACK: Because node destroys are deferred to next animation loop, in this case we need to make\n        // our destroy() happen immediately.\n        cubemap._engine._doDestroyNodes();\n        var newCubemap = parent.addNode({\n            type: \"cubemap\",\n            coreId: cubemapAsset.node.getCoreId()\n        });\n        newCubemap.addNodes(nodes);\n    }\n\n    HumanRendererLightmaps.clearEnabled = function () {\n\n    };\n})();\n;(function() {\n    \"use strict\";\n\n    var postprocess = Human.renderer.postprocess = {\n        scene: null,\n        framebuffersInitialized: false,\n        enabled: true,\n        effects: {},\n        currentConfig: []\n    };\n\n    postprocess.init = function(scene) {\n        this.scene = scene;\n\n        scene.createPostProcessType(\"blit\", [\n            \"precision highp float;\",\n            \"varying vec2 vUV;\",\n            \"uniform sampler2D uColorBuffer;\",\n            \"void main() {\",\n                \"gl_FragColor = texture2D(uColorBuffer, vUV);\",\n            \"}\",\n        ].join(\"\\n\"));\n\n        for (var effect in this.effects) {\n            this.effects[effect].init(scene);\n        }\n\n    };\n\n    postprocess.enable = function() {\n        if (!this.enabled) {\n            this.enabled = true;\n            postprocess.parse(this.currentConfig);\n        }  \n    }; \n    \n    postprocess.disable = function() {\n        if (this.enabled) {\n            this.destroyPipeline();\n            this.enabled = false;\n        }\n    };\n\n    postprocess.parse = function(cfg) {\n        this.destroyPipeline();\n\n        this.currentConfig = cfg;\n\n        if (!this.enabled) {\n            return;\n        }\n\n        var pipeline = [];\n\n        for (var i = 0, len = cfg.length; i < len; ++i) {\n            var stage = cfg[i];\n\n            var effect = Human.renderer.postprocess.effects[stage.effect];\n            if (effect) {\n                pipeline.push(stage.effect);\n                Human.renderer.postprocess.effects[stage.effect].configure(stage);\n            } else {\n                Human.log.error(\"Unknown postprocess effect: \", stage.effect);\n            }\n        }\n\n        createPipeline(pipeline);\n    };\n\n    postprocess.destroyPipeline = function() {\n        this.scene.postProcessOpaque(null);\n        this.scene.postProcessFinal(null);\n    };\n\n    postprocess.updateProjection = function() {\n        for (var effect in this.effects) {\n            if (this.effects[effect].updateProjection) {\n                this.effects[effect].updateProjection();\n            }\n        }\n    };\n\n    postprocess.updateCanvas = function() {\n        for (var effect in this.effects) {\n            if (this.effects[effect].updateCanvas) {\n                this.effects[effect].updateCanvas();\n            }\n        }\n    };\n\n    function createPipeline(effects) {\n        if (!postprocess.enabled) {\n            return;\n        }\n\n        var ctx = {\n            opaquePipeline: [],\n            transparentPipeline: [],\n            finalPipeline: [],\n            pipelineFramebuffers: {\n                opaque: {\n                    read: \"__MAIN\",\n                    write: \"__BDS_COLOR1\"\n                },\n                transparent: {\n                    read: \"__MAIN\",\n                    write: \"__BDS_COLOR1\"\n                },\n                final: {\n                    read: \"__MAIN\",\n                    write: \"__BDS_COLOR1\"\n                }\n            },\n\n            getIOFramebuffers: function(pipeline) {\n                var fbs = this.pipelineFramebuffers[pipeline];\n                var current = {\n                    read: fbs.read,\n                    write: fbs.write\n                };\n\n                if (fbs.write === \"__BDS_COLOR1\") {\n                    fbs.read = \"__BDS_COLOR1\";\n                    fbs.write = \"__BDS_COLOR2\";\n                } else {\n                    fbs.read = \"__BDS_COLOR2\";\n                    fbs.write = \"__BDS_COLOR1\";\n                }\n\n                return current;\n            }\n        };\n\n        var finalStage, textures, readFromMain;\n        var i, len;\n\n        for (i = 0, len = effects.length; i < len; ++i) {\n            var effect = postprocess.effects[effects[i]];\n            if (effect) {\n                effect.addStage(ctx);\n            } else {\n                Human.log.error(\"Unknown effect: \" + effects[i]);\n            }\n        }\n\n        if (ctx.opaquePipeline.length === 0 && ctx.transparentPipeline.length === 0 && ctx.finalPipeline.length === 0) {\n            return;\n        }\n\n        if (!postprocess.framebuffersInitialized) {\n            postprocess.scene.createFramebuffer(\"__BDS_COLOR1\", {\n                depthAttachment: false\n            });\n\n            postprocess.scene.createFramebuffer(\"__BDS_COLOR2\", {\n                depthAttachment: false\n            });\n\n            postprocess.framebuffersInitialized = true;\n        }\n        \n        if (ctx.opaquePipeline.length > 0) {\n            finalStage = ctx.opaquePipeline[ctx.opaquePipeline.length - 1];\n            textures = finalStage.textures;\n            readFromMain = false;\n            for (var sampler in textures) {\n                if (textures[sampler].framebuffer === \"__MAIN\") {\n                    readFromMain = true;\n                    break;\n                }\n            }\n\n            if (readFromMain) {\n                ctx.opaquePipeline.push({\n                    type: \"blit\",\n                    id: \"blitOpaqueToMain\",\n                    textures: {\n                        uColorBuffer: {\n                            framebuffer: finalStage.framebuffer,\n                            target: \"color\",\n                        }\n                    },\n                    framebuffer: \"__MAIN\"\n                });\n            } else {\n                finalStage.framebuffer = \"__MAIN\";\n            }\n            postprocess.scene.postProcessOpaque(ctx.opaquePipeline);\n        }\n\n        if (ctx.finalPipeline.length > 0) {\n            finalStage = ctx.finalPipeline[ctx.finalPipeline.length - 1];\n            finalStage.framebuffer = false;\n        } else {\n            ctx.finalPipeline.push({\n                type: \"blit\",\n                id: \"blitToScreen\",\n                textures: {\n                    uColorBuffer: {\n                        framebuffer: \"__MAIN\",\n                        target: \"color\",\n                    }\n                },\n                framebuffer: false\n            });\n        }\n        postprocess.scene.postProcessFinal(ctx.finalPipeline);\n    }\n})();\n;(function() {\n    \"use strict\";\n\n    var MESH_MAP_DELIMETER = \"---\";\n\n    var draw = Human.renderer.draw = {\n        initalized: false,\n        erase: false,\n        brushRadius: 20,\n        brushColor: vec3.fromValues(1, 0, 0),\n        brushColorCSS: null\n    };\n\n    var packer = null;\n    var scene = null;\n    var offscreenCanvas = null;\n    var offscreenContext2D = null;\n    var submeshes = {};\n    var painted = false;\n\n    var tempVec3a = vec3.create();\n\n    var currentPatchId = 0;\n    var pickedObjects = {};\n\n    var canvasWidth = 0;\n    var canvasHeight = 0;\n\n    var lastX = -1;\n    var lastY = -1;\n\n    draw.init = function() {\n        if (this.initalized) {\n            return;\n        }\n\n        scene = Human.renderer.getScene();\n        offscreenCanvas = document.createElement(\"canvas\");\n        offscreenContext2D = offscreenCanvas.getContext(\"2d\");\n        packer = new GrowingPacker();\n\n        this.initalized = true;\n\n        this.setBrushColor(this.brushColor[0], this.brushColor[1], this.brushColor[2]);\n        this.updateCanvas();\n    };\n\n    draw.setBrushColor = function(r, g, b) {\n        this.brushColor[0] = r;\n        this.brushColor[1] = g;\n        this.brushColor[2] = b;\n\n        this.brushColorCSS = Human.utils.floatRGBToHexString(r, g, b);\n    };\n\n    draw.beginStroke = function(x, y) {\n        setBrush();\n\n        Human.renderer.canvas.context2D.beginPath();\n        Human.renderer.canvas.context2D.arc(x, y, this.brushRadius, 0, 2 * Math.PI, false);\n        Human.renderer.canvas.context2D.fill(); \n        Human.renderer.canvas.context2D.beginPath();\n        Human.renderer.canvas.context2D.moveTo(x, y);\n        captureMeshData(x, y);\n        lastX = x;\n        lastY = y;\n    };\n\n    draw.strokeTo = function(x, y) {\n        Human.renderer.canvas.context2D.lineTo(x, y);\n        Human.renderer.canvas.context2D.stroke();\n\n        var step = this.brushRadius * 2;\n        var dx = x - lastX;\n        var dy = y - lastY;\n        var d = Math.sqrt(dx * dx + dy * dy);\n        if (d > step) {\n            var numSteps = Math.floor(d / step);\n            var stepx = step * (dx / d);\n            var stepy = step * (dy / d);\n            for (var i = 1; i <= numSteps; ++i) {\n                var curx = lastX + (i * stepx);\n                var cury = lastY + (i * stepy);\n                captureMeshData(curx, cury);\n            }\n        }\n\n        captureMeshData(x, y);\n        lastX = x;\n        lastY = y;\n    };\n\n    draw.record = function() {\n        if(painted) {\n            updateDrawTextures();\n            ++currentPatchId;\n        }\n        for(var submeshId in submeshes) {\n            var meshData = submeshes[submeshId];\n            // We've added a new patch, increment counter\n            meshData.bb.min[0] = meshData.bb.min[1] = Infinity; \n            meshData.bb.max[0] = meshData.bb.max[1] = -Infinity; \n        }\n        pickedObjects = {};\n        Human.renderer.canvas.context2D.clearRect(0, 0, canvasWidth, canvasHeight);\n        offscreenContext2D.clearRect(0, 0, canvasWidth, canvasHeight);\n        painted = false;\n    };\n\n    draw.updateCanvas = function() {\n        if (!this.initalized) {\n            return;\n        }\n\n        var canvas = Human.renderer.canvas;\n        offscreenCanvas.width = canvasWidth = canvas.width;\n        offscreenCanvas.height = canvasHeight = canvas.height;\n    };\n\n    function setBrush() {\n        var drawCtx = Human.renderer.canvas.context2D;\n        drawCtx.lineWidth = draw.brushRadius * 2;\n        drawCtx.lineJoin = \"round\";\n        drawCtx.lineCap = \"round\";\n        if(draw.erase) {\n            drawCtx.strokeStyle = \"#FFFFFF\";\n            drawCtx.fillStyle = \"#FFFFFF\";\n        } else {\n            drawCtx.strokeStyle = draw.brushColorCSS;\n            drawCtx.fillStyle = draw.brushColorCSS;\n        }\n    }\n\n    var worldNormal = vec4.create();\n    var v1 = vec3.create();\n    var v2 = vec3.create();\n    var v3 = vec3.create();\n    var inverseWorldMat = mat4.create();\n    var modelPos = vec3.create();\n    function captureMeshData(x, y) {\n        var hit = Human.renderer.pick.corePick(x, y, {rayPick: true});\n        if(!hit || !hit.worldPos) {\n            return;\n        }\n\n        var submeshId = hit.objectId + MESH_MAP_DELIMETER + hit.renderableIndex;\n        var object = Human.scene.objects[hit.objectId];\n        var renderable = object.renderables[hit.renderableIndex];\n        if(!submeshes[submeshId]) {\n            deindexMesh(renderable, submeshId);\n        }\n\n        var radius = Human.renderer.canvasCircleToWorldSphereRadius(x, y, draw.brushRadius, hit.worldPos);\n        var worldPos = hit.worldPos;\n        var geometry = renderable.geometryNode;\n        var drawable = renderable.getRenderObject();\n        \n        //get triangle which intersect with the sphere\n        mat4.invert(inverseWorldMat, object.worldMatrix);\n        vec3.transformMat4(modelPos, worldPos, inverseWorldMat);\n        \n        var meshData = submeshes[submeshId];\n        var triangleUVs = meshData.triangleUVs;\n        var i, len;\n\n        var triangleList = Human.math.intersections.spherePolyhedron(geometry, modelPos, radius);\n        if (triangleList.length === 0) {\n            return;\n        }\n\n        var eraseTriangles = {};\n        if(draw.erase) {\n            var eraseTris = Human.math.intersections.sphereInPolyhedron(geometry, modelPos, radius);\n            for (i = 0, len = eraseTris.length; i < len; ++i) {\n                eraseTriangles[eraseTris[i]] = true;\n            }\n        }\n\n        var forward = Human.renderer.camera.getLookDir(tempVec3a);\n        var triangleIndex, uvs;\n        for(i = 0, len = triangleList.length; i < len; ++i) {\n            triangleIndex = triangleList[i];\n\n            if (eraseTriangles[triangleIndex] && triangleUVs[triangleIndex]) {\n                delete triangleUVs[triangleIndex];\n                continue;\n            }\n\n            drawable.getTrianglePositionOnSurface(triangleIndex * 3, v1, v2, v3);\n            Human.math.triangleNormal(v1, v2, v3, worldNormal); // Model normal here.\n            vec4.transformMat4(worldNormal, worldNormal, object.worldMatrix);\n\n            if (vec3.dot(worldNormal, forward) > 0) {\n                continue;\n            }\n            \n            drawable.getPointInWorldSpace(v1, v1);\n            drawable.getPointInWorldSpace(v2, v2);\n            drawable.getPointInWorldSpace(v3, v3);\n\n            if (!triangleUVs[triangleIndex]) {\n                uvs = new Array(3);\n                calculateTriangleUVs(v1, v2, v3, uvs);\n                triangleUVs[triangleIndex] = {\n                    patchId: currentPatchId,\n                    uvs: uvs\n                };\n            } else if (triangleUVs[triangleIndex].patchId !== currentPatchId) {\n                triangleUVs[triangleIndex].patchId = currentPatchId;\n                calculateTriangleUVs(v1, v2, v3, triangleUVs[triangleIndex].uvs);\n            }\n        }\n      \n        // calculate uv bounding box\n        var bb = meshData.bb;\n        for (triangleIndex in triangleUVs) {\n            uvs = triangleUVs[triangleIndex].uvs;\n            var uv1 = uvs[0];\n            var uv2 = uvs[1];\n            var uv3 = uvs[2];\n            bb.min[0] = Math.min(bb.min[0], uv1[0]);\n            bb.min[0] = Math.min(bb.min[0], uv2[0]);\n            bb.min[0] = Math.min(bb.min[0], uv3[0]);\n\n            bb.max[0] = Math.max(bb.max[0], uv1[0]);\n            bb.max[0] = Math.max(bb.max[0], uv2[0]);\n            bb.max[0] = Math.max(bb.max[0], uv3[0]);\n\n            bb.min[1] = Math.min(bb.min[1], uv1[1]);\n            bb.min[1] = Math.min(bb.min[1], uv2[1]);\n            bb.min[1] = Math.min(bb.min[1], uv3[1]);\n\n            bb.max[1] = Math.max(bb.max[1], uv1[1]);\n            bb.max[1] = Math.max(bb.max[1], uv2[1]);\n            bb.max[1] = Math.max(bb.max[1], uv3[1]);\n        }\n\n        pickedObjects[submeshId] = renderable;\n        painted = true;\n    }\n\n    var drawList = [];\n    var patchList = [];\n    function updateDrawTextures() {\n        drawList.length = 0;\n\n        var submeshId;\n        var meshData;\n        for (submeshId in pickedObjects) {\n            meshData = submeshes[submeshId];\n            drawList.push(pickedObjects[submeshId].getRenderObject());\n        }\n\n        Human.renderer.forceRenderFrame({\n            custom: {\n                renderMode: \"drawTexture\",\n                objects: drawList\n            }\n        });\n\n        var mainCanvas = Human.renderer.canvas.canvas;\n        var drawCanvas = Human.renderer.canvas.annotationCanvas;\n        var drawCtx = Human.renderer.canvas.context2D;\n\n\n        //draw webgl canvas to image (only draw textures)\n        offscreenContext2D.globalCompositeOperation = 'source-over';\n        offscreenContext2D.drawImage(mainCanvas, 0, 0);\n\n        if (draw.erase) {\n            offscreenContext2D.globalCompositeOperation = \"destination-out\";\n        } else {\n            offscreenContext2D.globalCompositeOperation = 'source-over';\n        }        \n\n        //draw strokes or erase.\n        offscreenContext2D.drawImage(drawCanvas, 0, 0);\n\n        //as we need to use canvas to resize the image, we need to save a copy of the screen\n        var strokeImageData = offscreenContext2D.getImageData(0, 0, canvasWidth, canvasHeight);\n\n        //remember to clean the scale canvas\n        offscreenContext2D.clearRect(0, 0, canvasWidth, canvasHeight);\n\n        var i, len, patchId;\n        for (submeshId in pickedObjects) {\n            var renderable = pickedObjects[submeshId];\n            meshData = submeshes[submeshId];\n            var bb = meshData.bb;\n            if(bb.min[0] === Infinity) {\n                Human.console.error(\"Draw mesh data invalid.\");\n                continue;\n            }\n             //set back the copy of the screen\n            drawCtx.putImageData(strokeImageData, 0, 0);\n            \n            var imageData = drawCtx.getImageData(\n                bb.min[0] * canvasWidth, \n                bb.min[1] * canvasHeight, \n                (bb.max[0] - bb.min[0]) * canvasWidth, \n                (bb.max[1] - bb.min[1]) * canvasHeight\n            );\n            drawCtx.clearRect(0, 0, canvasWidth, canvasHeight);\n            \n            //add attributes to the current patch\n            var patches = meshData.patches;\n            patches[currentPatchId] = {\n                w: imageData.width,\n                h: imageData.height,\n                imageData: imageData,\n            };\n\n            patchList.length = 0;\n            for (patchId in patches) {\n                patchList.push(patches[patchId]);\n            }\n\n            //rearrange patches\n            patchList.sort(function (a, b) {\n                return b.h - a.h;\n            });\n            \n            packer.fit(patchList);\n\n            //enlarge drawCanvas\n            var textureWidth = Math.min(Human.math.nextPowerOf2(packer.root.w), 4096);\n            var textureHeight = Math.min(Human.math.nextPowerOf2(packer.root.h), 4096);\n\n            drawCanvas.width = Math.max(drawCanvas.width, textureWidth);\n            drawCanvas.height = Math.max(drawCanvas.height, textureHeight);\n\n            //set texture\n            for(i = 0, len = patchList.length; i < len; ++i) {\n                drawCtx.putImageData(patchList[i].imageData, patchList[i].fit.x, patchList[i].fit.y);\n            }\n\n            var textureData = drawCtx.getImageData(0, 0, textureWidth, textureHeight);\n\n            renderable.drawTexture.setImage(textureData);\n            \n            //set uvs\n            var triangleUVs = meshData.triangleUVs;\n            var uvs = renderable.geometryNode.getUVs();\n            var geoDrawUVs = uvs[uvs.length - 1];\n\n            var activePatches = {};\n\n            for (var triIndex in triangleUVs) {\n                var triangleData = triangleUVs[triIndex];\n\n                if(triangleData.patchId === currentPatchId) {\n                    // Normalize UVs to 0..1 range\n                    var minx = bb.min[0];\n                    var miny = bb.min[1];\n                    var rangex = bb.max[0] - bb.min[0];\n                    var rangey = bb.max[1] - bb.min[1];\n                    for (i = 0; i < 3; ++i) {\n                        var uv = triangleData.uvs[i];\n                        uv[0] = (uv[0] - minx) / rangex;\n                        uv[1] = (uv[1] - miny) / rangey;\n                    }\n                }\n                var patch = patches[triangleData.patchId];\n                var uv1 = triangleData.uvs[0];\n                var uv2 = triangleData.uvs[1];\n                var uv3 = triangleData.uvs[2];\n                var xNorm = patch.fit.x / textureWidth;\n                var yNorm = patch.fit.y / textureHeight;\n                var wNorm = patch.w / textureWidth;\n                var hNorm = patch.h / textureHeight;\n\n                geoDrawUVs[triIndex * 3 * 2] = uv1[0] * wNorm + xNorm;\n                geoDrawUVs[triIndex * 3 * 2 + 1] = 1 - uv1[1] * hNorm + 1 - yNorm;\n\n                geoDrawUVs[(triIndex * 3 + 1) * 2] = uv2[0] * wNorm + xNorm;\n                geoDrawUVs[(triIndex * 3 + 1) * 2 + 1] = 1 - uv2[1] * hNorm + 1 - yNorm;\n\n                geoDrawUVs[(triIndex * 3 + 2) * 2] = uv3[0] * wNorm + xNorm;\n                geoDrawUVs[(triIndex * 3 + 2) * 2 + 1] = 1 - uv3[1] * hNorm + 1 - yNorm;\n\n                activePatches[triangleData.patchId] = true;\n            }\n\n            for (patchId in patches) {\n                if (!activePatches[patchId]) {\n                    delete patches[patchId];\n                }\n            }\n\n            renderable.geometryNode.setUV(uvs.length - 1, geoDrawUVs);\n\n            //setback canvas size\n            drawCanvas.width = canvasWidth;\n            drawCanvas.height = canvasHeight;\n        }\n    }\n\n    function calculateTriangleUVs(v1, v2, v3, uvs) {\n        var uv1 = vec2.create();\n        Human.renderer.worldPositionToCanvas(v1, uv1);\n        uv1[0] /= canvasWidth;\n        uv1[1] /= canvasHeight;\n        uvs[0] = uv1;\n\n        var uv2 = vec2.create();\n        Human.renderer.worldPositionToCanvas(v2, uv2);\n        uv2[0] /= canvasWidth;\n        uv2[1] /= canvasHeight;\n        uvs[1] = uv2;\n\n        var uv3 = vec2.create();\n        Human.renderer.worldPositionToCanvas(v3, uv3);\n        uv3[0] /= canvasWidth;\n        uv3[1] /= canvasHeight;\n        uvs[2] = uv3; \n    }\n    \n    var decompressedUV1 = vec2.create();\n    var decompressedUV2 = vec2.create();\n    var decompressedUV3 = vec2.create();\n    function deindexMesh(renderable, submeshId) {\n        var geometry = renderable.geometryNode;\n\n        //deindexMesh mesh\n        var mesh = {\n            type: \"geometry\",\n            primitive: \"triangles\",\n            id: submeshId + \"_draw_geometry\",\n            positionDecodeMat: geometry.getPositionDecodeMat()\n        };\n\n        var positions = geometry.getPositions();\n        var normals = geometry.getNormals();\n        var uvs = geometry.getUVs();\n        var indices = geometry.getIndices();\n\n        var numVertices = indices.length;\n        var PosType = positions.constructor;\n        mesh.positions = new PosType(numVertices * 3);\n        if(normals) {\n            if(geometry.hasCompressedNormals()) {\n                mesh.normals = new Int8Array(numVertices * 2);\n            } else {\n                mesh.normals = new Float32Array(numVertices * 3);\n            }\n        }\n        if(uvs) {\n            mesh.uvs = new Array(uvs.length + 1);\n            var k = 0;\n            for(var len0 = uvs.length; k < len0;  k++) {\n                mesh.uvs[k] = new Float32Array(numVertices * 2);\n            }\n            mesh.uvs[k] = new Float32Array(numVertices * 2);\n        } else {\n            mesh.uvs = [new Float32Array(numVertices * 2)];\n        }\n\n        var outPositions = mesh.positions;\n        var outNormals = mesh.normals;\n        var outUVs = mesh.uvs;\n        for(var i = 0, len1 = indices.length; i < len1; i += 3) {\n            var idx0 = indices[i];\n            var idx1 = indices[i + 1];\n            var idx2 = indices[i + 2];\n\n            outPositions[i * 3] = positions[idx0 * 3];\n            outPositions[i * 3 + 1] = positions[idx0 * 3 + 1];\n            outPositions[i * 3 + 2] = positions[idx0 * 3 + 2];\n            outPositions[i * 3 + 3] = positions[idx1 * 3];\n            outPositions[i * 3 + 4] = positions[idx1 * 3 + 1];\n            outPositions[i * 3 + 5] = positions[idx1 * 3 + 2];\n            outPositions[i * 3 + 6] = positions[idx2 * 3];\n            outPositions[i * 3 + 7] = positions[idx2 * 3 + 1];\n            outPositions[i * 3 + 8] = positions[idx2 * 3 + 2];\n\n            if(outNormals) {\n                if(geometry.hasCompressedNormals()) {\n                    outNormals[i * 2] = normals[idx0 * 2];\n                    outNormals[i * 2 + 1] = normals[idx0 * 2 + 1];\n                    outNormals[i * 2 + 2] = normals[idx1 * 2];\n                    outNormals[i * 2 + 3] = normals[idx1 * 2 + 1];\n                    outNormals[i * 2 + 4] = normals[idx2 * 2];\n                    outNormals[i * 2 + 5] = normals[idx2 * 2 + 1];\n                } else {\n                    outNormals[i * 3] = normals[idx0 * 3];\n                    outNormals[i * 3 + 1] = normals[idx0 * 3 + 1];\n                    outNormals[i * 3 + 2] = normals[idx0 * 3 + 2];\n                    outNormals[i * 3 + 3] = normals[idx1 * 3];\n                    outNormals[i * 3 + 4] = normals[idx1 * 3 + 1];\n                    outNormals[i * 3 + 5] = normals[idx1 * 3 + 2];\n                    outNormals[i * 3 + 6] = normals[idx2 * 3];\n                    outNormals[i * 3 + 7] = normals[idx2 * 3 + 1];\n                    outNormals[i * 3 + 8] = normals[idx2 * 3 + 2];\n                }\n            }\n\n            if(outUVs) {\n                var j = 0;\n                var inUV, outUV;\n                if(uvs) {\n                    for(var len2 = uvs.length; j < len2; j++) {\n                        inUV = uvs[j]; \n                        outUV = outUVs[j]; \n                        decompressedUV1[0] = inUV[idx0 * 2];\n                        decompressedUV1[1] = inUV[idx0 * 2 + 1];\n                        decompressedUV2[0] = inUV[idx1 * 2];\n                        decompressedUV2[1] = inUV[idx1 * 2 + 1];\n                        decompressedUV3[0] = inUV[idx2 * 2];\n                        decompressedUV3[1] = inUV[idx2 * 2 + 1];\n                        \n                        var decodeMat = geometry.getUVDecodeMat(j);\n                        if (decodeMat) {\n                            Human.math.decompressUV(decompressedUV1, decompressedUV1, decodeMat);\n                            Human.math.decompressUV(decompressedUV2, decompressedUV2, decodeMat);\n                            Human.math.decompressUV(decompressedUV3, decompressedUV3, decodeMat);\n                        }\n                        outUV[i * 2] = decompressedUV1[0];\n                        outUV[i * 2 + 1] = decompressedUV1[1];\n                        outUV[i * 2 + 2] = decompressedUV2[0];\n                        outUV[i * 2 + 3] = decompressedUV2[1];\n                        outUV[i * 2 + 4] = decompressedUV3[0];\n                        outUV[i * 2 + 5] = decompressedUV3[1];\n                    }\n                }\n                outUV = outUVs[j]; \n                outUV[i * 2] = -1; \n                outUV[i * 2 + 1] = -1;\n                outUV[i * 2 + 2] = -1; \n                outUV[i * 2 + 3] = -1;\n                outUV[i * 2 + 4] = -1; \n                outUV[i * 2 + 5] = -1;\n            }\n\n        }\n\n        submeshes[submeshId] = {\n            triangleUVs: {}, \n            patches: {},\n            bb: {\n                min: vec2.fromValues(Infinity, Infinity),\n                max: vec2.fromValues(-Infinity, -Infinity)\n            }\n        };\n\n        var uvidx = 0;\n        if(uvs) {\n            uvidx = uvs.length;\n        }\n\n        renderable.attachDrawTexture({\n            type: \"texture\",\n            applyFrom: \"uv\" + uvidx, // Apply to last set of UVs\n            applyTo: \"color\",\n            blendMode: \"conditionalAlpha\",\n            drawTexture: true,\n        });\n\n        var geometryId = submeshId + \"-draw-mesh\";\n        Human.assets.geometries.createGeometry(geometryId, { geometry: mesh });\n        renderable.setGeometry(geometryId);\n    }\n\n})();\n;/**\n * @namespace Manages camera curve path, an array of 3d cubic bezier curves\n */\n(function () {\n    \"use strict\";\n\n    Human.renderer.camera.CurvePath = function() {\n        var curves = [];\n\n        var numPoints, numCurves;\n\n        var pathLength = 0;\n\n        var tempVec3 = vec3.create();\n\n        var Bezier = Human.math.bezier;\n\n        /** Build the curves array.\n         * param {[Human.math.vec3]} points\n         */\n        this.init = function(points) {\n            curves = [];\n            pathLength = 0;\n            numPoints = points.length;\n            numCurves = numPoints - 1;\n\n            if(numPoints < 2) {\n                // invalid\n                Human.log.error('curvePath init no enough points');\n            }\n\n            // used to compute control points at edge\n            var startPoint = vec3.create();\n            var endPoint = vec3.create();\n\n            vec3.subtract(tempVec3, points[0], points[1]);\n            vec3.scale(tempVec3, tempVec3, 0.25);\n            vec3.add(startPoint, points[0], tempVec3);\n\n            vec3.subtract(tempVec3, points[numPoints - 1], points[numPoints - 2]);\n            vec3.scale(tempVec3, tempVec3, 0.25);\n            vec3.add(endPoint, points[numPoints - 1], tempVec3);\n\n            var i;\n            var p00, p0, p1, p11;   // 4 interpolate points\n            var b0;\n            var b1 = vec3.create();\n            var b2 = vec3.create();\n            var b3;   // 4 control points for one cubic bezier curve\n            for(i = 1; i < numPoints; ++i) {\n                p0 = points[i-1];\n                p1 = points[i];\n                b0 = p0;\n                b3 = p1;\n\n                // b1 = b0 + ((p1 - p00) * 0.25);\n                if ( i <= 1) {\n                    vec3.subtract(tempVec3, p0, startPoint);\n                } else {\n                    p00 = points[i-2];\n                    vec3.subtract(tempVec3, p1, p00);\n                    vec3.scale(tempVec3, tempVec3, 0.25);\n                }\n                vec3.add(b1, b0, tempVec3);\n\n                // b2 = b3 - ((p2 - p0) * 0.25);\n                if ( i >= numPoints - 1) {\n                    vec3.subtract(tempVec3, endPoint, p1);\n                } else {\n                    p11 = points[i+1];\n                    vec3.subtract(tempVec3, p11, p0);\n                    vec3.scale(tempVec3, tempVec3, 0.25);\n                }\n                vec3.subtract(b2, b3, tempVec3);\n\n                curves.push(new Bezier(\n                    b0[0], b0[1], b0[2],\n                    b1[0], b1[1], b1[2],\n                    b2[0], b2[1], b2[2],\n                    b3[0], b3[1], b3[2]\n                ));\n            }\n\n            // calculate curve path total length by summing up length of each segment\n            for(i = 0; i < numCurves; ++i) {\n                pathLength += curves[i].length();\n            }\n\n        };\n\n        /**\n         * t: 0-1\n         */\n\n        this.getPosition = function(t) {\n            var p = this.getParameter(t);\n\n            return {position: curves[p.i].compute(p.t01), i: p.i, t01: p.t01};\n        };\n\n        /**\n         * i: 0 , numPoints - 2\n         */\n        this.getParameter = function(t) {\n            var i, t01;\n            t01 = t * (numPoints-1);\n            t01 = Human.math.clamp(t01, 0, numPoints - 1);\n\n            i = Math.floor(t01);\n            if (i >= numPoints - 1) {\n                i -= 1;\n            }\n\n            t01 -= i;\n\n            return {i: i, t01: t01};\n        };\n\n        /**\n         *\n         */\n        this.getPathLength = function() {\n            return pathLength;\n        };\n    };\n})();\n;/**\n * @namespace Manages camera flights\n */\n(function () {\n    \"use strict\";\n\n    var fly = Human.renderer.camera.fly = {};\n\n    // TODO: delete this, for tweaking only\n    fly.flyTimeScale = 1;\n    fly.velocity = 1.0;\n    fly.cylindricalArcScale = 1;\n    fly.cylindricalView = false;\n    fly.cylindricalOnly = false;\n    fly.cylindricalRotationLerpMin = Math.PI / 6;\n    fly.cylindricalRotationLerpMax = Math.PI / 2;\n    fly.cylindricalRadiusLerpMin = 0.2;\n    fly.cylindricalRadiusLerpMax = 1.0;\n\n    var stopFOV = 55;\n\n    var callbacks = [];\n    var animation = null;\n\n    var eyeCurvePath = new Human.renderer.camera.CurvePath();\n    var lookCurvePath = new Human.renderer.camera.CurvePath();\n\n    fly.onFrame = function () {\n        if (animation) {\n            animation.update(Date.now());\n        }\n    };\n\n    fly.cancelAnimation = function () {\n        if (animation) {\n            //animation._onComplete(animation);\n            finishAnimation();\n            animation = null;\n        }\n    };\n\n    /** Initiates camera flight along a catmull rom spline\n     *\n     * <p>This method can be called again at any time during a fly-to to initiate a new flight\n     * that replaces any already in progress.</p>\n     *\n     * @param {*} params Parameters for various flight modes\n     * @param {[Object]} [params.points]\n     * @param {*} [params.points[].eye] (alias position) Eye position to fly to\n     * @param {*} [params.points[].look] (alias look) Look vector to fly to\n     * @param {Number} [params.velocity] Camera flight velocity factor - default is 1.0\n     * @param {Boolean} [params.constrainUp]\n     * @param {Boolean} [params.easeIn]\n     * @param {Boolean} [params.easeOut]\n     * @param {Function} ok Optional callback, fired when camera arrives at target\n     * @param {Function} error Optional error callback\n     * @memberof Human.renderer.camera.fly\n     */\n    fly.flyAlongCurvePath = function (params, ok, error) {\n\n        ok = ok || function () {\n        };\n        error = error || function (msg) {\n            Human.log.error(\"Human.renderer.camera.fly.flyAlongCurvePath\", msg);\n            ok();\n        };\n\n        if(!params) {\n            error(\"params must be defined\");\n            ok();\n        }\n\n        var velocity = params.velocity !== undefined ? params.velocity : 1;\n\n\n        var eyePoints = [];\n        var lookPoints = [];\n        var upVecs = [];\n\n        var i, len;\n        for(i = 0, len = params.points.length; i < len; ++i) {\n            eyePoints.push(Human.math.vec3ObjToArray(params.points[i].eye || params.points[i].position));\n            lookPoints.push(Human.math.vec3ObjToArray(params.points[i].look || params.points[i].target));\n            upVecs.push(Human.math.vec3ObjToArray(params.points[i].up));\n        }\n\n        eyeCurvePath.init(eyePoints);\n        lookCurvePath.init(lookPoints);\n\n        flyAlongCurvePath({\n            eyeCurvePath: eyeCurvePath, lookCurvePath: lookCurvePath, upVecs: upVecs,\n            velocity: velocity, constrainUp: params.constrainUp,\n            easeIn: params.easeIn,\n            easeOut: params.easeOut\n        }, ok);\n\n    };\n\n    function flyAlongCurvePath(params, ok) {\n\n        Human.renderer.camera.lock = true;\n\n        // Keep callbacks already registered so\n        // that their owners still get completion\n        if (ok) {\n            callbacks.push(ok);\n        }\n        params = params || {};\n\n        // Replace old animation if one existing\n        animation = new Human.renderer.camera.fly.CurvePathAnimation({\n            //mode: 'curvePath',\n            eyeCurvePath: params.eyeCurvePath,\n            lookCurvePath: params.lookCurvePath,\n            upVecs: params.upVecs,\n            velocity: params.velocity,\n            constrainUp: params.constrainUp,\n            easeIn: params.easeIn,\n            easeOut: params.easeOut,\n\n            onComplete: finishAnimation\n        });\n\n        animation.update(Date.now());\n    }\n\n    /** Initiates camera flight to the given target\n     *\n     * <p>This method can be called again at any time during a fly-to to initiate a new flight\n     * that replaces any already in progress.</p>\n     *\n     * @param {*} params Parameters for various flight modes\n     * @param {String} [params.objectId] Scene object to fly to, given by ID\n     * @param {*} [params.boundary] Boundary to fly to\n     * @param {*} [params.eye] Eye position to fly to, used in conjunction with params.look\n     * @param {*} [params.look] Look vector to fly to, used in conjunction with params.eye\n     * @param {Number} [params.animationDuration] Time in seconds that it takes the camera to arrive at its target - default is null, overrides velocity when given.\n     * @param {Number} [params.velocity] Camera flight velocity factor - default is 1.0, overridden by animationDuration.\n     * @param {Number} [params.arc] Camera flight arc factor - 0.0 for no arc, 1.0 for maximum arc - default is 0.0\n     * @param {Function} ok Optional callback, fired when camera arrives at target\n     * @param {Function} error Optional error callback\n     * @memberof Human.renderer.camera.fly\n     */\n    fly.flyTo = function (params, ok, error) {\n        var object, boundary, objectId;\n\n        ok = ok || function () {\n        };\n        error = error || function (msg) {\n            Human.log.error(\"Human.renderer.camera.fly\", msg);\n            ok();\n        };\n\n        if (params.objectId) {\n\n            objectId = params.objectId;\n            object = Human.scene.objects[objectId];\n            if (!object) {\n                error(\"No scene object found for the given ID: '\" + objectId + \"'\");\n                return;\n            }\n            boundary = object.getBoundary();\n            if (boundary) {\n                flyTo({\n                        target: { boundary: boundary },\n                        arc: params.arc,\n                        backOff: params.backOff,\n                        cylindricalView: params.cylindricalView,\n                        animationDuration: params.animationDuration,\n                        velocity: params.velocity,\n                        easeIn: params.easeIn,\n                        easeOut: params.easeOut\n                    },\n                    ok);\n            } else {\n                ok();\n            }\n        } else if (params.boundary) {\n\n            boundary = params.boundary;\n            flyTo({\n                target: { boundary: boundary },\n                arc: params.arc,\n                backOff: params.backOff,\n                cylindricalView: params.cylindricalView,\n                animationDuration: params.animationDuration,\n                velocity: params.velocity,\n                easeIn: params.easeIn,\n                easeOut: params.easeOut\n            }, ok);\n\n        }  else if (params.eye || params.look) {\n\n            flyTo({\n                    target: { eye: params.eye, look: params.look, up: params.up },\n                    arc: params.arc,\n                    backOff: params.backOff,\n                    animationDuration: params.animationDuration,\n                    velocity: params.velocity,\n\n                    // Want to animate \"up\" vector, which we don't animate by default\n                    // in order to preserve camera's upwards orientation while flying\n                    constrainUp: false,\n\n                    cylindricalView: params.cylindricalView,\n                    easeIn: params.easeIn,\n                    easeOut: params.easeOut\n                },\n                ok);\n\n        } else {\n\n            // Fly to default position\n\n            flyTo({\n                    target: {\n                        eye: { x: 0.0, y: 6.0, z: -70.0 },\n                        look: { x: 0.0, y: 0.0, z: 0 },\n                        up: {x: 0.0, y: 1.0, z: 0.0}\n                    },\n                    arc: params.arc,\n                    backOff: params.backOff,\n                    cylindricalView: params.cylindricalView,\n                    animationDuration: params.animationDuration,\n                    velocity: params.velocity,\n                    easeIn: params.easeIn,\n                    easeOut: params.easeOut\n                },\n                ok);\n        }\n    };\n\n    function flyTo(params, ok) {\n\n        Human.renderer.camera.lock = true;\n\n        // Keep callbacks already registered so\n        // that their owners still get completion\n        if (ok) {\n            callbacks.push(ok);\n        }\n        params = params || {};\n        // Replace old animation if one existing\n        animation = new Human.renderer.camera.fly.Animation({\n            animationDuration: params.animationDuration,\n            velocity: params.velocity,\n            target: params.target, arc: params.arc, backOff: params.backOff,\n            constrainUp: params.constrainUp,\n            onComplete: finishAnimation,\n            cylindricalView: params.cylindricalView,\n            easeIn: params.easeIn,\n            easeOut: params.easeOut\n        });\n        animation.update(Date.now());\n    }\n\n    function finishAnimation() {\n        animation = null;\n        while (callbacks.length > 0) {\n            callbacks.pop()();\n        }\n        Human.renderer.camera.lock = false;\n    }\n\n    /** Jumps camera to the given target\n     *\n     * <p>Terminates any camera flight in progress and signals its completion.</p>\n     *\n     * @param {*} params Parameters for various flight modes\n     * @param {String} [params.objectId] Scene object to fly to, given by ID\n     * @param {*} [params.boundary] Boundary to fly to\n     * @param {*} [params.eye] Eye position to fly to, used in conjunction with params.look\n     * @param {*} [params.look] Look vector to fly to, used in conjunction with params.eye\n     * @param {Number} [params.backOff] Camera back-off factor in range of [0..1], when 0 is close (default), 1 is far\n     * @param {Function} ok Optional callback, fired when camera arrives at target\n     * @param {Function} error Optional error callback\n     * @memberof Human.renderer.camera.fly\n     */\n    fly.jumpTo = function (params, ok, error) {\n        var object, boundary, objectId;\n\n        ok = ok || function () {\n        };\n\n        error = error || function (msg) {\n            Human.log.error(\"Human.renderer.camera.fly\", msg);\n            ok();\n        };\n\n        var target;\n\n        if (params.objectId) {\n\n            // Boundary of scene object, found by ID\n\n            objectId = params.objectId;\n            object = Human.scene.objects[objectId];\n            if (!object) {\n                error(\"No scene object found for the given ID: '\" + objectId + \"'\");\n                return;\n            }\n            boundary = object.getBoundary();\n\n            if (boundary) {\n                target = {\n                    target: {\n                        boundary: boundary\n                    },\n                    backOff: params.backOff\n                };\n            }\n\n        } else if (params.boundary) {\n\n            target = jumpToBoundary(params);\n\n        } else if (params.eye || params.look) {\n\n            // Given eye point and look vector\n\n            if (!params.eye && !params.look) {\n                error(\"incomplete parameter configuration: both 'eye' and 'look' expected\");\n                return;\n            }\n            target = {\n                target: {\n                    eye: params.eye,\n                    look: params.look,\n                    up: params.up\n                }\n            };\n\n        }  else {\n\n            // Default position\n\n            target = {\n                target: {\n                    eye: { x: 0.0, y: 6.0, z: -70.0 },\n                    look: { x: 0.0, y: 0.0, z: 0 },\n                    up: {x: 0.0, y: 1.0, z: 0.0}\n                },\n                backOff: params.backOff\n            };\n        }\n\n        if (target) {\n\n            finishAnimation();\n\n            if (target.target.boundary) {\n                target.target.stopFOV = stopFOV || target.target.stopFOV;\n                Human.renderer.camera.fly.jumpTo(target.target);\n            } else {\n                Human.renderer.camera.setLookAt(target.target);\n            }\n        }\n\n        ok();\n    };\n\n    /*\n    * Force cancellation of currently running animation.\n    */\n    fly.cancel = finishAnimation;\n\n    function jumpToBoundary(params) {\n        // Given boundary\n        var backOff = params.backOff || 0;\n        if (backOff < 0) {\n            backOff = 0;\n        } else if (backOff > 1) {\n            backOff = 1;\n        }\n        backOff = 1 - backOff;\n\n        var cameraLook = Human.math.vec3ObjToArray(Human.renderer.camera.look);\n        var cameraEye = Human.math.vec3ObjToArray(Human.renderer.camera.eye);\n        var vec = vec3.create();\n\n        vec3.subtract(vec, cameraEye, cameraLook);\n        vec3.normalize(vec, vec);\n\n        var boundary = params.boundary;\n        var boundaryCenter = Human.math.getBoundaryCenter(boundary);\n        var stopFOV = params.stopFOV;\n        var lenVec = vec3.length(vec);\n        var diag = Human.math.getBoundaryDiag(boundary);\n        var len = Math.abs((diag / (1.0 + (backOff * 0.8))) / Math.tan(stopFOV / 2));  /// Tweak this to set final camera distance on arrival\n        var sca = len / lenVec;\n\n        vec3.scale(vec, vec, sca);\n        vec3.add(vec, boundaryCenter, vec);\n\n        return {\n            target: {\n                eye: {\n                    x: vec[0],\n                    y: vec[1],\n                    z: vec[2]\n                },\n                look: {\n                    x: boundaryCenter[0],\n                    y: boundaryCenter[1],\n                    z: boundaryCenter[2]\n                },\n                up: {\n                    x: 0,\n                    y: 1,\n                    z: 0\n                }\n            }\n        };\n    }\n\n})();\n;/**\n * @class Interpolates a {@link Human.renderer.camera} along a curved path from current position to look at a\n * target region of space.\n * @private\n *\n */\n(function () {\n    \"use strict\";\n\n    var stopFOV = 55;\n\n    var tempVec = vec3.create();\n    // For cyliner coordinate\n    var eye1Cylinder = vec3.create();\n    var eye2Cylinder = vec3.create();\n\n    /**\n     * Returns a value t between 0 and 1, eye2 = (1-t) * translation_eye2 + t * cylindrical_eye2 (nlerp)\n     * @private\n     */\n    function getCylindricalAndTranslationBlendFactor(rotation, radius) {\n        var fly = Human.renderer.camera.fly;\n        var t1 = Human.math.clamp((rotation - fly.cylindricalRotationLerpMin) / (fly.cylindricalRotationLerpMax - fly.cylindricalRotationLerpMin), 0, 1);\n        var t2 = Human.math.clamp((radius - fly.cylindricalRadiusLerpMin) / (fly.cylindricalRadiusLerpMax - fly.cylindricalRadiusLerpMin), 0, 1);\n        return Math.min(t1,t2);\n    }\n\n    /**\n     * @private\n     */\n    Human.renderer.camera.fly.Animation = function (cfg) {\n        var target = cfg.target;\n\n        var cylindricalView = cfg.cylindricalView !== undefined ? cfg.cylindricalView : Human.renderer.camera.fly.cylindricalView;\n\n        this.arc = cylindricalView ? (cfg.arc === undefined ? 1.0 : cfg.arc) : 0;\n        this.scaleArc = cfg.scaleArc === undefined ? Human.renderer.camera.fly.cylindricalArcScale : cfg.scaleArc;\n\n        this.easeIn = !!cfg.easeIn;\n        this.easeOut = cfg.easeOut !== false;\n\n        // When true, we'll not change the camera's \"up\" vector\n        //this.constrainUp = cfg.constrainUp !== false;\n        this.constrainUp = cfg.constrainUp === undefined ? false : cfg.constrainUp;\n\n        if (!target) {\n            Human.log.error(\"Human.renderer.camera.fly.Animation config missing: target\");\n            if (cfg.onComplete) {\n                cfg.onComplete();\n            }\n            return;\n        }\n        // Initial camera state\n        var camera = Human.renderer.camera;\n        this._look1 = Human.math.vec3ObjToArray(camera.look);\n        this._eye1 = Human.math.vec3ObjToArray(camera.eye);\n        this._up1 = Human.math.vec3ObjToArray(camera.up);\n\n        vec3.subtract(tempVec, this._eye1, this._look1);\n\n        // this._vec : dir from look1 to eye1\n        this._vec = vec3.create();\n        vec3.normalize(this._vec, tempVec);\n\n        // Back-off factor in range of [0..1], when 0 is close, 1 is far\n        var backOff = cfg.backOff || 0;\n        if (backOff < 0) {\n            backOff = 0;\n        } else if (backOff > 1) {\n            backOff = 1;\n        }\n        backOff = 1 - backOff;\n        // Final camera state\n        if (target.boundary) {\n            // Zooming to look and eye computed from boundary\n            var boundary = target.boundary;\n            var dist = target.dist || 2.5;\n            // ?? : this._vec is normalized, this might be changed to lenVec = 1\n            var lenVec = Math.abs(vec3.length(this._vec));\n            var diag = Human.math.getBoundaryDiag(boundary);\n            var len = Math.abs((diag / (1.0 + (backOff * 0.8))) / Math.tan(stopFOV / 2));  /// Tweak this to set final camera distance on arrival\n            var sca = (len / lenVec) * dist;\n            this._look2 = Human.math.getBoundaryCenter(boundary);\n            if (target.offset) {\n                this._look2[0] += target.offset[0];\n                this._look2[1] += target.offset[1];\n                this._look2[2] += target.offset[2];\n            }\n\n            // calculate this._eye2\n            var cylindricalOnly = Human.renderer.camera.fly.cylindricalOnly;\n\n            if (cylindricalView) {\n                this.arc = 1;\n                Human.math.cartesianToCylindrical(this._look1, eye1Cylinder);   //use eye1Cylinder as a tempVec for cylindrical coordinate of look1\n                Human.math.cartesianToCylindrical(this._look2, eye2Cylinder);   //use eye2Cylinder as a tempVec for cylindrical coordinate of look2\n                var rotation = Human.math.getShortRotation(eye1Cylinder[1], eye2Cylinder[1]);\n                var radius = eye2Cylinder[0];\n                var t = getCylindricalAndTranslationBlendFactor(Math.abs(rotation), radius);\n\n                if(!cylindricalOnly) {\n                    eye2Cylinder[0] = sca;  //look2 -> eye2\n                    eye2Cylinder[2] = 0;\n                    this._eye2 = Human.math.cylindricalToCartesian(eye2Cylinder);  // this._eye2 used as tempVec here\n\n                    //blend with original look dir\n                    vec3.scale(tempVec, this._vec, sca);\n                    Human.math.lerpVec3(t, 0, 1, tempVec, this._eye2, tempVec);\n                    vec3.normalize(tempVec, tempVec);\n                    vec3.scale(tempVec, tempVec, sca);\n                    vec3.add(this._eye2, this._look2, tempVec);\n                } else {\n                    eye2Cylinder[0] = eye2Cylinder[0] + sca;\n                    this._eye2 = Human.math.cylindricalToCartesian(eye2Cylinder);\n                }\n\n            } else {\n                vec3.scale(tempVec, this._vec, sca);\n                this._eye2 = vec3.add(vec3.create(), this._look2, tempVec);\n            }\n\n\n            this._up2 = vec3.create();\n\n            if (this.constrainUp) {\n                this._up2[0] = camera.up.x;\n                this._up2[1] = camera.up.y;\n                this._up2[2] = camera.up.z;\n            } else if (target.up) {\n                this._up2[0] = target.up.x || 0;\n                this._up2[1] = target.up.y || 0;\n                this._up2[2] = target.up.z || 0;\n            } else {\n                this._up2[1] = 1;\n            }\n\n        } else {\n            // Zooming to specific look and eye points\n            var look = target.look;\n            var eye = target.eye;\n            var up = target.up;\n            var cameraEye = Human.renderer.camera.eye;\n            var cameraLook = Human.renderer.camera.look;\n            var cameraUp = Human.renderer.camera.up;\n            this._look2 = vec3.create();\n            this._eye2 = vec3.create();\n            this._up2 = vec3.create();\n\n            if (look) {\n                this._look2[0] = look.x || 0;\n                this._look2[1] = look.y || 0;\n                this._look2[2] = look.z || 0;\n            } else {\n                this._look2[0] = cameraLook.x;\n                this._look2[1] = cameraLook.y;\n                this._look2[2] = cameraLook.z;\n            }\n\n            if (eye) {\n                this._eye2[0] = eye.x || 0;\n                this._eye2[1] = eye.y || 0;\n                this._eye2[2] = eye.z || 0;\n            } else {\n                this._eye2[0] = cameraEye.x;\n                this._eye2[1] = cameraEye.y;\n                this._eye2[2] = cameraEye.z;\n            }\n\n            if (up && !this.constrainUp) {\n                this._up2[0] = up.x || 0;\n                this._up2[1] = up.y || 0;\n                this._up2[2] = up.z || 0;\n            } else {\n                this._up2[0] = cameraUp.x;\n                this._up2[1] = cameraUp.y;\n                this._up2[2] = cameraUp.z;\n            }\n\n        }\n\n        // Distance to travel\n        vec3.subtract(tempVec, this._look2, this._look1);\n        var lookDist = Math.abs(vec3.length(tempVec));\n\n        vec3.subtract(tempVec, this._eye2, this._eye1);\n\n        // simple lerp straight line distance\n        var eyeDist = Math.abs(vec3.length(tempVec));\n\n        // Curve animation setup\n        if (this.arc > 0.0) {\n            Human.math.cartesianToCylindrical(this._eye1, eye1Cylinder);\n            Human.math.cartesianToCylindrical(this._eye2, eye2Cylinder);\n\n            // dist = (r1 + r2) * radian\n            var shortRotation = Human.math.getShortRotation(eye1Cylinder[1], eye2Cylinder[1]);\n            var v = (eye1Cylinder[0] + eye2Cylinder[0]) * Math.abs(shortRotation);\n            var h = eye2Cylinder[2] - eye1Cylinder[1];\n            var cylinderDist = Math.sqrt( v*v + h*h );\n            eyeDist = (1 - this.arc) * eyeDist + this.arc * cylinderDist;\n        }\n\n        this._dist = lookDist > eyeDist ? lookDist : eyeDist;\n\n        if (cfg.animationDuration) {\n            this._animationDuration = cfg.animationDuration * 1000; // Duration in millisecs internally\n        } else {\n            this._animationDuration = Human.renderer.camera.fly.flyTimeScale * 1000.0 * ((this._dist / ((cfg.velocity || Human.renderer.camera.fly.velocity) * 200.0)) + 1); // extra seconds to ensure arrival\n        }\n\n        // Completion callback\n        this._onComplete = cfg.onComplete;\n    };\n\n\n    /** Update the interpolation to push the next state to the bound {@link Human.renderer.camera}\n     */\n\n    var eyeVec = vec3.create();\n    var lookVec = vec3.create();\n\n    Human.renderer.camera.fly.Animation.prototype.update = function (time) {\n        if (this._time1 === undefined) {\n            this._time1 = time;\n            this._time2 = this._time1 + this._animationDuration;\n        }\n\n        if (this._done || time > this._time2) {\n            if (!this._done) {\n                Human.renderer.camera.setLookAt({\n                    look: Human.math.vec3ArrayToObj(this._look2),\n                    eye: Human.math.vec3ArrayToObj(this._eye2),\n                    up:  Human.math.vec3ArrayToObj(this._up2)\n                });\n            }\n            this._done = true;\n            this._onComplete(this);\n            return;\n        }\n        var t = (time - this._time1) / this._animationDuration;\n\n        var easedTime;\n        if (this.easeIn && this.easeOut) {\n            easedTime = Human.math.easeInOut(t, 0, 1, 1);\n        } else if (this.easeIn) {\n            easedTime = Human.math.easeIn(t, 0, 1, 1);\n        } else if (this.easeOut) {\n            easedTime = Human.math.easeOut(t, 0, 1, 1);\n        } else {\n            easedTime = t;\n        }\n\n        Human.math.lerpVec3(easedTime, 0, 1, this._look1, this._look2, lookVec);\n\n        if (this.arc > 0.0) {\n            Human.math.lerpVec3Cylindrical(easedTime, 0, 1, eye1Cylinder, eye2Cylinder, tempVec);\n\n            if (this.scaleArc !== 1) {\n                var radius = tempVec[0];\n                var scaled = this.scaleArc * radius;\n                if (easedTime < 0.5) {\n                    radius = Human.math.lerpScalar(easedTime, 0, 0.5, radius, scaled);\n                } else {\n                    radius = Human.math.lerpScalar(easedTime, 0.5, 1, scaled, radius);\n                }\n                // console.log(t, tempVec[0], radius)\n                tempVec[0] = radius;\n            }\n\n            Human.math.cylindricalToCartesian(tempVec, eyeVec);\n\n            if (this.arc < 1.0) {\n                // simple lerp of eye\n                Human.math.lerpVec3(\n                    easedTime,\n                    0,\n                    1,\n                    this._eye1,\n                    this._eye2,\n                    tempVec); // Destination\n\n                // blend the curved animation with lerp animation\n                Human.math.lerpVec3(this.arc, 0, 1, tempVec, eyeVec, eyeVec);\n            }\n\n        } else {\n            // simple lerp of eye\n            Human.math.lerpVec3(\n                easedTime,\n                0,\n                1,\n                this._eye1,\n                this._eye2,\n                eyeVec); // Destination\n        }\n\n        if (this.constrainUp) {\n\n            // Interpolating \"eye\" and \"look\" but not \"up\"\n\n            Human.renderer.camera.setLookAt({\n                look: Human.math.vec3ArrayToObj(lookVec),\n                eye: Human.math.vec3ArrayToObj(eyeVec)\n            });\n\n        } else {\n\n            // Interpolating \"eye\", \"look\" and \"up\"\n\n            var up = Human.math.lerpVec3(easedTime, 0, 1, this._up1, this._up2, []);\n\n            Human.renderer.camera.setLookAt({\n                look: Human.math.vec3ArrayToObj(lookVec),\n                eye: Human.math.vec3ArrayToObj(eyeVec),\n                up:  Human.math.vec3ArrayToObj(up)\n            });\n        }\n    };\n\n    Human.renderer.camera.fly.Animation.prototype.stop = function () {\n    };\n})();\n;/**\n * @class Interpolates a {@link Human.renderer.camera} along an array of bezier curves (curve path)\n * @private\n *\n */\n(function () {\n    \"use strict\";\n\n    var velocity = 1.0;\n    //var stopFOV;\n\n    var up1 = vec3.create();\n\n    Human.properties.subscribe({\n        propId: \"camera.flyCurvePath\",\n        value: {\n            velocity: 1.0,\n        },\n        callback: function (value) {\n            velocity = value.velocity || 1.0;\n        }\n    });\n\n    /**\n     * @private\n     */\n    Human.renderer.camera.fly.CurvePathAnimation = function (cfg) {\n\n        this.easeIn = !!cfg.easeIn;\n        this.easeOut = cfg.easeOut !== false;\n\n        // When true, we'll not change the camera's \"up\" vector\n        this.constrainUp = cfg.constrainUp === undefined ? false : cfg.constrainUp;\n\n        this._eyeCurvePath = cfg.eyeCurvePath;\n        this._lookCurvePath = cfg.lookCurvePath;\n        this._upVecs = cfg.upVecs;\n\n        var camera = Human.renderer.camera;\n\n        var t = 1;\n        var p = this._lookCurvePath.getParameter(t);\n        var i = p.i;\n        this._look2 = Human.math.vec3ObjToArray(this._lookCurvePath.getPosition(t).position);\n        this._eye2 = Human.math.vec3ObjToArray(this._eyeCurvePath.getPosition(t).position);\n        this._up2 = this.constrainUp ? Human.math.vec3ObjToArray(camera.up) : this._upVecs[i+1];\n\n        // Distance to travel\n        var eyeLength = this._eyeCurvePath.getPathLength();\n        var lookLength = this._lookCurvePath.getPathLength();\n\n        this._dist = Math.max(eyeLength, lookLength);\n\n        // Duration of travel\n        this._duration = Human.renderer.camera.fly.flyTimeScale * 1000.0 * ((this._dist / ((cfg.velocity || velocity) * 200.0)) + 1); // extra seconds to ensure arrival\n\n        // Completion callback\n        this._onComplete = cfg.onComplete;\n    };\n\n\n    /** Update the interpolation to push the next state to the bound {@link Human.renderer.camera}\n     */\n\n    Human.renderer.camera.fly.CurvePathAnimation.prototype.update = function (time) {\n        if (this._time1 === undefined) {\n            this._time1 = time;\n            this._time2 = this._time1 + this._duration;\n        }\n\n        if (this._done || time > this._time2) {\n            if (!this._done) {\n                Human.renderer.camera.setLookAt({\n                    look: Human.math.vec3ArrayToObj(this._look2),\n                    eye: Human.math.vec3ArrayToObj(this._eye2),\n                    up:  Human.math.vec3ArrayToObj(this._up2)\n                });\n            }\n            this._done = true;\n            this._onComplete(this);\n            return;\n        }\n        var t = (time - this._time1) / this._duration;\n        var easedTime;\n        if (this.easeIn && this.easeOut) {\n            easedTime = Human.math.easeInOut(t, 0, 1, 1);\n        } else if (this.easeIn) {\n            easedTime = Human.math.easeIn(t, 0, 1, 1);\n        } else if (this.easeOut) {\n            easedTime = Human.math.easeOut(t, 0, 1, 1);\n        } else {\n            easedTime = t;\n        }\n\n        var look = this._lookCurvePath.getPosition(easedTime).position;\n        var eye = this._eyeCurvePath.getPosition(easedTime).position;\n\n        if (this.constrainUp) {\n\n            // Interpolating \"eye\" and \"look\" but not \"up\"\n            Human.renderer.camera.setLookAt({\n                look: look,\n                eye: eye\n            });\n\n        } else {\n\n            // Interpolating \"eye\", \"look\" and \"up\"\n            var p = this._lookCurvePath.getParameter(easedTime);\n            Human.math.lerpVec3(p.t01, 0, 1, this._upVecs[p.i], this._upVecs[p.i+1], up1);\n\n            Human.renderer.camera.setLookAt({\n                look: look,\n                eye: eye,\n                up:  Human.math.vec3ArrayToObj(up1)\n            });\n\n\n        }\n    };\n\n})();\n;(function() {\n    \"use strict\";\n\n    var DEFAULT_FOCUS_START = 90;\n    var DEFAULT_FOCUS_END = 130;\n    var DEFAULT_BLUR = 0.1;\n\n    var DOF_SOURCE = [\n       \"precision highp float;\",\n       \"#define MAX_BLUR 20.0\",\n       \"varying vec2 vUV;\",\n       \"uniform float uFocusStart;\",\n       \"uniform float uFocusEnd;\",\n       \"uniform float uBlurCoefficient;\",\n       \"uniform sampler2D uTexture;\",\n       \"uniform sampler2D uDepth;\",\n       \"uniform vec2 uTexelOffset;\",\n       \"uniform vec2 uDepthRange;\",\n       \"void main() {\",\n           // Convert to linear depth\n           \"float ndc = 2.0 * texture2D(uDepth, vUV).r - 1.0;\",\n           \"float depth = -(2.0 * uDepthRange.y * uDepthRange.x) / (ndc * (uDepthRange.y - uDepthRange.x) - uDepthRange.y - uDepthRange.x);\",\n           \"float deltaDepth = max(depth - uFocusEnd, 0.0) + max(uFocusStart - depth, 0.0);\",\n            \n           \"vec4 color = vec4(0.0);\",\n           \"if (ndc < 1.0 && deltaDepth > 0.0) {\",\n               \"float blurRadius = min(floor(uBlurCoefficient * deltaDepth), MAX_BLUR);\",\n               \"float halfBlur = blurRadius * 0.5;\",\n               \"float count = 0.0;\",\n               \"for (float i = 0.0; i <= MAX_BLUR; ++i) {\",\n                   \"if (i > blurRadius) {\",\n                       \"break;\",\n                   \"}\",\n                   \"color += texture2D(uTexture, vUV + ((i - halfBlur) * uTexelOffset));\",\n                   \"++count;\",\n               \"}\",\n               \"color /= count;\",\n           \"} else {\",\n               \"color = texture2D(uTexture, vUV);\",\n           \"}\",\n           \"gl_FragColor = color;\",\n        \"}\"\n    ].join(\"\\n\");\n\n    var dofHConfig = {\n        type: \"dof\",\n        id: \"dofHorizontal\",\n        uniforms: {\n            uFocusStart: DEFAULT_FOCUS_START,\n            uFocusEnd: DEFAULT_FOCUS_END,\n            uBlurCoefficient: DEFAULT_BLUR,\n            uTexelOffset: new Float32Array([1 / window.innerWidth, 0]),\n            uDepthRange: new Float32Array([0.1, 10000])\n        },\n        textures: {\n            uTexture: {\n                framebuffer: \"---SET_ME---\",\n                target: \"color\"\n            },\n            uDepth: {  \n                framebuffer: \"__MAIN\",\n                target: \"depth\"\n            }\n        },\n        framebuffer: \"---SET_ME---\"\n    };\n\n    var dofVConfig = {\n        type: \"dof\",\n        id: \"dofVertical\",\n        uniforms: {\n            uTexelOffset: new Float32Array([0, 1 / window.innerHeight]),\n        },\n        textures: {\n            uTexture: {\n                framebuffer: \"---SET_ME---\",\n                target: \"color\"\n            },\n            uDepth: {  \n                framebuffer: \"__MAIN\",\n                target: \"depth\"\n            }\n        },\n        framebuffer: \"---SET_ME---\"\n    };\n\n    var DOF = Human.renderer.postprocess.effects.dof = {\n        scene: null,\n        supported: SceneJS.WEBGL_INFO.depthTexturesSupported,\n        focusStart: DEFAULT_FOCUS_START,\n        focusEnd: DEFAULT_FOCUS_END,\n        blurCoefficient: DEFAULT_BLUR\n    };\n\n    DOF.init = function(scene) {\n        this.scene = scene;\n        \n        if (!this.supported) {\n            return;\n        }\n\n        scene.createPostProcessType(\"dof\", DOF_SOURCE);\n    };\n\n    DOF.addStage = function(ctx) {\n        if (!this.supported) {\n            return;\n        }\n\n        var ioFramebuffers = ctx.getIOFramebuffers(\"final\");\n\n        dofHConfig.uniforms.uFocusStart = this.focusStart;\n        dofHConfig.uniforms.uFocusEnd = this.focusEnd;\n        dofHConfig.uniforms.uBlurCoefficient = this.blurCoefficient;\n        dofHConfig.uniforms.uDepthRange[0] = Human.renderer.camera.near;\n        dofHConfig.uniforms.uDepthRange[1] = Human.renderer.camera.far;\n        dofHConfig.uniforms.uTexelOffset[0] = 1 / Human.renderer.canvas.width;\n        dofHConfig.textures.uTexture.framebuffer = ioFramebuffers.read;\n        dofHConfig.framebuffer = ioFramebuffers.write;\n\n        ioFramebuffers = ctx.getIOFramebuffers(\"final\");\n\n        dofVConfig.uniforms.uTexelOffset[1] = 1 / Human.renderer.canvas.height;\n        dofVConfig.textures.uTexture.framebuffer = ioFramebuffers.read;\n        dofVConfig.framebuffer = ioFramebuffers.write;\n\n        ctx.finalPipeline.push(dofHConfig);\n        ctx.finalPipeline.push(dofVConfig);\n    };\n\n    DOF.setFocusStart = function(start) {\n        this.focusStart = dofHConfig.uniforms.uFocusStart = start;\n        var dofStage = this.scene.getPostProcessStage(\"dofHorizontal\");\n        if (dofStage) {\n            dofStage.setUniform(\"uFocusStart\", this.focusStart);\n        }\n    };\n\n    DOF.setFocusEnd = function(end) {\n        this.focusEnd = dofHConfig.uniforms.uFocusEnd = end;\n        var dofStage = this.scene.getPostProcessStage(\"dofHorizontal\");\n        if (dofStage) {\n            dofStage.setUniform(\"uFocusEnd\", this.focusEnd);\n        }\n    };\n\n    DOF.setBlurCoefficient = function(blur) {\n        this.blurCoefficient = dofHConfig.uniforms.uBlurCoefficient = blur;\n        var dofStage = this.scene.getPostProcessStage(\"dofHorizontal\");\n        if (dofStage) {\n            dofStage.setUniform(\"uBlurCoefficient\", this.blurCoefficient);\n        }\n    };\n\n    DOF.configure = function(cfg) {\n        cfg = cfg || {};\n        cfg.focusStart = cfg.focusStart === undefined ? DEFAULT_FOCUS_START : cfg.focusStart;\n        cfg.focusEnd = cfg.focusEnd === undefined ? DEFAULT_FOCUS_END : cfg.focusEnd;\n        cfg.blur = cfg.blur === undefined ? DEFAULT_BLUR : cfg.blur;\n\n        this.setFocusStart(cfg.focusStart);\n        this.setFocusEnd(cfg.focusEnd);\n        this.setBlurCoefficient(cfg.blur);\n    };\n\n    DOF.updateProjection = function() {\n        dofHConfig.uniforms.uDepthRange[0] = Human.renderer.camera.near;\n        dofHConfig.uniforms.uDepthRange[1] = Human.renderer.camera.far;\n\n        var dofStage = this.scene.getPostProcessStage(\"dofHorizontal\");\n        if (dofStage) {\n            dofStage.setUniform(\"uDepthRange\", dofHConfig.uniforms.uDepthRange);\n        }\n    };\n\n    DOF.updateCanvas = function() {\n        var canvas = Human.renderer.canvas;\n        dofHConfig.uniforms.uTexelOffset[0] = 1 / canvas.width;\n        dofVConfig.uniforms.uTexelOffset[1] = 1 / canvas.height;\n\n        var dofHStage = this.scene.getPostProcessStage(\"dofHorizontal\");\n        var dofVStage = this.scene.getPostProcessStage(\"dofVertical\");\n        if (dofHStage && dofVStage) {\n            dofHStage.setUniform(\"uTexelOffset\", dofHConfig.uniforms.uTexelOffset);\n            dofVStage.setUniform(\"uTexelOffset\", dofVConfig.uniforms.uTexelOffset);\n        }\n    };\n\n})();\n;(function() {\n    \"use strict\";\n\n    var DEFAULT_BLUR = 0.1;\n\n    var BLUR_SOURCE = [\n       \"precision highp float;\",\n       \"#define MAX_BLUR 20.0\",\n       \"varying vec2 vUV;\",\n       \"uniform float uBlurCoefficient;\",\n       \"uniform sampler2D uTexture;\",\n       \"uniform vec2 uTexelOffset;\",\n       \"void main() {\",            \n           \"vec4 color = vec4(0.0);\",\n           \"float blurRadius = min(floor(uBlurCoefficient * 100.0), MAX_BLUR);\",\n           \"float halfBlur = blurRadius * 0.5;\",\n           \"float count = 0.0;\",\n           \"for (float i = 0.0; i <= MAX_BLUR; ++i) {\",\n               \"if (i > blurRadius) {\",\n                   \"break;\",\n               \"}\",\n               \"color += texture2D(uTexture, vUV + ((i - halfBlur) * uTexelOffset));\",\n               \"++count;\",\n           \"}\",\n           \"color /= count;\",\n           \"gl_FragColor = color;\",\n        \"}\"\n    ].join(\"\\n\");\n\n    var blurHConfig = {\n        type: \"blur\",\n        id: \"blurHorizontal\",\n        uniforms: {\n            uBlurCoefficient: DEFAULT_BLUR,\n            uTexelOffset: new Float32Array([1 / window.innerWidth, 0]),\n        },\n        textures: {\n            uTexture: {\n                framebuffer: \"---SET_ME---\",\n                target: \"color\"\n            }\n        },\n        framebuffer: \"---SET_ME---\"\n    };\n\n    var blurVConfig = {\n        type: \"blur\",\n        id: \"blurVertical\",\n        uniforms: {\n            uTexelOffset: new Float32Array([0, 1 / window.innerHeight]),\n        },\n        textures: {\n            uTexture: {\n                framebuffer: \"---SET_ME---\",\n                target: \"color\"\n            }\n        },\n        framebuffer: \"---SET_ME---\"\n    };\n\n    var blur = Human.renderer.postprocess.effects.blur = {\n        scene: null,\n        blurCoefficient: DEFAULT_BLUR\n    };\n\n    blur.init = function(scene) {\n        this.scene = scene;\n        scene.createPostProcessType(\"blur\", BLUR_SOURCE);\n    };\n\n    blur.addStage = function(ctx) {\n        var ioFramebuffers = ctx.getIOFramebuffers(\"final\");\n\n        blurHConfig.uniforms.uBlurCoefficient = this.blurCoefficient;\n        blurHConfig.uniforms.uTexelOffset[0] = 1 / Human.renderer.canvas.width;\n        blurHConfig.textures.uTexture.framebuffer = ioFramebuffers.read;\n        blurHConfig.framebuffer = ioFramebuffers.write;\n\n        ioFramebuffers = ctx.getIOFramebuffers(\"final\");\n\n        blurVConfig.uniforms.uTexelOffset[1] = 1 / Human.renderer.canvas.height;\n        blurVConfig.textures.uTexture.framebuffer = ioFramebuffers.read;\n        blurVConfig.framebuffer = ioFramebuffers.write;\n\n        ctx.finalPipeline.push(blurHConfig);\n        ctx.finalPipeline.push(blurVConfig);\n    };\n\n    blur.setBlurCoefficient = function(blur) {\n        this.blurCoefficient = blurHConfig.uniforms.uBlurCoefficient = blur;\n        var blurStage = this.scene.getPostProcessStage(\"blurHorizontal\");\n        if (blurStage) {\n            blurStage.setUniform(\"uBlurCoefficient\", this.blurCoefficient);\n        }\n    };\n\n    blur.configure = function(cfg) {\n        cfg = cfg || {};\n        cfg.blur = cfg.blur === undefined ? DEFAULT_BLUR : cfg.blur;\n\n        this.setBlurCoefficient(cfg.blur);\n    };\n\n    blur.updateCanvas = function() {\n        var canvas = Human.renderer.canvas;\n        var blurHStage = this.scene.getPostProcessStage(\"blurHorizontal\");\n        var blurVStage = this.scene.getPostProcessStage(\"blurVertical\");\n        if (blurHStage && blurVStage) {\n            blurHConfig.uniforms.uTexelOffset[0] = 1 / canvas.width;\n            blurVConfig.uniforms.uTexelOffset[1] = 1 / canvas.height;\n            blurHStage.setUniform(\"uTexelOffset\", blurHConfig.uniforms.uTexelOffset);\n            blurVStage.setUniform(\"uTexelOffset\", blurVConfig.uniforms.uTexelOffset);\n        }\n    };\n\n})();\n;(function() {\n    \"use strict\";\n\n    var DEFAULT_RADIUS = 0.2;\n    var DEFAULT_CENTER = new Float32Array([0, 0]);\n    var DEFAULT_BLUR = 0.1;\n\n    var blurParams = new Float32Array(4);\n    var hTexelParams = new Float32Array(3);\n    var vTexelParams = new Float32Array(3);\n\n    var RADIAL_BLUR_SOURCE = [\n       \"precision highp float;\",\n       \"#define MAX_BLUR 20.0\",\n       \"varying vec2 vUV;\",\n       \"uniform sampler2D uTexture;\",\n       \"uniform vec4 uBlurParams;\",\n       \"uniform vec3 uTexelParams;\",\n       \"void main() {\",\n           \"vec2 center = uBlurParams.xy;\",\n           \"float radius = uBlurParams.z;\",\n           \"float blurCoefficient = uBlurParams.w;\",\n           \"vec2 texelOffset = uTexelParams.xy;\",\n           \"float aspect = uTexelParams.z;\",\n           \"vec2 pos = vUV * 2.0 - 1.0;\",\n           \"pos.x *= aspect;\",\n           \"float r = length(pos - center);\",\n           \"float deltaR = max(r - radius, 0.0);\",\n            \n           \"vec4 color = vec4(0.0);\",\n           \"if (deltaR > 0.0) {\",\n               \"float blurRadius = min(floor(blurCoefficient * 100.0 * deltaR), MAX_BLUR);\",\n               \"float halfBlur = blurRadius * 0.5;\",\n               \"float count = 0.0;\",\n               \"for (float i = 0.0; i <= MAX_BLUR; ++i) {\",\n                   \"if (i > blurRadius) {\",\n                       \"break;\",\n                   \"}\",\n                   \"color += texture2D(uTexture, vUV + ((i - halfBlur) * texelOffset));\",\n                   \"++count;\",\n               \"}\",\n               \"color /= count;\",\n           \"} else {\",\n               \"color = texture2D(uTexture, vUV);\",\n           \"}\",\n           \"gl_FragColor = color;\",\n        \"}\"\n    ].join(\"\\n\");\n\n    var radialBlurHConfig = {\n        type: \"radialBlur\",\n        id: \"radialBlurHorizontal\",\n        uniforms: {\n            uBlurParams: blurParams,\n            uTexelParams: hTexelParams\n        },\n        textures: {\n            uTexture: {\n                framebuffer: \"---SET_ME---\",\n                target: \"color\"\n            }\n        },\n        framebuffer: \"---SET_ME---\"\n    };\n\n    var radialBlurVConfig = {\n        type: \"radialBlur\",\n        id: \"radialBlurVertical\",\n        uniforms: {\n            uTexelParams: vTexelParams\n        },\n        textures: {\n            uTexture: {\n                framebuffer: \"---SET_ME---\",\n                target: \"color\"\n            }\n        },\n        framebuffer: \"---SET_ME---\"\n    };\n\n    var radialBlur = Human.renderer.postprocess.effects.radialBlur = {\n        scene: null,\n        radius: DEFAULT_RADIUS,\n        center: new Float32Array(DEFAULT_CENTER),\n        blurCoefficient: DEFAULT_BLUR\n    };\n\n    radialBlur.init = function(scene) {\n        this.scene = scene;\n        scene.createPostProcessType(\"radialBlur\", RADIAL_BLUR_SOURCE);\n    };\n\n    radialBlur.addStage = function(ctx) {\n        var ioFramebuffers = ctx.getIOFramebuffers(\"final\");\n\n        blurParams.set(this.center);\n        blurParams[2] = this.radius;\n        blurParams[3] = this.blurCoefficient;\n\n        var aspect = Human.renderer.canvas.width / Human.renderer.canvas.height;\n        hTexelParams[0] = aspect / Human.renderer.canvas.width;\n        hTexelParams[2] = aspect;\n\n        vTexelParams[1] = 1 / Human.renderer.canvas.height;\n        vTexelParams[2] = aspect;\n\n        radialBlurHConfig.textures.uTexture.framebuffer = ioFramebuffers.read;\n        radialBlurHConfig.framebuffer = ioFramebuffers.write;\n\n        ioFramebuffers = ctx.getIOFramebuffers(\"final\");\n\n        radialBlurVConfig.textures.uTexture.framebuffer = ioFramebuffers.read;\n        radialBlurVConfig.framebuffer = ioFramebuffers.write;\n\n        ctx.finalPipeline.push(radialBlurHConfig);\n        ctx.finalPipeline.push(radialBlurVConfig);\n    };\n\n    radialBlur.setRadius = function(r) {\n        this.radius = blurParams[2] = r;\n\n        var radialBlurStage = this.scene.getPostProcessStage(\"radialBlurHorizontal\");\n        if (radialBlurStage) {\n            radialBlurStage.setUniform(\"uBlurParams\", blurParams);\n        }\n    };\n\n    radialBlur.setCenter = function(x, y) {\n        this.center[0] = x;\n        this.center[1] = y;\n        blurParams.set(this.center);\n\n        var radialBlurStage = this.scene.getPostProcessStage(\"radialBlurHorizontal\");\n        if (radialBlurStage) {\n            radialBlurStage.setUniform(\"uBlurParams\", blurParams);\n        }\n    };\n\n    radialBlur.setBlurCoefficient = function(blur) {\n        this.blurCoefficient = blurParams[3] = blur;\n\n        var radialBlurStage = this.scene.getPostProcessStage(\"radialBlurHorizontal\");\n        if (radialBlurStage) {\n            radialBlurStage.setUniform(\"uBlurParams\", blurParams);\n        }\n    };\n\n    radialBlur.configure = function(cfg) {\n        cfg = cfg || {};\n        cfg.radius = cfg.radius === undefined ? DEFAULT_RADIUS : cfg.radius;\n        cfg.center = cfg.center === undefined ? DEFAULT_CENTER : cfg.center;\n        cfg.blur = cfg.blur === undefined ? DEFAULT_BLUR : cfg.blur;\n\n        this.setRadius(cfg.radius);\n        this.setCenter(cfg.center[0], cfg.center[1]);\n        this.setBlurCoefficient(cfg.blur);\n    };\n\n    radialBlur.updateCanvas = function() {\n        var canvas = Human.renderer.canvas;\n        var aspect = canvas.width / canvas.height;\n\n        hTexelParams[0] = aspect / canvas.width;\n        hTexelParams[2] = aspect;\n\n        vTexelParams[1] = 1 / canvas.height;\n        vTexelParams[2] = aspect;\n\n        var radialBlurHStage = this.scene.getPostProcessStage(\"radialBlurHorizontal\");\n        var radialBlurVStage = this.scene.getPostProcessStage(\"radialBlurVertical\");\n        if (radialBlurHStage && radialBlurVStage) {\n            radialBlurHStage.setUniform(\"uTexelParams\", hTexelParams);\n            radialBlurVStage.setUniform(\"uTexelParams\", vTexelParams);\n        }\n    };\n\n})();\n;(function() {\n    \"use strict\";\n\n    var DEFAULT_GAMMA = 2.2;\n    var DEFAULT_TONEMAP = false;\n\n    var GAMMA_CORRECT_SOURCE = [\n        \"precision highp float;\",\n        \"varying vec2 vUV;\",\n        \"uniform float uGamma;\",\n        \"uniform bool uToneMap;\",\n        \"uniform sampler2D uTexture;\",\n        \"vec3 toneMapReinhard(vec3 color) {\",\n        \"    return color / (color + 1.0);\",\n        \"}\",\n        \"void main() {\",\n        \"   vec4 color = texture2D(uTexture, vUV);\",\n        \"   if (uToneMap) {\",\n        \"       color.rgb = toneMapReinhard(color.rgb);\",\n        \"   }\",\n        \"   color.rgb = pow(color.rgb, vec3(1.0 / uGamma));\",\n        \"   gl_FragColor = color;\",\n        \"}\"\n    ].join(\"\\n\");\n\n    var gammaConfig = {\n        type: \"gammaCorrect\",\n        id: \"gammaCorrect\",\n        uniforms: {\n            uGamma: DEFAULT_GAMMA,\n            uToneMap: DEFAULT_TONEMAP\n        },\n        textures: {\n            uTexture: {\n                framebuffer:  \"---SET_ME---\",\n                target: \"color\"\n            }\n        },\n        framebuffer:  \"---SET_ME---\"\n    };\n    \n    var gammaCorrect = Human.renderer.postprocess.effects.gammaCorrect = {\n        scene: null,\n        gamma: DEFAULT_GAMMA,\n        toneMap: DEFAULT_TONEMAP\n    };\n\n    gammaCorrect.init = function(scene) {\n        this.scene = scene;\n        scene.createPostProcessType(\"gammaCorrect\", GAMMA_CORRECT_SOURCE);\n    };\n\n    gammaCorrect.addStage = function(ctx) {\n        var ioFramebuffers = ctx.getIOFramebuffers(\"final\");\n        gammaConfig.uniforms.uGamma = this.gamma;\n        gammaConfig.uniforms.uToneMap = this.toneMap;\n        gammaConfig.textures.uTexture.framebuffer = ioFramebuffers.read;\n        gammaConfig.framebuffer = ioFramebuffers.write;\n        ctx.finalPipeline.push(gammaConfig);\n    };\n\n    gammaCorrect.setGamma = function(gamma) {\n        this.gamma = gammaConfig.uniforms.uGamma = gamma;\n        var gammaStage = this.scene.getPostProcessStage(\"gammaCorrect\");\n        if (gammaStage) {\n            gammaStage.setUniform(\"uGamma\", this.gamma);\n        }\n    };\n\n    gammaCorrect.setToneMap = function(toneMap) {\n        this.toneMap = gammaConfig.uniforms.uToneMap = toneMap;\n        var gammaStage = this.scene.getPostProcessStage(\"gammaCorrect\");\n        if (gammaStage) {\n            gammaStage.setUniform(\"uToneMap\", this.toneMap);\n        }\n    };\n\n    gammaCorrect.configure = function(cfg) {\n        cfg = cfg || {};\n        cfg.gamma = cfg.gamma === undefined ? DEFAULT_GAMMA : cfg.gamma;\n        cfg.toneMap = cfg.toneMap === undefined ? DEFAULT_TONEMAP : cfg.toneMap;\n        this.setGamma(cfg.gamma);\n        this.setToneMap(cfg.toneMap);\n    };\n\n})();\n;(function() {\n    \"use strict\";\n\n    var FXAA_SOURCE = [\n        \"precision highp float;\",\n\n        \"uniform sampler2D uTexture;\",\n        \"uniform vec2 uTexelOffset;\",\n\n        \"varying vec2 vUV;\",\n\n        \"const float fxaaQualitySubpix = 0.75;\",\n        \"const float fxaaQualityEdgeThreshold = 0.125;\",\n        \"const float fxaaQualityEdgeThresholdMin = 0.0;\",\n        \n\n        // NVIDIA GameWorks Graphics Samples GitHub link: https://github.com/NVIDIAGameWorks/GraphicsSamples\n        // Original FXAA 3.11 shader link: https://github.com/NVIDIAGameWorks/GraphicsSamples/blob/master/samples/es3-kepler/FXAA/FXAA3_11.h\n\n        // Steps used to integrate into Cesium:\n        // * The following defines are set:\n        //       #define FXAA_PC 1\n        //       #define FXAA_WEBGL_1 1\n        //       #define FXAA_GREEN_AS_LUMA 1\n        //       #define FXAA_EARLY_EXIT 1\n        //       #define FXAA_GLSL_120 1\n        // * All other preprocessor directives besides the FXAA_QUALITY__P* directives were removed.\n        // * Double underscores are invalid for preprocessor directives so replace them with a single underscore. Replace\n        //   /FXAA_QUALITY__P(.*)/g with /FXAA_QUALITY__P$1/.\n        // * There are no implicit conversions from ivec* to vec* so replace:\n        //       #define FxaaInt2 ivec2\n        //           with\n        //       #define FxaaInt2 vec2\n        // * The texture2DLod function is only available in vertex shaders so replace:\n        //       #define FxaaTexTop(t, p) texture2DLod(t, p, 0.0)\n        //       #define FxaaTexOff(t, p, o, r) texture2DLod(t, p + (o * r), 0.0)\n        //           with\n        //       #define FxaaTexTop(t, p) texture2D(t, p)\n        //       #define FxaaTexOff(t, p, o, r) texture2D(t, p + (o * r))\n        // * FXAA_QUALITY_PRESET is prepended in the javascript code. We may want to expose that setting in the future.\n        // * The following parameters to FxaaPixelShader are unused and can be removed:\n        //       fxaaConsolePosPos\n        //       fxaaConsoleRcpFrameOpt\n        //       fxaaConsoleRcpFrameOpt2\n        //       fxaaConsole360RcpFrameOpt2\n        //       fxaaConsoleEdgeSharpness\n        //       fxaaConsoleEdgeThreshold\n        //       fxaaConsoleEdgeThresholdMi\n        //       fxaaConsole360ConstDir\n\n        //\n        // Choose the quality preset.\n        // This needs to be compiled into the shader as it effects code.\n        // Best option to include multiple presets is to\n        // in each shader define the preset, then include this file.\n        //\n        // OPTIONS\n        // -----------------------------------------------------------------------\n        // 10 to 15 - default medium dither (10=fastest, 15=highest quality)\n        // 20 to 29 - less dither, more expensive (20=fastest, 29=highest quality)\n        // 39       - no dither, very expensive\n        //\n        // NOTES\n        // -----------------------------------------------------------------------\n        // 12 = slightly faster then FXAA 3.9 and higher edge quality (default)\n        // 13 = about same speed as FXAA 3.9 and better than 12\n        // 23 = closest to FXAA 3.9 visually and performance wise\n        //  _ = the lowest digit is directly related to performance\n        // _  = the highest digit is directly related to style\n        //\n        \"#define FXAA_QUALITY_PRESET 25\",\n\n        \"#if (FXAA_QUALITY_PRESET == 10)\",\n            \"#define FXAA_QUALITY_PS 3\",\n            \"#define FXAA_QUALITY_P0 1.5\",\n            \"#define FXAA_QUALITY_P1 3.0\",\n            \"#define FXAA_QUALITY_P2 12.0\",\n        \"#endif\",\n        \"#if (FXAA_QUALITY_PRESET == 11)\",\n            \"#define FXAA_QUALITY_PS 4\",\n            \"#define FXAA_QUALITY_P0 1.0\",\n            \"#define FXAA_QUALITY_P1 1.5\",\n            \"#define FXAA_QUALITY_P2 3.0\",\n            \"#define FXAA_QUALITY_P3 12.0\",\n        \"#endif\",\n        \"#if (FXAA_QUALITY_PRESET == 12)\",\n            \"#define FXAA_QUALITY_PS 5\",\n            \"#define FXAA_QUALITY_P0 1.0\",\n            \"#define FXAA_QUALITY_P1 1.5\",\n            \"#define FXAA_QUALITY_P2 2.0\",\n            \"#define FXAA_QUALITY_P3 4.0\",\n            \"#define FXAA_QUALITY_P4 12.0\",\n        \"#endif\",\n        \"#if (FXAA_QUALITY_PRESET == 13)\",\n            \"#define FXAA_QUALITY_PS 6\",\n            \"#define FXAA_QUALITY_P0 1.0\",\n            \"#define FXAA_QUALITY_P1 1.5\",\n            \"#define FXAA_QUALITY_P2 2.0\",\n            \"#define FXAA_QUALITY_P3 2.0\",\n            \"#define FXAA_QUALITY_P4 4.0\",\n            \"#define FXAA_QUALITY_P5 12.0\",\n        \"#endif\",\n        \"#if (FXAA_QUALITY_PRESET == 14)\",\n            \"#define FXAA_QUALITY_PS 7\",\n            \"#define FXAA_QUALITY_P0 1.0\",\n            \"#define FXAA_QUALITY_P1 1.5\",\n            \"#define FXAA_QUALITY_P2 2.0\",\n            \"#define FXAA_QUALITY_P3 2.0\",\n            \"#define FXAA_QUALITY_P4 2.0\",\n            \"#define FXAA_QUALITY_P5 4.0\",\n            \"#define FXAA_QUALITY_P6 12.0\",\n        \"#endif\",\n        \"#if (FXAA_QUALITY_PRESET == 15)\",\n            \"#define FXAA_QUALITY_PS 8\",\n            \"#define FXAA_QUALITY_P0 1.0\",\n            \"#define FXAA_QUALITY_P1 1.5\",\n            \"#define FXAA_QUALITY_P2 2.0\",\n            \"#define FXAA_QUALITY_P3 2.0\",\n            \"#define FXAA_QUALITY_P4 2.0\",\n            \"#define FXAA_QUALITY_P5 2.0\",\n            \"#define FXAA_QUALITY_P6 4.0\",\n            \"#define FXAA_QUALITY_P7 12.0\",\n        \"#endif\",\n        \"#if (FXAA_QUALITY_PRESET == 20)\",\n            \"#define FXAA_QUALITY_PS 3\",\n            \"#define FXAA_QUALITY_P0 1.5\",\n            \"#define FXAA_QUALITY_P1 2.0\",\n            \"#define FXAA_QUALITY_P2 8.0\",\n        \"#endif\",\n        \"#if (FXAA_QUALITY_PRESET == 21)\",\n            \"#define FXAA_QUALITY_PS 4\",\n            \"#define FXAA_QUALITY_P0 1.0\",\n            \"#define FXAA_QUALITY_P1 1.5\",\n            \"#define FXAA_QUALITY_P2 2.0\",\n            \"#define FXAA_QUALITY_P3 8.0\",\n        \"#endif\",\n        \"#if (FXAA_QUALITY_PRESET == 22)\",\n            \"#define FXAA_QUALITY_PS 5\",\n            \"#define FXAA_QUALITY_P0 1.0\",\n            \"#define FXAA_QUALITY_P1 1.5\",\n            \"#define FXAA_QUALITY_P2 2.0\",\n            \"#define FXAA_QUALITY_P3 2.0\",\n            \"#define FXAA_QUALITY_P4 8.0\",\n        \"#endif\",\n        \"#if (FXAA_QUALITY_PRESET == 23)\",\n            \"#define FXAA_QUALITY_PS 6\",\n            \"#define FXAA_QUALITY_P0 1.0\",\n            \"#define FXAA_QUALITY_P1 1.5\",\n            \"#define FXAA_QUALITY_P2 2.0\",\n            \"#define FXAA_QUALITY_P3 2.0\",\n            \"#define FXAA_QUALITY_P4 2.0\",\n            \"#define FXAA_QUALITY_P5 8.0\",\n        \"#endif\",\n        \"#if (FXAA_QUALITY_PRESET == 24)\",\n            \"#define FXAA_QUALITY_PS 7\",\n            \"#define FXAA_QUALITY_P0 1.0\",\n            \"#define FXAA_QUALITY_P1 1.5\",\n            \"#define FXAA_QUALITY_P2 2.0\",\n            \"#define FXAA_QUALITY_P3 2.0\",\n            \"#define FXAA_QUALITY_P4 2.0\",\n            \"#define FXAA_QUALITY_P5 3.0\",\n            \"#define FXAA_QUALITY_P6 8.0\",\n        \"#endif\",\n        \"#if (FXAA_QUALITY_PRESET == 25)\",\n            \"#define FXAA_QUALITY_PS 8\",\n            \"#define FXAA_QUALITY_P0 1.0\",\n            \"#define FXAA_QUALITY_P1 1.5\",\n            \"#define FXAA_QUALITY_P2 2.0\",\n            \"#define FXAA_QUALITY_P3 2.0\",\n            \"#define FXAA_QUALITY_P4 2.0\",\n            \"#define FXAA_QUALITY_P5 2.0\",\n            \"#define FXAA_QUALITY_P6 4.0\",\n            \"#define FXAA_QUALITY_P7 8.0\",\n        \"#endif\",\n        \"#if (FXAA_QUALITY_PRESET == 26)\",\n            \"#define FXAA_QUALITY_PS 9\",\n            \"#define FXAA_QUALITY_P0 1.0\",\n            \"#define FXAA_QUALITY_P1 1.5\",\n            \"#define FXAA_QUALITY_P2 2.0\",\n            \"#define FXAA_QUALITY_P3 2.0\",\n            \"#define FXAA_QUALITY_P4 2.0\",\n            \"#define FXAA_QUALITY_P5 2.0\",\n            \"#define FXAA_QUALITY_P6 2.0\",\n            \"#define FXAA_QUALITY_P7 4.0\",\n            \"#define FXAA_QUALITY_P8 8.0\",\n        \"#endif\",\n        \"#if (FXAA_QUALITY_PRESET == 27)\",\n            \"#define FXAA_QUALITY_PS 10\",\n            \"#define FXAA_QUALITY_P0 1.0\",\n            \"#define FXAA_QUALITY_P1 1.5\",\n            \"#define FXAA_QUALITY_P2 2.0\",\n            \"#define FXAA_QUALITY_P3 2.0\",\n            \"#define FXAA_QUALITY_P4 2.0\",\n            \"#define FXAA_QUALITY_P5 2.0\",\n            \"#define FXAA_QUALITY_P6 2.0\",\n            \"#define FXAA_QUALITY_P7 2.0\",\n            \"#define FXAA_QUALITY_P8 4.0\",\n            \"#define FXAA_QUALITY_P9 8.0\",\n        \"#endif\",\n        \"#if (FXAA_QUALITY_PRESET == 28)\",\n            \"#define FXAA_QUALITY_PS 11\",\n            \"#define FXAA_QUALITY_P0 1.0\",\n            \"#define FXAA_QUALITY_P1 1.5\",\n            \"#define FXAA_QUALITY_P2 2.0\",\n            \"#define FXAA_QUALITY_P3 2.0\",\n            \"#define FXAA_QUALITY_P4 2.0\",\n            \"#define FXAA_QUALITY_P5 2.0\",\n            \"#define FXAA_QUALITY_P6 2.0\",\n            \"#define FXAA_QUALITY_P7 2.0\",\n            \"#define FXAA_QUALITY_P8 2.0\",\n            \"#define FXAA_QUALITY_P9 4.0\",\n            \"#define FXAA_QUALITY_P10 8.0\",\n        \"#endif\",\n        \"#if (FXAA_QUALITY_PRESET == 29)\",\n            \"#define FXAA_QUALITY_PS 12\",\n            \"#define FXAA_QUALITY_P0 1.0\",\n            \"#define FXAA_QUALITY_P1 1.5\",\n            \"#define FXAA_QUALITY_P2 2.0\",\n            \"#define FXAA_QUALITY_P3 2.0\",\n            \"#define FXAA_QUALITY_P4 2.0\",\n            \"#define FXAA_QUALITY_P5 2.0\",\n            \"#define FXAA_QUALITY_P6 2.0\",\n            \"#define FXAA_QUALITY_P7 2.0\",\n            \"#define FXAA_QUALITY_P8 2.0\",\n            \"#define FXAA_QUALITY_P9 2.0\",\n            \"#define FXAA_QUALITY_P10 4.0\",\n            \"#define FXAA_QUALITY_P11 8.0\",\n        \"#endif\",\n        \"#if (FXAA_QUALITY_PRESET == 39)\",\n            \"#define FXAA_QUALITY_PS 12\",\n            \"#define FXAA_QUALITY_P0 1.0\",\n            \"#define FXAA_QUALITY_P1 1.0\",\n            \"#define FXAA_QUALITY_P2 1.0\",\n            \"#define FXAA_QUALITY_P3 1.0\",\n            \"#define FXAA_QUALITY_P4 1.0\",\n            \"#define FXAA_QUALITY_P5 1.5\",\n            \"#define FXAA_QUALITY_P6 2.0\",\n            \"#define FXAA_QUALITY_P7 2.0\",\n            \"#define FXAA_QUALITY_P8 2.0\",\n            \"#define FXAA_QUALITY_P9 2.0\",\n            \"#define FXAA_QUALITY_P10 4.0\",\n            \"#define FXAA_QUALITY_P11 8.0\",\n        \"#endif\",\n\n        \"#define FxaaBool bool\",\n        \"#define FxaaFloat float\",\n        \"#define FxaaFloat2 vec2\",\n        \"#define FxaaFloat3 vec3\",\n        \"#define FxaaFloat4 vec4\",\n        \"#define FxaaHalf float\",\n        \"#define FxaaHalf2 vec2\",\n        \"#define FxaaHalf3 vec3\",\n        \"#define FxaaHalf4 vec4\",\n        \"#define FxaaInt2 vec2\",\n        \"#define FxaaTex sampler2D\",\n\n        \"#define FxaaSat(x) clamp(x, 0.0, 1.0)\",\n        \"#define FxaaTexTop(t, p) texture2D(t, p)\",\n        \"#define FxaaTexOff(t, p, o, r) texture2D(t, p + (o * r))\",\n\n        \"FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.y; }\",\n\n        \"FxaaFloat4 FxaaPixelShader(\",\n            //\n            // Use noperspective interpolation here (turn off perspective interpolation).\n            // {xy} = center of pixel\n            \"FxaaFloat2 pos,\",\n            //\n            // Input color texture.\n            // {rgb_} = color in linear or perceptual color space\n            // if (FXAA_GREEN_AS_LUMA == 0)\n            //     {___a} = luma in perceptual color space (not linear)\n            \"FxaaTex tex,\",\n            //\n            // Only used on FXAA Quality.\n            // This must be from a constant/uniform.\n            // {x_} = 1.0/screenWidthInPixels\n            // {_y} = 1.0/screenHeightInPixels\n            \"FxaaFloat2 fxaaQualityRcpFrame,\",\n            //\n            // Only used on FXAA Quality.\n            // This used to be the FXAA_QUALITY_SUBPIX define.\n            // It is here now to allow easier tuning.\n            // Choose the amount of sub-pixel aliasing removal.\n            // This can effect sharpness.\n            //   1.00 - upper limit (softer)\n            //   0.75 - default amount of filtering\n            //   0.50 - lower limit (sharper, less sub-pixel aliasing removal)\n            //   0.25 - almost off\n            //   0.00 - completely off\n            \"FxaaFloat fxaaQualitySubpix,\",\n            //\n            // Only used on FXAA Quality.\n            // This used to be the FXAA_QUALITY_EDGE_THRESHOLD define.\n            // It is here now to allow easier tuning.\n            // The minimum amount of local contrast required to apply algorithm.\n            //   0.333 - too little (faster)\n            //   0.250 - low quality\n            //   0.166 - default\n            //   0.125 - high quality\n            //   0.063 - overkill (slower)\n            \"FxaaFloat fxaaQualityEdgeThreshold,\",\n            //\n            // Only used on FXAA Quality.\n            // This used to be the FXAA_QUALITY_EDGE_THRESHOLD_MIN define.\n            // It is here now to allow easier tuning.\n            // Trims the algorithm from processing darks.\n            //   0.0833 - upper limit (default, the start of visible unfiltered edges)\n            //   0.0625 - high quality (faster)\n            //   0.0312 - visible limit (slower)\n            // Special notes when using FXAA_GREEN_AS_LUMA,\n            //   Likely want to set this to zero.\n            //   As colors that are mostly not-green\n            //   will appear very dark in the green channel!\n            //   Tune by looking at mostly non-green content,\n            //   then start at zero and increase until aliasing is a problem.\n            \"FxaaFloat fxaaQualityEdgeThresholdMin\",\n        \") {\",\n        /*--------------------------------------------------------------------------*/\n            \"FxaaFloat2 posM;\",\n            \"posM.x = pos.x;\",\n            \"posM.y = pos.y;\",\n            \"FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);\",\n            \"#define lumaM rgbyM.y\",\n            \"FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0, 1), fxaaQualityRcpFrame.xy));\",\n            \"FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 0), fxaaQualityRcpFrame.xy));\",\n            \"FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0,-1), fxaaQualityRcpFrame.xy));\",\n            \"FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 0), fxaaQualityRcpFrame.xy));\",\n        /*--------------------------------------------------------------------------*/\n            \"FxaaFloat maxSM = max(lumaS, lumaM);\",\n            \"FxaaFloat minSM = min(lumaS, lumaM);\",\n            \"FxaaFloat maxESM = max(lumaE, maxSM);\",\n            \"FxaaFloat minESM = min(lumaE, minSM);\",\n            \"FxaaFloat maxWN = max(lumaN, lumaW);\",\n            \"FxaaFloat minWN = min(lumaN, lumaW);\",\n            \"FxaaFloat rangeMax = max(maxWN, maxESM);\",\n            \"FxaaFloat rangeMin = min(minWN, minESM);\",\n            \"FxaaFloat rangeMaxScaled = rangeMax * fxaaQualityEdgeThreshold;\",\n            \"FxaaFloat range = rangeMax - rangeMin;\",\n            \"FxaaFloat rangeMaxClamped = max(fxaaQualityEdgeThresholdMin, rangeMaxScaled);\",\n            \"FxaaBool earlyExit = range < rangeMaxClamped;\",\n        /*--------------------------------------------------------------------------*/\n            \"if(earlyExit)\",\n                \"return rgbyM;\",\n        /*--------------------------------------------------------------------------*/\n            \"FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1,-1), fxaaQualityRcpFrame.xy));\",\n            \"FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 1), fxaaQualityRcpFrame.xy));\",\n            \"FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1,-1), fxaaQualityRcpFrame.xy));\",\n            \"FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));\",\n        /*--------------------------------------------------------------------------*/\n            \"FxaaFloat lumaNS = lumaN + lumaS;\",\n            \"FxaaFloat lumaWE = lumaW + lumaE;\",\n            \"FxaaFloat subpixRcpRange = 1.0/range;\",\n            \"FxaaFloat subpixNSWE = lumaNS + lumaWE;\",\n            \"FxaaFloat edgeHorz1 = (-2.0 * lumaM) + lumaNS;\",\n            \"FxaaFloat edgeVert1 = (-2.0 * lumaM) + lumaWE;\",\n        /*--------------------------------------------------------------------------*/\n            \"FxaaFloat lumaNESE = lumaNE + lumaSE;\",\n            \"FxaaFloat lumaNWNE = lumaNW + lumaNE;\",\n            \"FxaaFloat edgeHorz2 = (-2.0 * lumaE) + lumaNESE;\",\n            \"FxaaFloat edgeVert2 = (-2.0 * lumaN) + lumaNWNE;\",\n        /*--------------------------------------------------------------------------*/\n            \"FxaaFloat lumaNWSW = lumaNW + lumaSW;\",\n            \"FxaaFloat lumaSWSE = lumaSW + lumaSE;\",\n            \"FxaaFloat edgeHorz4 = (abs(edgeHorz1) * 2.0) + abs(edgeHorz2);\",\n            \"FxaaFloat edgeVert4 = (abs(edgeVert1) * 2.0) + abs(edgeVert2);\",\n            \"FxaaFloat edgeHorz3 = (-2.0 * lumaW) + lumaNWSW;\",\n            \"FxaaFloat edgeVert3 = (-2.0 * lumaS) + lumaSWSE;\",\n            \"FxaaFloat edgeHorz = abs(edgeHorz3) + edgeHorz4;\",\n            \"FxaaFloat edgeVert = abs(edgeVert3) + edgeVert4;\",\n        /*--------------------------------------------------------------------------*/\n            \"FxaaFloat subpixNWSWNESE = lumaNWSW + lumaNESE;\",\n            \"FxaaFloat lengthSign = fxaaQualityRcpFrame.x;\",\n            \"FxaaBool horzSpan = edgeHorz >= edgeVert;\",\n            \"FxaaFloat subpixA = subpixNSWE * 2.0 + subpixNWSWNESE;\",\n        /*--------------------------------------------------------------------------*/\n            \"if(!horzSpan) lumaN = lumaW;\",\n            \"if(!horzSpan) lumaS = lumaE;\",\n            \"if(horzSpan) lengthSign = fxaaQualityRcpFrame.y;\",\n            \"FxaaFloat subpixB = (subpixA * (1.0/12.0)) - lumaM;\",\n        /*--------------------------------------------------------------------------*/\n            \"FxaaFloat gradientN = lumaN - lumaM;\",\n            \"FxaaFloat gradientS = lumaS - lumaM;\",\n            \"FxaaFloat lumaNN = lumaN + lumaM;\",\n            \"FxaaFloat lumaSS = lumaS + lumaM;\",\n            \"FxaaBool pairN = abs(gradientN) >= abs(gradientS);\",\n            \"FxaaFloat gradient = max(abs(gradientN), abs(gradientS));\",\n            \"if(pairN) lengthSign = -lengthSign;\",\n            \"FxaaFloat subpixC = FxaaSat(abs(subpixB) * subpixRcpRange);\",\n        /*--------------------------------------------------------------------------*/\n            \"FxaaFloat2 posB;\",\n            \"posB.x = posM.x;\",\n            \"posB.y = posM.y;\",\n            \"FxaaFloat2 offNP;\",\n            \"offNP.x = (!horzSpan) ? 0.0 : fxaaQualityRcpFrame.x;\",\n            \"offNP.y = ( horzSpan) ? 0.0 : fxaaQualityRcpFrame.y;\",\n            \"if(!horzSpan) posB.x += lengthSign * 0.5;\",\n            \"if( horzSpan) posB.y += lengthSign * 0.5;\",\n        /*--------------------------------------------------------------------------*/\n            \"FxaaFloat2 posN;\",\n            \"posN.x = posB.x - offNP.x * FXAA_QUALITY_P0;\",\n            \"posN.y = posB.y - offNP.y * FXAA_QUALITY_P0;\",\n            \"FxaaFloat2 posP;\",\n            \"posP.x = posB.x + offNP.x * FXAA_QUALITY_P0;\",\n            \"posP.y = posB.y + offNP.y * FXAA_QUALITY_P0;\",\n            \"FxaaFloat subpixD = ((-2.0)*subpixC) + 3.0;\",\n            \"FxaaFloat lumaEndN = FxaaLuma(FxaaTexTop(tex, posN));\",\n            \"FxaaFloat subpixE = subpixC * subpixC;\",\n            \"FxaaFloat lumaEndP = FxaaLuma(FxaaTexTop(tex, posP));\",\n        /*--------------------------------------------------------------------------*/\n            \"if(!pairN) lumaNN = lumaSS;\",\n            \"FxaaFloat gradientScaled = gradient * 1.0/4.0;\",\n            \"FxaaFloat lumaMM = lumaM - lumaNN * 0.5;\",\n            \"FxaaFloat subpixF = subpixD * subpixE;\",\n            \"FxaaBool lumaMLTZero = lumaMM < 0.0;\",\n        /*--------------------------------------------------------------------------*/\n            \"lumaEndN -= lumaNN * 0.5;\",\n            \"lumaEndP -= lumaNN * 0.5;\",\n            \"FxaaBool doneN = abs(lumaEndN) >= gradientScaled;\",\n            \"FxaaBool doneP = abs(lumaEndP) >= gradientScaled;\",\n            \"if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P1;\",\n            \"if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P1;\",\n            \"FxaaBool doneNP = (!doneN) || (!doneP);\",\n            \"if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P1;\",\n            \"if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P1;\",\n        /*--------------------------------------------------------------------------*/\n            \"if(doneNP) {\",\n                \"if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\n                \"if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\n                \"if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\n                \"if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\n                \"doneN = abs(lumaEndN) >= gradientScaled;\",\n                \"doneP = abs(lumaEndP) >= gradientScaled;\",\n                \"if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P2;\",\n                \"if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P2;\",\n                \"doneNP = (!doneN) || (!doneP);\",\n                \"if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P2;\",\n                \"if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P2;\",\n        /*--------------------------------------------------------------------------*/\n                \"#if (FXAA_QUALITY_PS > 3)\",\n                \"if(doneNP) {\",\n                    \"if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\n                    \"if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\n                    \"if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\n                    \"if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\n                    \"doneN = abs(lumaEndN) >= gradientScaled;\",\n                    \"doneP = abs(lumaEndP) >= gradientScaled;\",\n                    \"if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P3;\",\n                    \"if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P3;\",\n                    \"doneNP = (!doneN) || (!doneP);\",\n                    \"if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P3;\",\n                    \"if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P3;\",\n        /*--------------------------------------------------------------------------*/\n                    \"#if (FXAA_QUALITY_PS > 4)\",\n                    \"if(doneNP) {\",\n                        \"if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\n                        \"if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\n                        \"if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\n                        \"if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\n                        \"doneN = abs(lumaEndN) >= gradientScaled;\",\n                        \"doneP = abs(lumaEndP) >= gradientScaled;\",\n                        \"if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P4;\",\n                        \"if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P4;\",\n                        \"doneNP = (!doneN) || (!doneP);\",\n                        \"if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P4;\",\n                        \"if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P4;\",\n        /*--------------------------------------------------------------------------*/\n                        \"#if (FXAA_QUALITY_PS > 5)\",\n                        \"if(doneNP) {\",\n                            \"if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\n                            \"if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\n                            \"if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\n                            \"if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\n                            \"doneN = abs(lumaEndN) >= gradientScaled;\",\n                            \"doneP = abs(lumaEndP) >= gradientScaled;\",\n                            \"if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P5;\",\n                            \"if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P5;\",\n                            \"doneNP = (!doneN) || (!doneP);\",\n                            \"if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P5;\",\n                            \"if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P5;\",\n        /*--------------------------------------------------------------------------*/\n                            \"#if (FXAA_QUALITY_PS > 6)\",\n                            \"if(doneNP) {\",\n                                \"if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\n                                \"if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\n                                \"if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\n                                \"if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\n                                \"doneN = abs(lumaEndN) >= gradientScaled;\",\n                                \"doneP = abs(lumaEndP) >= gradientScaled;\",\n                                \"if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P6;\",\n                                \"if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P6;\",\n                                \"doneNP = (!doneN) || (!doneP);\",\n                                \"if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P6;\",\n                                \"if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P6;\",\n        /*--------------------------------------------------------------------------*/\n                                \"#if (FXAA_QUALITY_PS > 7)\",\n                                \"if(doneNP) {\",\n                                    \"if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\n                                    \"if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\n                                    \"if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\n                                    \"if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\n                                    \"doneN = abs(lumaEndN) >= gradientScaled;\",\n                                    \"doneP = abs(lumaEndP) >= gradientScaled;\",\n                                    \"if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P7;\",\n                                    \"if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P7;\",\n                                    \"doneNP = (!doneN) || (!doneP);\",\n                                    \"if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P7;\",\n                                    \"if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P7;\",\n        /*--------------------------------------------------------------------------*/\n            \"#if (FXAA_QUALITY_PS > 8)\",\n            \"if(doneNP) {\",\n                \"if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\n                \"if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\n                \"if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\n                \"if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\n                \"doneN = abs(lumaEndN) >= gradientScaled;\",\n                \"doneP = abs(lumaEndP) >= gradientScaled;\",\n                \"if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P8;\",\n                \"if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P8;\",\n                \"doneNP = (!doneN) || (!doneP);\",\n                \"if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P8;\",\n                \"if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P8;\",\n        /*--------------------------------------------------------------------------*/\n                \"#if (FXAA_QUALITY_PS > 9)\",\n                \"if(doneNP) {\",\n                    \"if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\n                    \"if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\n                    \"if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\n                    \"if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\n                    \"doneN = abs(lumaEndN) >= gradientScaled;\",\n                    \"doneP = abs(lumaEndP) >= gradientScaled;\",\n                    \"if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P9;\",\n                    \"if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P9;\",\n                    \"doneNP = (!doneN) || (!doneP);\",\n                    \"if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P9;\",\n                    \"if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P9;\",\n        /*--------------------------------------------------------------------------*/\n                    \"#if (FXAA_QUALITY_PS > 10)\",\n                    \"if(doneNP) {\",\n                        \"if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\n                        \"if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\n                        \"if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\n                        \"if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\n                        \"doneN = abs(lumaEndN) >= gradientScaled;\",\n                        \"doneP = abs(lumaEndP) >= gradientScaled;\",\n                        \"if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P10;\",\n                        \"if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P10;\",\n                        \"doneNP = (!doneN) || (!doneP);\",\n                        \"if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P10;\",\n                        \"if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P10;\",\n        /*--------------------------------------------------------------------------*/\n                        \"#if (FXAA_QUALITY_PS > 11)\",\n                        \"if(doneNP) {\",\n                            \"if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\n                            \"if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\n                            \"if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\n                            \"if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\n                            \"doneN = abs(lumaEndN) >= gradientScaled;\",\n                            \"doneP = abs(lumaEndP) >= gradientScaled;\",\n                            \"if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P11;\",\n                            \"if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P11;\",\n                            \"doneNP = (!doneN) || (!doneP);\",\n                            \"if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P11;\",\n                            \"if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P11;\",\n        /*--------------------------------------------------------------------------*/\n                            \"#if (FXAA_QUALITY_PS > 12)\",\n                            \"if(doneNP) {\",\n                                \"if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\n                                \"if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\n                                \"if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\n                                \"if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\n                                \"doneN = abs(lumaEndN) >= gradientScaled;\",\n                                \"doneP = abs(lumaEndP) >= gradientScaled;\",\n                                \"if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P12;\",\n                                \"if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P12;\",\n                                \"doneNP = (!doneN) || (!doneP);\",\n                                \"if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P12;\",\n                                \"if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P12;\",\n        /*--------------------------------------------------------------------------*/\n                            \"}\",\n                            \"#endif\",\n        /*--------------------------------------------------------------------------*/\n                        \"}\",\n                        \"#endif\",\n        /*--------------------------------------------------------------------------*/\n                    \"}\",\n                    \"#endif\",\n        /*--------------------------------------------------------------------------*/\n                \"}\",\n                \"#endif\",\n        /*--------------------------------------------------------------------------*/\n            \"}\",\n            \"#endif\",\n        /*--------------------------------------------------------------------------*/\n                                \"}\",\n                                \"#endif\",\n        /*--------------------------------------------------------------------------*/\n                            \"}\",\n                            \"#endif\",\n        /*--------------------------------------------------------------------------*/\n                        \"}\",\n                        \"#endif\",\n        /*--------------------------------------------------------------------------*/\n                    \"}\",\n                    \"#endif\",\n        /*--------------------------------------------------------------------------*/\n                \"}\",\n                \"#endif\",\n        /*--------------------------------------------------------------------------*/\n            \"}\",\n        /*--------------------------------------------------------------------------*/\n            \"FxaaFloat dstN = posM.x - posN.x;\",\n            \"FxaaFloat dstP = posP.x - posM.x;\",\n            \"if(!horzSpan) dstN = posM.y - posN.y;\",\n            \"if(!horzSpan) dstP = posP.y - posM.y;\",\n        /*--------------------------------------------------------------------------*/\n            \"FxaaBool goodSpanN = (lumaEndN < 0.0) != lumaMLTZero;\",\n            \"FxaaFloat spanLength = (dstP + dstN);\",\n            \"FxaaBool goodSpanP = (lumaEndP < 0.0) != lumaMLTZero;\",\n            \"FxaaFloat spanLengthRcp = 1.0/spanLength;\",\n        /*--------------------------------------------------------------------------*/\n            \"FxaaBool directionN = dstN < dstP;\",\n            \"FxaaFloat dst = min(dstN, dstP);\",\n            \"FxaaBool goodSpan = directionN ? goodSpanN : goodSpanP;\",\n            \"FxaaFloat subpixG = subpixF * subpixF;\",\n            \"FxaaFloat pixelOffset = (dst * (-spanLengthRcp)) + 0.5;\",\n            \"FxaaFloat subpixH = subpixG * fxaaQualitySubpix;\",\n        /*--------------------------------------------------------------------------*/\n            \"FxaaFloat pixelOffsetGood = goodSpan ? pixelOffset : 0.0;\",\n            \"FxaaFloat pixelOffsetSubpix = max(pixelOffsetGood, subpixH);\",\n            \"if(!horzSpan) posM.x += pixelOffsetSubpix * lengthSign;\",\n            \"if( horzSpan) posM.y += pixelOffsetSubpix * lengthSign;\",\n            \"return FxaaTexTop(tex, posM);\",\n        \"}\",\n\n        \"void main() {\",\n            \"gl_FragColor = FxaaPixelShader(\",\n                    \"vUV,\",\n                    \"uTexture,\",\n                    \"uTexelOffset,\",\n                    \"fxaaQualitySubpix,\",\n                    \"fxaaQualityEdgeThreshold,\",\n                    \"fxaaQualityEdgeThresholdMin);\",\n        \"}\",\n    ].join(\"\\n\");\n\n    var fxaaConfig = {\n        type: \"fxaa\",\n        id: \"fxaa\",\n        uniforms: {\n            uTexelOffset: new Float32Array([1 / window.innerWidth, 1 / window.innerHeight]),\n        },\n        textures: {\n            uTexture: {\n                framebuffer:  \"---SET_ME---\",\n                target: \"color\"\n            }\n        },\n        framebuffer:  \"---SET_ME---\"\n    };\n    \n    var fxaa = Human.renderer.postprocess.effects.fxaa = {\n        scene: null\n    };\n\n    fxaa.init = function(scene) {\n        this.scene = scene;\n        scene.createPostProcessType(\"fxaa\", FXAA_SOURCE);\n    };\n\n    fxaa.addStage = function(ctx) {\n        var ioFramebuffers = ctx.getIOFramebuffers(\"final\");\n\n        fxaaConfig.uniforms.uTexelOffset[0] = 1 / Human.renderer.canvas.width;\n        fxaaConfig.uniforms.uTexelOffset[1] = 1 / Human.renderer.canvas.height;\n        fxaaConfig.textures.uTexture.framebuffer = ioFramebuffers.read;\n        fxaaConfig.framebuffer = ioFramebuffers.write;\n        \n        ctx.finalPipeline.push(fxaaConfig);\n    };\n\n    fxaa.configure = function() {\n    };\n\n    fxaa.updateCanvas = function() {\n        fxaaConfig.uniforms.uTexelOffset[0] = 1 / Human.renderer.canvas.width;\n        fxaaConfig.uniforms.uTexelOffset[1] = 1 / Human.renderer.canvas.height;\n\n        var fxaaStage = this.scene.getPostProcessStage(\"fxaa\");\n        if (fxaaStage) {\n            fxaaStage.setUniform(\"uTexelOffset\", fxaaConfig.uniforms.uTexelOffset);\n        }\n    };\n\n})();\n;(function() {\n    \"use strict\";\n\n    var DEFAULT_RADIUS = 0.9;\n    var DEFAULT_INTENSITY = 50;\n    var DEFAULT_BIAS = 0.1;\n    var DEFAULT_SCALE = 0.9;\n    var DEFAULT_CUTOFF = 0.3;\n\n    var SAO_SOURCE =  [\n       \"#extension GL_OES_standard_derivatives : require\",\n       \"precision highp float;\",\n       \"#define PI2 6.283185\",\n       \"#define TAU (PI2 * 2.0)\",\n       \"#define NUM_SAMPLES 16.0\",\n       \"#define SAMPLE_WEIGHT (1.0 / NUM_SAMPLES)\",\n       \"#define EPSILON 0.0001\",\n       \"varying vec2 vUV;\",\n       \"uniform float uSampleRadius;\",\n       \"uniform float uIntensity;\",\n       \"uniform float uContrast;\",\n       \"uniform float uBias;\",\n       \"uniform vec2 uTexelOffset;\",\n       \"uniform vec3 uDepthParams;\",\n       \"uniform vec3 uXYParams;\",\n       \"uniform sampler2D uDepthBuffer;\",\n       \"vec3 getPosition(float fragDepth, vec2 uv) {\",\n           \"vec2 clipCoord = uv * 2.0 - 1.0;\",\n           \"float zView = uDepthParams.x / (fragDepth * uDepthParams.y + uDepthParams.z);\",\n           \"return vec3(\",\n                \"clipCoord.x * zView * uXYParams.x * uXYParams.y,\",\n                \"clipCoord.y * zView * uXYParams.y,\",\n                \"zView\",\n           \");\",\n       \"}\",\n       \"vec2 packDepth(float viewZ) {\",\n       \"    float d = viewZ / -uDepthParams.z;\",\n           \"float temp = floor(d * 256.0);\",\n           \"return vec2(\",\n           \"    temp / 256.0,\",\n           \"    d * 256.0 - temp\",\n           \");\",\n       \"}\",\n       \"void main() {\",\n           \"float fragDepth = texture2D(uDepthBuffer, vUV).x;\",\n           \"if (fragDepth == 1.0) { discard; }\",\n           \"vec3 position = getPosition(fragDepth, vUV);\",\n           \"vec3 normal = normalize(cross(dFdx(position), dFdy(position)));\",\n           \"float ssRadius = min((uXYParams.z * uSampleRadius) / (position.z + EPSILON), 32.0);\",\n           \"if (ssRadius < 4.0) { discard; }\",\n           \"float occlusion = 0.0;\",\n           \"for (int i = 0; i < int(NUM_SAMPLES); ++i) {\",\n           \"   float a = (float(i) + 0.5) * SAMPLE_WEIGHT;\",\n           \"   float h = ssRadius * a;\",\n           \"   float theta = a * TAU;\",\n           \"   vec2 u = vec2(cos(theta), sin(theta));\",\n           \"   vec2 uv = vUV + h * u * uTexelOffset;\",\n           \"   fragDepth = texture2D(uDepthBuffer, uv).x;\",\n           \"   vec3 samplePosition = getPosition(fragDepth, uv);\",\n           \"   vec3 dir = samplePosition - position;\",\n           \"   float len2 = dot(dir, dir);\",\n           \"   float f = max(0.0, uSampleRadius * uSampleRadius - len2);\",\n           \"   occlusion += f * f * f * max(0.0, dot(dir, normal) - uBias) / (len2 + EPSILON);\",\n           \"}\",\n           \"occlusion = max(0.0, occlusion * 2.0 * uIntensity * SAMPLE_WEIGHT);\",\n           \"vec2 odd = mod(gl_FragCoord.xy, 2.0);\",\n           \"if (abs(dFdx(position.z)) < 0.02) {\",\n           \"    occlusion -= dFdx(occlusion) * (odd.x - 0.5);\",\n           \"}\",\n           \"if (abs(dFdy(position.z)) < 0.02) {\",\n           \"    occlusion -= dFdy(occlusion) * (odd.y - 0.5);\",\n           \"}\",\n           \"gl_FragColor.r = occlusion;\",\n           \"gl_FragColor.gb = packDepth(position.z);\",\n       \"}\"\n    ].join(\"\\n\");\n\n    var SAO_BLUR_SOURCE = [\n        \"precision highp float;\",\n        \"varying vec2 vUV;\",\n        \"uniform sampler2D uColorBuffer;\",\n        \"uniform vec2 uTexelOffset;\",\n        \"float unpackDepth(vec2 p) {\",\n        \"    return p.x + p.y / 256.0;\",\n        \"}\",\n        \"void main() {\",\n            \"float gaussian[5];\",\n            \"gaussian[0] = 0.153170;\",\n            \"gaussian[1] = 0.144893;\",\n            \"gaussian[2] = 0.122649;\",\n            \"gaussian[3] = 0.092902;\",\n            \"gaussian[4] = 0.062970;\",\n            \"vec3 centerValue = texture2D(uColorBuffer, vUV).rgb;\",\n            \"float totalWeight = gaussian[0];\",\n            \"float sum = centerValue.r * totalWeight;\",\n            \"float centerDepth = unpackDepth(centerValue.gb);\",\n            \"for (int r = 1; r <= 4; ++r) {\",\n            \"    vec2 uv = vUV + uTexelOffset * float(r) * 2.0;\",\n            \"    vec3 sampleValue = texture2D(uColorBuffer, uv).rgb;\",\n            \"    float sampleDepth = unpackDepth(sampleValue.gb);\",\n            \"    float weight = gaussian[r];\",\n            \"    weight *= max(0.0, 1.0 - 10.0 * abs(sampleDepth - centerDepth));\",\n            \"    sum += sampleValue.r * weight;\",\n            \"    totalWeight += weight;\",\n            \"}\",\n            \"for (int r = 1; r <= 4; ++r) {\",\n            \"    vec2 uv = vUV + uTexelOffset * -float(r) * 2.0;\",\n            \"    vec3 sampleValue = texture2D(uColorBuffer, uv).rgb;\",\n            \"    float sampleDepth = unpackDepth(sampleValue.gb);\",\n            \"    float weight = gaussian[r];\",\n            \"    weight *= max(0.0, 1.0 - 10.0 * abs(sampleDepth - centerDepth));\",\n            \"    sum += sampleValue.r * weight;\",\n            \"    totalWeight += weight;\",\n            \"}\",\n            \"gl_FragColor.r = sum / (totalWeight + 0.0001);\",\n        \"}\"\n    ].join(\"\\n\");\n\n    var SAO_BLEND_SOURCE = [\n        \"precision highp float;\",\n        \"varying vec2 vUV;\",\n        \"uniform sampler2D uColorBuffer;\",\n        \"uniform sampler2D uOcclusionBuffer;\",\n        \"uniform float uOcclusionScale;\",\n        \"uniform float uOcclusionCutoff;\",\n        \"void main() {\",\n            \"vec4 color = texture2D(uColorBuffer, vUV);\",\n            \"float ambient = 1.0 - smoothstep(uOcclusionCutoff, 1.0, texture2D(uOcclusionBuffer, vUV).r) * uOcclusionScale;\",\n            \"gl_FragColor = vec4(color.rgb * ambient, color.a);\",\n        \"}\"\n    ].join(\"\\n\");\n\n    var saoConfig = {\n        type: \"sao\",\n        id: \"sao\",\n        uniforms: {\n            uSampleRadius: 0.4,\n            uIntensity: 8,\n            uBias: 0.001,\n            uTexelOffset: new Float32Array([1 / window.innerWidth, 1 / window.innerHeight]),\n            uXYParams: new Float32Array(3),\n            uDepthParams: new Float32Array(3)\n        },\n        textures: {\n            uDepthBuffer: {\n                framebuffer: \"__MAIN\",\n                target: \"depth\"\n            }\n        },\n        framebuffer: \"__BDS_SAO\"\n    };\n\n    var blurHConfig = {\n        type: \"saoblur\",\n        id: \"saohblur\",\n        uniforms: {\n            uTexelOffset: new Float32Array([1 / window.innerWidth, 0]),\n        },\n        textures: {\n            uColorBuffer: {\n                framebuffer: \"__BDS_SAO\",\n                target: \"color\",\n            }\n        },\n        framebuffer: \"---SET_ME---\"\n    };\n\n    var blurVConfig = {\n        type: \"saoblur\",\n        id: \"saovblur\",\n        uniforms: {\n            uTexelOffset: new Float32Array([0, 1 / window.innerHeight]),\n        },\n        textures: {\n            uColorBuffer: {\n                framebuffer: \"---SET_ME---\",\n                target: \"color\",\n            }\n        },\n        framebuffer: \"__BDS_SAO\"\n    };\n\n    var blendConfig = {\n        type: \"saoblend\",\n        id: \"saoblend\",\n        uniforms: {\n            uOcclusionScale: DEFAULT_SCALE,\n            uOcclusionCutoff: DEFAULT_CUTOFF\n        },\n        textures: {\n            uColorBuffer: {\n                framebuffer: \"---SET_ME---\",\n                target: \"color\",\n            },\n            uOcclusionBuffer: {  \n                framebuffer: \"__BDS_SAO\",\n                target: \"color\"\n            }\n        },\n        framebuffer: \"--SET_ME---\"\n    };\n\n    var sao = Human.renderer.postprocess.effects.sao = {\n        scene: null,\n        supported: SceneJS.WEBGL_INFO.depthTexturesSupported,\n        fbInitialized: false,\n        sampleRadius: DEFAULT_RADIUS,\n        intensity: DEFAULT_INTENSITY,\n        bias: DEFAULT_BIAS,\n        scale: DEFAULT_SCALE\n    };\n\n    sao.init = function(scene) {\n        this.scene = scene;\n\n        if (!this.supported) {\n            return;\n        }\n\n        scene.createPostProcessType(\"sao\", SAO_SOURCE);\n        scene.createPostProcessType(\"saoblur\", SAO_BLUR_SOURCE);\n        scene.createPostProcessType(\"saoblend\", SAO_BLEND_SOURCE);\n    };\n\n    sao.addStage = function(ctx) {\n        if (!this.supported) {\n            return;\n        }\n\n        if (!this.fbInitialized) {\n            initializeFramebuffer(this.scene);\n        }\n\n        var projection = this.scene.getProjection();\n        var aspect = projection.aspect;\n        var fov = projection.fov * Math.PI / 180;\n        var near = projection.near;\n        var far = projection.far;\n        var multiplier = -Math.tan(fov * 0.5);\n        var scaleFactor = -Human.renderer.canvas.height / (2.0 * Math.tan(fov * 0.5));\n\n        var width = Human.renderer.canvas.width;\n        var height = Human.renderer.canvas.height;\n\n        var ioFramebuffers = ctx.getIOFramebuffers(\"opaque\");\n\n        var colorIn = ioFramebuffers.read;\n        var colorOut = ioFramebuffers.write;\n\n        // In __MAIN depth, out: __BDS_SAO\n        saoConfig.uniforms.uSampleRadius = this.sampleRadius;\n        saoConfig.uniforms.uIntensity = this.intensity;\n        saoConfig.uniforms.uBias = this.bias;\n        saoConfig.uniforms.uTexelOffset[0] = 1 / width;\n        saoConfig.uniforms.uTexelOffset[1] = 1 / height;\n        saoConfig.uniforms.uXYParams[0] = aspect;\n        saoConfig.uniforms.uXYParams[1] = multiplier;\n        saoConfig.uniforms.uXYParams[2] = scaleFactor;\n        saoConfig.uniforms.uDepthParams[0] = -near * far;\n        saoConfig.uniforms.uDepthParams[1] = near - far;\n        saoConfig.uniforms.uDepthParams[2] = far;\n\n        // In __BDS_SAO, out: colorOut\n        blurHConfig.uniforms.uTexelOffset[0] = 1 / width;\n        blurHConfig.uniforms.uTexelOffset[1] = 0;\n        blurHConfig.framebuffer = colorOut;\n\n        // In colorOut, out: __BDS_SAO\n        blurVConfig.uniforms.uTexelOffset[0] = 0;\n        blurVConfig.uniforms.uTexelOffset[1] = 1 / height;\n        blurVConfig.textures.uColorBuffer.framebuffer = colorOut;\n\n        // In colorIn, __BDS_SAO, out: colorOut\n        blendConfig.uniforms.uOcclusionScale = this.scale;\n        blendConfig.textures.uColorBuffer.framebuffer = colorIn;\n        blendConfig.framebuffer = colorOut;\n\n        ctx.opaquePipeline.push(saoConfig);\n        ctx.opaquePipeline.push(blurHConfig);\n        ctx.opaquePipeline.push(blurVConfig);\n        ctx.opaquePipeline.push(blendConfig);\n    };\n\n    sao.setSampleRadius = function(r) {\n        this.sampleRadius = saoConfig.uniforms.uSampleRadius = r;\n        var saoStage = this.scene.getPostProcessStage(\"sao\");\n        if (saoStage) {\n            saoStage.setUniform(\"uSampleRadius\", this.sampleRadius);\n        }\n    };\n\n    sao.setIntensity = function(i) {\n        this.intensity = saoConfig.uniforms.uIntensity = i;\n        var saoStage = this.scene.getPostProcessStage(\"sao\");\n        if (saoStage) {\n            saoStage.setUniform(\"uIntensity\", this.intensity);\n        }\n    };\n\n    sao.setBias = function(b) {\n        this.bias = saoConfig.uniforms.uBias = b;\n        var saoStage = this.scene.getPostProcessStage(\"sao\");\n        if (saoStage) {\n            saoStage.setUniform(\"uBias\", this.bias);\n        }\n    };\n\n    sao.setOcclusionScale = function(s) {\n        this.scale = blendConfig.uniforms.uOcclusionScale = s;\n        var blendStage = this.scene.getPostProcessStage(\"saoblend\");\n        if (blendStage) {\n            blendStage.setUniform(\"uOcclusionScale\", this.scale);\n        }\n    };\n\n    sao.setOcclusionCutoff = function(c) {\n        this.cutoff = blendConfig.uniforms.uOcclusionCutoff = c;\n        var blendStage = this.scene.getPostProcessStage(\"saoblend\");\n        if (blendStage) {\n            blendStage.setUniform(\"uOcclusionCutoff\", this.cutoff);\n        }\n    };\n\n    sao.configure = function(cfg) {\n        cfg = cfg || {};\n        cfg.sampleRadius = cfg.sampleRadius === undefined ? DEFAULT_RADIUS : cfg.sampleRadius;\n        cfg.intensity = cfg.intensity === undefined ? DEFAULT_INTENSITY : cfg.intensity;\n        cfg.bias = cfg.bias === undefined ? DEFAULT_BIAS : cfg.bias;\n        cfg.scale = cfg.scale === undefined ? DEFAULT_SCALE : cfg.scale;\n        cfg.cutoff = cfg.cutoff === undefined ? DEFAULT_CUTOFF : cfg.cutoff;\n\n        this.setSampleRadius(cfg.sampleRadius);\n        this.setIntensity(cfg.intensity);\n        this.setBias(cfg.bias);\n        this.setOcclusionScale(cfg.scale);\n        this.setOcclusionCutoff(cfg.cutoff);\n    };\n\n    sao.updateProjection = function() {\n        var projection = this.scene.getProjection();\n        var aspect = projection.aspect;\n        var fov = projection.fov * Math.PI / 180;\n        var near = projection.near;\n        var far = projection.far;\n        var multiplier = -Math.tan(fov * 0.5);\n        var scaleFactor = -Human.renderer.canvas.height / (2.0 * Math.tan(fov * 0.5));\n\n        saoConfig.uniforms.uXYParams[0] = aspect;\n        saoConfig.uniforms.uXYParams[1] = multiplier;\n        saoConfig.uniforms.uXYParams[2] = scaleFactor;\n        saoConfig.uniforms.uDepthParams[0] = -near * far;\n        saoConfig.uniforms.uDepthParams[1] = near - far;\n        saoConfig.uniforms.uDepthParams[2] = far;\n\n\n        var saoStage = this.scene.getPostProcessStage(\"sao\");\n        \n        if (saoStage) {\n            saoStage.setUniform(\"uXYParams\", saoConfig.uniforms.uXYParams);            \n            saoStage.setUniform(\"uDepthParams\", saoConfig.uniforms.uDepthParams);            \n        }\n    };\n\n    sao.updateCanvas = function() {\n        var width = Human.renderer.canvas.width;\n        var height = Human.renderer.canvas.height;\n\n        var projection = this.scene.getProjection();\n        var aspect = projection.aspect;\n        var fov = projection.fov * Math.PI / 180;\n        var multiplier = -Math.tan(fov * 0.5);\n        var scaleFactor = -Human.renderer.canvas.height / (2.0 * Math.tan(fov * 0.5));\n\n        saoConfig.uniforms.uTexelOffset[0] = 1 / width;\n        saoConfig.uniforms.uTexelOffset[1] = 1 / height;\n        saoConfig.uniforms.uXYParams[0] = aspect;\n        saoConfig.uniforms.uXYParams[1] = multiplier;\n        saoConfig.uniforms.uXYParams[2] = scaleFactor;\n\n        blurHConfig.uniforms.uTexelOffset[0] = 1 / width;\n\n        blurVConfig.uniforms.uTexelOffset[1] = 1 / height;\n\n        \n        var saoStage = this.scene.getPostProcessStage(\"sao\");\n        var blurHStage = this.scene.getPostProcessStage(\"saohblur\");\n        var blurVStage = this.scene.getPostProcessStage(\"saovblur\");\n        if (saoStage && blurHStage && blurVStage) {\n            saoStage.setUniform(\"uXYParams\", saoConfig.uniforms.uXYParams);            \n            saoStage.setUniform(\"uTexelOffset\", saoConfig.uniforms.uTexelOffset);\n            blurHStage.setUniform(\"uTexelOffset\", blurHConfig.uniforms.uTexelOffset);\n            blurVStage.setUniform(\"uTexelOffset\",  blurVConfig.uniforms.uTexelOffset);\n        }\n    };\n\n    function initializeFramebuffer(scene) {\n        scene.createFramebuffer(\"__BDS_SAO\", {\n            depthAttachment: false\n        });\n    }\n\n})();\n;(function () {\n  \"use strict\";\n\n  var blurAmount;\n  var opacity = 1.0;\n  var translation = [0, 0, 0];\n  var scale = 0;\n  var shadowNode;\n  var shadowTransform;\n  var shadowTexture;\n  var blurImages = {};\n\n\n  // There are distinct images for different blur amounts\n  // Blur Amount \"0\" corresponds to image src/assets/images/blur/blur_0.png (in Human Studio Next)\n  // Blur Amount \".1\" corresponds to image src/assets/images/blur/blur_1.png \n  // etc..\n  var imageLookup = {\n    0: \"0\",\n    0.1: \"1\",\n    0.2: \"2\",\n    0.3: \"3\",\n    0.4: \"4\",\n    0.5: \"5\",\n    0.6: \"6\",\n    0.7: \"7\",\n    0.8: \"8\",\n    0.9: \"9\",\n    1: \"10\",\n  };\n\n  function getBlurImageSrc(blurAmount) {\n    var blurImageNum = imageLookup[blurAmount.toString()];\n    var root = window.localBaseDirectory || \"/\";\n    return root + \"assets/images/blur/blur_\" + blurImageNum + \".png\";\n  }\n\n  function loadBlurImage(blurAmount) {\n    var src = getBlurImageSrc(blurAmount);\n\n    // We want to reduce the overhead of loading blur images over the network as much as possible.\n    // Blur images are cached so they only need to be requested once.\n    if (blurImages[src]) {\n      return blurImages[src]\n    }\n\n    var image = new Image();\n    image.src = src;\n    blurImages[src] = image;\n    return image;\n  }\n\n\n  function calcTransform(translation, scale) {\n    // The model space coordinates for the quad primitive are along Y and X. \n    // Since the plane needs to lay flat as if it was the ground, in world space it needs to rotate 90 degrees about X.\n    var angle = -90 * 0.0174532925; // radians\n    var xform = mat4.create();\n    var rot = mat4.create();\n    mat4.fromXRotation(rot, angle);\n    mat4.translate(xform, xform, translation);\n    mat4.mul(xform, xform, rot);\n    mat4.scale(xform, xform, [scale, scale, scale]);\n    return xform;\n  }\n\n  var GroundShadow = (Human.renderer.groundShadow = {});\n\n  GroundShadow.init = function () {\n    if (shadowNode) {\n      return;\n    }\n\n    var ShadowNodeDef = {\n      type: \"material\",\n      baseColor: {\n        r: 0,\n        g: 0,\n        b: 0,\n      },\n      nodes: [\n        {\n          type: \"texture\",\n          id: \"shadowTexture\",\n          src: getBlurImageSrc(blurAmount || .5),\n          applyTo: \"alpha\", // Apply to material \"color\" property (default)\n          blendMode: \"add\",\n          nodes: [\n            {\n              type: \"xform\",\n              id: \"shadowTransform\",\n              nodes: [\n                // Box primitive implemented by plugin at\n                // http://scenejs.org/api/latest/plugins/node/geometry/box.js\n                {\n                  id: \"shadowPlane\",\n                  type: \"geometry/plane\",\n                },\n              ],\n            },\n          ],\n        },\n      ],\n    };\n\n\n    // find scene\n    var scene = Human.renderer.getScene();\n\n    // add node\n    shadowNode = scene.addNode(ShadowNodeDef);\n\n    // set transform\n    shadowTransform = scene.getNode(\"shadowTransform\");\n    shadowTransform.setElements(calcTransform(translation, scale));\n\n    // turn off backfaces\n    var shadowPlane = scene.getNode(\"shadowPlane\").nodes[0];\n    shadowPlane.setBackfaces(false);\n\n    // set texture opacity\n    shadowTexture = scene.getNode(\"shadowTexture\");\n    shadowTexture.setBlendFactor(opacity);\n  };\n\n  GroundShadow.destroy = function () {\n    if (shadowNode) {\n      shadowNode.destroy();\n      shadowNode = null;\n      shadowTransform = null;\n      shadowTexture = null;\n    }\n  };\n\n  GroundShadow.update = function (cfg) {\n    opacity = cfg.opacity;\n    translation = cfg.translation;\n    scale = cfg.scale;\n\n    shadowTransform.setElements(calcTransform(translation, scale));\n    shadowTexture.setBlendFactor(opacity);\n\n\n    // When the blur amount changes, update the shadowTexture's blur image.\n    if (blurAmount !== cfg.blurAmount) {\n      var blurImage = loadBlurImage(cfg.blurAmount);\n\n      \n      // 'completed' is a property of HTMLImageElement that lets me know if the image has finished downloading.\n      switch (blurImage.complete) {\n        // The image may have already been loaded, and was retrieved from the cache.\n        case true: {\n          shadowTexture.setImage(blurImage);\n          break;\n        }\n\n        // The image is still loading. Register a callback.\n        case false: {\n          blurImage.onload = function () {\n            shadowTexture.setImage(blurImage);\n          };\n        }\n      }\n    }\n    \n    blurAmount = cfg.blurAmount;\n  };\n})();\n;/**\n * @namespace The 3D scene, consisting of a hierarchy of {@link Human.scene.Object}s.\n */\n(function () {\n    \"use strict\";\n\n    var KD_TREE_MAX_DEPTH = 10;\n    var KD_TREE_MIN_OBJECTS = 1;\n    var graphMatcher = new Human.utils.selection.GraphMatcher();\n    var HumanScene = Human.scene = {};\n\n    /** Array of root objects\n     *\n     * @type {Array}\n     * @memberof Human.scene\n     */\n    HumanScene.rootObjects = [];\n\n    /**\n     * A map of objects by ID for each model that's currently loaded\n     * @type {{}}\n     * @memberof Human.scene\n     */\n    HumanScene.modelObjects = {};\n\n    /** All objects by ID\n     *\n     * @type {{}}\n     * @memberof Human.scene\n     */\n    HumanScene.objects = {};\n\n    HumanScene.colorModPriorities = {\n        __HIGHLIGHT: Number.POSITIVE_INFINITY\n    };\n\n    /** All objects by FMA ID\n     *\n     * @type {{}}\n     * @memberof Human.scene\n     */\n    HumanScene.objectsByFMAID = {};\n\n    /**\n     * For each distinct object meta tag, a map of object IDs to object instances.\n     *\n     * Eg.\n     *\n     * <pre>\n     * {\n     *     \"head\": {\n     *          \"maleAdult_frontal_bone\": <object>,\n     *          \"maleAdult_mandible\": <object>\n     *     },\n     *     \"skeleton\": {\n     *          \"maleAdult_frontal_bone\": <object>,\n     *          \"maleAdult_mandible\": <object>\n     *     },\n     *     \"digestion\": {\n     *          \"maleAdult_mandible\": <object>\n     *     }\n     * }\n     * </pre>\n     * @type {{}}\n     */\n    HumanScene.objectsForTags = {};\n\n    HumanScene._kdTree = null;\n    HumanScene.kdTreeDirty = true;\n\n    /**\n     * @memberof Human.scene\n     * @type {Array}\n     */\n    HumanScene.boundary = {\n        xmin: Number.POSITIVE_INFINITY,\n        ymin: Number.POSITIVE_INFINITY,\n        zmin: Number.POSITIVE_INFINITY,\n        xmax: Number.NEGATIVE_INFINITY,\n        ymax: Number.NEGATIVE_INFINITY,\n        zmax: Number.NEGATIVE_INFINITY\n    };\n\n    HumanScene.center = vec3.create();\n\n    /**\n     * Map of flags for the currently visible objects, keyed by object ID\n     * @memberof Human.scene\n     * @type {{}}\n     */\n    HumanScene.enabledObjects = {};           // Enabled objects\n\n    HumanScene._leavesCache = {};\n\n    /**\n     * Creates an object\n     *\n     * <p>Object is not yet enabled or selected</p>\n     *<pre>\n     * createObject({\n     *\n     *      // All objects, leaf and branch\n     *\n     *      moduleId:         \"maleAdult\",\n     *      objectId:         \"Left_posterior_auricular_artery_49626\",\n     *      displayName:    \"Left Posterior Auricular Artery\"\n     *      parentObjectId: \"Anatomy\",\n     *\n     *      // Leaf objects only:\n     *\n     *      materialId:     \"bloodsupply01_blinn43SG\",\n     *      geometryId:     \"Left_posterior_auricular_artery_49626Shape\",\n     *      attachObjectId : \"the-scene-root\" | undefined,\n     *      pickable:       true,\n     *      layerName:      \"Muscular_System\"\n     *\n     *      flags: {\n     *          transparency:       0.2,\n     *          pickable:           false,\n     *          renderPriority:     0 | null\n     *      }\n     * });\n     * </pre>\n     *\n     * @memberof Human.scene\n     * @private\n     */\n\n    HumanScene.createObject = function (params) {\n\n        if (!params.objectId) {\n            Human.log.error(\"Scene.createObject\", \"Param expected: objectId\");\n            return;\n        }\n\n        // Can't have duplicate object or fmaId's\n        if (HumanScene.objects[params.objectId]) {\n            Human.log.error(\"Scene.createObject\", \"Param: objectId already in use\");\n            return;\n        }\n\n        var parent = params.parentObjectId ? HumanScene.objects[params.parentObjectId] : null;\n        var modelId = params.modelId;\n\n        // Inherit metatags from parent object\n\n        params.tags = params.tags || [];\n\n        var tags = parent ? HumanScene._inheritTags(params.tags, parent) : params.tags;\n\n        params.modelId = modelId;\n        params.parent = parent;\n        params.tags = tags;\n\n        if (parent) {\n            params.reflectedX = parent.reflectedX;\n            params.reflectedY = parent.reflectedY;\n            params.reflectedZ = parent.reflectedZ;\n        }\n\n        var object;\n        if (params.group) {\n            object = new Human.scene.Group(params);\n        } else {\n            object = new Human.scene.Object(params);\n        }\n\n        HumanScene.objects[params.objectId] = object;\n        if (object.fmaId) {\n            HumanScene.objectsByFMAID[object.fmaId] = object;\n        }\n        if (parent) {\n            parent.objects.push(object);\n        } else {\n            HumanScene.rootObjects.push(object); // Register on roots map\n        }\n\n        (HumanScene.modelObjects[modelId] = HumanScene.modelObjects[modelId] || {})[params.objectId] = object;\n\n        HumanScene._registerObjectForTags(object);\n\n        // Publish object creation\n        Human.events.fire(\"scene.objectCreated\", {\n            moduleId: params.moduleId,\n            modelId: modelId,\n            objectId: object.objectId,\n            name: object.displayName,\n            description: object.description,\n            displayName: object.displayName,\n            fmaId: object.fmaId,\n            tags: object.tags,\n            parentObjectId: parent ? parent.objectId : null\n        });\n\n        if (params.shown !== undefined) {\n            object.show(params.shown);\n            if (params.shown) {\n                HumanScene.enabledObjects[params.objectId] = object;\n            }\n        }\n\n        HumanScene._leavesCache = {};\n\n        return object;\n    };\n\n    HumanScene._inheritTags = function(childTags, parentObject) {\n        var tags = childTags || [];\n        var parentTags = parentObject.tags;\n        var tag;\n        var parentTag;\n        var inheritTags = [];\n        if (tags) {\n            for (var i = 0, leni = parentTags.length; i < leni; i++) {\n                parentTag = parentTags[i];\n                var inherit = true;\n                for (var j = 0, lenj = tags.length; j < lenj; j++) {\n                    tag = tags[j];\n                    if (tag === parentTag) {\n                        inherit = false;\n                    }\n                }\n                if (inherit) {\n                    inheritTags.push(parentTag);\n                }\n            }\n            return tags.concat(inheritTags);\n        } else {\n            return tags;\n        }\n    };\n\n    HumanScene._registerObjectForTags = function(object) {\n        var tags = object.tags;\n        var tag;\n        var tagObjects;\n        for (var i = 0, len = tags.length; i < len; i++) {\n            tag = tags[i];\n            tagObjects = HumanScene.objectsForTags[tag];\n            if (!tagObjects) {\n                tagObjects = HumanScene.objectsForTags[tag] = {};\n            }\n            tagObjects[object.objectId] = object;\n        }\n    };\n\n    HumanScene._deregisterObjectForTags = function (object) {\n        var tags = object.tags;\n        var tag;\n        var tagObjects;\n        for (var i = 0, len = tags.length; i < len; i++) {\n            tag = tags[i];\n            tagObjects = HumanScene.objectsForTags[tag];\n            if (tagObjects) {\n                delete tagObjects[object.objectId];\n            }\n        }\n    };\n\n    /**\n     * Enable or disable some or all objects\n     * @memberof Human.scene\n     */\n    HumanScene.setEnabledObjects = function (params) {\n\n        var objects = params.objects || params.objectIds;\n\n        var enabledObjectsUpdate = {};\n\n        var initialValue = params.replace ? false : undefined;\n        var needsAssets = params.fetchAssets ? [] : null;\n\n        HumanScene.setEnabledSubtree(Human.scene.rootObjects, objects, initialValue, needsAssets, enabledObjectsUpdate);\n\n        if (needsAssets) {\n            Human.scene.graph.attachAssetSetsToSubtree(needsAssets);\n        }\n\n        if (!Human.utils.isEmpty(enabledObjectsUpdate)) {\n            Human.events.fire(\"scene.objectsShown\", {    // Post-notify\n                enabledObjectsUpdate: enabledObjectsUpdate\n            });\n        }\n    };\n\n    HumanScene.setEnabledSubtree = function(objects, updates, parentValue, needsAssets, enabledUpdates) {\n        for (var i = 0, len = objects.length; i < len; ++i) {\n            var object = objects[i];\n            var currentValue = updates[object.objectId] !== undefined ? updates[object.objectId] : parentValue;\n\n            if (object.isLeaf()) {\n                if (currentValue === true) {\n                    if (!HumanScene.enabledObjects[object.objectId]) {\n                        HumanScene.enabledObjects[object.objectId] = object;\n                        enabledUpdates[object.objectId] = true;\n                        object.show(true);\n\n                        if (needsAssets && !object.isRenderable()) {\n                            needsAssets.push(object);\n                        }\n                    }\n                } else if (currentValue === false && HumanScene.enabledObjects[object.objectId]) {\n                    delete HumanScene.enabledObjects[object.objectId];\n                    enabledUpdates[object.objectId] = false;\n                    object.show(false);\n                }\n            } else {\n                HumanScene.setEnabledSubtree(object.objects, updates, currentValue, needsAssets, enabledUpdates);\n            }\n        }\n    };\n\n    HumanScene.setColorModPriority = function(id, priority) {\n        this.colorModPriorities[id] = priority;\n\n        var leafObjects = this.getLeaves();\n\n        for (var i = 0, len = leafObjects.length; i < len; ++i) {\n            Human.scene.objects[leafObjects[i]].colorModPrioritiesDirty();\n        }\n    };\n\n    /**\n     * Returns the IDs of leaf objects within the given tree\n     * @param objectId\n     * @memberof Human.scene\n     */\n    HumanScene.getLeaves = function (objectId) {\n        var objectIdList = HumanScene._leavesCache[ objectId ];\n        if (!objectIdList) {\n            objectIdList = [];\n            if (objectId) {\n               var object = HumanScene.objects[objectId];\n               if (object) {\n                   HumanScene._getLeaves([object], objectIdList);\n               }\n            } else {\n                HumanScene._getLeaves(Human.scene.rootObjects, objectIdList);\n            }\n\n            HumanScene._leavesCache[ objectId ] = objectIdList;\n        }\n        return objectIdList;\n    };\n\n    HumanScene._getLeaves = function (objects, objectIdList) {\n        var object;\n        for (var i = 0, len = objects.length; i < len; i++) {\n            object = objects[i];\n            if (object.objects.length === 0) { // Leaf\n                objectIdList.push(object.objectId);\n            } else {\n                HumanScene._getLeaves(object.objects, objectIdList);\n            }\n        }\n    };\n\n    /**\n     * Returns the IDs of visible leaf objects within the given tree\n     * @param objectId\n     * @memberof Human.scene\n     */\n    HumanScene.getEnabledLeaves = function (objectId) {\n        var objectIdList;\n        if (objectId) {\n            var object = HumanScene.objects[objectId];\n            objectIdList = [];\n            if (object) {\n                HumanScene._getEnabledLeaves([object], objectIdList);\n            }\n        } else {\n            objectIdList = Object.keys(HumanScene.enabledObjects);\n        }\n        return objectIdList;\n    };\n\n    HumanScene._getEnabledLeaves = function (objects, objectIdList) {\n        var object;\n        for (var i = 0, len = objects.length; i < len; i++) {\n            object = objects[i];\n            if (object.objects.length === 0) { // Leaf\n                if (HumanScene.enabledObjects.hasOwnProperty(object.objectId)) {\n                    objectIdList.push(object.objectId);\n                }\n            } else {\n                HumanScene._getEnabledLeaves(object.objects, objectIdList);\n            }\n        }\n    };\n\n    HumanScene._getKeys = function (map, val) {\n        var keys = {};\n        for (var key in map) {\n            if (map.hasOwnProperty(key)) {\n                key[key] = val;\n            }\n        }\n        return keys;\n    };\n\n    /** Destroys an object and all sub-objects\n     */\n    HumanScene.destroyObject = function (objectId) {\n        var object = HumanScene.objects[objectId];\n        if (!object || object._destroyed) {\n            return;\n        }\n        var i, len;\n        for (i = 0, len = HumanScene.rootObjects.length; i < len; i++) {\n            if (HumanScene.rootObjects[i].objectId === objectId) {\n                HumanScene.rootObjects.splice(i, 1);\n                break;\n            }\n        }\n        delete HumanScene.objects[objectId];                              // Delete object\n        if (object.fmaId) {\n            delete HumanScene.objectsByFMAID[object.fmaId];\n        }\n\n        delete HumanScene.enabledObjects[objectId];                       // Delete from enabled objects\n\n        if (object.parent) {\n            object.parent._removeObject(objectId);\n        }\n        var children = object.objects.slice(0); // Avoid modification during removals\n        for (i = 0, len = children.length; i < len; i++) {\n            HumanScene.destroyObject(children[i].objectId);\n        }\n\n        if (object.isLeaf()) {\n            object.destroyNodes();\n        }\n\n        delete HumanScene.modelObjects[object.modelId][object.objectId];\n\n        HumanScene._deregisterObjectForTags(object);\n\n        // Will need to recompute leaf object cache\n        HumanScene._leavesCache = {};\n\n        Human.events.fire(\"scene.objectDestroyed\", { objectId: objectId });\n    };\n\n    /**\n     *\n     * @param [params]\n     * @param [params.objectId] ID of single object\n     * @param [params.objectIds] Array of object IDs\n     * @param [params.objects] Map of IDs to objects\n     * @returns {*}\n     */\n    HumanScene.getBoundary = function (params) {\n\n        if (!params) {\n            return this.boundary;\n        }\n\n        params = params || {};\n\n        var object;\n        var objectId;\n        var boundary, b;\n\n        if (params.objectIds) {\n            boundary = {\n                xmin: Number.POSITIVE_INFINITY,\n                ymin: Number.POSITIVE_INFINITY,\n                zmin: Number.POSITIVE_INFINITY,\n                xmax: Number.NEGATIVE_INFINITY,\n                ymax: Number.NEGATIVE_INFINITY,\n                zmax: Number.NEGATIVE_INFINITY\n            };\n\n            // Requesting boundary of multiple objects given as array of IDs\n\n            var objectIds = params.objectIds;\n\n            for (var i = 0, len = objectIds.length; i < len; i++) {\n\n                object = HumanScene.objects[objectIds[i]];\n\n                if (object && object.objects.length === 0) { // Leaf object\n\n                    b = object.getBoundary();\n\n                    if (b.xmin < boundary.xmin) {\n                        boundary.xmin = b.xmin;\n                    }\n                    if (b.ymin < boundary.ymin) {\n                        boundary.ymin = b.ymin;\n                    }\n                    if (b.zmin < boundary.zmin) {\n                        boundary.zmin = b.zmin;\n                    }\n                    if (b.xmax > boundary.xmax) {\n                        boundary.xmax = b.xmax;\n                    }\n                    if (b.ymax > boundary.ymax) {\n                        boundary.ymax = b.ymax;\n                    }\n                    if (b.zmax > boundary.zmax) {\n                        boundary.zmax = b.zmax;\n                    }\n                }\n            }\n        } else if (params.objects) {\n\n            boundary = {\n                xmin: Number.POSITIVE_INFINITY,\n                ymin: Number.POSITIVE_INFINITY,\n                zmin: Number.POSITIVE_INFINITY,\n                xmax: Number.NEGATIVE_INFINITY,\n                ymax: Number.NEGATIVE_INFINITY,\n                zmax: Number.NEGATIVE_INFINITY\n            };\n\n            // Requesting boundary of an ID-map of objects\n\n            var objects = params.objects;\n\n            for (objectId in objects) {\n\n                if (objects[objectId] && HumanScene.objects[objectId]) {\n\n                    object = HumanScene.objects[objectId];\n\n                    if (object.objects.length === 0) { // Leaf object\n\n                        b = object.getBoundary();\n\n                        if (b.xmin < boundary.xmin) {\n                            boundary.xmin = b.xmin;\n                        }\n                        if (b.ymin < boundary.ymin) {\n                            boundary.ymin = b.ymin;\n                        }\n                        if (b.zmin < boundary.zmin) {\n                            boundary.zmin = b.zmin;\n                        }\n                        if (b.xmax > boundary.xmax) {\n                            boundary.xmax = b.xmax;\n                        }\n                        if (b.ymax > boundary.ymax) {\n                            boundary.ymax = b.ymax;\n                        }\n                        if (b.zmax > boundary.zmax) {\n                            boundary.zmax = b.zmax;\n                        }\n                    }\n                }\n            }\n        } else if (params.clipped) {\n            boundary = Human.utils.deepClone(this.boundary);\n        } else {\n            boundary = this.boundary;\n        }\n\n        // take the inner boundary of scene boundary and cardinal clipping planes\n        if (params.clipped){\n            var clipBoundary = Human.renderer.clip.getBoundary();\n            boundary.xmin = Math.max(boundary.xmin, clipBoundary.xmin);\n            boundary.xmax = Math.min(boundary.xmax, clipBoundary.xmax);\n            boundary.ymin = Math.max(boundary.ymin, clipBoundary.ymin);\n            boundary.ymax = Math.min(boundary.ymax, clipBoundary.ymax);\n            boundary.zmin = Math.max(boundary.zmin, clipBoundary.zmin);\n            boundary.zmax = Math.min(boundary.zmax, clipBoundary.zmax);\n        }\n        return boundary;\n    };\n\n    HumanScene.getKdTree = function() {\n        if (this.kdTreeDirty) {\n            var rootObjects = Human.scene.rootObjects;\n            var leaves = [];\n\n            var captureLeafObject = function (o) {\n                if (o.shown && o.objects.length === 0) {\n                    leaves.push(o);\n                }\n            };\n\n            for (var i = 0, len = rootObjects.length; i < len; ++i) {\n                rootObjects[i].traverseDown(captureLeafObject);\n            }\n\n            this._kdTree = buildKdTreeNode(leaves, 0, 0);\n            this.kdTreeDirty = false;\n        }\n\n        return this._kdTree;\n    };\n\n    // Make the sene-graph datastructure compliant with the grpah matcher\n    HumanScene.access = function(objectId) {\n        return HumanScene.getLeaves(objectId);\n    };\n\n    // Return scene graph nodes match set-logic query.\n    HumanScene.select = function(query) {\n        return graphMatcher.match(HumanScene, query);\n    };\n\n    // Single scene-graph traversal to set all properties, defaulting to parent properties.\n    // Also has to fire event with published changes.\n    HumanScene.setObjectProperties = function(instructions){\n        instructions = instructions || {};\n\n        var overrides = {};\n        var shownChanges = {};      // objects that have changed shown property value\n        var shownObjects = {};      // objects where shown = true\n\n        var nonInheritable = {'transform':true};\n\n        //NOTE[XRAY]\n        // var xRayChanges = {};       // objects that have changed xray value\n        // var xRayObjects = {};\n\n        // Perform update on all objects in scene-graph through downward traversal\n        var rootObjects = Human.scene.rootObjects;\n\n        function setProperties(object){\n            var override = overrides[object.objectId] = instructions[object.objectId] || {};\n\n            // merge with inherited properties from parent\n            if (object.parent){\n                var parentOverride = overrides[object.parent.objectId];\n                for (var key in parentOverride) {\n                    if (override[key] === undefined && !nonInheritable[key]) {\n                        override[key] = parentOverride[key];\n                    }\n                }\n\n                // special handling of glass factor, as it is not needed to be inherited\n                override.glassFactor = object.glassFactor;\n                override.murkiness = object.murkiness;\n            }\n\n            // Register changes to 'shown' property\n            if (override.hasOwnProperty(\"shown\") && object.shown !== override.shown){\n                if (object.isLeaf()){\n                    shownChanges[object.objectId] = override.shown;\n                }\n            }\n\n            if (object.isLeaf()) {\n                if (override.shown){\n                    shownObjects[object.objectId] = object;\n                    HumanScene.enabledObjects[object.objectId] = object;\n                } else {\n                    delete HumanScene.enabledObjects[object.objectId];\n                }\n                object.clearColorModifiers();\n                object.clearOpacityModifiers();\n                object.setProperties(override);\n            }\n\n        }\n\n        for (var i = 0, len = rootObjects.length; i < len; i++) {\n            rootObjects[i].traverseDown(setProperties);\n        }\n\n        Human.events.fire(\"scene.objectsShown\", {\n          enabledObjectsUpdate: shownChanges,\n          showSelectedObjects: HumanScene.showSelectedObjects\n        });\n\n        ///////////////////////////////////////////\n        // Primarily for legacy object selection\n        ///////////////////////////////////////////\n        Human.events.fire(\"scene.objectPropertiesSet\", {\n          instructions: instructions\n        });\n\n    };\n\n    // Apply pending updates to the scenegraph and\n    // rebuild boundaries if necessary.\n    HumanScene.onFrame = function() {\n        var boundaryUpdated = false;\n        var i, len;\n\n        for (i = 0, len = this.rootObjects.length; i < len; ++i) {\n            if (updateXform(this.rootObjects[i], false)) {\n                boundaryUpdated = true;\n            }\n        }\n\n        if (boundaryUpdated) {\n            this.boundary.xmin = Number.POSITIVE_INFINITY;\n            this.boundary.ymin = Number.POSITIVE_INFINITY;\n            this.boundary.zmin = Number.POSITIVE_INFINITY;\n            this.boundary.xmax = Number.NEGATIVE_INFINITY;\n            this.boundary.ymax = Number.NEGATIVE_INFINITY;\n            this.boundary.zmax = Number.NEGATIVE_INFINITY;\n\n            for (i = 0, len = this.rootObjects.length; i < len; ++i) {\n                var bb = this.rootObjects[i].getBoundary();\n                this.boundary.xmin = Math.min(this.boundary.xmin, bb.xmin);\n                this.boundary.ymin = Math.min(this.boundary.ymin, bb.ymin);\n                this.boundary.zmin = Math.min(this.boundary.zmin, bb.zmin);\n                this.boundary.xmax = Math.max(this.boundary.xmax, bb.xmax);\n                this.boundary.ymax = Math.max(this.boundary.ymax, bb.ymax);\n                this.boundary.zmax = Math.max(this.boundary.zmax, bb.zmax);\n\n            }\n\n            this.center[0] = (this.boundary.xmin + this.boundary.xmax) * 0.5;\n            this.center[1] = (this.boundary.ymin + this.boundary.ymax) * 0.5;\n            this.center[2] = (this.boundary.zmin + this.boundary.zmax) * 0.5;\n        }\n    };\n\n    function updateXform(object, parentUpdated) {\n        var updateLocal = object.matrixDirty;\n        var updateWorld = updateLocal || parentUpdated;\n        var boundaryUpdated = updateWorld;\n        var i, len;\n\n        if (updateLocal) {\n            object.buildMatrix();\n        }\n\n        if (updateWorld) {\n            if (object.parent) {\n                mat4.multiply(object.worldMatrix, object.parent.worldMatrix, object.localMatrix);\n            } else {\n                object.worldMatrix.set(object.localMatrix);\n            }\n            object.matrixDirty = false;\n        }\n\n        if (object.isLeaf()) {\n            if (updateWorld) {\n                object.compileXform();\n                return true;\n            }\n            if (object.geoDirty) {\n                object.compileBoundary();\n                object.geoDirty = false;\n                return true;\n            }\n\n            return false;\n        }\n\n        for (i = 0, len = object.objects.length; i < len; ++i) {\n            if (updateXform(object.objects[i], updateWorld)) {\n                boundaryUpdated = true;\n            }\n        }\n\n        if (boundaryUpdated) {\n            object.boundary.xmin = Number.POSITIVE_INFINITY;\n            object.boundary.ymin = Number.POSITIVE_INFINITY;\n            object.boundary.zmin = Number.POSITIVE_INFINITY;\n            object.boundary.xmax = Number.NEGATIVE_INFINITY;\n            object.boundary.ymax = Number.NEGATIVE_INFINITY;\n            object.boundary.zmax = Number.NEGATIVE_INFINITY;\n\n            for (i = 0, len = object.objects.length; i < len; ++i) {\n                var bb = object.objects[i].getBoundary();\n                object.boundary.xmin = Math.min(object.boundary.xmin, bb.xmin);\n                object.boundary.ymin = Math.min(object.boundary.ymin, bb.ymin);\n                object.boundary.zmin = Math.min(object.boundary.zmin, bb.zmin);\n                object.boundary.xmax = Math.max(object.boundary.xmax, bb.xmax);\n                object.boundary.ymax = Math.max(object.boundary.ymax, bb.ymax);\n                object.boundary.zmax = Math.max(object.boundary.zmax, bb.zmax);\n            }\n\n            object.center[0] = (object.boundary.xmin + object.boundary.xmax) * 0.5;\n            object.center[1] = (object.boundary.ymin + object.boundary.ymax) * 0.5;\n            object.center[2] = (object.boundary.zmin + object.boundary.zmax) * 0.5;\n        }\n\n        return boundaryUpdated;\n    }\n\n    HumanScene.cull = function() {\n        cullKdTreeNode(\n            this.getKdTree(),\n            Human.renderer.camera.getFrustum(),\n            Human.renderer.clip.getActiveClips()\n        );\n    };\n\n    var boundaryProps = [\n        \"xmin\",\n        \"ymin\",\n        \"zmin\"\n    ];\n\n    function buildKdTreeNode(objects, dim, depth) {\n        var min = vec3.create();\n        var max = vec3.create();\n\n        var node = {\n            objects: objects,\n            left: null,\n            right: null,\n            bb: {\n                min: min,\n                max: max\n            }\n        };\n\n        if (objects.length === 0) {\n            return node;\n        }\n\n        min[0] = min[1] = min[2] = Number.POSITIVE_INFINITY;\n        max[0] = max[1] = max[2] = Number.NEGATIVE_INFINITY;\n\n        var object, b;\n        var i, len;\n\n        for (i = 0, len = objects.length; i < len; ++i) {\n            object = objects[i];\n            b = object.getBoundary();\n\n            if (b.xmin < min[0]) {\n                min[0] = b.xmin;\n            }\n\n            if (b.xmax > max[0]) {\n                max[0] = b.xmax;\n            }\n\n            if (b.ymin < min[1]) {\n                min[1] = b.ymin;\n            }\n\n            if (b.ymax > max[1]) {\n                max[1] = b.ymax;\n            }\n\n            if (b.zmin < min[2]) {\n                min[2] = b.zmin;\n            }\n\n            if (b.zmax > max[2]) {\n                max[2] = b.zmax;\n            }\n        }\n\n        if (depth > KD_TREE_MAX_DEPTH) {\n            return node;\n        }\n\n        var boundaryProp = boundaryProps[dim];\n\n        var mid = (min[dim] + max[dim]) / 2;\n        var left = new Array(objects.length);\n        var numLeft = 0;\n        var right = new Array(objects.length);\n        var numRight = 0;\n\n        for (i = 0, len = objects.length; i < len; ++i) {\n            object = objects[i];\n            b = object.getBoundary();\n            if (b[boundaryProp] <= mid) {\n                left[numLeft++] = object;\n            } else {\n                right[numRight++] = object;\n            }\n        }\n\n        if (numLeft < KD_TREE_MIN_OBJECTS || numRight < KD_TREE_MIN_OBJECTS) {\n            return node;\n        }\n\n        left.length = numLeft;\n        right.length = numRight;\n\n        node.left = buildKdTreeNode(left, (dim + 1) % 3, depth + 1);\n        node.right = buildKdTreeNode(right, (dim + 1) % 3, depth + 1);\n\n        return node;\n    }\n\n    function cullKdTreeNode(kdTreeNode, frustum, clips) {\n        var min = kdTreeNode.bb.min;\n        var max = kdTreeNode.bb.max;\n        var cameraResult = 1;\n        var clipsResult = 1;\n        var i, len;\n\n        if (frustum) {\n            cameraResult = Human.math.intersections.planesAabb(frustum, min, max);\n        }\n\n        if (clips) {\n            clipsResult = Human.math.intersections.planesAabb(clips, min, max);\n        }\n\n        if (clipsResult === -1) {\n            for (i = 0, len = kdTreeNode.objects.length; i < len; ++i) {\n                kdTreeNode.objects[i].clipCull(true);\n            }\n\n            return;\n        }\n\n        if (cameraResult === -1) {\n            for (i = 0, len = kdTreeNode.objects.length; i < len; ++i) {\n                kdTreeNode.objects[i].frustumCull(true);\n            }\n\n            return;\n        }\n\n        if (cameraResult === 1) {\n            frustum = null;\n        }\n\n        if (clipsResult === 1) {\n            clips = null;\n        }\n\n        if (cameraResult === 0 || clipsResult === 0) {\n            if (kdTreeNode.left) {\n                cullKdTreeNode(kdTreeNode.left, frustum, clips);\n                cullKdTreeNode(kdTreeNode.right, frustum, clips);\n            } else {\n                for (i = 0, len = kdTreeNode.objects.length; i < len; ++i) {\n                    cullObjectToFrustum(kdTreeNode.objects[i], frustum, clips);\n                }\n            }\n        } else {\n            for (i = 0, len = kdTreeNode.objects.length; i < len; ++i) {\n                kdTreeNode.objects[i].frustumCull(false);\n                kdTreeNode.objects[i].clipCull(false);\n            }\n        }\n    }\n\n    var boundaryMin = vec3.create();\n    var boundaryMax = vec3.create();\n    var frustumTestDetails = new Array(6);\n    var clipTestDetails = [];\n\n    function cullObjectToFrustum(object, frustum, clips) {\n        var bb = object.getBoundary();\n\n        boundaryMin[0] = bb.xmin;\n        boundaryMin[1] = bb.ymin;\n        boundaryMin[2] = bb.zmin;\n\n        boundaryMax[0] = bb.xmax;\n        boundaryMax[1] = bb.ymax;\n        boundaryMax[2] = bb.zmax;\n\n        var cameraResult = 1;\n        var clipsResult = 1;\n        var fading = false;\n\n        if (frustum) {\n            cameraResult = Human.math.intersections.planesAabb(frustum, boundaryMin, boundaryMax, frustumTestDetails);\n        }\n\n        if (clips) {\n            clipTestDetails.length = clips.length;\n            clipsResult = Human.math.intersections.planesAabb(clips, boundaryMin, boundaryMax, clipTestDetails);\n            for (var i = 0, len = clipTestDetails.length; i < len; ++i) {\n                if (clipTestDetails[i] === undefined) {\n                    break;\n                }\n                if (clipTestDetails[i] === 0 && clips[i].fade) {\n                    fading = true;\n                    break;\n                }\n            }\n        }\n\n        object.frustumCull(cameraResult === -1);\n        object.clipCull(clipsResult === -1);\n\n        if (cameraResult === -1 || clipsResult === -1) {\n            return;\n        }\n\n        object.clipFade(fading);\n        object.setVisiblyClipped(\n            (cameraResult === 0 && frustumTestDetails[Human.renderer.camera.FRUSTUM_NEAR] === 0) ||\n            clipsResult === 0\n        );\n    }\n\n})();\n;(function () {\n    \"use strict\";\n\n    /**\n     * @class An object within {@link Human.scene}\n     * @param cfg\n     * @constructor\n     */\n    Human.scene.Group = function (cfg) {\n        /** ID of model that contains this object\n         *\n         * @type {modelId|*}\n         */\n        this.modelId = cfg.modelId;\n\n        /** Unique ID of this object\n         * @type {String}\n         */\n        this.objectId = cfg.objectId;\n\n        /** FMA ID\n         * @type {String}\n         */\n        this.fmaId = cfg.fmaId;\n\n        /** Z-sorting layer\n         * @type {*}\n         */\n        this.layer = cfg.layer;\n\n        /** Long display name\n         * @type {String}\n         */\n        this.displayName = cfg.displayName;\n\n        /** Detailed description\n         * @type {String}\n         */\n        this.description = cfg.description;\n\n        /** Parent object\n         * @type @link Human.scene.Group\n         */\n        this.parent = cfg.parent;\n\n        /** Anatomy region metatags\n         *\n         * @type {Array of String}\n         */\n        this.tags = cfg.tags;\n\n        // Selection defered to ancestor.\n        this.anonymous = cfg.anonymous;\n\n        /** Sub-objects\n         *  @type {[Human.scene.Group]}\n         */\n        this.objects = [];\n\n        \n\n        this.reflectedX = cfg.reflectedX || false;\n        this.reflectedY = cfg.reflectedY || false;\n        this.reflectedZ = cfg.reflectedZ || false;\n        this.localMatrix = mat4.create();\n        this.worldMatrix = mat4.create();\n        this._worldToObjectMatrix = mat4.create();\n        this.matrixDirty = false;\n        this.geoDirty = false;\n\n        this.boundary = {\n            xmin: Number.POSITIVE_INFINITY,\n            ymin: Number.POSITIVE_INFINITY,\n            zmin: Number.POSITIVE_INFINITY,\n            xmax: Number.NEGATIVE_INFINITY,\n            ymax: Number.NEGATIVE_INFINITY,\n            zmax: Number.NEGATIVE_INFINITY\n        };\n\n        this.center = vec3.create();\n\n        this.transformId = cfg.transformId;\n        this.transformInitialized = !cfg.transformId;\n\n        // Initial transform\n        this.pivot = {x: 0, y: 0, z: 0};\n        this.translate = {x: 0, y: 0, z: 0};\n        this.scale = {x: 1, y: 1, z: 1};\n        this.rotate = {x: 0, y: 0, z: 0};\n        this._transformNode = null;\n\n        // Both branch and leaf nodes can have transform assets\n        if (cfg.pivot || cfg.translate || cfg.scale || cfg.rotate) {\n            // Initial transform\n            this.setTransform(cfg);\n        }\n    };\n\n\n    Human.scene.Group.prototype.checkRenderable = function() {\n        for (var i = 0, len = this.objects.length; i < len; ++i) {\n            this.objects[i].checkRenderable();\n        }\n    };\n\n    Human.scene.Group.prototype.isVisible = function () {\n            var numLeaves = this.getLeafObjects().length;\n            return this.getShownObjects().length === numLeaves &&\n                this.getRenderableObjects().length === numLeaves;\n\n    };\n\n    Human.scene.Group.prototype.isLeaf = function () {\n        return false;\n    };\n\n    /**\n     * Sets modelling transformation for this object\n     *\n     * @param {*} params Transform\n     * @param {*} params.pivot Pivot point\n     * @param {*} params.translate Translation vector\n     * @param {*} params.scale Scaling vector\n     * @param {*} params.rotate Rotation vectors\n     * @memberof Human.scene.object\n     * @private\n     */\n    Human.scene.Group.prototype.setTransform = function (params) {\n\n        if (this.pivot === null) {\n            this.pivot = {x: 0, y: 0, z: 0};\n            this.translate = {x: 0, y: 0, z: 0};\n            this.rotate = {x: 0, y: 0, z: 0};\n            this.scale = {x: 1, y: 1, z: 1};\n        }\n\n        if (params.pivot) {\n            if (params.pivot.x !== undefined) {\n                this.pivot.x = params.pivot.x;\n            }\n            if (params.pivot.y !== undefined) {\n                this.pivot.y = params.pivot.y;\n            }\n            if (params.pivot.z !== undefined) {\n                this.pivot.z = params.pivot.z;\n            }\n        }\n\n        if (params.translate) {\n            if (params.translate.x !== undefined) {\n                this.translate.x = params.translate.x;\n            }\n            if (params.translate.y !== undefined) {\n                this.translate.y = params.translate.y;\n            }\n            if (params.translate.z !== undefined) {\n                this.translate.z = params.translate.z;\n            }\n        }\n\n        if (params.scale) {\n            if (params.scale.x !== undefined) {\n                this.scale.x = params.scale.x;\n            }\n            if (params.scale.y !== undefined) {\n                this.scale.y = params.scale.y;\n            }\n            if (params.scale.z !== undefined) {\n                this.scale.z = params.scale.z;\n            }\n            if (params.scale.x < 0) {\n                this.setReflectedX(true);\n            }\n            if (params.scale.y < 0) {\n                this.setReflectedY(true);\n            }\n            if (params.scale.z < 0) {\n                this.setReflectedZ(true);\n            }\n        }\n\n        if (params.rotate) {\n            if (params.rotate.x !== undefined) {\n                this.rotate.x = params.rotate.x;\n            }\n            if (params.rotate.y !== undefined) {\n                this.rotate.y = params.rotate.y;\n            }\n            if (params.rotate.z !== undefined) {\n                this.rotate.z = params.rotate.z;\n            }\n        }\n\n        if (!this.transformInitialized) {\n            this.transformInitialized = true;\n            this.checkRenderable();\n        }\n        \n        this.matrixDirty = true;\n    };\n\n\n\n    var pivotMat = mat4.create();\n    var scaleMat = mat4.create();\n    var translateMat = mat4.create();\n    var rotateZMat = mat4.create();\n    var rotateYMat = mat4.create();\n    var rotateXMat = mat4.create();\n\n    Human.scene.Group.prototype.buildMatrix = function () {\n        var pivot = this.pivot;\n        var translate = this.translate;\n        mat4.fromTranslation(pivotMat, [-pivot.x, -pivot.y, -pivot.z]);\n        var scale = this.scale;\n        mat4.fromScaling(scaleMat, [scale.x, scale.y, scale.z]);\n        mat4.fromTranslation(translateMat, [translate.x + pivot.x, translate.y + pivot.y, translate.z + pivot.z]);\n        var rotate = this.rotate;\n        mat4.fromRotation(rotateZMat, rotate.z * Math.PI / 180.0, Human.math.Z_AXIS);\n        mat4.fromRotation(rotateYMat, rotate.y * Math.PI / 180.0, Human.math.Y_AXIS);\n        mat4.fromRotation(rotateXMat, rotate.x * Math.PI / 180.0, Human.math.X_AXIS);\n        mat4.identity(this.localMatrix);\n        mat4.multiply(this.localMatrix, pivotMat, this.localMatrix);\n        mat4.multiply(this.localMatrix, scaleMat, this.localMatrix);\n        mat4.multiply(this.localMatrix, rotateXMat, this.localMatrix);\n        mat4.multiply(this.localMatrix, rotateYMat, this.localMatrix);\n        mat4.multiply(this.localMatrix, rotateZMat, this.localMatrix);\n        mat4.multiply(this.localMatrix, translateMat, this.localMatrix);\n\n        this.matrixDirty = false;\n    };\n\n\n    // Returns true if this object is in a negatively-scaled coordinate space\n    // where the scaling may be done by this object's transform, or a transform\n    // on a parent.\n    Human.scene.Group.prototype.reflectedTransform = function () {\n        var negatedAxes = 0;\n        if (this.reflectedX) {\n            ++negatedAxes;\n        }\n        if (this.reflectedY) {\n            ++negatedAxes;\n        }\n        if (this.reflectedZ) {\n            ++negatedAxes;\n        }\n\n        return negatedAxes % 2 === 1;\n    };\n\n    /**\n     * Returns this object's World-space boundary\n     * @memberof Human.scene.object\n     * @return {*}\n     */\n    Human.scene.Group.prototype.getBoundary = function () {\n        return this.boundary;\n    };\n\n    /**\n     * Returns this object's World-space matrix\n     * @memberof Human.scene.object\n     * @return {*}\n     */\n    Human.scene.Group.prototype.getWorldMatrix = function () {\n        return this.worldMatrix;\n    };\n\n    /**\n     * Returns inverse of all ancestor transforms\n     * @memberof Human.scene.object\n     * @return {*}\n     */\n    Human.scene.Group.prototype.getWorldToObjectMatrix = function () {\n        if (this.parent) {\n            mat4.invert(this._worldToObjectMatrix, this.parent.worldMatrix);\n        }\n\n        return this._worldToObjectMatrix;\n    };\n\n    /**\n     * Gets this object's World-space boundary center\n     * @memberof Human.scene.object\n     * @private\n     */\n    Human.scene.Group.prototype.getCenter = function () {\n        return this.center;\n    };\n\n    Human.scene.Group.prototype.setReflectedX = function (reflected) {\n        this.reflectedX = reflected;\n\n        for (var i = 0, len = this.objects.length; i < len; ++i) {\n            this.objects[i].setReflectedX(reflected);\n        }\n    };\n\n    Human.scene.Group.prototype.setReflectedY = function (reflected) {\n        this.reflectedY = reflected;\n\n        for (var i = 0, len = this.objects.length; i < len; ++i) {\n            this.objects[i].setReflectedY(reflected);\n        }\n    };\n\n    Human.scene.Group.prototype.setReflectedZ = function (reflected) {\n        this.reflectedZ = reflected;\n\n        for (var i = 0, len = this.objects.length; i < len; ++i) {\n            this.objects[i].setReflectedZ(reflected);\n        }\n    };\n\n    Human.scene.Group.prototype._removeObject = function (objectId) {\n        for (var i = 0, len = this.objects.length; i < len; i++) {\n            if (this.objects[i].objectId === objectId) {\n                this.objects.splice(i, 1);\n                return;\n            }\n        }\n    };\n\n    Human.scene.Group.prototype.isRenderable = function(){\n            for (var i = 0, len = this.objects.length; i < len; ++i) {\n                if (!this.objects[i].isRenderable()) {\n                    return false;\n                }\n            }\n\n            return true;\n    };\n\n    Human.scene.Group.prototype.isPinnable = function(){\n            for (var i = 0, len = this.objects.length; i < len; ++i) {\n                if (!this.objects[i].isPinnable()) {\n                    return false;\n                }\n            }\n\n            return true;\n    };\n\n    Human.scene.Group.prototype.getDefaultProperties = function(){\n        return {\n            shown: false,\n            pickable: true,\n            backfaces: false,\n            glassFactor: 0.0,\n            murkiness: 1.0,\n            opacity:  1.0\n        };\n    };\n\n    // -----------------  QUICK AND DIRTY TRAVERSAL ---------------------------\n\n    Human.scene.Group.prototype.traverseUp = function(callback){\n        callback(this);\n        if (this.parent) {\n            this.parent.traverseUp(callback);\n        }\n    };\n\n    Human.scene.Group.prototype.traverseDown = function(callback){\n        callback(this);\n        for (var i = 0, len = this.objects.length; i < len; i++) {\n            this.objects[i].traverseDown(callback);\n        }\n    };\n\n    Human.scene.Group.prototype.getLeafObjects = function(callback){\n        var leafObjects = [];\n\n        this.traverseDown(function (child) {\n            if(child.isLeaf()) {\n                leafObjects.push(child);\n\n                if(callback) {\n                    callback(child);\n                }\n            }\n        });\n\n        return leafObjects;\n    };\n\n    Human.scene.Group.prototype.getRenderableObjects = function(callback){\n        var renderableObjects = [];\n\n        this.getLeafObjects(function (child) {\n            if(child.isRenderable()) {\n                renderableObjects.push(child);\n\n                if(callback) {\n                    callback(child);\n                }\n            }\n        });\n\n        return renderableObjects;\n    };\n\n    Human.scene.Group.prototype.getShownObjects = function(callback){\n        var shownObjects = [];\n\n        this.getLeafObjects(function (child) {\n            if(child.shown) {\n                shownObjects.push(child);\n\n                if(callback) {\n                    callback(child);\n                }\n            }\n        });\n\n        return shownObjects;\n    };\n\n})();\n;(function () {\n    \"use strict\";\n\n    var ColorFresnel = window.ColorFresnel; // added to global namespace\n    var ScalarFresnel = window.ScalarFresnel;\n\n    /**\n     * @class An object within {@link Human.scene}\n     * @param cfg\n     * @constructor\n     */\n    Human.scene.Object = function (cfg) {\n        /** ID of model that contains this object\n         *\n         * @type {modelId|*}\n         */\n        this.modelId = cfg.modelId;\n\n        /** Unique ID of this object\n         * @type {String}\n         */\n        this.objectId = cfg.objectId;\n\n        // Selection defered to ancestor.\n        this.anonymous = cfg.anonymous;\n\n        /** FMA ID\n         * @type {String}\n         */\n        this.fmaId = cfg.fmaId;\n\n        /** Z-sorting layer\n         * @type {*}\n         */\n        this.layer = parseInt(cfg.layer, 10) || 0; // sometimes, 'layer' exists as a string. It should be a number.\n\n        /** Long display name\n         * @type {String}\n         */\n        this.displayName = cfg.displayName;\n\n        /** Detailed description\n         * @type {String}\n         */\n        this.description = cfg.description;\n\n        /** Parent object\n         * @type @link Human.scene.Object\n         */\n        this.parent = cfg.parent;\n\n        /** True when this object is shown\n         * @type {*|Boolean}\n         */\n        this.shown = false;\n\n        // Culled via frustum culling\n        this.culledByFrustum = false;\n\n        // Culled via clipping plane\n        this.culledByClip = false;\n\n        // Intersecting a fade clipping plane\n        this.fadeByClip = false;\n\n        /** True when this object may be picked\n         *  @type {Boolean}\n         */\n        this.pickable = true;\n\n        /** True when this object may be clipped\n         *  @type {Boolean}\n         */\n        this.clippable = true;\n\n        /** True when this object is X-rayed\n         *  @type {Boolean}\n         */\n        this.xray = false;\n\n        // opacity is 1 if completely opaque\n        this.opacity = cfg.opacity !== undefined ? cfg.opacity : 1.0;\n\n        /** When transparent, this controls the degree of \"facing ratio\" effect, which is\n         * where the object becomes more opaque towards the edges.\n         * <p>Value is continuous, in the range [0.0..1.0], where 0.0 is no effect, while 1.0 is the full effect.\n         *  @type {Number}\n         */\n        this.glassFactor = 1.0;\n        /** When transparent, this controls the degree of \"murkiness\" effect.\n         * <p>Value is continuous, in the range [0.0..1.0], where 0.0 is no effect, while 1.0 is the full effect.\n         *  @type {Number}\n         */\n        this.murkiness = 1.0;\n\n        /** True when this object is highlighted\n         *  @type {Boolean}\n         */\n        this.highlight = false;\n\n        this.tintColor = new Float32Array([1, 1, 1]);\n        this.saturation = 0;\n        this.contrast = 0;\n        this.brightness = 0;\n\n        this.colorModifiers = {};\n        this.colorModifierList = [];\n        this.colorModifierConfigs = [];\n\n        this.opacityModifiers = {};\n        this.opacityModifierConfigs = [];\n\n        /** True when this object may show backfaces.\n         *  @type {Boolean}\n         */\n        this.backfaces = false;\n\n        // True if this object is currently clipped by the near plane.\n        this.visiblyClipped = false;\n\n        // Vertex winding order\n        this.windingOrder = \"ccw\";\n\n        /** Anatomy region metatags\n         *\n         * @type {Array of String}\n         */\n        this.tags = cfg.tags;\n\n        /** Sub-objects\n         *  @type {[Human.scene.Object]}\n         */\n         // Always empty. Just here to make\n         // traversal across groups simpler.\n        this.objects = [];\n\n\n\n        this.reflectedX = cfg.reflectedX || false;\n        this.reflectedY = cfg.reflectedY || false;\n        this.reflectedZ = cfg.reflectedZ || false;\n        this.localMatrix = mat4.create();\n        this.worldMatrix = mat4.create();\n        this._worldToObjectMatrix = mat4.create();\n        this.matrixDirty = false;\n        this.geoDirty = false;\n\n        this.boundary = {\n            xmin: Number.POSITIVE_INFINITY,\n            ymin: Number.POSITIVE_INFINITY,\n            zmin: Number.POSITIVE_INFINITY,\n            xmax: Number.NEGATIVE_INFINITY,\n            ymax: Number.NEGATIVE_INFINITY,\n            zmax: Number.NEGATIVE_INFINITY\n        };\n\n        this.center = vec3.create();\n\n        this.transformId = cfg.transformId;\n        this.transformInitialized = !cfg.transformId;\n\n        // Initial transform\n        this.pivot = {x: 0, y: 0, z: 0};\n        this.translate = {x: 0, y: 0, z: 0};\n        this.scale = {x: 1, y: 1, z: 1};\n        this.rotate = {x: 0, y: 0, z: 0};\n        this._transformNode = null;\n\n\n        // Eventually, we'll not create roots within roots, where the SceneJS subgraphs for Human objects will\n        // be flat, ie. not nested within the SceneJS scene graph. Before we do that however, we need to manage the\n        // nested coordinate spaces (ie multiplication of nested matrices) within Human, rather than rely on\n        // SceneJS' inherited coordinate spaces, as we do currently.\n        this._rootNode = null;\n        this._renderableRoot = null;\n        this.renderables = [];\n\n        // Map for legacy anonymous object IDs\n        this.anonymousIdToRenderableIndex = cfg.anonymousIdToRenderableIndex || {};\n\n        if (cfg.renderables) {\n            this.initRenderables();\n            for (var i = 0, len = cfg.renderables.length; i < len; ++i) {\n                this.addRenderable(cfg.renderables[i]);\n            }\n        }\n\n        if (cfg.geometryId || cfg.morphId) {\n            this.initRenderables();\n            this.addRenderable(cfg);\n        }\n\n        // Both branch and leaf nodes can have transform assets\n\n        if (cfg.pivot || cfg.translate || cfg.scale || cfg.rotate) {\n            // Initial transform\n            this.setTransform(cfg);\n        }\n        this._checkFlippedWinding();\n\n        if (this._propertiesNode) {\n            this._propertiesNode.setSolidColor(cfg.capColor ||  { r: 0.7, g: 0.7, b: 0.7 });\n        }\n    };\n\n    Human.scene.Object.prototype.initRenderables = function () {\n        if (this._rootNode) {\n            return;\n        }\n\n        this._rootNode = this._transformNode = Human.renderer.graph.createSubtree({\n            type: \"xform\",\n        });\n\n        // Flags\n\n        var flags = this.getDefaultFlags();\n\n        this._xrayBackfaces = false;\n\n        flags.enabled = false;\n        flags.pickable = true;\n        flags.solid = Human.scene.enableSolidObjects;\n        flags.layer = this.layer || 0;\n        flags.name = this.objectId;\n        flags.xray = false;\n        flags.highlight = false;\n        flags.opacity = this.opacity;\n        flags.glassFactor = this.glassFactor;\n        flags.murkiness = this.murkiness;\n        flags.xrayEnabled = true;\n\n        this._renderableRoot = this._propertiesNode = Human.renderer.graph.insertNode(this._rootNode, {\n            type: \"properties\",\n            properties: flags\n        });\n    };\n\n    Human.scene.Object.prototype.addRenderable = function (cfg) {\n        this.renderables.push(new Human.scene.Renderable(this, cfg));\n    };\n\n    /////////////////////////////////////////\n    // Applying assets to this object\n    /////////////////////////////////////////\n\n\n    Human.scene.Object.prototype.detachAsset = function (type) {\n        var i, len;\n        switch (type) {\n            case \"geometry\":\n                for (i = 0, len = this.renderables.length; i < len; ++i) {\n                    this.renderables[i].detachGeometry();\n                }\n            break;\n            case \"material\":\n                for (i = 0, len = this.renderables.length; i < len; ++i) {\n                    this.renderables[i].detachMaterial();\n                }\n            break;\n            case \"morph\":\n                for (i = 0, len = this.renderables.length; i < len; ++i) {\n                    this.renderables[i].detachMorph();\n                }\n            break;\n        }\n    };\n\n    Human.scene.Object.prototype.checkRenderable = function() {\n        if (this.isRenderable()) {\n            Human.events.fire(\"scene.objectRenderable\", {\n                objectId: this.objectId\n            });\n        }\n    };\n\n    Human.scene.Object.prototype.isRenderable = function () {\n        for (var i = 0, len = this.renderables.length; i < len; ++i) {\n            if (!this.renderables[i].isRenderable()) {\n                return false;\n            }\n        }\n\n        var object = this;\n\n        while (object) {\n            if (object.transformId && !object.transformInitialized) {\n                return false;\n            }\n\n            object = object.parent;\n        }\n\n        return true;\n    };\n\n    Human.scene.Object.prototype.isVisible = function () {\n        return this.shown && this.isRenderable();\n    };\n\n    Human.scene.Object.prototype.isLeaf = function () {\n        return true;\n    };\n\n    /**\n     * Sets modelling transformation for this object\n     *\n     * @param {*} params Transform\n     * @param {*} params.pivot Pivot point\n     * @param {*} params.translate Translation vector\n     * @param {*} params.scale Scaling vector\n     * @param {*} params.rotate Rotation vectors\n     * @memberof Human.scene.object\n     * @private\n     */\n    Human.scene.Object.prototype.setTransform = function (params) {\n\n        if (this.pivot === null) {\n            this.pivot = {x: 0, y: 0, z: 0};\n            this.translate = {x: 0, y: 0, z: 0};\n            this.rotate = {x: 0, y: 0, z: 0};\n            this.scale = {x: 1, y: 1, z: 1};\n        }\n\n        if (params.pivot) {\n            if (params.pivot.x !== undefined) {\n                this.pivot.x = params.pivot.x;\n            }\n            if (params.pivot.y !== undefined) {\n                this.pivot.y = params.pivot.y;\n            }\n            if (params.pivot.z !== undefined) {\n                this.pivot.z = params.pivot.z;\n            }\n        }\n\n        if (params.translate) {\n            if (params.translate.x !== undefined) {\n                this.translate.x = params.translate.x;\n            }\n            if (params.translate.y !== undefined) {\n                this.translate.y = params.translate.y;\n            }\n            if (params.translate.z !== undefined) {\n                this.translate.z = params.translate.z;\n            }\n        }\n\n        if (params.scale) {\n            if (params.scale.x !== undefined) {\n                this.scale.x = params.scale.x;\n            }\n            if (params.scale.y !== undefined) {\n                this.scale.y = params.scale.y;\n            }\n            if (params.scale.z !== undefined) {\n                this.scale.z = params.scale.z;\n            }\n            if (params.scale.x < 0) {\n                this.setReflectedX(true);\n            }\n            if (params.scale.y < 0) {\n                this.setReflectedY(true);\n            }\n            if (params.scale.z < 0) {\n                this.setReflectedZ(true);\n            }\n        }\n\n        if (params.rotate) {\n            if (params.rotate.x !== undefined) {\n                this.rotate.x = params.rotate.x;\n            }\n            if (params.rotate.y !== undefined) {\n                this.rotate.y = params.rotate.y;\n            }\n            if (params.rotate.z !== undefined) {\n                this.rotate.z = params.rotate.z;\n            }\n        }\n\n        if (!this.transformInitialized) {\n            this.transformInitialized = true;\n            this.checkRenderable();\n        }\n\n        this.matrixDirty = true;\n    };\n\n\n    // returns true if the values are equal\n    function compareProperty(value1, value2) {\n        // compare type and value\n        var type1 = value1.constructor.name;\n        var type2 = value2.constructor.name;\n        if (type1 === type2) {\n            if (type1 === \"Number\" || type1 === \"Boolean\") {\n                return value1 === value2;\n            } else if (type1 === \"Array\" || type1 === \"Float32Array\"){\n                return value1.reduce(function(r, val, idx){\n                    return r && val===value2[idx];\n                }, true);\n            } else if (type1 === \"ScalarFresnel\") {\n                return ScalarFresnel.prototype.isEqual(value1, value2);\n            } else if (type1 === \"ColorFresnel\") {\n                return ColorFresnel.prototype.isEqual(value1, value2);\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n\n    // return copy of property value (to avoid pass by reference issues)\n    function cleanProperty(value) {\n        var type = value.constructor.name;\n        if (type === \"Array\") {\n            return value.slice(0);\n        } else if (type === \"ColorFresnel\") {\n            return new ColorFresnel(value.center, value.edge, value.centerBias, value.edgeBias, value.power);\n        } else if (type === \"ScalarFresnel\") {\n            return new ScalarFresnel(value.center, value.edge, value.centerBias, value.edgeBias, value.power);\n        } else {\n            // immutable (or unsupported property type)\n            return value;\n        }\n    }\n\n    var pivotMat = mat4.create();\n    var scaleMat = mat4.create();\n    var translateMat = mat4.create();\n    var rotateZMat = mat4.create();\n    var rotateYMat = mat4.create();\n    var rotateXMat = mat4.create();\n\n    Human.scene.Object.prototype.buildMatrix = function () {\n        var pivot = this.pivot;\n        var translate = this.translate;\n        mat4.fromTranslation(pivotMat, [-pivot.x, -pivot.y, -pivot.z]);\n        var scale = this.scale;\n        mat4.fromScaling(scaleMat, [scale.x, scale.y, scale.z]);\n        mat4.fromTranslation(translateMat, [translate.x + pivot.x, translate.y + pivot.y, translate.z + pivot.z]);\n        var rotate = this.rotate;\n        mat4.fromRotation(rotateZMat, rotate.z * Math.PI / 180.0, Human.math.Z_AXIS);\n        mat4.fromRotation(rotateYMat, rotate.y * Math.PI / 180.0, Human.math.Y_AXIS);\n        mat4.fromRotation(rotateXMat, rotate.x * Math.PI / 180.0, Human.math.X_AXIS);\n        mat4.identity(this.localMatrix);\n        mat4.multiply(this.localMatrix, pivotMat, this.localMatrix);\n        mat4.multiply(this.localMatrix, scaleMat, this.localMatrix);\n        mat4.multiply(this.localMatrix, rotateXMat, this.localMatrix);\n        mat4.multiply(this.localMatrix, rotateYMat, this.localMatrix);\n        mat4.multiply(this.localMatrix, rotateZMat, this.localMatrix);\n        mat4.multiply(this.localMatrix, translateMat, this.localMatrix);\n\n        this.matrixDirty = false;\n    };\n\n    Human.scene.Object.prototype.compileXform = function () {\n        if (this._transformNode) {\n            this._transformNode.setElements(this.worldMatrix);\n\n            this.compileBoundary();\n        }\n    };\n\n    Human.scene.Object.prototype.compileBoundary = function () {\n        Human.scene.kdTreeDirty = true;\n        Human.renderer.camera.nearFarDirty = true;\n        var matrix = this.worldMatrix;\n        var worldBoundary = this._getBoundary(matrix);\n        this.boundary.xmin = worldBoundary.xmin;\n        this.boundary.ymin = worldBoundary.ymin;\n        this.boundary.zmin = worldBoundary.zmin;\n        this.boundary.xmax = worldBoundary.xmax;\n        this.boundary.ymax = worldBoundary.ymax;\n        this.boundary.zmax = worldBoundary.zmax;\n\n        this.center[0] = (this.boundary.xmin + this.boundary.xmax) * 0.5;\n        this.center[1] = (this.boundary.ymin + this.boundary.ymax) * 0.5;\n        this.center[2] = (this.boundary.zmin + this.boundary.zmax) * 0.5;\n    };\n\n    // Returns true if this object is in a negatively-scaled coordinate space\n    // where the scaling may be done by this object's transform, or a transform\n    // on a parent.\n    Human.scene.Object.prototype.reflectedTransform = function () {\n        var negatedAxes = 0;\n        if (this.reflectedX) {\n            ++negatedAxes;\n        }\n        if (this.reflectedY) {\n            ++negatedAxes;\n        }\n        if (this.reflectedZ) {\n            ++negatedAxes;\n        }\n\n        return negatedAxes % 2 === 1;\n    };\n\n    Human.scene.Object.prototype._checkFlippedWinding = function () {\n        if (this._propertiesNode) {\n            var flip = this.reflectedTransform();\n            var defaultWinding = this.windingOrder;\n            var flippedWinding = this.windingOrder === \"ccw\" ? \"cw\" : \"ccw\";\n            this._propertiesNode.setFrontface(flip ? flippedWinding : defaultWinding);\n        }\n\n    };\n\n    /**\n     * Returns this object's World-space boundary\n     * @memberof Human.scene.object\n     * @return {*}\n     */\n    Human.scene.Object.prototype.getBoundary = function () {\n        return this.boundary;\n    };\n\n    /**\n     * Returns this object's World-space matrix\n     * @memberof Human.scene.object\n     * @return {*}\n     */\n    Human.scene.Object.prototype.getWorldMatrix = function () {\n        return this.worldMatrix;\n    };\n\n    /**\n     * Returns inverse of all ancestor transforms\n     * @memberof Human.scene.object\n     * @return {*}\n     */\n    Human.scene.Object.prototype.getWorldToObjectMatrix = function () {\n        if (this.parent) {\n            mat4.invert(this._worldToObjectMatrix, this.parent.worldMatrix);\n        }\n\n        return this._worldToObjectMatrix;\n    };\n\n    /**\n     * Gets this object's World-space boundary center\n     * @memberof Human.scene.object\n     * @private\n     */\n    Human.scene.Object.prototype.getCenter = function () {\n        return this.center;\n    };\n\n    var position = vec3.create();\n    var boundaryOffset = vec3.create();\n\n    // Get minimal boundary enclosing the given vertex array\n    Human.scene.Object.prototype._getBoundary = function (matrix) {\n        var xmin = Number.POSITIVE_INFINITY;\n        var ymin = Number.POSITIVE_INFINITY;\n        var zmin = Number.POSITIVE_INFINITY;\n        var xmax = Number.NEGATIVE_INFINITY;\n        var ymax = Number.NEGATIVE_INFINITY;\n        var zmax = Number.NEGATIVE_INFINITY;\n        var x, y, z;\n\n        for (var i = 0, len = this.renderables.length; i < len; ++i) {\n            var renderable = this.renderables[i];\n            var bb = renderable.boundary;\n\n            if (!renderable.isRenderable()) {\n                continue;\n            }\n\n            if (this._propertiesNode.getSkybox()) {\n                var camera = Human.renderer.camera.eye;\n                boundaryOffset[0] = camera.x;\n                boundaryOffset[1] = camera.y;\n                boundaryOffset[2] = camera.z;\n            } else {\n                boundaryOffset[0] = 0;\n                boundaryOffset[1] = 0;\n                boundaryOffset[2] = 0;\n            }\n\n            for (var j = 0; j < 8; j++) {\n                position[0] = j & 1 ? bb.xmin : bb.xmax;\n                position[1] = j & 2 ? bb.ymin : bb.ymax;\n                position[2] = j & 4 ? bb.zmin : bb.zmax;\n                vec3.transformMat4(position, position, matrix);\n                x = position[0] - boundaryOffset[0];\n                y = position[1] - boundaryOffset[1];\n                z = position[2] - boundaryOffset[2];\n\n                if (x < xmin) {\n                    xmin = x;\n                }\n                if (y < ymin) {\n                    ymin = y;\n                }\n                if (z < zmin) {\n                    zmin = z;\n                }\n                if (x > xmax) {\n                    xmax = x;\n                }\n                if (y > ymax) {\n                    ymax = y;\n                }\n                if (z > zmax) {\n                    zmax = z;\n                }\n            }\n        }\n\n        return { xmin: xmin, ymin: ymin, zmin: zmin, xmax: xmax, ymax: ymax, zmax: zmax };\n    };\n\n    /**\n     * Show/hide this object\n     * Only has effect on leaf objects, ignored on branch objects\n     * @param {Boolean} doShow Flag specifying whether or not to show\n     * @private\n     */\n    Human.scene.Object.prototype.show = function (doShow) {\n        if (this.shown !== doShow) {\n            this.shown = doShow;\n\n            if (this._propertiesNode) {\n                updateVisibility(this);\n                Human.scene.kdTreeDirty = true;\n\n                var eventName = \"scene.object\" + (this.shown ? \"Shown\" : \"Hidden\");\n\n                Human.events.fire(eventName, {\n                    objectId: this.objectId\n                });\n\n            }\n        }\n    };\n\n    Human.scene.Object.prototype.frustumCull = function (doCull) {\n        if (this.culledByFrustum !== doCull && this._propertiesNode) {\n            this.culledByFrustum = doCull;\n            updateVisibility(this);\n        }\n    };\n\n    Human.scene.Object.prototype.clipCull = function (doCull) {\n        if (this.culledByClip !== doCull && this._propertiesNode) {\n            this.culledByClip = doCull;\n            updateVisibility(this);\n        }\n    };\n\n    Human.scene.Object.prototype.clipFade = function (doFade) {\n        if (this.fadeByClip !== doFade && this._propertiesNode) {\n            this.fadeByClip = doFade;\n            this._propertiesNode.setProperties({\n                forceTransparent: doFade,\n                partiallyOpaque: doFade\n            });\n        }\n    };\n\n    /**\n     * Set degree of transparency of this object - sets property, but only does something if this object has scene content\n     *\n     * @param {Number} opacity Degree of transparency between 0 and 1\n     * @memberof Human.scene.object\n     * @private\n     */\n    Human.scene.Object.prototype.setOpacity = function (opacity) {\n        if (opacity === false) {\n            this.clearOpacityModProperties({'opacity': true});\n            return;\n        }\n        opacity = cleanProperty(opacity);\n        if (Array.isArray(opacity) && opacity.length === 5) {\n            opacity = new ScalarFresnel(opacity);\n        }\n        if (!compareProperty(this.opacity, opacity)){\n            this.opacity = opacity; // associable with groups for purposes of single-pass synchronization\n            if (this._propertiesNode){\n                this.setOpacityModifier(\"__OPACITY\", {\n                    value: this.opacity\n                });\n            }\n        }\n    };\n\n    /**\n     * Set whether or not object appears X-rayed\n     * Only has effect on leaf objects, ignored on branch objects\n     * @param {boolean} xray True to make object appear X-rayed\n     * @memberof Human.scene.object\n     * @private\n     */\n    Human.scene.Object.prototype.setXRay = function (xray) {\n        this.setXRayColors(xray);\n        this.xray = xray;\n    };\n\n    /*\n    *  Use xray colors without changing object \"xray\" flag\n    */\n    Human.scene.Object.prototype.setXRayColors = function (xray) {\n        if (this._propertiesNode) {\n            this._propertiesNode.setProperties({\n                xray: xray\n            });\n            updateBackfaces(this);\n        }\n    };\n\n    /** When transparent, this sets the degree of \"facing ratio\" effect, which is\n     * where the object becomes more opaque towards the edges.\n     * <p>Value is continuous, in the range [0.0..1.0], where 0.0 is no effect, while 1.0 is the full effect.\n     *\n     * @param {Number} glassFactor Degree of effect between 0 and 1\n     * @memberof Human.scene.object\n     * @private\n     */\n    Human.scene.Object.prototype.setGlassFactor = function (glassFactor) {\n        this.glassFactor = glassFactor;\n        if (this._propertiesNode) {\n            this._propertiesNode.setProperties({glassFactor: glassFactor});\n        }\n    };\n\n    /** When transparent, this sets the degree of \"murkiness\" effect.\n     * <p>Value is continuous, in the range [0.0..1.0], where 0.0 is no effect, while 1.0 is the full effect.\n     *\n     * @param {Number} murkiness Degree of effect between 0 and 1\n     * @memberof Human.scene.object\n     * @private\n     */\n    Human.scene.Object.prototype.setMurkiness = function (murkiness) {\n        this.murkiness = murkiness;\n        if (this._propertiesNode) {\n            this._propertiesNode.setProperties({murkiness: murkiness});\n        }\n    };\n\n    /**\n     * Sets whether or not this object is pickable\n     * Only has effect on leaf objects, ignored on branch objects\n     * @param pickable\n     * @memberof Human.scene.object\n     * @private\n     */\n    Human.scene.Object.prototype.setPickable = function (pickable) {\n        if (this.pickable !== pickable) {\n            if (this._propertiesNode) {\n                this._propertiesNode.setPicking(pickable);\n            }\n            this.pickable = pickable;\n        }\n    };\n\n    /**\n     * Sets whether or not this object is clippable\n     * Only has effect on leaf objects, ignored on branch objects\n     * @param clippable\n     * @memberof Human.scene.object\n     * @private\n     */\n    Human.scene.Object.prototype.setClippable = function (clippable) {\n        if (this.clippable !== clippable) {\n            if (this._propertiesNode) {\n                this._propertiesNode.setClipping(clippable);\n            }\n            this.clippable = clippable;\n        }\n    };\n\n    // add/replace/drop color modifier with config. cfg of null will remove the modifier\n    Human.scene.Object.prototype.setColorModifier = function (id, cfg) {\n        if (!this._propertiesNode) {\n            return;\n        }\n\n        var listUpdated = false;\n\n        if (cfg === null) {\n            // delete existing modifier\n            delete this.colorModifiers[id];\n            listUpdated = true;\n        } else if (!this.colorModifiers[id]) {\n            // add new modifier\n            this.colorModifiers[id] = {\n                priority: Human.scene.colorModPriorities[id] || 0,\n                params: {\n                    applyTo: cfg.applyTo,\n                    value: cfg.value,\n                    range: cfg.range || null\n                }\n            };\n            listUpdated = true;\n        } else {\n            // replace existing modifier\n            var modifier = this.colorModifiers[id];\n\n            if (cfg.applyTo !== undefined) {\n                modifier.params.applyTo = cfg.applyTo;\n            }\n\n            if (cfg.value !== undefined) {\n                modifier.params.value = cfg.value;\n            }\n\n            if (cfg.range !== undefined) {\n                modifier.params.range = cfg.range;\n            } else {\n                modifier.params.range = null;\n            }\n        }\n\n        if (listUpdated) {\n            updateColorModifiersList(this);\n        }\n\n        this._propertiesNode.setProperties({ colorModifiers: this.colorModifierConfigs });\n    };\n\n    // clear all color modifications on the object (properties and recipes)\n    Human.scene.Object.prototype.clearColorModifiers = function () {\n        if (!this._propertiesNode) {\n            return;\n        }\n\n        this.colorModifiers = {};\n        updateColorModifiersList(this);\n        this.tintColor = new Float32Array(defaultProperties.tintColor.value);\n        this.brightness = defaultProperties.brightness.value;\n        this.saturation = defaultProperties.saturation.value;\n        this.contrast = defaultProperties.contrast.value;\n\n        this._propertiesNode.setProperties({ colorModifiers: this.colorModifierConfigs });\n    };\n\n    // clear color mod properties from the object (properties only)\n    Human.scene.Object.prototype.clearColorModProperties = function(cfg){\n        if (!this._propertiesNode){\n            return;\n        }\n\n        if (!cfg || !!cfg.tintColor) {\n            delete this.colorModifiers['__TINT_COLOR'];\n            this.tintColor = new Float32Array(defaultProperties.tintColor.value);\n        }\n        if (!cfg || !!cfg.brightness) {\n            delete this.colorModifiers['__BRIGHTNESS'];\n            this.brightness = defaultProperties.brightness.value;\n        }\n\n        if (!cfg || !!cfg.saturation){\n            delete this.colorModifiers['__SATURATION'];\n            this.saturation = defaultProperties.saturation.value;\n        }\n\n        if (!cfg || !!cfg.contrast) {\n            delete this.colorModifiers['__CONTRAST'];\n            this.contrast = defaultProperties.contrast.value;\n        }\n\n        updateColorModifiersList(this);\n        this._propertiesNode.setProperties({colorModifiers: this.colorModifierConfigs});\n\n    };\n\n    Human.scene.Object.prototype.setOpacityModifier = function (id, cfg) {\n        if (!this._propertiesNode) {\n            return;\n        }\n\n        var listUpdated = false;\n\n        if (cfg === null) {\n            // delete existing modifier\n            delete this.opacityModifiers[id];\n            listUpdated = true;\n        } else if (!this.opacityModifiers[id]) {\n            this.opacityModifiers[id] = {\n                value: cfg.value,\n                range: cfg.range || null\n            };\n            listUpdated = true;\n        } else {\n            var modifier = this.opacityModifiers[id];\n\n            if (cfg.value !== undefined) {\n                modifier.value = cfg.value;\n            }\n\n            if (cfg.range !== undefined) {\n                modifier.range = cfg.range;\n            } else {\n                modifier.range = null;\n            }\n        }\n\n        if (listUpdated) {\n            updateOpacityModifiersList(this);\n        }\n\n        this._propertiesNode.setProperties({ opacityModifiers: this.opacityModifierConfigs });\n    };\n\n    // clear all opacity modifications on the object (recipes and properties)\n    Human.scene.Object.prototype.clearOpacityModifiers = function() {\n        if (!this._propertiesNode) {\n            return;\n        }\n\n        this.opacityModifiers = {};\n        this.opacity = defaultProperties.opacity.value;\n        updateOpacityModifiersList(this);\n        this._propertiesNode.setProperties({ opacityModifiers: this.opacityModifierConfigs });\n    };\n\n    // clear only opacity property modifiers\n    Human.scene.Object.prototype.clearOpacityModProperties = function(cfg){\n        if (!this._propertiesNode){\n            return;\n        }\n\n        if (!cfg || !!cfg.opacity){\n            delete this.opacityModifiers['__OPACITY'];\n            this.opacity = defaultProperties.opacity.value;\n        }\n\n        updateOpacityModifiersList(this);\n        this._propertiesNode.setProperties({ opacityModifiers: this.opacityModifierConfigs });\n    };\n\n    Human.scene.Object.prototype.colorModPrioritiesDirty = function() {\n        for (var id in this.colorModifiers) {\n            this.colorModifiers[id].priority = Human.scene.colorModPriorities[id] || 0;\n        }\n\n        updateColorModifiersList(this);\n\n        this._propertiesNode.setProperties({ colorModifiers: this.colorModifierConfigs });\n    };\n\n    Human.scene.Object.prototype.setHighlight = function (highlight) {\n        if (this._propertiesNode) {\n            if (highlight) {\n                var color = Human.renderer.highlightColor;\n                this.setColorModifier(\"__HIGHLIGHT\", {\n                    applyTo: \"tintColor\",\n                    value: color\n                });\n            } else {\n                this.setColorModifier(\"__HIGHLIGHT\", {\n                    applyTo: \"tintColor\",\n                    value: Human.math.VEC3_ONES\n                });\n            }\n            this.highlight = highlight;\n        }\n    };\n\n    // Default = color = [1,1,1]\n    function _setTintColor(obj, color) {\n        if (obj._propertiesNode) {\n            obj.tintColor = color;\n            obj.setColorModifier(\"__TINT_COLOR\", {\n                applyTo: \"tintColor\",\n                value: obj.tintColor\n            });\n        }\n    }\n\n    // Default = (1, 1, 1). if false , remove tint color\n    Human.scene.Object.prototype.setTintColor = function (args) {\n\n        if (args === false) {\n            this.clearColorModProperties({tintColor: true});\n            return;\n        }\n\n        var color;\n        if (arguments.length === 3) {\n            // legacy api  r,g,b tuple\n            color = [arguments[0],arguments[1],arguments[2]];\n        } else {\n            // color array, color fresnel, boolean\n            color = cleanProperty(arguments[0]);\n            if (Array.isArray(color) && color.length === 5) {\n                color = new ColorFresnel(color);\n            }\n        }\n\n        if (!compareProperty(this.tintColor, color)) {\n            _setTintColor(this, color);\n        }\n\n    };\n\n    // Default = 0\n    Human.scene.Object.prototype.setContrast = function (contrast) {\n        if (contrast === false){\n            this.clearColorModProperties({'contrast': true});\n            return;\n        }\n        contrast = cleanProperty(contrast);\n        if (Array.isArray(contrast) && contrast.length === 5) {\n            contrast = new ScalarFresnel(contrast);\n        }\n        if (this._propertiesNode && !compareProperty(this.contrast, contrast)) {\n            this.contrast = contrast;\n            this.setColorModifier(\"__CONTRAST\", {\n                applyTo: \"contrast\",\n                value: this.contrast\n            });\n        }\n    };\n\n    // Default = 0\n    Human.scene.Object.prototype.setSaturation = function (saturation) {\n        if (saturation === false) {\n            this.clearColorModProperties({'saturation': true});\n            return;\n        }\n        saturation = cleanProperty(saturation);\n        if (Array.isArray(saturation) && saturation.length === 5) {\n            saturation = new ScalarFresnel(saturation);\n        }\n        if (this._propertiesNode && !compareProperty(this.saturation, saturation)) {\n            this.saturation = saturation;\n            this.setColorModifier(\"__SATURATION\", {\n                applyTo: \"saturation\",\n                value: this.saturation\n            });\n        }\n    };\n\n    Human.scene.Object.prototype.setBrightness = function (brightness) {\n        if (brightness === false){\n            this.clearColorModProperties({'brightness': true});\n            return;\n        }\n        brightness = cleanProperty(brightness);\n        if (Array.isArray(brightness) && brightness.length === 5) {\n            brightness = new ScalarFresnel(brightness);\n        }\n        if (this._propertiesNode && !compareProperty(this.brightness, brightness)) {\n            this.brightness = brightness;\n            this.setColorModifier(\"__BRIGHTNESS\", {\n                applyTo: \"brightness\",\n                value: this.brightness\n            });\n        }\n    };\n\n    // Render in two passes for weightedOIT and improvedAlpha transparency mode.\n    Human.scene.Object.prototype.setPartiallyOpaque = function (po) {\n        if (this._propertiesNode) {\n            this._propertiesNode.setProperties({ partiallyOpaque: po });\n        }\n    };\n\n    /**\n     * Sets whether or not this object shows backfaces.\n     * Only has effect on leaf objects, ignored on branch objects\n     * @param backfaces\n     * @memberof Human.scene.object\n     * @private\n     */\n    Human.scene.Object.prototype.setBackfaces = function (backfaces) {\n        if (this.backfaces !== backfaces) {\n            this.backfaces = backfaces;\n            updateBackfaces(this);\n        }\n    };\n\n    Human.scene.Object.prototype.setVisiblyClipped = function (visiblyClipped) {\n        if (this.visiblyClipped !== visiblyClipped && this.hasRenderObjects()) {\n            this.visiblyClipped = visiblyClipped;\n            updateBackfaces(this);\n        }\n    };\n\n    Human.scene.Object.prototype.setReflectedX = function (reflected) {\n        this.reflectedX = reflected;\n        this._checkFlippedWinding();\n    };\n\n    Human.scene.Object.prototype.setReflectedY = function (reflected) {\n        this.reflectedY = reflected;\n        this._checkFlippedWinding();\n    };\n\n    Human.scene.Object.prototype.setReflectedZ = function (reflected) {\n        this.reflectedZ = reflected;\n        this._checkFlippedWinding();\n    };\n\n    Human.scene.Object.prototype.destroyNodes = function () {\n        if (this._rootNode) {\n            Human.renderer.graph.destroySubtree(this._rootNode);\n            this.renderables.length = 0;\n            this._rootNode = null;\n        }\n    };\n\n    // ------------------ EXPLICIT DEFAULTS -----------------------------------\n    // throw away\n    var defaultProperties = {\n        \"shown\": {setter: Human.scene.Object.prototype.show, value: false, keyable: true, type:\"boolean\"},\n        \"pickable\": {setter: Human.scene.Object.prototype.setPickable, value: true, keyable: false, type:\"boolean\"},\n        \"backfaces\": {setter: Human.scene.Object.prototype.setBackfaces, value: false, keyable: false, type:\"boolean\"},\n        \"glassFactor\": {setter: Human.scene.Object.prototype.setGlassFactor, value: 0.0, keyable: false, type:\"number\"},\n        \"murkiness\": {setter: Human.scene.Object.prototype.setMurkiness, value: 1.0, keyable: false, type:\"number\"},\n        \"opacity\": {setter: Human.scene.Object.prototype.setOpacity, value: 1.0, keyable: true, type:\"number\"},\n        \"tintColor\": {setter: Human.scene.Object.prototype.setTintColor, value: new Float32Array([1.0, 1.0, 1.0]), keyable: false, type:\"Float32Array\"},\n        \"saturation\": {setter: Human.scene.Object.prototype.setSaturation, value: 0, keyable: false, type:\"number\"},\n        \"brightness\": {setter: Human.scene.Object.prototype.setBrightness, value: 0, keyable: false, type:\"number\"},\n        \"contrast\": {setter: Human.scene.Object.prototype.setContrast, value: 0.0, keyable: false, type:\"number\"}\n    };\n\n    //NOTE[XRAY]\n    //\"xray\": {setter: Human.scene.Object.prototype.setXRay, value:false, keyable:false, type:\"boolean\"}\n\n\n    var defaultPropertyKeys = Object.keys(defaultProperties);\n\n    Human.scene.Object.prototype.getDefaultFlags = function () {\n        return {\n            picking: this.pickable,\n            enabled: false,\n            specular: true,\n            backfaces: false,\n            reflection: true,\n            solid: Human.scene.enableSolidObjects\n        };\n    };\n\n    Human.scene.Object.prototype.getDefaultProperties = function(){\n        var result = {};\n\n        for (var i = 0, len = defaultPropertyKeys.length; i < len; i++) {\n            var prop = defaultPropertyKeys[i];\n            result[prop] = defaultProperties[prop].value;\n        }\n\n        return result;\n    };\n\n    Human.scene.Object.prototype.getProperties = function(){\n        var self = this;\n        var result = {};\n\n        for (var i = 0, len = defaultPropertyKeys.length; i < len; i++) {\n            var prop = defaultPropertyKeys[i];\n            result[prop] = self[prop];\n        }\n\n        return result;\n    };\n\n    // Set properties of an individual object ONLY. No traversal.\n    Human.scene.Object.prototype.setProperties = function(overrides){\n        overrides = overrides || {};\n        var self = this;\n        var target;\n        var pvalue;\n\n        var i, len;\n        this.clearColorModifiers(); // reset color mods\n        this.clearOpacityModifiers(); // reset opacity mods\n        for (i = 0, len = defaultPropertyKeys.length; i < len; i++) {\n            var prop = defaultPropertyKeys[i];\n            target = defaultProperties[prop];\n            pvalue = overrides[prop] !== undefined ? overrides[prop] : target.value;\n\n            // apply if different\n            if (!compareProperty(self[prop], pvalue)){\n                target.setter.call(self, pvalue);\n            }\n        }\n\n\n        // loop through default recipes and add/remove according to overrides\n        var recipeName, recipes = Human.scene.colorRecipes.getRecipes();\n        for (i = 0; i< recipes.length; i++) {\n            recipeName = recipes[i];\n            Human.scene.colorRecipes.setObjectRecipe(this.objectId, recipeName, overrides[recipeName] || false);\n        }\n    };\n\n    Human.scene.Object.prototype.barycentricToModelSpace = function(renderableIndex, primitiveIndex, barycentric, out) {\n        if (this.renderables.length <= renderableIndex) {\n            return false;\n        }\n\n        var renderObject = this.renderables[renderableIndex].getRenderObject();\n\n        if (renderObject) {\n            // get object-space position\n            renderObject.barycentricToCartesian(primitiveIndex, barycentric, out);\n            return out;\n        } else {\n            return false;\n        }\n    };\n\n    Human.scene.Object.prototype.barycentricToWorldSpace = function(renderableIndex, primitiveIndex, barycentric, out) {\n        this.barycentricToModelSpace(renderableIndex, primitiveIndex, barycentric, out);\n        if (out) {\n            vec3.transformMat4(out, out, this.getWorldMatrix());\n            return out;\n        } else {\n            return false;\n        }\n    };\n\n    Human.scene.Object.prototype.isPinnable = function(){\n        return this.hasRenderObjects();\n    };\n\n    Human.scene.Object.prototype.hasRenderObjects = function(){\n        for (var i = 0, len = this.renderables.length; i < len; ++i) {\n            if (!this.renderables[i].getRenderObject()) {\n                return false;\n            }\n        }\n\n        return true;\n    };\n\n\n    // create synchronization object state for serialization.\n    // Does NOT include transform data\n    Human.scene.Object.prototype.serialize = function(){\n        var synchronization = {};\n        for (var prop in defaultProperties) {\n            var dprop = defaultProperties[prop];\n            if (!compareProperty(dprop.value, this[prop])){\n                // add to synchronization\n                var v = this[prop];\n                var serializedValue;\n                if (v instanceof ScalarFresnel || v instanceof ColorFresnel) {\n                    serializedValue = JSON.parse(JSON.stringify([v.center, v.edge, v.centerBias, v.edgeBias, v.power]));\n                } else {\n                    serializedValue = JSON.parse(JSON.stringify(v));\n                }\n                synchronization[prop] = serializedValue;\n            }\n        }\n        return synchronization;\n    };\n\n    // -----------------  QUICK AND DIRTY TRAVERSAL ---------------------------\n\n    Human.scene.Object.prototype.traverseUp = function(callback){\n        callback(this);\n        if (this.parent) {\n            this.parent.traverseUp(callback);\n        }\n    };\n\n    Human.scene.Object.prototype.traverseDown = function(callback){\n        callback(this);\n    };\n\n    Human.scene.Object.prototype.getLeafObjects = function(callback){\n        if (callback) {\n            callback(this);\n        }\n        return [this];\n    };\n\n    function updateVisibility(object) {\n        object._propertiesNode.setEnabled(object.shown && !object.culledByFrustum && !object.culledByClip);\n    }\n\n    function updateBackfaces(object) {\n        var renderables = object.renderables;\n        for (var i = 0, len = renderables.length; i < len; ++i) {\n//            renderables[i].setBackfaces((object.backfaces || object.visiblyClipped));\n            // [GH] - always disable backfaces\n            renderables[i].setBackfaces(false);\n        }\n    }\n\n    function sortModifiers(a, b) {\n        return a.priority - b.priority;\n    }\n\n    function updateColorModifiersList(object) {\n        object.colorModifierList.length = 0;\n\n        for (var id in object.colorModifiers) {\n            object.colorModifierList.push(object.colorModifiers[id]);\n        }\n\n        object.colorModifierList.sort(sortModifiers);\n\n        object.colorModifierConfigs.length = object.colorModifierList.length;\n\n        for (var i = 0, len = object.colorModifierList.length; i < len; ++i) {\n            object.colorModifierConfigs[i] = object.colorModifierList[i].params;\n        }\n    }\n\n    function updateOpacityModifiersList(object) {\n        object.opacityModifierConfigs.length = 0;\n\n        for (var id in object.opacityModifiers) {\n            object.opacityModifierConfigs.push(object.opacityModifiers[id]);\n        }\n    }\n\n})();\n;(function() {\n    \"use strict\";\n\n    var idCounter = 0;\n\n    var Renderable = Human.scene.Renderable = function(object, cfg) {\n        this.id = idCounter++;\n        this.object = object;\n        this.rootNode = object._renderableRoot.addNode();\n\n        this.geometryId  = cfg.geometryId || null;\n        this.materialId  = cfg.materialId || null;\n        this.morphId     = cfg.morphId || null;\n\n        this.drawTexture = null;\n\n        this.geometryAttached = false;\n        this.materialAttached = false;\n        this.morphAttached = false;\n\n        this.geometryNode = null;\n        this.materialNode = null;\n        this.textureNodes = null;\n        this.fresnelNodes = null;\n        this.reflectionNode = null;\n        this.lightMapNode = null;\n\n        this.boundary = {\n            xmin: Number.POSITIVE_INFINITY,\n            ymin: Number.POSITIVE_INFINITY,\n            zmin: Number.POSITIVE_INFINITY,\n            xmax: Number.NEGATIVE_INFINITY,\n            ymax: Number.NEGATIVE_INFINITY,\n            zmax: Number.NEGATIVE_INFINITY\n        };\n\n        this.backfaces = false;\n        this.addBlend = false;\n        this.layer = cfg.layer || 0;\n    };\n\n    Renderable.prototype.attachAsset = function (type, asset) {\n        var wasRenderable = this.isRenderable();\n\n        this[type + \"Attached\"] = true;\n\n        if (wasRenderable !== this.isRenderable()) {\n            this.compileMaterial();\n            this.compileGeometry();\n            if (this.morphAttached) {\n                this.compileMorph();\n            }\n            this.setBackfaces(this.backfaces);\n            this.setAddBlend(this.addBlend);\n            this.setLayer(this.layer);\n            this.object.checkRenderable();\n        } else if (this.isRenderable()) {\n            this.compileMorph();\n        }\n\n        if (type === \"morph\" || (type === \"geometry\" && !this.morph)) {\n            this.boundary = asset.boundary;\n        }\n    };\n\n    Renderable.prototype.detachGeometry = function () {\n        if (!this.geometryNode) {\n            return;\n        }\n        this.geometryNode.splice();\n        this.geometryNode.destroy();\n        this.geometryNode = null;\n        this.geometryAttached = false;\n        Human.assets.putAsset(this.geometryId);\n    }; \n\n    Renderable.prototype.detachMaterial = function () {\n        if (this.materialNode) {\n            this.materialNode.splice();\n            this.materialNode.destroy();\n            this.materialNode = null;\n        }\n\n        if (this.textureNodes) {\n            for (var i = 0, len = this.textureNodes.length; i < len; ++i) {\n                this.textureNodes[i].splice();\n                this.textureNodes[i].destroy();\n            }\n            this.textureNodes = null;\n        }\n\n        if (this.fresnelNodes) {\n            for (var type in this.fresnelNodes) {\n                this.fresnelNodes[type].splice();\n                this.fresnelNodes[type].destroy();\n            }\n            this.fresnelNodes = null;\n        }\n\n        if (this.reflectionNode) {\n            this.reflectionNode.splice();\n            this.reflectionNode.destroy();\n            this.reflectionNode = null;\n        }\n\n        if (this.lightMapNode) {\n            this.lightMapNode.splice();\n            this.lightMapNode.destroy();\n            this.lightMapNode = null;\n        }\n\n        this.materialAttached = false;\n        Human.assets.putAsset(this.materialId);\n    };\n\n    Renderable.prototype.detachMorph = function () {\n        if (!this.morphNode) {\n            return;\n        }\n        this.morphNode.splice();\n        this.morphNode.destroy();\n        this.morphNode = null;\n        this.morphAttached = false;\n        Human.assets.putAsset(this.morphId);\n    };    \n\n    Renderable.prototype.disconnectGeometry = function () {\n        if (!this.geometryNode) {\n            return;\n        }\n        \n        Human.renderer.graph.disconnectNode(this.geometryNode);\n        this.geometryNode = null;\n        this.geometryAttached = false;\n    }; \n\n    Renderable.prototype.disconnectMaterial = function () {\n        if (this.materialNode) {\n            Human.renderer.graph.disconnectNode(this.materialNode);\n            this.materialNode = null;\n        }\n\n        if (this.textureNodes) {\n            for (var i = 0, len = this.textureNodes.length; i < len; ++i) {\n                Human.renderer.graph.disconnectNode(this.textureNodes[i]);\n            }\n            this.textureNodes = null;\n        }\n\n        if (this.fresnelNodes) {\n            for (var type in this.fresnelNodes) {\n                Human.renderer.graph.disconnectNode(this.fresnelNodes[type]);\n            }\n            this.fresnelNodes = null;\n        }\n\n        if (this.reflectionNode) {\n            Human.renderer.graph.disconnectNode(this.reflectionNode);\n            this.reflectionNode = null;\n        }\n\n        if (this.lightMapNode) {\n            Human.renderer.graph.disconnectNode(this.lightMapNode);\n            this.lightMapNode = null;\n        }\n        this.materialAttached = false;\n    };\n\n    Renderable.prototype.disconnectMorph = function () {\n        if (!this.morphNode) {\n            return;\n        }\n        Human.renderer.graph.disconnectNode(this.morphNode);\n        this.morphNode = null;\n        this.morphAttached = false;\n    };    \n\n    Renderable.prototype.isRenderable = function () {\n        return !!(this.materialAttached && this.geometryAttached);\n    };\n\n    Renderable.prototype.getRenderObject = function () {\n        if (this.geometryNode) {\n            return this.geometryNode.getObject();\n        } else {\n            return null;\n        }\n    };\n\n    Renderable.prototype.isTransparent = function () {\n        var renderObject = this.getRenderObject();\n        if (renderObject) {\n            return renderObject.isTransparent();\n        } else {\n            return false;\n        }\n    };\n\n    Renderable.prototype.setBackfaces = function (bf) {\n        bf = bf && !this.isTransparent();\n        this.backfaces = bf; \n        if (this.geometryNode) {\n            this.geometryNode.setBackfaces(this.backfaces);\n        }\n    };\n\n    Renderable.prototype.setAddBlend = function (ab) {\n        this.addBlend = ab; \n        if (this.geometryNode) {\n            this.geometryNode.setAddBlend(this.addBlend);\n        }\n    };\n\n    Renderable.prototype.setLayer = function (l) {\n        this.layer = l; \n        if (this.geometryNode) {\n            this.geometryNode.setLayer(this.layer);\n        }\n    };\n\n    Renderable.prototype.setGeometry = function(geometryId) {\n        this.disconnectGeometry();\n        this.geometryId = geometryId;\n        this.geometryAttached = true;\n        this.compileGeometry();\n    };\n\n    Renderable.prototype.setMaterial = function(materialId) {\n        this.disconnectMaterial();\n        this.materialId = materialId;\n        this.materialAttached = true;\n        this.compileMaterial();\n    };\n\n    Renderable.prototype.attachDrawTexture = function(texture){\n        this.drawTexture = Human.renderer.graph.insertNode(this.rootNode, texture);\n    };\n\n    Renderable.prototype.compileGeometry = function () {\n        var geometryAsset = Human.assets.geometries.geometries[this.geometryId];\n\n        if (!geometryAsset) {\n            return;\n        }\n\n        this.geometryNode = Human.renderer.graph.insertNode(this.rootNode, {\n            type: \"geometry\",\n            coreId: geometryAsset.geometry.getCoreId()\n        });\n        var self = this;\n        this.geometryNode.onObjectCreate = function(renderObject) {\n            if (self.isTransparent()) {\n                self.setBackfaces(self.backfaces);\n            }\n            renderObject.sortTieBreaker = self.id;\n        };\n        this.object.geoDirty = true;\n    };\n\n    Renderable.prototype.compileMaterial = function () {\n        var material = Human.assets.materials.materials[this.materialId];\n\n        if (!material) {\n            return;\n        }\n\n        if (material.textures) {\n            var textures = material.textures;\n            this.textureNodes = [];\n\n            var iTexture;\n            var lenTextures;\n            for (iTexture = 0, lenTextures = textures.length; iTexture < lenTextures; iTexture++) {\n                if (textures[iTexture]) {\n                    this.textureNodes.push(\n                        Human.renderer.graph.insertNode(this.rootNode, {\n                            type: \"texture\",\n                            coreId: textures[iTexture].getCoreId()\n                        })\n                    );\n                }\n            }\n        }\n\n        if (material.material) {\n            this.materialNode = Human.renderer.graph.insertNode(this.rootNode, {\n                type: \"material\",\n                coreId: material.material.getCoreId()\n            });\n        }\n\n        if (material.flags) {\n            var flags = Human.utils.apply(material.flags, this.object._propertiesNode.getProperties());\n\n            if (flags.frontface !== undefined) {\n                this.object.windingOrder = flags.frontface;\n            }\n\n            if (flags.backfaces !== undefined) {\n                this.setBackfaces(flags.backfaces);\n            }\n\n            if (flags.addBlend !== undefined) {\n                this.setAddBlend(flags.addBlend);\n            }\n\n            this.object._propertiesNode.setProperties(flags);\n        }\n\n        if (material.reflection) {\n            this.reflectionNode = Human.renderer.graph.insertNode(this.rootNode, {\n                type: \"cubemap\",\n                coreId: material.reflection.getCoreId()\n            });\n        }\n\n        if (material.lightmap) {\n            this.lightMapNode = Human.renderer.graph.insertNode(this.rootNode, {\n                type: \"cubemap\",\n                coreId: material.lightmap.getCoreId()\n            });\n        }\n\n        if (material.fresnels) {\n            var fresnels = material.fresnels;\n            this.fresnelNodes = {};\n            for (var type in fresnels) {\n                if (fresnels.hasOwnProperty(type)) {\n                    this.fresnelNodes[type] = Human.renderer.graph.insertNode(this.rootNode, {\n                        type: \"fresnel\",\n                        coreId: fresnels[type].getCoreId()\n                    });\n                }\n            }\n        }\n\n        if (material.glassFactor !== undefined) {\n            this.object.setGlassFactor(material.glassFactor);\n        }\n\n        if (material.murkiness !== undefined) {\n            this.object.setMurkiness(material.murkiness);\n        }\n    };\n\n    Renderable.prototype.compileMorph = function () {\n        var morphAsset = Human.assets.morphs.morphs[this.morphId];\n\n        if (!morphAsset) {\n            return;\n        }\n\n        this.morphNode = Human.renderer.graph.insertNode(this.rootNode, {\n            type: \"morphGeometry\",\n            coreId: morphAsset.morphGeometry.getCoreId()\n        });\n\n        this.object.geoDirty = true;\n    };\n\n    Renderable.prototype.isAttached = function () {\n        return this.object.renderables.indexOf(this) > -1;\n    };\n\n})();;/** Set Operations and Getters on key-value maps\n * Compares membership of keys between two maps.\n * Returns a new map.\n *\n * Membership is determined by map key by defualt.\n * Optional function to return the value associated with member key in final set; if null\n * the key-value pair will be ignored entirely.\n * Function can return 'null' (and only null) to override otherwise matching keys.\n *\n * NOTES:\n *   - If using objectIds as keys, assume that the objectds have been globalized.\n *   - Assumes set arguemnts are hash-maps (objects with no non-native function properties).\n *   - Assumes maps are not hierarchical i.e. each map value is a simple key-value map with native value types.\n *   - No assumption that values have to have the same properties.\n *   - Presrve optional selector functions where appropriate.\n *   - Support values of type \"boolean\" and of type \"objects\"\n *\n * TODO: We could consider making the below functions prototypes of a custom Human Object Set class.\n *  That way we could do operation chaining.\n *\n * TODO: Expand \"*\" placeholders if present.\n *\n * TODO: Make sure the original sets aren't being altered.\n*/\n(function () {\n    \"use strict\";\n    var sets = Human.scene.sets = {};\n\n    // -------------- DEFAULTS ----------------------------------------------\n    // Prefer item2 if it exists;\n    var defaultSelector = function(item1, item2){\n      // Allow for item1, item2 to be of type \"booleans\" as well as of type \"objects\".\n      var ignoreValues = [null, undefined];\n      if (ignoreValues.indexOf(item2) < 0) {\n        return item2;\n      }\n      else if (ignoreValues.indexOf(item1) < 0){\n        return item1;\n      }\n      else {\n        return null;\n      }\n    };\n\n    // Check for item in set keys.\n    var defaultSetMembership = function(item, key){\n      return (key === item)? true : false;\n    };\n\n    // --------------- GETTERS -----------------------------------------------\n\n    /** Get list of all keys.\n     * Returns a list of unique keys.\n     * Optional Selector to filter keys.\n    */\n    sets.keys = function(aset, fnSelector){\n      fnSelector = fnSelector || false;\n      var oKeys = Object.keys(aset);\n\n      var result = [];\n      if (!fnSelector){\n        result = oKeys; // return all keys\n      } else {\n        oKeys.forEach(function(key){\n          if (fnSelector(key)){\n            result.push(key);\n          }\n        });\n      }\n      return result;\n    };\n\n\n    /** Get subset of keys containing a regular expression\n     * Returns a list of keys satisfying a regular expression.\n    */\n    sets.filterKeys = function(aset, regexp){\n      var pattern;\n      var result = [];\n      // Ensure regular expression\n      if (regexp instanceof RegExp){\n        pattern = regexp;\n      } else {\n        try {\n          pattern = new RegExp(regexp);\n        }\n        catch (err){\n          return {};\n        }\n      }\n\n      var isok = function(key){\n        return pattern.test(key);\n      };\n\n      result = sets.keys(aset).filter(isok);\n      return result;\n\n    };\n\n    /** Get list of keys where value satisfied a condition\n     * fnCondition(value) returns true if value satisfies some condition.\n    */\n    sets.keysWhere = function(aset, fnCondition){\n      var result = [];\n      for (var key in aset){\n        if (aset.hasOwnProperty(key)){\n          if (fnCondition(aset[key])){\n            result.push(key);\n          }\n        }\n      }\n      return result;\n    };\n\n    /** Get membership status of key in set.\n     * Returns true/false if key is a member of aset.\n    */\n    sets.hasKey = function(aset, key){\n      var keys = sets.keys(aset);\n      if (keys.indexOf(key)>=0){\n        return true;\n      } else {\n        return false;\n      }\n    };\n\n    /** Return Iterator over key,value pairs of set\n    */\n    sets.getSetIterator = function(set){\n\n      var index = 0, keys = sets.keys(set), length = keys.length;\n\n      return {\n        next: function(){\n            var item;\n            if (!this.hasNext()){ return null;}\n            var key = keys[index];\n            item = {\"key\":key,\"value\":set[key]};\n            index ++;\n            return item;\n        },\n        hasNext: function(){ return index < length;},\n        rewind: function(){index=0; return set[keys[0]];},\n        current: function(){\n          return set[keys[index]];\n        }\n      };\n    };\n\n    /** Get list of all values\n     * Returns a list of values for each unique key in set.\n     * The order of values will match the order of keys.\n    */\n    sets.values = function(aset){\n      var keys = sets.keys(aset);\n      var result = [];\n      keys.forEach(function(key){\n        result.push(aset[key]);\n      });\n      return result;\n    };\n\n    /** Get list of keys in EITHER set1 OR set2\n     * NOTE: http://stackoverflow.com/questions/1723168/what-is-the-fastest-or-most-elegant-way-to-compute-a-set-difference-using-javasc\n    */\n    sets.jointKeys = function(set1, set2){\n      var h = {}, f = function (v) { h[v] = true; };\n      var keySet1 = sets.keys(set1);\n      var keySet2 = sets.keys(set2);\n      keySet1.forEach(f);\n      keySet2.forEach(f);\n      return sets.keys(h);\n    };\n\n    /** Get list of intersecting keys in BOTH set1 AND set2\n    */\n    sets.commonKeys = function(set1, set2){\n      var h = {};\n      var keySet1 = sets.keys(set1);\n      var keySet2 = sets.keys(set2);\n      keySet1.forEach(function(v){ h[v] = 1; });\n      keySet2.forEach(function(v){ h[v] = (h[v] || 0) + 1; });\n      return sets.keysWhere(h, function(v){ return v>1? true : false;});\n    };\n\n    /** Get list of keys IN set1 but NOT in set2\n    */\n    sets.uniqueKeys = function(set1, set2){\n      var h = {};\n      var f1 = function(v){h[v] = 1;};\n      var f2 = function(v){h[v] = 0;};\n      var keySet1 = sets.keys(set1);  // order matters\n      var keySet2 = sets.keys(set2);  // set 2 comes after set 1!!\n      keySet1.forEach(f1);\n      keySet2.forEach(f2);\n      return sets.keysWhere(h, function(v){return v>0? true: false;});\n    };\n\n    //--------------------- SET OPERATIONS -------------------------------------\n\n    /** Get union of key-value pairs\n     * Returns new key-value map with keys jointly in set1 and set2\n     *\n     * Optional Argument: fnSelector() function\n     *  - selector = function(itemSet1,itemSet2);\n     *  - returns value made from properties of itemSet1 and itemSet2\n    */\n    sets.union = function(set1, set2, fnSelector){\n      var uKeys, union = {};\n      var ph = null; // placeholder\n\n      // Setup default selector function.\n      if (!fnSelector){\n        fnSelector = defaultSelector;\n      }\n\n      // Get joint keys and set the desired value to each key.\n      uKeys = sets.jointKeys(set1, set2);\n      uKeys.forEach(function(key){\n        ph = fnSelector(set1[key], set2[key]);\n        if (ph !== null){\n          union[key] =  ph;\n        }\n      });\n      return union;\n    };\n\n    /** Get intersection of key-value pairs\n    */\n    sets.intersection = function(set1, set2, fnSelector){\n      var iKeys, intersection = {}, ph = null;\n      if (!fnSelector){\n        fnSelector = defaultSelector;\n      }\n\n      // Get intersecting keys and the preferred value;\n      iKeys = sets.commonKeys(set1, set2);\n      iKeys.forEach(function(key){\n        ph = fnSelector(set1[key], set2[key]);\n        if (ph !== null) {\n          intersection[key] = ph;\n        }\n      });\n      return intersection;\n    };\n\n    /** Get elements in set1 that are NOT in set 2\n    * fnSelector can return null to prohibit key-value pair.\n    */\n    sets.difference = function(set1, set2, fnSelector){\n      var unqKeys = sets.uniqueKeys(set1, set2), ph=null;\n      if (!fnSelector){\n        fnSelector = defaultSelector;\n      }\n      var uniqueToSet1 = {};\n      unqKeys.forEach(function(key){\n        ph = fnSelector(set1[key]);\n        if (ph !== null){\n          uniqueToSet1[key] = ph;\n        }\n      });\n      return uniqueToSet1;\n    };\n\n    /** Ask if item is contained in set\n     * fnSatisfy(item, key, value): returns true if item satisfied a condition.\n     *   Default tests membership of key in set.\n    */\n    sets.isin = function(item, set1, fnSatisfy){\n      if (!fnSatisfy){\n        fnSatisfy = defaultSetMembership;\n      }\n\n      var found = false;\n      var setIter = sets.getSetIterator(set1);\n      var kvp;\n      while (setIter.hasNext() && !found){\n        kvp = setIter.next();\n        found = fnSatisfy(item, kvp.key, kvp.value);\n      }\n      return found;\n    };\n\n    // -------------------- SET OPERATIONS ON Directed Acyclic Graphs ----------\n    // TODO: Expand the set operations to consider hierarchical sets in a Directed Acyclic Graph.\n\n\n  })();\n;(function() {\n    \"use strict\";\n\n    var graph = Human.scene.graph = {};\n\n    // Store attached assets by type for a given sesssion\n    var attachedAssets = {};\n    var numRequestedAssets = 0;\n    var numAttachedAssets = 0;\n\n    // Used to map the old anonymous object IDs to a renderable index\n    var anonymousRenderableCount = 0;\n\n    var typesToDetach = {}; // HACK to selectively detach assets from tree\n\n    // Simple Graph Construction from fully specified scene graph\n    graph.buildGraph = function(objects, parent) {\n        // Exit if no objects\n        if (!objects) {\n            return;\n        }\n\n        if (!parent) {\n            // Reset for each scene graph load\n            anonymousRenderableCount = 0;\n        }\n\n        var object, humanObject;\n        for (var i = 0; i < objects.length; i++) {\n            object = objects[i];\n\n            collapseAnonymousObjects(object);\n\n            // Anonymous objects\n            if (!object.objectId) {\n                object.objectId = parent.objectId + anonymousRenderableCount++;\n                object.anonymous = true;\n            }\n\n            object.group = object.objects && object.objects.length > 0;\n            humanObject = createHumanObject(object, parent);\n\n            if (humanObject === null) {\n                continue;\n            }\n            \n            if (object.objects){\n                graph.buildGraph(object.objects, humanObject);\n            }\n        }\n\n    };\n\n    function createHumanObject(object, parent) {\n\n        var objectId = object.objectId;\n\n        var geometryId = object.geometryId || null;\n        var morphId = object.morphId || null;\n        var materialId = object.materialId || null;\n        var transformId = object.transformId || null;\n\n        // Do not overwrite existing objects\n        if (Human.scene.objects[objectId]) {\n            return null;\n        }\n\n        // Inherit parent layer if necessary\n        if (object.layer === undefined) {\n            object.layer = parent ? parent.layer : 0;\n        }\n\n        object.objectId = objectId;\n\n        object.parent = parent;\n        object.parentObjectId = parent ? parent.objectId : null;\n        object.materialId = materialId;\n        object.geometryId = geometryId;\n        object.morphId = morphId;\n        object.transformId = transformId;\n        object.tags = object.tags || [];\n        object.capColor = inherit(\"capColor\", object, parent);\n        object.modelId = object.objectId.split(\"-\")[0];\n\n        var sceneObject = Human.scene.createObject(object);\n\n        if (object.opacity !== undefined) {\n            sceneObject.setOpacity(object.opacity);\n        }\n\n        if (object.shown !== undefined) {\n            sceneObject.show(object.shown);\n        }\n\n        return sceneObject;\n    }\n\n\n    /* Gather asset ids from a portion of the scene graph\n     *\n     *  return value format format:\n     *      {\n     *          \"geometry\": {\n     *              \"geometryId1\": [target_object_id, ...],\n     *              \"geometryId2\": [target_object_id, ...]\n     *              // etc...\n     *          }\n     *          // etc...\n     *      }\n     *\n     *  Result can be provided to gradually gather asset Ids over several\n     *  calls.\n     */\n\n    graph.gatherAssetIdsFromObject = function(objects, types, result) {\n\n        if(!Array.isArray(objects)) {\n            objects = [objects];\n        }\n\n        types = types || [\"geometry\", \"material\", \"transform\", \"morph\"];\n\n        result = result || {};\n\n        for (var i = 0, len = objects.length; i < len; i++) {\n            gatherAssetIdsFromObject(objects[i], types, result);\n        }\n\n        return result;\n    };\n\n    graph.attachAssetsToObject = function(objects, types, ok) {\n        if (typeof types === \"function\") {\n            ok = types;\n            types = null;\n        }\n\n        if(!Array.isArray(objects)) {\n            objects = [objects];\n        }\n\n        types = types || [\"geometry\", \"material\", \"transform\", \"morph\"];\n\n        var assetsLoading = 0;\n\n        function done() {\n            if (--assetsLoading === 0 && ok) {\n                ok();\n            }\n        }\n\n        for (var i = 0, len = objects.length; i < len; i++) {\n            var assetIds = graph.gatherAssetIdsFromObject(objects[i], types);\n            assetsLoading++;\n            graph.attachAssets(assetIds, done);\n        }\n    };\n\n    /**\n    *   This function encapsulates a common loading pattern where\n    *   where assets are meant to be loaded in \"phases\" (e.g.\n    *   geometry, transforms, materials first, then morphs later).\n    *   By default, the phases will be:\n    *   - Phase 1: geometry, materials, transforms\n    *   - Phase 2: morphs\n    *\n    *   It will load subtrees of the argument objects and traverses up\n    *   up the scenegraph from those objects to properly load hierarchical\n    *   transforms.\n    *\n    *   Arguments:\n    *   [array of objects]  objects     The roots of subtrees to attach assets to.\n    *   [array of arrays]   typeSets    Groups of types to load per phase (e.g. [[[\"geometry\", \"material\", \"transform\"], [\"morph\"]])\n    *   [function]          ok          Callback function to call after each phase.\n    *\n    *   Note that the callback function is called after each phase, so\n    *   it will be called multiple times. At each phase, the following arguments\n    *   are passed to the callback function:\n    *   [object]            typesLoaded A map of the asset types that were loaded.\n    *   [number]            i           The index of the current phase\n    *   [boolean]           done        Is this the last phase?\n    */\n    graph.attachAssetSetsToSubtree = function(objects, typeSets, ok) {\n        if (typeof typeSets === \"function\") {\n            ok = typeSets;\n            typeSets = null;\n        }\n\n        if(!Array.isArray(objects)) {\n            objects = [objects];\n        }\n\n        typeSets = typeSets || [[\"geometry\", \"material\", \"transform\"], [\"morph\"]];\n\n        var assetObjects = {};\n        var orderedAssetObjects = [];\n        var leafObjects = {};\n        var objectId, object;\n\n        function registerLeaf(leaf) {\n            leafObjects[leaf.objectId] = leaf;\n        }\n\n        function registerObjectId(object) {\n            if(!assetObjects[object.objectId]) {\n                orderedAssetObjects.push(object);\n                assetObjects[object.objectId] = true;\n            }\n        }\n\n        for (var i = 0; i < objects.length; i++) {\n            objects[i].getLeafObjects(registerLeaf);\n        }\n\n        for (objectId in leafObjects) {\n            if (leafObjects.hasOwnProperty(objectId)) {\n                object = leafObjects[objectId];\n\n                if (object) {\n                    // Traverse up for transforms\n                    object.traverseUp(registerObjectId);\n                }\n            }\n        }\n\n        attachTypeSets(orderedAssetObjects, typeSets, 0, ok);\n    };\n\n    function attachTypeSets(assetObjects, typeSets, phase, ok) {\n        var typeSet = typeSets.shift();\n\n        attachTypeSet(assetObjects, typeSet, function () {\n            if(ok) {\n                var typesLoaded = {};\n                for (var i = 0, len = typeSet.length; i < len; i++) {\n                    typesLoaded[typeSet[i]] = true;\n                }\n                ok(typesLoaded, phase, !typeSets.length);\n            }\n\n            if(typeSets.length) {\n                attachTypeSets(assetObjects, typeSets, phase + 1, ok);\n            }\n        });\n    }\n\n    function attachTypeSet(assetObjects, typeSet, ok) {\n        var numObjects = assetObjects.length;\n        var object;\n\n        if (numObjects === 0) {\n            if (ok) {\n                Human.utils.async(ok);\n            }\n            return;\n        }\n\n        function done() {\n            if (--numObjects === 0 && ok) {\n                ok();\n            }\n        }\n\n        for (var i = 0, len = numObjects; i < len; i++) {\n            object = assetObjects[i];\n\n            graph.attachAssetsToObject(object, typeSet, done);\n        }\n    }\n\n    /** This function Loads the asset from Object Server.\n    *   Then applies the asset to the Scene Graph\n    */\n    graph.attachAssets = function(assetIds, ok) {\n        var assetsLoading = 0;\n\n        function done() {\n            if (--assetsLoading === 0 && ok) {\n                ok();\n            }\n        }\n\n        var keys = Object.keys(assetIds);\n\n        if (keys.length === 0) {\n            if (ok) {\n                Human.utils.async(ok);\n            }\n            return;\n        }\n\n        for (var i = 0, len = keys.length; i < len; i++) {\n            var type = keys[i];\n            var typeAssets = assetIds[type];\n\n            if (!typeAssets) {\n                continue;\n            }\n\n            for (var assetId in typeAssets) {\n                if (typeAssets.hasOwnProperty(assetId)) {\n                    var targetObjects = typeAssets[assetId];\n\n                    assetsLoading++;\n                    getAsset(assetId, type, targetObjects, done);\n                }\n            }\n        }\n    };\n\n    /**\n     * Removes assets from target objects.\n     * @param objectIds\n     */\n    graph.destroySubtree = function(objects) {\n\n        if(!Array.isArray(objects)) {\n            objects = [objects];\n        }\n\n        var i;\n        var len;\n        var object;\n\n        for (i = 0, len = objects.length; i < len; i++) {\n            object = objects[i];\n\n            Human.scene.destroyObject(object.objectId);\n        }\n    };\n\n    /**\n     * Removes assets  of type specified in assetTypes from tree. Does not modify the tree itself.\n     * @param objectIds\n     */\n    graph.unloadSubtree = function(objects, assetTypes, ok) {\n\n        if(!Array.isArray(objects)) {\n            objects = [objects];\n        }\n\n        var i;\n        var len;\n        var object;\n\n        // Configure types to detach\n        typesToDetach = {};\n        if (assetTypes.indexOf(\"geometries\")>=0){\n            typesToDetach.geometryId = true;\n        }\n        if (assetTypes.indexOf(\"transforms\")>=0){\n            typesToDetach.transformId = true;\n        }\n        if (assetTypes.indexOf(\"morphs\")>=0){\n            typesToDetach.morphId = true;\n        }\n        if (assetTypes.indexOf(\"materials\")>=0){\n            typesToDetach.materialId = true;\n        }\n\n        if (assetTypes.indexOf(\"morph\")>=0) {\n          typesToDetach.morphId = true;\n        }\n\n        for (i = 0, len = objects.length; i < len; i++) {\n            object = objects[i];\n            object.getLeafObjects(destroyAssets);\n        }\n        if (ok){\n            ok();\n        }\n    };\n\n    function destroyAssets(object) {\n        // HACK Configured by scoped variable \"typesToDetach\"\n        if (typesToDetach.geometryId) {\n            object.detachAsset(\"geometry\");\n        }\n\n        if (typesToDetach.materialId) {\n            object.detachAsset(\"material\");\n        }\n\n        if (typesToDetach.transformId) {\n            object.detachAsset(\"transform\");\n        }\n\n        if (typesToDetach.morphId) {\n            object.detachAsset(\"morph\");\n        }\n    }\n\n    function gatherAssetIdsFromObject(object, types, assetIds) {\n        for (var i = 0, len = types.length; i < len; i++) {\n            var type = types[i];\n            var assetList;\n\n            if (type === \"transform\") {\n                var transformId = object.transformId;\n                if (transformId && !object.transformInitialized) {\n                    assetIds.transform = assetIds.transform || {};\n\n                    assetList = assetIds.transform[transformId] = assetIds.transform[transformId] || [];\n                    assetList.push(object);\n                }\n            } else if (object.renderables) {\n                for (var j = 0, lenJ = object.renderables.length; j < lenJ; ++j) {\n                    var renderable = object.renderables[j];\n                    var assetId = renderable[type + \"Id\"];\n                    var attached = renderable[type + \"Attached\"];\n\n                    if(assetId && !attached) {\n                        assetIds[type] = assetIds[type] || {};\n\n                        assetList = assetIds[type][assetId] = assetIds[type][assetId] || [];\n                        assetList.push(renderable);\n                    }\n                }\n            }\n        }\n\n        return assetIds;\n    }\n\n    function assetAttachStart() {\n        Human.events.fire(\"graph.assetAttach.start\");\n    }\n\n    function assetAttachProgress(assetId, type, targetObjects, nullAsset) {\n        numAttachedAssets++;\n\n        Human.events.fire(\"graph.assetAttach.progress\", {\n            assetId: assetId,\n            targetObjects: targetObjects,\n            assetType: type,\n            nullAsset: nullAsset\n        });\n\n        if(!attachedAssets[type]) {\n            attachedAssets[type] = [];\n        }\n\n        if(!nullAsset) {\n            attachedAssets[type].push(assetId);\n        }\n\n        if(numRequestedAssets === numAttachedAssets) {\n            assetAttachFinish();\n        }\n    }\n\n    function assetAttachFinish() {\n        Human.events.fire(\"graph.assetAttach.finish\", attachedAssets);\n\n        attachedAssets = {};\n        numRequestedAssets = 0;\n        numAttachedAssets = 0;\n    }\n\n    function getAsset(assetId, type, targetObjects, ok) {\n        if(numRequestedAssets === 0) {\n            assetAttachStart();\n        }\n\n        numRequestedAssets++;\n\n        Human.assets.getAsset(assetId, type, function(asset) {\n\n            if (asset) {\n                for (var i = 0, len = targetObjects.length; i < len; i++) {\n                    if (type === \"transform\") {\n                        var object = targetObjects[i];\n\n                        // Was object destroyed in the meantime?\n                        if(Human.scene.objects[object.objectId]) {\n                            object.setTransform(asset);\n                        }\n                    } else {\n                        var renderable = targetObjects[i];\n                        renderable.attachAsset(type, asset);\n                    }\n                    \n                }\n            }\n\n            assetAttachProgress(assetId, type, targetObjects, !asset);\n\n            ok(asset);\n        });\n    }\n\n    function inherit(prop, object, parent) {\n        if (parent) {\n            if (object[prop] !== undefined && object[prop] !== null) {\n                return object[prop];\n            }\n            return parent[prop];\n\n        }\n        return object[prop];\n    }\n\n    // NOTE(Tarek): Some nastiness to deal with the old anonymous\n    // object ID that got into bookmarks.\n    function collapseAnonymousObjects(object) {\n        if (!object.objects) {\n            return;\n        }\n\n        if (!object.objectId) {\n            return;\n        }\n\n        var renderables;\n        \n        for (var i = 0, len = object.objects.length; i < len; ++i) {\n            if (!object.objects[i].objectId) {\n                renderables = [];\n                break;\n            }\n        }\n\n        if (renderables && canCollapse(object)) {\n            object.anonymousIdToRenderableIndex = {};\n            gatherAnonymousRenderables(object, renderables, object);\n            object.renderables = renderables;\n            object.objects.length = 0;\n        }\n    }\n\n    // Can't collapse if descendents have objectIds or transformIds\n    function canCollapse(object) {\n        if (!object.objects) {\n            return true;\n        }\n\n        for (var i = 0, len = object.objects.length; i < len; ++i) {\n            var child = object.objects[i];\n            if (child.transformId || child.objectId || child.pivot || child.translate || \n                child.scale || child.rotate || !canCollapse(child)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    function gatherAnonymousRenderables(object, renderables, root) {\n        if (!object.objects) {\n            return;\n        }\n        for (var i = 0, len = object.objects.length; i < len; ++i) {\n            var child = object.objects[i];\n            if (child.layer === undefined) {\n                child.layer = object.layer;\n            }\n            if (child.geometryId) {\n                root.anonymousIdToRenderableIndex[root.objectId + anonymousRenderableCount++] = renderables.length;\n                renderables.push({\n                    geometryId: child.geometryId,\n                    materialId: child.materialId,\n                    morphId: child.morphId,\n                    layer: child.layer\n                });\n            } else {\n                anonymousRenderableCount++;\n                gatherAnonymousRenderables(child, renderables, root, root.objectId);\n            }\n        }\n    }\n\n})();\n;/*\nTrack markers in the 3D scene.\nMarkers can be on tracking objects or floating in space.\n\nNOTE:\n1 - only leaf nodes are locatable\n2 - expensive occlusion tests are done once every TICKS_PER_UPDATE ticks.\n*/\n(function(){\n    \"use strict\";\n    var Markers = Human.scene.markers = {};\n\n    var markerCount = 0;\n    var markerIdPrefix = \"marker_\";\n    var TICKS_PER_UPDATE = 2;\n    var tickCount = 0;\n\n    Markers.markers = {}; // key: markerId, value: Marker\n\n    // Responsive Creation\n    var waitingForRenderable = {}; // key:objectId, value: Marker\n    var waiting = false;\n    var defaultBarycentric = vec3.fromValues(0.33, 0.33, 0.33);\n\n    // miscellaneous gl-matrix objects\n    var t1vec3 = vec3.create();\n    var t2vec3 = vec3.create();\n    var t1mat4 = mat4.create();\n    var eyePosVec = vec3.create();\n\n    // create a unique id for the marker locator\n    function createMarkerId(){\n        var id = markerIdPrefix + markerCount;\n        markerCount++;\n        return id;\n    }\n\n    // add Marker object to waitingForRenderable map\n    function _addToWaiting(objectId, marker){\n        if (waitingForRenderable[objectId]) {\n            waitingForRenderable[objectId].push(marker);\n        } else {\n            waitingForRenderable[objectId] = [marker];\n        }\n        waiting = true;\n    }\n\n    // build any markers whose object's are now ready\n    function _buildReady(){\n        var objectId, obj, i, mrkrlist;\n        var count = 0;\n        for (objectId in waitingForRenderable){\n            ++count;\n            mrkrlist = waitingForRenderable[objectId];\n            obj = Human.scene.objects[objectId];\n            if (obj && obj.isVisible()) {\n                for (i=0; i < mrkrlist.length; i++){\n                    mrkrlist[i].build();\n                }\n                delete waitingForRenderable[objectId];\n                --count;\n            }\n        }\n        waiting = count > 0;\n    }\n\n    /** Marker Object\n     *\n     * Marker that tracks an object\n     * (id):string\n     * objectId: string\n     * (primitiveIndex): integer\n     * (barycentric): [integer, integer, integer]\n     * (pos): [float, float, float]\n     * (dir): [float, float, float]\n     *\n     * Marker that floats in space\n     * (id):string\n     * pos: [float, float, float]\n     * (dir): [float, float, float]\n     */\n    var Marker = function(cfg){\n        var self = this;\n        self.id = cfg.id || createMarkerId();\n        self.pos = vec3.create(); // world position of marker\n        this.viewPos = vec3.create();\n        self.dir = vec3.create();\n\n        if (cfg.pos) {\n            // initial position in world space\n            self.pos[0] = cfg.pos[0];\n            self.pos[1] = cfg.pos[1];\n            self.pos[2] = cfg.pos[2];\n        }\n        if (cfg.dir){\n            self.dir[0] = cfg.dir[0];\n            self.dir[1] = cfg.dir[1];\n            self.dir[2] = cfg.dir[2];\n            vec3.normalize(self.dir, self.dir);\n        }\n\n        self.viewAngle = 0;\n        self.canvasPos = vec2.fromValues(0, 0);\n        self.built = false;\n        self.occluded = false;\n        self.objectCentered = false;\n        self.renderableIndex = -1;\n        self.primitiveIndex = -1;\n        self.barycentric = null;\n\n        if (cfg.objectId && Human.scene.objects[cfg.objectId]){\n            // Shape Based Marker: Build now or defer until object assets load\n            self.object = Human.scene.objects[cfg.objectId];\n            self.modelPos = vec3.create();\n            if (cfg.primitiveIndex !== undefined){\n                self.renderableIndex = cfg.renderableIndex !== undefined ? cfg.renderableIndex : 0;\n                self.primitiveIndex = cfg.primitiveIndex;\n                var b = cfg.barycentric || defaultBarycentric;\n                self.barycentric = vec3.fromValues(b[0], b[1], b[2]);\n            } else if (!cfg.pos) {\n                self.objectCentered = true;\n            }\n\n\n            if (self.object.isRenderable()){\n                self.build();\n            } else {\n                _addToWaiting(cfg.objectId, self);\n            }\n        } else if (cfg.pos){\n            // World Based Marker: Build now\n            self.build();\n        } else {\n            Human.log.error(\"Human.scene.marker\",\"marker configuration requires 'objectId' or 'pos' parameter.\");\n            return;\n        }\n    };\n\n    // build marker now that its dependencies are loaded\n    Marker.prototype.build = function(){\n        var self = this;\n        if (self.built){\n            return;\n        }\n        // set the marker position\n        if (self.primitiveIndex !== -1){\n            self.object.barycentricToModelSpace(self.renderableIndex, self.primitiveIndex, self.barycentric, self.modelPos);\n            vec3.transformMat4(self.pos, self.modelPos, self.object.getWorldMatrix());\n        } else if (self.object && !self.objectCentered) {\n            // world-space definition => to model space\n            mat4.invert(t1mat4, self.object.getWorldMatrix());\n            vec3.transformMat4(self.modelPos, self.pos, t1mat4);\n        } else if (self.objectCentered){\n            // use object center\n            var center = self.object.getCenter();\n            self.pos[0] = center[0];\n            self.pos[1] = center[1];\n            self.pos[2] = center[2];\n            mat4.invert(t1mat4, self.object.getWorldMatrix());\n            vec3.transformMat4(self.modelPos, self.pos, t1mat4);\n        }\n\n        // view angle depends on marker position\n        self.updatePosition();\n        self.updateViewAngle();\n        self.updateOcclusion();\n        self.built = true;\n    };\n\n    // marker position tracks object deformation and position\n    Marker.prototype.updatePosition = function(){\n        var self = this;\n\n        // morph animation update\n        if (self.primitiveIndex !== -1){\n            self.object.barycentricToModelSpace(self.renderableIndex, self.primitiveIndex, self.barycentric, self.modelPos);\n        }\n\n        // transform animation update\n        if (self.modelPos){\n            vec3.transformMat4(self.pos, self.modelPos, self.object.getWorldMatrix());\n        }\n\n        vec3.transformMat4(self.viewPos, self.pos, Human.renderer.getViewMat());\n        // position in screen space\n        Human.renderer.worldPositionToCanvas(self.pos, self.canvasPos);\n    };\n\n    // marker view angle changes with camera change\n    Marker.prototype.updateViewAngle = function(){\n        if (this.objectCentered) {\n            this.viewAngle = 0;\n            return;\n        }\n\n        // update the direction the marker points to the camera\n        var eyePos = Human.renderer.camera.eye;\n        eyePosVec.set([eyePos.x, eyePos.y, eyePos.z]);\n        vec3.subtract(t1vec3, eyePosVec, this.pos);\n        vec3.normalize(t1vec3, t1vec3);\n        var dot = Math.min(vec3.dot(t1vec3, this.dir), 1);\n        this.viewAngle = Math.acos(dot) * 57.2957795;\n    };\n\n    // marker occlusion is true if marker is blocked by a human object in the scene or outside of screen space\n    Marker.prototype.updateOcclusion = function(){\n        this.occluded = this.isOccludedByObject() || this.isOffScreen();\n    };\n\n    Marker.prototype.isOccludedByObject = function(){\n        if (this.objectCentered) {\n            return false;\n        }\n\n        var eye, dist, eps, rec, hit;\n\n        // ray origin: t1vec3\n        eye = Human.renderer.camera.eye;\n        t1vec3[0] = eye.x;\n        t1vec3[1] = eye.y;\n        t1vec3[2] = eye.z;\n\n        // ray direction: t2vec3\n        vec3.sub(t2vec3, this.pos, t1vec3);\n        dist = vec3.length(t2vec3);\n        eps = Math.min(dist * 0.1, 0.5);\n        rec = 1 / dist;\n        t2vec3[0] *= rec;\n        t2vec3[1] *= rec;\n        t2vec3[2] *= rec;\n\n        // intersection test: from ray origin in ray direction\n        hit = Human.math.intersections.rayScene(t1vec3, t2vec3, function(object) {\n            return object.shown && !object.culled;\n        }, function(renderable) {\n            return !renderable.isTransparent();\n        });\n\n        // compare hit distance to marker distance\n        return !!(hit && hit.length && hit[0].t + eps < dist);\n    };\n\n    Marker.prototype.isOffScreen = function(){\n        var cp = this.canvasPos;\n        var w = Human.renderer.canvas.width;\n        var h = Human.renderer.canvas.height;\n        return cp[0] < 0 || cp[0] > w || cp[1] < 0 || cp[1] > h;\n    };\n\n    // create and register this marker\n    Markers.create = function(markerConfig){\n        var m = new Marker(markerConfig);\n        Markers.markers[m.id] = m;\n        Human.events.fire(\"scene.markers.added\", {id: m.id});\n        if (m.built){\n            Human.events.fire(\"scene.markers.built\",{id: [m.id]});\n        }\n        return m;\n    };\n\n    // remove and de-register this marker\n    Markers.delete = function(markerId){\n        delete Markers.markers[markerId];\n        Human.events.fire(\"scene.markers.deleted\", {id: markerId});\n    };\n\n    // finish creating the data for each Marker that is dependent on a Human Object\n    Markers.buildByObjectId = function(objectId){\n        var builtIds = [];\n        if (waitingForRenderable[objectId]){\n            var i,m;\n            for (i=0; i<waitingForRenderable[objectId].length; i++){\n                m = waitingForRenderable[objectId][i];\n                m.build();\n                builtIds.push(m.id);\n            }\n            delete waitingForRenderable[objectId];\n        }\n        Human.events.fire(\"scene.markers.built\",{id: builtIds});\n    };\n\n    // update markers\n    Markers.onFrame = function(){\n        tickCount = (tickCount + 1) % TICKS_PER_UPDATE;\n\n        // build\n        if (waiting){\n            _buildReady();\n        }\n\n        // do update\n        var m;\n        var updatedCount = 0;\n        for (var markerId in Markers.markers){\n            m = Markers.markers[markerId];\n            if (m && m.built){\n                m.updatePosition();\n                m.updateViewAngle();\n                if (tickCount === 0){\n                    m.updateOcclusion();\n                }\n                ++updatedCount;\n            }\n        }\n        // notify\n        if (updatedCount > 0) {\n            Human.events.fire(\"scene.markers.updated\");\n        }\n    };\n\n})();\n;/* Color Modification Recipes.\n\nColor/Opacity modfications are defined per-object to support fine-grained resolution of control.\n\nRecipes are grouped modifications that can be applied to any collection of leaf nodes.\n*/\n\n(function(){\n    'use strict';\n    var HumanRecipes = Human.scene.colorRecipes = {};\n    var ColorFresnel = window.ColorFresnel; // added to global namespace\n    var ScalarFresnel = window.ScalarFresnel;\n\n    // Recipe Configuration Data (for lighter encoding of recipe modifcations)\n    // MOD_CHANNEL_ORDER = ['tintColor', 'saturation', 'contrast', 'brightness', 'opacity'];\n    var TINT = 1 << 4;\n    var SATURATION = 1 << 3;\n    var CONTRAST = 1 << 2;\n    var BRIGHTNESS = 1 << 1;\n    var OPACITY = 1 << 0;\n\n    var colorRecipeMods = {};\n\n    // create mod array from recipe config\n    function createModsFromConfig(recipeConfig) {\n\n        var channelInt = recipeConfig.channels;\n        var rvalues = recipeConfig.mods;\n\n        var fresnelChannelInt = recipeConfig.fresnelChannels;\n        var rFresnelValues = recipeConfig.fresnelMods;\n\n        // get color modifcations\n        var colorMods = [];\n        var opacityMods = [];\n        var idx=0;\n\n        if (channelInt !== undefined && channelInt !== null) {\n            if (channelInt & TINT) {\n                colorMods.push({\n                    applyTo: 'tintColor',\n                    value: rvalues.slice(idx, idx += 3)\n                });\n            }\n            if (channelInt & SATURATION) {\n                colorMods.push({\n                    applyTo: 'saturation',\n                    value: rvalues.slice(idx, idx += 1)[0]\n                });\n            }\n            if (channelInt & CONTRAST) {\n                colorMods.push({\n                    applyTo: 'contrast',\n                    value: rvalues.slice(idx, idx += 1)[0]\n                });\n            }\n            if (channelInt & BRIGHTNESS) {\n                colorMods.push({\n                    applyTo: 'brightness',\n                    value: rvalues.slice(idx, idx += 1)[0]\n                });\n            }\n\n            // get opacity modifications (NOTE: applyTo is implictly assumed but written here for convenience and consistency)\n            if (channelInt & OPACITY) {\n                opacityMods.push({\n                    applyTo: 'opacity',\n                    value: rvalues.slice(idx, idx += 1)[0]\n                });\n            }\n        }\n\n        idx=0; // reset index for fresnel color mods\n        if (fresnelChannelInt !== undefined && fresnelChannelInt !== null) {\n            if (fresnelChannelInt & TINT) {\n                var colorFresnel = rFresnelValues.slice(idx, idx += 9);\n                colorMods.push({\n                    applyTo: 'tintColor',\n                    value: new ColorFresnel(\n                        [colorFresnel[0], colorFresnel[1], colorFresnel[2]], // center\n                        [colorFresnel[3], colorFresnel[4], colorFresnel[5]], // edge\n                        colorFresnel[6], // centerBias\n                        colorFresnel[7], // edgeBias\n                        colorFresnel[8]  // power\n                    )\n                });\n            }\n            if (fresnelChannelInt & SATURATION) {\n                var saturationFresnel = rFresnelValues.slice(idx, idx += 5);\n                colorMods.push({\n                    applyTo: 'saturation',\n                    value: new ScalarFresnel(\n                        saturationFresnel[0], // center\n                        saturationFresnel[1], // edge\n                        saturationFresnel[2], // centerBias\n                        saturationFresnel[3], // edgeBias\n                        saturationFresnel[4]) // power\n                });\n            }\n            if (fresnelChannelInt & CONTRAST) {\n                var contrastFresnel = rFresnelValues.slice(idx, idx += 5);\n                colorMods.push({\n                    applyTo: 'contrast',\n                    value: new ScalarFresnel(\n                        contrastFresnel[0],\n                        contrastFresnel[1],\n                        contrastFresnel[2],\n                        contrastFresnel[3],\n                        contrastFresnel[4])\n                });\n            }\n            if (fresnelChannelInt & BRIGHTNESS) {\n                var brightnessFresnel = rFresnelValues.slice(idx, idx += 5);\n                colorMods.push({\n                    applyTo: 'brightness',\n                    value: new ScalarFresnel(\n                        brightnessFresnel[0],\n                        brightnessFresnel[1],\n                        brightnessFresnel[2],\n                        brightnessFresnel[3],\n                        brightnessFresnel[4])\n                });\n            }\n\n            // get opacity modifications (NOTE: applyTo is implictly assumed but written here for convenience and consistency)\n            if (fresnelChannelInt & OPACITY) {\n                var opacityFresnel = rFresnelValues.slice(idx, idx += 5);\n                opacityMods.push({\n                    applyTo: 'opacity',\n                    value: new ScalarFresnel(\n                        opacityFresnel[0],\n                        opacityFresnel[1],\n                        opacityFresnel[2],\n                        opacityFresnel[3],\n                        opacityFresnel[4])\n                });\n            }\n        }\n        return {\n            colorMods: colorMods,\n            opacityMods: opacityMods\n        };\n    }\n\n    // create recipe config from mods array\n    function createConfigFromMods(recipeMods) {\n        var channelInt = 0;\n        var channelValues = [];\n        recipeMods.colorMods.forEach(function(modConfig) {\n            if (modConfig.applyTo === 'tintColor') {\n                channelInt += TINT;\n                // add all three values\n                modConfig.value.forEach(function(v){\n                    channelValues.push(v);\n                });\n            } else if (modConfig.applyTo === 'saturation') {\n                channelInt += SATURATION;\n                channelValues.push(modConfig.value[0]);\n            } else if (modConfig.applyTo === 'contrast') {\n                channelInt += CONTRAST;\n                channelValues.push(modConfig.value[0]);\n            } else if (modConfig.applyTo === 'brightness') {\n                channelInt += BRIGHTNESS;\n                channelValues.push(modConfig.value[0]);\n            }\n        });\n\n        recipeMods.opacityMods.forEach(function(modConfig) {\n            if (modConfig.applyTo === 'opacity') {\n                channelInt += OPACITY;\n                channelValues.push(modConfig.value[0]);\n            }\n        });\n\n        return {\n            channels: channelInt,\n            mods: channelValues\n        };\n    }\n\n    // name color modifier by recipe-channel combo\n    function nameRecipeMod(recipeName, channel) {\n        return recipeName + '_' + channel;\n    }\n\n    // Build a config from modifier set\n    HumanRecipes.createConfigFromMods = function(recipeMods) {\n        return createConfigFromMods(recipeMods);\n    };\n\n    // return names of all registered recipes\n    HumanRecipes.getRecipes = function() {\n        return Object.keys(colorRecipeMods);\n    };\n\n    // return recipe modifications\n    HumanRecipes.getRecipeMods = function(recipeName) {\n        if (colorRecipeMods.hasOwnProperty(recipeName)) {\n            return Human.utils.shallowClone(colorRecipeMods[recipeName]);\n        } else {\n            Human.log.error(\"Human.scene.color-recipes\", \"No such color recipe : \" + recipeName);\n            return;\n        }\n    };\n\n    // add named recipe configuration and build mods. Replace if exists and issue warning\n    HumanRecipes.registerRecipe = function(recipeName, recipeConfig) {\n        if (colorRecipeMods.hasOwnProperty(recipeName)) {\n            Human.log.error(\"Human.scene.color-recipes\", \"Color mod recipe already exists : \" + recipeName);\n            return;\n        }\n\n        // build recipe modifications\n        colorRecipeMods[recipeName] = createModsFromConfig(recipeConfig);\n    };\n\n    // clear of any stored recipes\n    HumanRecipes.clearRecipes = function() {\n        colorRecipeMods = {};\n    };\n\n    // remove a specific recipe (this does not un-apply recipes to any objects)\n    HumanRecipes.removeRecipe = function(recipeName) {\n        delete colorRecipeMods[recipeName];\n    };\n\n    // add/remove recipe to object\n    HumanRecipes.setObjectRecipe = function(objectId, recipeName, set) {\n        // get object\n        var obj = Human.scene.objects[objectId];\n        var mods = colorRecipeMods[recipeName];\n        var modIdx, modConfig, modName;\n\n        if (!obj || !mods){\n            return;\n        }\n\n        // add/remove color modifications\n        for (modIdx = 0; modIdx < mods.colorMods.length; modIdx++) {\n            modConfig = mods.colorMods[modIdx];\n            modName = nameRecipeMod(recipeName, modConfig.applyTo);\n            obj.setColorModifier(modName, set? modConfig : null);\n        }\n\n        // set opacity modifications\n        for (modIdx = 0; modIdx < mods.opacityMods.length; modIdx++) {\n            modConfig = mods.opacityMods[modIdx];\n            modName = nameRecipeMod(recipeName, modConfig.applyTo);\n            if (set) {\n                // add\n                obj.setOpacityModifier(modName, modConfig);\n            } else if (!set && obj.opacityModifiers[modName]) {\n                // remove\n                obj.setOpacityModifier(modName, null);\n            }\n        }\n    };\n\n    // return true if object is modified by given recipe\n    HumanRecipes.hasTarget = function(recipeName, objectId) {\n        var obj = Human.scene.objects[objectId];\n        var mods = colorRecipeMods[recipeName];\n\n        if (!obj || !mods) {\n            return;\n        }\n\n        // first check color modifiers\n        var hasRecipe = Object.keys(obj.colorModifiers).reduce(function(_hasRecipe, modifier){\n            return _hasRecipe || modifier.startsWith(recipeName);\n        }, false);\n\n        // ... then combine with check for opacity modifiers\n        return Object.keys(obj.opacityModifiers).reduce(function(_hasRecipe, modifier){\n            return _hasRecipe || modifier.startsWith(recipeName);\n        }, hasRecipe);\n    };\n\n    // serialize recipe mods into recipe config\n    HumanRecipes.serializeRecipe = function(recipeName) {\n        var recipeMods = HumanRecipes.getRecipeMods(recipeName);\n        return createConfigFromMods(recipeMods);\n    };\n\n})();\n;/**\n* @namespace Control of the master root timeline\n* This namespace interfaces with the root timeline object.\n*\n* Responsibilities:\n*     - Play chapters on tick events\n*     - Issue and store play commands by specifying start and end conditions.\n*             -- next chapter, previous chapter\n*             -- start conditions: start time, start chapter id, start chpater index\n*             -- end conditions: end time, end chapter id, end chapter index, number of chapters.\n*\n*     - Play state\n*             -- playing, not playing (paused, stopped)\n*     - Scrubbing\n*             -- scrub to specific time in global timeline\n*\n* NOTE: Looping\n* Any play block (set of time defined by time1 and time2) can be instructed to loop. The\n* intention to loop is set via the HumanTimeline.play() command arguments. However, for backwards\n* compatibility with some existing apps/widgets/content, single chapters can declare themselves to loop\n* from the chapter definition directly. In this very specific edge case, we will use that loop property.\n*\n*\n*\n*\n* TODO: Eventually animations should be loaded DIRECTLY into the leaf timelines. Now they are added to animations, then from animations\n* into the leaf timeline. This is just easier for the time being.\n*/\n\n(function () {\n    \"use strict\";\n\n    //local namespace\n    var HumanTimeline = Human.timeline = {\n        objectVisibilityUpdates: {}\n    };\n\n    // Timelines Library\n    HumanTimeline.animations = {};    // original animation assets\n    HumanTimeline.leafTimelines = {};\n    HumanTimeline.branchTimelines = {};\n    HumanTimeline.rootTimelines = {};\n    HumanTimeline.activeRoot = null;\n\n    // Play Configuration\n    HumanTimeline.FRAME_LENGTH = 0.033;\n    HumanTimeline.TIME_CONSTANT = 1 / 1000;\n    HumanTimeline.borderConditions = {\n        start: {which: \"second\", direction: HumanTimeline.direction},\n        middle: {which: \"both\", direction: HumanTimeline.direction},\n        end: {which: \"first\", direction: HumanTimeline.direction}\n    };\n\n\n    // Play State Controls\n    HumanTimeline.playing = false;          // true if use wants to play a block of root timeline.\n    HumanTimeline.playfree = true;          // true if user wishes to play free animations\n    HumanTimeline._lastWorldTime = 0.0;\n    HumanTimeline._time1 = 0.0;             // time at start of play block\n    HumanTimeline._time2 = 0.0;             // time at end of play block\n    HumanTimeline._freeTime = 0.0;          // free time\n    HumanTimeline.time = 0.0;               // current time; t1 <= t <= t2\n    HumanTimeline.playQueue = [];           // Array of play instructions to be played in order.\n    HumanTimeline.loop = false;             // Loops over entire t1-t2 play-block if true\n    HumanTimeline.scale = 1.0;              // factor by which to advance time with tick (positive or negative).\n    HumanTimeline.direction = \"forwards\";   // forwards if scale > 0 and \"backwards\" if scale < 0\n\n    // Bookmark parameters\n    HumanTimeline._playParams = null;\n    HumanTimeline._scrubParams = null;\n\n\n    // Backwards Comaptibitlity.\n    HumanTimeline.chapters = {};      // Generated by root on timeline.updated event\n\n    // TICK variables\n    var root, timeNow, diff, dilation, bc;\n\n    // ------------------------  LOADING AND REGISTERING ASSETS ---------------------------------------------------\n\n    /** Registers an animation on the timeline\n    * @memberof Human.timeline\n    * @private\n    */\n    HumanTimeline.addAnimation = function (animationId, animation) {\n        if (!animation.update) {\n            Human.log.error(\"Human.timeline.addAnimation\", \"Param expected: update\");\n            return;\n        }\n        if (HumanTimeline.animations[animationId]) {\n            HumanTimeline.removeAnimation(animationId);\n        }\n        HumanTimeline.animations[animationId] = animation;\n        Human.events.fire(\"Timeline.Loaded\");\n    };\n\n    /** Destroy animation(s) - either a specific animation, all animations associated with a given object,\n    * or all animations indiscriminately\n    * @memberof Human.timeline\n    * @private\n    */\n    HumanTimeline.removeAnimation = function (animationId) {\n        var animation = HumanTimeline.animations[animationId];\n        if (!animation) {\n            Human.log.warn(\"Human.timeline.removeAnimation\", \"Animation not found: \" + animationId);\n            return;\n        }\n        delete HumanTimeline.animations[animationId];\n        if (animation.destroy) {\n            animation.destroy(); // Destroy animation\n        }\n\n        if (Human.utils.isEmpty(HumanTimeline.animations)){\n            Human.events.fire(\"Timeline.Empty\");\n        }\n\n    };\n\n    //  ----------------------- CLOCK TICK HANDLING ---------------------------------------------------------------\n    // Return True if time is at the end of a play-block, False otherwise\n    // Returns global time at which playblock ends.\n    var getEndTime = function(){\n        return (HumanTimeline.direction === \"forwards\")? HumanTimeline._time2 : HumanTimeline._time1;\n    };\n\n    // Returns global time at which playblock starts.\n    var getStartTime = function(){\n        return (HumanTimeline.direction === \"forwards\")? HumanTimeline._time1 : HumanTimeline._time2;\n    };\n\n    var playEnded = function(){\n        var ref = getEndTime();\n        if (HumanTimeline.time === ref){\n            return true;\n        } else{\n            return false;\n        }\n    };\n\n    // Return True if time is at the start of a play-block, False otherwise\n    var playStarted = function(){\n        var ref = getStartTime();\n        if (HumanTimeline.time === ref){\n            return true;\n        } else{\n            return false;\n        }\n    };\n\n    /** Rules for root update on border times.\n    * This only needs to be changed when the driection is set.\n    *\n    * \"first/second\" refers to the left/right branch at a border relative to root timeline.\n    * \"start/end\" refers to time relative to the viewer.\n    * \"forwards/backwards\" refers to left-to-right (and vice versa) relative to the root timeline.\n    *\n    * Example: first branch from the forwards direction is the same as the\n    * second branch from the backwards direction, and vice versa.\n    */\n    var setBorderConditions = function(direction){\n        var result = {};\n        var coef = (direction === \"backwards\")? -1.0: 1.0;\n        var validDirections = [\"forwards\", \"backwards\"];\n\n        // validation\n        if (validDirections.indexOf(direction) < 0){\n            Human.log.warn(\"timeline.setBorderConditions\", \"invalid direction :\" + direction);\n            return null;\n        }\n\n        result.start = {which:\"second\", direction: direction};\n        result.middle = {which: \"both\", direction: direction};\n        result.end = {which: \"first\", direction: direction};\n\n        HumanTimeline.direction = direction;\n        HumanTimeline.borderConditions = result;\n        HumanTimeline.scale = coef * Math.abs(HumanTimeline.scale);\n    };\n\n\n    HumanTimeline.initTransparencies = function(){\n        Human.log.error(\"timeline.initTransparencies() is deprecated and no longer required for loading\");\n    };\n\n    HumanTimeline.onFrame = function () {\n        // Manage global time --------------------------------------\n        root = HumanTimeline.activeRoot;\n        if (root === null || root === undefined){\n            return;\n        }\n        timeNow = (new Date()).getTime();\n        diff = (timeNow - HumanTimeline._lastWorldTime) * HumanTimeline.TIME_CONSTANT;\n        dilation = diff / HumanTimeline.FRAME_LENGTH;\n        HumanTimeline._lastWorldTime = timeNow;\n        if (HumanTimeline.time > HumanTimeline._time2) {\n            HumanTimeline.time = HumanTimeline._time2;\n        }\n        else if (HumanTimeline.time < HumanTimeline._time1) {\n            HumanTimeline.time = HumanTimeline._time1;\n        }\n\n        // Free Animations ------------------------------------------\n        if (HumanTimeline.playfree){\n            root.updateFreeAnimations(HumanTimeline._freeTime);\n            HumanTimeline._freeTime += HumanTimeline.scale * dilation * HumanTimeline.FRAME_LENGTH;\n        }\n\n\n        // Branch Timelines ----------------------------------------------\n        /**\n        * Boundary conditions: Often a play block is the duration of a chapter.\n        * At boundaries, the global time points to end/start times on two consecutive\n        * branch timelines. Rules specified in the bounary condition dictate\n        * whether both are played or just one and which one.\n        *\n        */\n        if (HumanTimeline.playing){\n\n            // Boundary conditions and play permissions\n            bc = HumanTimeline.borderConditions.middle; //default\n            var toPlay = true;\n            if (playEnded()){\n                if (HumanTimeline.loop === true){\n                    // loop\n                    bc = HumanTimeline.borderConditions.start;\n                    HumanTimeline.time = getStartTime();\n                } else {\n                    // stop playing\n                    bc = HumanTimeline.borderConditions.end;\n                    toPlay = false;\n                }\n            } else if (playStarted()){\n                bc = HumanTimeline.borderConditions.start;\n            }\n\n            // Play and adjust Play State based on time.\n            root.update(HumanTimeline.time, bc);\n            if (toPlay){\n                HumanTimeline.playing = true;\n                Human.events.fire(\"timeline.playing\", {\n                    time: HumanTimeline.time\n                });\n                HumanTimeline.time += HumanTimeline.scale * dilation * HumanTimeline.FRAME_LENGTH;\n            } else {\n                Human.events.fire(\"timeline.completed\");\n                HumanTimeline.playing = false;\n                Human.events.fire(\"timeline.stopped\", {\n                    time: HumanTimeline.time\n                });\n            }\n        } // end handling of branch update\n\n        Human.renderer.camera.fly.onFrame();\n\n        if (!Human.utils.isEmpty(HumanTimeline.objectVisibilityUpdates)) {\n            Human.events.fire(\"TweenVisibilityUpdate\", HumanTimeline.objectVisibilityUpdates);\n            HumanTimeline.objectVisibilityUpdates = {};\n        }\n\n    };\n\n    // Manage play queue:\n    Human.events.on(\"timeline.stopped\",function(){\n        HumanTimeline.playQueue.shift();\n        if (HumanTimeline.playQueue.length>0){\n            var nextPlay = HumanTimeline.playQueue[0];\n            HumanTimeline._play(nextPlay);\n        } else {\n            Human.events.fire(\"timeline.paused\",{time:Human.timeline.time});\n        }\n    });\n\n    // ------------------------- PLAY COMMANDS ----------------------------------------------------------------------\n    HumanTimeline.parsePlayInstruction = function(params){\n        params = params || {};\n        var root = params.root || HumanTimeline.activeRoot;\n        var direction = \"forwards\";              // play direction (relative to root);\n        root.getTimeFrame();\n        var _startCondition;\n        var _endCondition;\n        var _firstBranch;           // first branch to be played\n        var _firstTime;             // time1 (branch local time)\n        var _lastBranch;            // last branch to be played\n        var _lastTime;              // time2 (branch local time)\n        var _t1 = null;                    // first time of time window\n        var _t2 = null;                    // last time of time windo\n        var _t = null;                     // first time to play\n        var align = (params.hasOwnProperty(\"align\"))? params.align : true;\n        var startPriorityQueue = [\"nextChapter\" ,\"prevChapter\",\"startChapterId\",\"startTime\"];\n        var endPriorityQueue = [\"nextChapter\",\"prevChapter\", \"finishChapterId\",\"finishTime\", \"numChapters\"];\n        var temp = null;\n        var loop = false;\n        HumanTimeline._playParams = params;\n\n        _startCondition = filterPriority(startPriorityQueue, params)[0] || \"default\";\n        _endCondition = filterPriority(endPriorityQueue, params)[0] || \"default\";\n\n        // Get branch, time for start and end conditions\n        switch(_startCondition){\n            case \"nextChapter\":\n            // Play next chapter from start to finish in forwards order\n            _firstTime = 0.0;\n            _firstBranch = root.getNeighborChapter(root._nowBranch, \"next\");\n            break;\n            case \"prevChapter\":\n            // Play the previous chapter from start to finish in forwards order\n            _firstTime = 0.0;\n            _firstBranch = root.getNeighborChapter(root._nowBranch, \"previous\");\n            break;\n            case \"startChapterId\":\n            // play chapter by id and catch invalid ids\n            _firstTime = 0.0;\n            _firstBranch = root.getBranch({id: params.startChapterId});\n            if (Human.utils.isEmpty(_firstBranch)){\n                Human.log.warn(\"timeline.play\", \"Invalid chapter id: \"+ params.startChapterId);\n                return;\n            }\n            break;\n            case \"startTime\":\n            // start at specified time (default to 0)\n            temp = root.mapGlobalTime(params.startTime, {tie: \"later\"});\n            _firstBranch = temp.branch;\n            _firstTime = temp.time;\n            break;\n            case \"default\":\n            _firstBranch = root._chapters[0];\n            _firstTime = 0.0;\n        }\n\n        switch(_endCondition){\n            case \"nextChapter\":\n            // play to the end of the target branch\n            _lastBranch = _firstBranch;\n            _lastTime = _lastBranch.getTimeFrame().lastTime;\n            break;\n            case \"prevChapter\":\n            // play to the end of the target branch\n            _lastBranch = _firstBranch;\n            _lastTime = _lastBranch.getTimeFrame().lastTime;\n            break;\n            case \"finishChapterId\":\n            // play chapter by id and catch invalid ids\n            _lastBranch = root.getBranch({id: params.finishChapterId});\n            if (Human.utils.isEmpty(_lastBranch)){\n                Human.log.warn(\"timeline.play\", \"Invalid chapter id: \"+ params.finishChapterId);\n                return;\n            }\n            _lastTime = _lastBranch.getTimeFrame().lastTime;\n            break;\n            case \"finishTime\":\n            // start at specified time (default to end). Edge case if finish time is 0.\n            if (params.finishTime === 0){\n                _lastBranch = root._chapters[0];\n                _lastTime = 0.0;\n            } else{\n                var which = {tie: \"earlier\"};\n                temp = root.mapGlobalTime(params.finishTime, which);\n                _lastBranch = temp.branch;\n                _lastTime = temp.time;\n            }\n            break;\n            case \"numChapters\":\n            // play up to numChapters or last chapter\n            var startIndex = root.whereIsBranch(_firstBranch, {chapters:true});\n            var numRemaining = root._chapters.length - startIndex;\n            var numChapters = params.numChapters || 1;\n            numChapters = Math.min(numChapters, numRemaining);\n            _lastBranch = root._chapters[startIndex + numChapters - 1];\n            _lastTime = _lastBranch.getTimeFrame().lastTime;\n            break;\n            case \"default\":\n            _lastBranch = root._chapters[root._chapters.length - 1];\n            _lastTime = \"end\";\n        }\n\n        // Convert to world time and check for forwards/backwards direction\n        _t1 = root.mapBranchTime(_firstBranch, _firstTime);\n        _t2 = root.mapBranchTime(_lastBranch, _lastTime);\n        if (_t1 <= _t2){\n            // play t1 -> t2 in forwards direction\n            direction = \"forwards\";\n            _t = _t1;\n        }\n        else {\n            // play new t2 -> t1 in backwards direction\n            temp = _t1;\n            _t1 = _t2;\n            _t2 = temp;\n            _t = _t2;\n            direction = \"backwards\";\n        }\n\n        // Account for alignment to start/end of chapter\n        if (align) {\n            if (direction === \"forwards\") {\n                _t1 = root.mapBranchTime(_firstBranch, 0);\n                _t2 = root.mapBranchTime(_lastBranch, \"end\");\n            } else if (direction === \"backwards\") {\n                _t1 = root.mapBranchTime(_lastBranch, 0);\n                _t2 = root.mapBranchTime(_firstBranch, \"end\");\n            }\n        }\n\n        /** Looping property\n        * Priority goes to params.loop.\n        * If not set in params, and only a single whole chapter is meant to be played\n        * we will use the chapter's loop property.\n        */\n        if (params.hasOwnProperty('loop')){\n            loop = params.loop;\n        }\n        else {\n            var singleStarts = [\"startChapterId\",\"nextChapter\",\"prevChapter\"];\n            var singleEnds = [\"numChapters\", \"nextChapter\", \"finishChapterId\"];\n            if (singleStarts.indexOf(_startCondition) >= 0){\n                if (singleEnds.indexOf(_endCondition) >= 0){\n                    if (_firstBranch.id === _lastBranch.id){\n                        loop = _firstBranch.animation.loop;\n                    }\n                }\n            }\n        }\n\n        return {\n            \"t\": _t,\n            \"t1\":_t1,\n            \"t2\":_t2,\n            \"loop\": loop,\n            \"direction\": direction\n        };\n    };\n\n    /** PLAY QUEUE\n    @param {{}} params Play parameters\n    @param {Number} [params.prevChapter] True play previous chapter\n    @param {Number} [params.nextChapter] True play next chapter\n    @param {Number} [params.startTime] Time in seconds to start playing at\n    @param {Number} [params.finishTime] Time in seconds to stop playing at\n    @param {String} [params.startChapterId] ID of chapter to start playing at\n    @param {String} [params.finishChapterId] ID of chapter to stop playing at\n    @param {String} [params.numChapters] Number of chapters to play before stopping\n    */\n    HumanTimeline.play = function(params){\n        params = params || {};\n\n        if (params.queue && HumanTimeline.playing) {\n            // Flagged to enqueue, currently playing\n            HumanTimeline.playQueue.push(params);\n        } else {\n            // Kill queue, play immediately\n            HumanTimeline.playQueue = [params];\n            HumanTimeline._play(params);\n        }\n    };\n\n    // Sets up play block via play state controls\n    /**\n    * Parameters:\n    * @param {Number}  [params.prevChapter] True play previous chapter\n    * @param {Number}  [params.nextChapter] True play next chapter\n    * @param {boolean} [params.align] True (default) _time1,_time2 align with border times. Otherwise, use passed times.\n    * @param {string}  [params.startChapterId]\n    * @param {string}  [params.finishChapterId]\n    * @param {Number}  [params.startTime]\n    * @param {Number}  [params.finishTime]\n    * @param {integer} [params.numChapters] number of chapters in forwards direction.\n    * @param {boolean} [params.loop]\n    *\n    * TODO: Consider having both align left and align right.\n    *\n    * NOTE: This will support playing time backwards, but will not support playing chapters forwrds in\n    * reverse order. One should issue use existing play parameters and the playQueue to do that.\n    *\n    * Backwards Conditions (playing time backwards) when ...\n    *   startTime > finishTime (global)\n    *   startChapter.idx > finishChapter.idx (root queue order)\n    *   startTime > finishChpater.starttime (global)\n    *   finishTime < startChapter.startTime (global)\n    */\n    HumanTimeline._play = function(params){\n        var playparams = HumanTimeline.parsePlayInstruction(params || {});\n\n        // Update Timeline Play State and Parameters\n        HumanTimeline._time1 = playparams.t1;\n        HumanTimeline._time2 = playparams.t2;\n        HumanTimeline.time = playparams.t;\n        HumanTimeline.loop = playparams.loop;\n        setBorderConditions(playparams.direction);\n\n        // Prepare for tick event\n        HumanTimeline.playing = true;\n        HumanTimeline._lastWorldTime = (new Date()).getTime();\n        Human.events.fire(\"timeline.played\", {\n            time: HumanTimeline.time\n        });\n\n    };\n\n    // Filter parameters for start and end conditions\n    var filterPriority = function(priorityQue, optionsMap){\n        var okeys = Object.keys(optionsMap);\n        var filterfunc = function(pqItem){\n            return okeys.indexOf(pqItem)>=0;\n        };\n        return priorityQue.filter(filterfunc);\n    };\n\n    /** Stop the timeline.\n    */\n    HumanTimeline.stop = function(){\n\n        // play state variables\n        HumanTimeline.playing = false;\n        HumanTimeline.playQueue = [];\n\n        // Human events\n        Human.events.fire(\"timeline.stopped\",{\n            time: HumanTimeline.time\n        });\n    };\n\n    /** Scrub to specific time on global timeline\n    * @param.time            : global time to scrub to\n    * @param.borderCondition : instructions for handling playing a border.\n    * @param.chapterId       : move to the start of the specified chapterId\n    * TODO:@params.playAudio     : False (default) to suppress audio publishing while scrubbing\n    *\n    * This function will also update play block to encompass desired time for\n    * proper \"unpausing\" or resume play. Resets out-of-bounds scrub to play current\n    * chapter.\n    */\n    HumanTimeline.scrub = function(params){\n        var root = HumanTimeline.activeRoot;\n        var time = 0;\n        var bc = {which: \"first\", direction:\"forwards\"};\n        var target;\n\n        HumanTimeline.playQueue = [];\n        HumanTimeline._scrubParams = params; // copy for bookmarks\n\n        // Infer the desired global time based on parameters\n        if (params.hasOwnProperty(\"time\")){\n            time = params.time;\n        } else if (params.hasOwnProperty(\"chapterId\")) {\n            var branch = root.getBranch({id:params.chapterId});\n            if (!!branch){\n                time = root.mapBranchTime(branch, 0);\n                bc = {which:\"second\", direction:\"forwards\"};\n            } else {\n                // in case of failure\n                time = HumanTimeline.time;\n            }\n\n        }\n        else {\n            time = HumanTimeline.time;\n        }\n        if (params.hasOwnProperty(\"borderCondition\")){\n            var _bc = params.borderCondition;\n            var _which = [\"first\",\"both\",\"second\"];\n            var _direction = [\"forwards\",\"backwards\"];\n            if (_which.indexOf(_bc.which) >= 0){\n                bc.which = _bc.which;\n            }\n            if (_direction.indexOf(_bc.direction) >= 0){\n                bc.direction = _bc.direction;\n            }\n        }\n\n        if (time === 0.0){\n            bc = {which: \"second\", direction: \"forwards\"};\n        } else if (time === root.getTimeFrame.lastTime){\n            bc = {which: \"first\", direction:\"forwards\"};\n        }\n\n        // Update play block if scrub time is out of bounds\n        if (time < HumanTimeline._time1 || time > HumanTimeline._time2) {\n            target = root.mapGlobalTime(time, bc);\n            HumanTimeline._time1 = root.mapBranchTime(target.branch, 0.0);\n            HumanTimeline._time2 = root.mapBranchTime(target.branch, \"end\");\n        }\n\n        // Manage Play State\n        HumanTimeline.playing = false;\n\n        // Determine Boundary Condition\n        HumanTimeline.time = time;\n        root.update(time, bc);\n        Human.events.fire(\"timeline.scrubbed\", {\n            time: HumanTimeline.time\n        });\n    };\n\n    /** Go to next chronological chapter, respecting properties.prevNextMode\n    *\n    * prevNextMode is set per chapter.\n    * two modes are currently supported:\n    * play :\n    *     -- play current chapter forwards and step into next chapter if next chapter not looping\n    *     -- play next chapter and loop, if next chapter is looping\n    * scrub :\n    *     -- scrub directly to start of next\n    *\n    * TODO: Override currently looping chapter so that it finishes.\n    * TODO: Properly handle border-condition instead of stepping 0.001 seconds into chapter.\n    *\n    * HACK: The behavior of 'prevNextMode' is not uniquely determined, depends on the property\n    * of the next chapter. This is bad, but is needed for backwards compatibility.\n    */\n    HumanTimeline.next = function(){\n        var root = HumanTimeline.activeRoot;\n        var prevNextMode = Human.properties.properties[\"timeline.prevNextMode\"];\n        var nowBranch = root._nowBranch;\n        var nextBranch = root.getNeighborChapter(nowBranch,\"next\");\n\n        // Cancel if on last chapter.\n        if (root.isLast(nowBranch)){\n            Human.log.warn(\"timeline.next\", \"can't proceed beyond last chapter\");\n            return;\n        }\n\n        //TODO: Use boundary condition here\n        var finishTime = root.mapBranchTime(nowBranch,\"end\") + 0.001;\n\n        if (prevNextMode === \"play\"){\n            var playParams;\n            if (nextBranch.animation.loop){\n                playParams = {\n                    startTime: root.mapBranchTime(nextBranch,0),\n                    align: true,\n                    finishTime: root.mapBranchTime(nextBranch, \"end\"),\n                    loop: nextBranch.animation.loop,\n                    queue: false\n                };\n            } else {\n                // Play rest of this chapter forwards and just enter into next chapter\n                playParams = {\n                    startTime : HumanTimeline.time,\n                    align: false,\n                    finishTime : finishTime,\n                    loop: false,\n                    queue: false\n                };\n            }\n\n            HumanTimeline.play(playParams);\n        } else {\n            // Default is to scrub\n            HumanTimeline.scrub({\n                time: finishTime\n            });\n        }\n\n    };\n\n    /** Go to previous chronological chapter, respecting properties.prevNextMode\n    *\n    * prevNextMode is set per chapter.\n    * two modes are currently supported:\n    * play :\n    *     -- play previous chapter backwards\n    * scrub :\n    *     -- scrub directly to start of previous chapter\n    */\n    HumanTimeline.prev = function(){\n        var root = HumanTimeline.activeRoot;\n        var prevNextMode = Human.properties.properties[\"timeline.prevNextMode\"];\n        var nowBranch = root._nowBranch;\n\n        // Cancel if on first chapter.\n        if (root.isFirst(nowBranch)){\n            Human.log.warn(\"timeline.next\", \"can't go to chapter before first chapter\");\n            return;\n        }\n\n        var prevChapter = root.getNeighborChapter(nowBranch, \"previous\");\n        // TODO: Use boundary condition here\n        var finishTime = root.mapBranchTime(prevChapter, \"start\") + 0.001;\n        var playParams;\n        if (prevNextMode === \"play\") {\n            if (nowBranch.animation.loop) {\n                // When current chapter is looping, go to start of previous chapter\n                playParams = {\n                    startTime: root.mapBranchTime(prevChapter,\"start\"),\n                    align: true,\n                    finishTime: root.mapBranchTime(prevChapter,\"end\"),\n                    loop: prevChapter.animation.loop,\n                    queue: false\n                };\n            } else {\n                // play previous chapter backwards\n                playParams = {\n                    startTime: root.mapBranchTime(prevChapter, \"end\"),\n                    align: false,\n                    finishTime: root.mapBranchTime(prevChapter, \"start\"),\n                    loop: false,\n                    queue: false\n                };\n            }\n            HumanTimeline.play(playParams);\n        } else {\n            // Default is to scrub\n            HumanTimeline.scrub({\n                time: finishTime\n            });\n        }\n    };\n\n    // ------------------------- BOOKMARKING -------------------------------------------------------------------------\n\n    /**\n    * Gets a bookmark of the timeline's current playing state. This does not bookmark the content\n    * currently loaded within the timeline, so when restoring the bookmark, ensure that all the currently-loaded\n    * animations and chapters are loaded first.\n    * @memberof Human.timeline\n    * @return The bookmark, which may be given to {@link Human.timeline.setBookmark} to restore it\n    * @private\n    */\n    HumanTimeline.getBookmark = function(){\n        var bookmarkParams = {};\n\n        // bookmark root timeline if it exists:\n        if (!!Human.timeline.activeRoot){\n            bookmarkParams.rootName = Human.timeline.activeRoot.id;\n        }\n\n        // bookmark play parameters\n        if (HumanTimeline.playing){\n            bookmarkParams.play = HumanTimeline._playParams;\n            if (bookmarkParams.play.root) {\n              delete bookmarkParams.play.root;\n            }\n        } else {\n            bookmarkParams.scrub = HumanTimeline._scrubParams;\n        }\n        return bookmarkParams;\n    };\n\n    /**\n    * Sets timeline's playing state to given bookmark. Assumes that the animations and chapters\n    * that were on the timeline when the bookmark was captured are currently loaded.\n    * @memberof Human.timeline\n    * @param {*} bookmark The bookmark\n    * @private\n    */\n    HumanTimeline.setBookmark = function(bookmark){\n        if (!!bookmark.rootName && HumanTimeline.rootTimelines.hasOwnProperty(bookmark.rootName)){\n            HumanTimeline.activeRoot = HumanTimeline.rootTimelines[bookmark.rootName];\n        } else if (!!bookmark.modules && !!bookmark.modules.activeModules) {\n            // Search for appropriate root timeline form bookmark's active modules.\n            var candidateTimelines = bookmark.modules.activeModules;\n            candidateTimelines = candidateTimelines.filter(function(item){\n                return Human.timeline.rootTimelines.hasOwnProperty(item);\n            });\n            if (candidateTimelines.length > 1){\n                candidateTimelines = candidateTimelines.filter(function(item){\n                    return !Human.modules.isBaseModule(item);\n                });\n            }\n            var rootName = candidateTimelines[0];\n            Human.timeline.activeRoot = Human.timeline.rootTimelines[rootName];\n        } else {\n            Human.log.warn(\"Human.timeline.setBookmark: Unable to set appropriate root timeline\");\n        }\n    };\n\n    // ------------------------- BACKWARDS COMPATIBILITY -------------------------------------------------------------\n\n    /** Backwards Compatiiblity: Pause()\n    * Same as stop but with different human event.\n    */\n    HumanTimeline.pause = function(){\n        HumanTimeline.playing = false;\n\n        // Human events\n        Human.events.fire(\"timeline.paused\", {\n            time: HumanTimeline.time\n        });\n    };\n\n    /** Backwards Compatibility: Unpause()\n    * Play rest of current chapter (and only current chapter).\n    */\n    HumanTimeline.unpause = function(){\n        var playParams = {\n            startTime: HumanTimeline.time,\n            numChapters : 1,\n            loop: HumanTimeline.loop\n        };\n\n        HumanTimeline.play(playParams);\n\n        // Human Events\n        Human.events.fire(\"timeline.unpaused\", {\n            time: HumanTimeline.time\n        });\n    };\n\n    HumanTimeline.playFreeAnimations = function(){\n        HumanTimeline.playfree = true;\n    };\n\n    HumanTimeline.pauseFreeAnimations = function(){\n        HumanTimeline.playfree = false;\n    };\n\n    HumanTimeline.getTimeFrame = function(){\n        if (Human.utils.isEmpty(HumanTimeline.activeRoot)){\n            return 0.0;\n        } else {\n            return HumanTimeline.activeRoot.getTimeFrame();\n        }\n    };\n\n    //Get the current chapter's start camera position\n    HumanTimeline.getCurrentChapterCamera = function(){\n        return Human.timeline.activeRoot._nowBranch.getCamera(0.0);\n    };\n\n    // Preserve play parameter naming conventions from older versions\n    HumanTimeline._convertPlayParams = function(params){\n        var result = params;\n        if (params.hasOwnProperty(\"endTime\")){\n            result.finishTime = result.endTime;\n        }\n        if (params.hasOwnProperty(\"endChapterId\")){\n            result.finishChapterId = params.endChapterId;\n        }\n\n        return result;\n\n    };\n\n    // Query State of Timeline\n    HumanTimeline.query = function () {\n\n        if (!HumanTimeline.activeRoot){\n            return {};\n        }\n        var chapters = HumanTimeline.activeRoot._assembleQueryChapters();\n        return {\n            chapters: chapters,\n            time: HumanTimeline.time,\n            timeFrame: HumanTimeline.getTimeFrame(),\n            playing: HumanTimeline.playing,\n            paused: !HumanTimeline.playing\n        };\n    };\n\n    /** Destroy Chapter Sets: chapterSetId = moduleId\n    * Don't destroy base anatomy chapter sets unless specifically requested.\n    */\n    HumanTimeline.destroyChapterSet = function(chapterSetId){\n        HumanTimeline.stop();\n        if (HumanTimeline.rootTimelines.hasOwnProperty(chapterSetId)){\n            HumanTimeline.rootTimelines[chapterSetId].destroy();\n        } else if (!!chapterSetId){\n            // Destroy all root timelines except base anatomy\n            // TODO: Scene Reset (default properties)\n            for (var rtid in HumanTimeline.rootTimelines){\n                if (HumanTimeline.rootTimelines.hasOwnProperty(rtid)){\n                    if (!Human.modules.isBaseModule(rtid)){\n                        HumanTimeline.rootTimelines[rtid].destroy();\n                    }\n                }\n            }\n        } else {\n            // invalid chapterset id\n            Human.log.warn(\"timeline.destoryChapterSet\",\"Invalid argument: \" + chapterSetId);\n        }\n    };\n\n    Human.events.on(\"timeline.chapters.updated\", function(chapters){\n      var idx = 0;\n      var id;\n      HumanTimeline.chapters = {};\n      if (HumanTimeline.activeRoot === null){\n        return;\n      }\n      for (idx=0; idx<chapters.length; idx++){\n        id = HumanTimeline.activeRoot._chapters[idx].id;\n        HumanTimeline.chapters[id] = chapters[idx];\n      }\n\n    });\n\n})();\n;(function () {\n    \"use strict\";\n\n    /**\n     * A tween animation on the {@link Human.timeline}.\n     *\n     * @param cfg {*}\n     * @param cfg.tweens {{}}\n     */\n    Human.timeline.TweenAnimation = function (cfg) {\n\n        this._options = cfg.options || { };\n\n        this._tweens = cfg.tweens;\n\n        this.timeline = cfg.timeline;\n\n        /**\n         * First key for this tween animation\n         */\n        this.firstTime = 1000000;\n\n        /**\n         * Last key for this tween animation\n         */\n        this.lastTime = -1000000;\n\n        // Calculate time frame\n\n        var tween;\n        for (var i = 0, len = this._tweens.length; i < len; i++) {\n\n            tween = this._tweens[i];\n\n            if (tween.firstTime < this.firstTime) {\n                this.firstTime = tween.firstTime;\n            }\n\n            if (tween.lastTime > this.lastTime) {\n                this.lastTime = tween.lastTime;\n            }\n        }\n    };\n\n    /**\n     * Updates this animation for the given time.\n     *\n     * @param {{}} ctx The animation context\n     * @param {Number} time Current timeline time in seconds\n     */\n    Human.timeline.TweenAnimation.prototype.update = function (ctx, time) {\n        for (var i = 0, len = this._tweens.length; i < len; i++) {\n            this._tweens[i].update(ctx, time);\n        }\n    };\n\n    /**\n     * Destroys this animation.\n     */\n    Human.timeline.TweenAnimation.prototype.destroy = function () {\n        var tween;\n        for (var i = 0, len = this._tweens.length; i < len; i++) {\n            tween = this._tweens[i];\n            if (tween.destroy) {\n                tween.destroy();\n            }\n        }\n    };\n\n})();\n;(function () {\n    \"use strict\";\n\n    /**\n     * A Human.timeline.Tween interpolates one or more attributes of some target engine element.\n     *\n     * A Tween is configured with a \"control\", which is a strategy object which which feeds the Tween's output\n     * into the engine element.\n     *\n     * We also configure a Tween with \"targets\", each of which is a set of values to assign to attributes of the\n     * engine element, at some instant in time.\n     *\n     * For each attribute that appears among the targets, the Tween will create within itself a Human.utils.LerpAttr,\n     * which will animate that attribute through its target values.\n     *\n     * Whenever the Tween is updated with the current time, it updates each of its LerpAttr, then feeds the\n     * aggregate set of outputs of those LerpAttr into the engine element, via the control strategy.\n     *\n     * For example:\n     *\n     * <pre>\n     *     var lerp = new Human.timeline.Tween({\n     *\n     *          // Control the Human.view.Camera\n     *\n     *          control: new Human.timeline.CameraControl(),\n     *\n     *          // Sequence of target value sets, in this case each containing values for \"eye\", \"look\" and \"up\"\n     *          // attributes to set on the Human.view.Camera. This will create three Human.utils.LerpAttr instances\n     *          // within this Human.timeline.Tween, each in charge of interpolating one of these three attributes.\n     *\n     *          targets: [\n     *              {\n     *                  eye:  { x: 0, y: 0, z: -100 },\n     *                  look: { x: 0, y: 0, z: 0 },\n     *                  eye:  { x: 0, y: 1, z: 0 }\n     *              },\n     *              {\n     *                  eye:  { x: 10, y: 22, z: -10 },\n     *                  look: { x: 0, y: 0, z: 20 },\n     *                  eye:  { x: 0, y: 1, z: 0 }\n     *              }\n     *          ],\n     *\n     *          // A time for each target\n     *\n     *          keys: [\n     *              0,\n     *              15\n     *          ]\n     *      });\n     * </pre>\n     *\n     *\n     *\n     * @param cfg\n     * @param cfg.keys Time for each target\n     * @param cfg.targets Set of attribute values for each target\n     * @param cfg.control Strategy to set the animated values on target engine element\n     */\n    Human.timeline.Tween = function (cfg) {\n\n        // Adapter which controls the thing we're tweening\n        // eg. a Human.timeline.CameraControl\n        this._control = cfg.control;\n\n        // Array of Human.utils.LerpAttr\n        this._tweenList = [];\n\n        var tweenMap = {};\n        var target;\n        var key;\n        var attr;\n        var targetAttr;\n        var tween;\n        var tweenAttr;\n\n        // Create tweens\n\n        for (var i = 0, len = cfg.targets.length; i < len; i++) {\n\n            target = cfg.targets[i];\n            key = cfg.keys[i];\n\n            // Nested \"attr\" issue\n            if (Human.utils.isObject(target.attr) && hasNestedObjects(target.attr)) {\n                target = target.attr;\n            }\n\n            //Create a Tween for each attribute (\"translate\", \"rotate\" etc.) in target.\n            // Each tween will contain a sub-tween for each of its target's elements (\"x\", \"y\" etc.)\n\n            attr = target;\n\n            for (var attrName in attr) {\n                if (attr.hasOwnProperty(attrName)) {\n\n                    targetAttr = attr[attrName];\n                    tween = tweenMap[attrName];\n\n                    if (!tween) { // Lazy-create\n\n                        tweenAttr = this._control.attr[attrName];\n                      //  if (!tweenAttr) {\n                      //      Human.log.error(\"Human.timeline.Tween\", \"Attribute expected on control strategy: \" + attrName);\n                      //      continue;\n                      //  }\n                        tween = new Human.timeline.TweenAttr(tweenAttr, cfg.options);\n                        tweenMap[attrName] = tween;\n                        this._tweenList.push(tween);\n                    }\n\n                    tween.addTarget(key, targetAttr);\n                }\n            }\n        }\n\n        /**\n         * First key for this tween\n         */\n        this.firstTime = cfg.keys[0];\n\n        /**\n         * Last key for this tween\n         */\n        this.lastTime = cfg.keys[cfg.keys.length - 1];\n    };\n\n    Human.timeline.Tween.prototype._run = function (ctx, time) {\n\n        var countUpdated = 0;\n        var tweenList = this._tweenList;\n\n        // Update each tween\n        for (var j = 0, len = tweenList.length; j < len; j++) {\n            if (tweenList[j].update(ctx, time)) {\n                countUpdated++;\n            }\n        }\n\n        return countUpdated;\n    };\n\n    Human.timeline.Tween.prototype.query = function (ctx, time) {\n        this._run(ctx, time);\n\n        return this._control.attr;\n    };\n\n    /**\n     * Updates this tween for the given time.\n     *\n     * @param {{}} ctx Animation context\n     * @param {Number} time Time in seconds\n     */\n    Human.timeline.Tween.prototype.update = function (ctx, time) {\n        // Update control if any tween was updated\n        if (this._run(ctx, time) > 0) {\n            this._control.update(ctx);\n        }\n    };\n\n    function hasNestedObjects(obj) {\n        for (var prop in obj) {\n            if (obj.hasOwnProperty(prop) && !Human.utils.isObject(obj[prop])) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n})();\n;/**\n * Tweens a set of attributes\n *\n * <p>Usage:</p>\n *\n * <pre>\n *     var lerp = new Human.timeline.TweenAttr({ x: 0, y: 0, z: 0 });\n *\n *     lerp.addTarget(1, { x: 0, y: 10, z: 1 });\n *     lerp.addTarget(2, { x: 5, y: 0, z: 0 });\n *     lerp.addTarget(4, { x: 10, y: 0, z: 1 });\n *\n *     var animationContext = {};\n *\n *     lerp.update(animationContext, 3);\n *\n * </pre>\n *\n * @param {{String:Object}} attr The attribute values to interpolate.\n * @param {{String:Object}} options Interpolation options\n * @param {Boolean} [options.loop] Flag indicating whether interpolation loops within the targets\n * @param {Number} [options.timeOffset] Time offset to add to time at each target given to {@link #addTarget}\n */\n\n(function() {\n    \"use strict\";\n\n    Human.timeline.TweenAttr = function (attr, options) {\n\n        /**\n         * The attributes that are interpolated. This is the output of this interpolator.\n         */\n        this.attr = attr;\n\n        this.attrNames = null;\n\n        options = options || {};\n\n        /**\n         * A time in seconds for each target.\n         */\n        this.keys = [];\n\n        /**\n         * The targets - a list of target values for each attribute.\n         *\n         * <p>For example, if the attributes were {x,y,z}, then it would be this sort of thing:</p>\n         *\n         * <pre>\n         * {\n         *     \"x\": [32, 4, -23],\n         *     \"y\": [-2, 40, 133],\n         *     \"z\": [34, 0, 21]\n         * }\n         * </pre>\n         */\n        this.attrTargetLists = {};\n\n        this._tweens = [];\n\n        // Caches indexes of the pair of targets that the enclose the last time value given to #update\n        this._key1 = 0;\n        this._key2 = 1;\n\n        // Caches the time values at the first and last keys, plus the range between them\n        this._firstKey = null;\n        this._lastKey = null;\n        this._keyDiff = null;\n\n        // True when this interpolator loops\n        this._loop = !!options.loop;\n\n        // Optional time offset to add to times given to #addTarget\n        this._timeOffset = options.timeOffset || 0;\n\n        // True when we need to re-pad the target lists\n        this._paddingDirty = true;\n    };\n\n    /**\n     * Adds a target to this Tween.\n     *\n     * <p>Example:</p>\n     *\n     * <pre>\n     *     // Add a target at 4 seconds\n     *     addTarget(4, { \"x\": 0, \"y\": 0, \"z\": -10 });\n     * </pre>\n     *\n     * @param {Number} time Time in seconds for the target\n     * @param {{String: Object}} attr Attribute values for the target\n     */\n    Human.timeline.TweenAttr.prototype.addTarget = function (time, attr) {\n\n        time += this._timeOffset;\n\n        // Add key time\n\n        this.keys.push(time);\n\n        var i = this.keys.length - 1;\n\n        var targetList;\n        var padded;\n        var val;\n        var j;\n        var prev;\n\n        for (var name in attr) {\n\n            if (attr.hasOwnProperty(name)) {\n\n                targetList = this.attrTargetLists[name];\n\n                if (!targetList) {\n\n                    if (this.keys.length > 1) {\n                        throw \"First target in tween must contain a value for each animated attribute on target\";\n                    }\n\n                    targetList = this.attrTargetLists[name] = [];\n                }\n\n                val = attr[name];\n\n                targetList[i] = val;\n                if (typeof val !== \"number\") {\n                    getCurve(val, time, targetList[i - 1], this.keys[i - 1]);\n                }\n\n                if (i > 0) {\n\n                    padded = false;\n                    j = i - 1;\n\n                    while (!padded && j >= 0) {\n\n                        prev = targetList[j];\n\n                        // ? never hit ?\n                        if (prev === undefined && prev === null) {\n                            targetList[j] = val;\n                            j--;\n                        } else {\n                            padded = true;\n                        }\n                    }\n                }\n            }\n        }\n\n        // Find key range\n\n        if (this._firstKey === null || this._firstKey > time) {\n            this._firstKey = time;\n        }\n\n        if (this._lastKey === null || this._lastKey < time) {\n            this._lastKey = time;\n        }\n\n        this._keyDiff = this._lastKey - this._firstKey;\n\n        this._paddingDirty = false;\n    };\n\n\n    Human.timeline.TweenAttr.prototype._padTargets = function () {\n\n        var name;\n        var attrTargetLists = this.attrTargetLists;\n        var targetList;\n        var numKeys = this.keys.length;\n        var val;\n\n        for (name in attrTargetLists) {\n\n            if (attrTargetLists.hasOwnProperty(name)) {\n\n                targetList = attrTargetLists[name];\n\n                if (targetList.length === numKeys) {\n                    continue;\n                }\n\n                val = targetList[targetList.length - 1];\n\n                while (targetList.length < numKeys) {\n                    targetList.push(val);\n                }\n            }\n        }\n\n        this._paddingDirty = false;\n    };\n\n\n    /**\n     * Drives the interpolation factor on this Tween\n     *\n     * <p>Example:</p>\n     *\n     * <pre>\n     * update(3.2);\n     * </pre>\n     *\n     * @param {*} ctx Animation context\n     * @param {Number} time Current timeline time in seconds\n     * @return {Boolean} True if any attribute in {@link #attr} was modified\n     */\n    Human.timeline.TweenAttr.prototype.update = function (ctx, time) {\n\n        if (this._paddingDirty) {\n            this._padTargets();\n        }\n\n        var keys = this.keys;\n\n        var names = this.attrNames ? this.attrNames : this.attrNames = Object.keys(this.attrTargetLists);\n\n        if (this._loop) {\n\n            time = this._firstKey + (time % this._keyDiff);\n\n        } else {\n\n            if (time <= keys[0]) {\n                this._key1 = 0;\n                this._key2 = 1;\n                this._clampToTarget(names, 0);\n                return true;\n            }\n\n            if (time > keys[keys.length - 1]) {\n                this._key1 = keys.length - 2;\n                this._key2 = this._key1 + 1;\n                this._clampToTarget(names, this.keys.length - 1);\n                return true;\n            }\n        }\n\n        while (keys[this._key1] > time) {\n            this._key1--;\n            this._key2--;\n        }\n\n        while (keys[this._key2] < time) {\n            this._key1++;\n            this._key2++;\n        }\n\n        var attrTargetLists = this.attrTargetLists;\n        var key1 = this._key1;\n        var key2 = this._key2;\n        var targetList;\n        var target1;\n        var val;\n        var attr = this.attr;\n        var updated = false;\n        var i, len, name;\n\n\n        for (i = 0, len = names.length; i < len; i++) {\n\n            name = names[i];\n            targetList = attrTargetLists[name];\n            target1 = targetList[key1];\n            if (typeof target1 !== \"number\") {\n                target1 = target1.value;\n            }\n            if (typeof targetList[key2] === \"number\") {\n                val = lerp(time, keys[key1], keys[key2], target1, targetList[key2]);\n            } else {\n                val = bezier(time, targetList[key2]);\n            }\n\n            attr[name] = val;\n            updated = true;\n        }\n\n        return updated;\n    };\n\n    /**\n     * Sets the output (#attr) to the values of the target at the given index\n     */\n    Human.timeline.TweenAttr.prototype._clampToTarget = function (names, time) {\n        var attr = this.attr;\n        var attrTargetLists = this.attrTargetLists;\n        var attrVal;\n        var i, len, name;\n\n        for (i = 0, len = names.length; i < len; i++) {\n            name = names[i];\n            attrVal = attrTargetLists[name][time];\n            if (typeof attrVal !== \"number\") {\n                attrVal = attrVal.value;\n            }\n            attr[name] = attrVal;\n        }\n    };\n\n    function getCurve(target, time, prevTarget, prevTime) {\n        if (typeof prevTarget !== \"number\") {\n            prevTarget = prevTarget.value;\n        }\n        \n        // generate bezier class\n        var cp = target.controlPoints;\n        var steps = Math.floor((time - prevTime) * 50);\n        \n        // x - t, y - attr value\n        target.bezier = new Human.math.bezier(\n            prevTime, prevTarget, \n            cp.x[0], cp.y[0], \n            cp.x[1], cp.y[1],\n            time, target.value\n            );\n        target.lookUp = target.bezier.getLUT(steps);\n    }\n\n    function lerp(time, key1, key2, target1, target2) {\n        var delta = (time - key1) / (key2 - key1);\n\n        var w = target2 - target1;\n        var offs = delta * w;\n\n        return target1 + offs;\n    }\n\n    // get attr val from bezier curve lookUp\n    function bezier(time, target) {\n        var lookUp = target.lookUp;\n        var low = 0;\n        var high = lookUp.length - 1;\n        var mid, sample1, sample2;\n\n        if (time <= lookUp[low].x) {\n            return lookUp[low].y;\n        }\n\n        if (time >= lookUp[high].x) {\n            return lookUp[high].y;\n        }\n\n        while (low <= high) {\n            mid = Math.floor((low + high) / 2);\n            sample1 = lookUp[mid];\n            sample2 = lookUp[mid + 1];\n\n            if (sample1.x <= time && sample2.x >= time) {\n                return lerp(time, sample1.x, sample2.x, sample1.y, sample2.y);\n            } else if (sample1.x > time) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n    }\n\n})();\n;(function () {\n    \"use strict\";\n\n    var BEFORE = 1;     // Alpha before first key\n    var START = 2;      // At first key\n    var AFTER = 3;     // Alpha after last key\n    var RUNNING = 4;    // Found keys before and after alpha\n\n    /**\n     * A Human.timeline.Switch animates one or more attributes of some target engine element along sequences\n     * of discrete values.\n     *\n     * A Switch is configured with a \"control\", which is a strategy object which which feeds the Switch's output\n     * into the engine element.\n     *\n     * We also configure a Switch with \"targets\", each of which is a set of values to assign to attributes of the\n     * engine element, at some instant in time.\n     *\n     * Example:\n     *\n     * <pre>\n     *     var tween = new Human.timeline.Switch({\n     *\n     *          // Control a Human.scene.object\n     *\n     *          control: new Human.timeline.ObjectControl(),\n     *\n     *          // Sequence of target value sets, in this case each containing values for \"eye\", \"look\" and \"up\"\n     *          // attributes to set on the Human.view.Camera. This will create three Human.utils.LerpAttr instances\n     *          // within this Human.timeline.Switch, each in charge of interpolating one of these three attributes.\n     *\n     *          targets: [\n     *              {\n     *                  eye:  { x: 0, y: 0, z: -100 },\n     *                  look: { x: 0, y: 0, z: 0 },\n     *                  eye:  { x: 0, y: 1, z: 0 }\n     *              },\n     *              {\n     *                  eye:  { x: 10, y: 22, z: -10 },\n     *                  look: { x: 0, y: 0, z: 20 },\n     *                  eye:  { x: 0, y: 1, z: 0 }\n     *              }\n     *          ],\n     *\n     *          // A time for each target\n     *\n     *          keys: [\n     *              0,\n     *              15\n     *          ]\n     *      });\n     * </pre>\n     *\n     *\n     *\n     * @param cfg\n     * @param cfg.keys Time for each target\n     * @param cfg.targets Set of attribute values for each target\n     * @param cfg.control Strategy to set the animated values on target engine element\n     */\n    Human.timeline.Switch = function (cfg) {\n\n        this._keys = cfg.keys;\n        this._targets = cfg.targets;\n        this._control = cfg.control;\n        this._options = cfg.options || {};\n        this._key = 0;\n        this._lastKey = null;\n\n        /**\n         * First key for this tween\n         */\n        this.firstTime = cfg.keys[0];\n\n        /**\n         * Last key for this tween\n         */\n        this.lastTime = cfg.keys[cfg.keys.length - 1];\n    };\n\n    Human.timeline.Switch.prototype.query = function (ctx, time) {\n        this._findTarget(time);\n        return this._targets[this._key];\n    };\n\n    /**\n     * Updates this tween for the given time\n     *\n     * @param {{}} ctx Animation context\n     * @param {Number} time Time in seconds\n     */\n    Human.timeline.Switch.prototype.update = function (ctx, time) {\n\n        var state = this._findTarget(time);\n\n        switch (state) {\n            case BEFORE:\n\n                //this._clampToFrame(0);\n                return;\n\n            case START:\n                break;\n\n            case AFTER:\n                break;\n        }\n\n        // if (this._lastKey !== this._key) {\n        //     this._control.attr = this._targets[this._key];\n        //     this._control.update(ctx);\n        //     this._lastKey = this._key;\n        // }\n\n        // TODO: Check for necessity to change based on attribute comparison NOT on which key fired last\n        // last fired key could have been in another chapter, and visibility is reset each chapter. \n        this._control.attr = this._targets[this._key];\n        this._control.update(ctx);\n        this._lastKey = this._key;\n    };\n\n    /**\n     * Finds the index of the key/target for the given time value\n     * @param time\n     * @returns {number}\n     * @private\n     */\n    Human.timeline.Switch.prototype._findTarget = function (time) {\n\n        if (time < this._keys[0]) {\n            this._key = 0;\n            return BEFORE;\n        }\n\n        if (time === this._keys[0]) {\n            this._key = 0;\n            return START;\n        }\n\n        if (time > this._keys[this._keys.length - 1]) {\n            this._key = this._keys.length - 1;\n            return AFTER;\n        }\n\n        while (this._keys[this._key] > time) {\n            this._key--;\n        }\n\n        while (this._keys[this._key + 1] !== undefined && this._keys[this._key + 1] !== null && this._keys[this._key + 1] < time) {\n            this._key++;\n        }\n\n        return RUNNING;\n    };\n\n})();\n;(function () {\n    \"use strict\";\n\n    /**\n     * Controls the state of {@link Human.renderer.camera}.\n     */\n    Human.timeline.CameraControl = function () {\n\n        /**\n         * Camera attribute values.\n         * These are set by the tween, which subsequently applies them to the camera with a call to #update()\n         */\n        this.attr = {\n            up: { x: 0, y: 1, z: 0 },\n            eye: { x: 0, y: 0, z: 0 },\n            look: { x: 0, y: 0, z: 0 }\n        };\n    };\n\n    /**\n     * Sets this control's attribute values on the target camera\n     * @returns {Boolean} True if the attribute was updated\n     */\n    Human.timeline.CameraControl.prototype.update = function (ctx) {\n\n        // Don't update if camera animation is disabled\n\n        if (ctx.cameraEnabled !== false) {\n            Human.renderer.camera.setLookAt(this.attr);\n            return true;\n        }\n    };\n\n})();\n\n;(function () {\n    \"use strict\";\n\n    /**\n     * Controls the attributes of a material\n     */\n    Human.timeline.MaterialControl = function (params) {\n\n        this._materialId = params.modelId + \"/\" + params.materialId;\n        this.attr = {};\n\n        // Backwards Compatibility: Nested Attribute\n        if (params.attributes.hasOwnProperty(\"attr\")){\n            params.attributes = params.attributes.attr;\n        }\n\n        var attr;\n        /**\n         * Material attribute values.\n         * These are set by the tween, which subsequently applies them to the material with a call to #update()\n         * A Material should be able to have more than one control for different attributes. The desired attribute to control will be registered per instance of the material control.\n         *\n         * Backwards Compatibility:\n         * The engine used to expect all the material properties (color, specular) to be tweened together. It makes more sense to support independent tweening attributes. However, for existing content, we must still support content that includes simultaneous attribute tweens on color and specular.\n         */\n        var defaultBaseColor = {\n             r: 0,\n             g: 0,\n             b: 0,\n             a: 1\n         };\n\n        var defaultSpecularColor = {\n             r: 1.0,\n             g: 1.0,\n             b: 1.0\n         };\n\n        var defaultEmitColor = {\n             r: 0.0,\n             g: 0.0,\n             b: 0.0\n         };\n\n        var defaultAlphaColor = {float:1};\n\n\n        for (attr in params.attributes){\n            if (params.attributes.hasOwnProperty(attr)){\n                if (attr === \"baseColor\"){\n                    this.attr.baseColor = defaultBaseColor;\n                } else if (attr === \"specularColor\") {\n                    this.attr.specularColor = defaultSpecularColor;\n                } else if (attr === \"emitColor\") {\n                    this.attr.emitColor = defaultEmitColor;\n                } else if (attr === \"alphaColor\") {\n                    this.attr.alphaColor = defaultAlphaColor;\n                }\n            }\n        }\n    };\n\n    /**\n     * Sets this control's attribute values on the target material\n     * @returns {Boolean} True if the attribute was updated\n     */\n    Human.timeline.MaterialControl.prototype.update = function () {\n\n        // Lazy-locate the target material\n        // This is here so that we're not dependent on the material being loaded in advance\n\n        var material = Human.assets.materials.materials[this._materialId];\n\n        if (!material) {\n\n            // Material not found\n\n            if (!this._targetMissing) {\n\n                // Warn once only\n\n                Human.log.error(\"Human.timeline.TweenAnimation\", \"'material' tween can't find material: \" + this._materialId);\n                this._targetMissing = true;\n            }\n\n            return;\n        }\n\n        if (material.material) {\n\n            var materialNode = material.material;\n            var attr = this.attr;\n\n            if (attr.baseColor) {\n                materialNode.setBaseColor(attr.baseColor);\n            }\n\n            if (attr.specularColor) {\n                materialNode.setSpecularColor(attr.specularColor);\n            }\n\n            if (attr.emitColor) {\n                materialNode.setEmitColor(attr.emitColor);\n            }\n\n            if (attr.alphaColor) {\n                // not an rgb, but an alpha value\n                materialNode.setAlpha(attr.alphaColor.float);\n            }\n\n            return true;\n        }\n    };\n\n})();\n;(function () {\n    \"use strict\";\n\n    /**\n     * Controls the state of a scene object\n     */\n    Human.timeline.ObjectControl = function (params) {\n\n        var objectIds = null;\n\n        if (params.objectId) {\n            objectIds = [params.objectId];\n        } else {\n            objectIds = params.objectIds;\n        }\n\n        for (var i = 0, len = objectIds.length; i < len; ++i) {\n            var objectId = objectIds[i];\n            if (objectId.indexOf(\".\") < 0 && objectId.indexOf(\"-\") < 0) {\n\n                // Relative ID of object within this model\n                objectIds[i] = params.modelId + \"-\" + objectId;\n\n\n            } // Otherwise absolute ID of object in another model\n        }\n\n        this._objectIds = objectIds;\n\n        this.id = params.id;\n\n        /**\n         * Object attribute values.\n         * These are set by the tween, which subsequently applies them to the object with a call to #update()\n         */\n        this.attr = {\n\n            // A \"virtual attribute\" on the target Object\n\n            attr: {\n            },\n\n            tnt: {  // r, g, b, optionally: x, y, z, rmin, rmax\n            },\n\n            cst: {  // val, optionally: x, y, z, rmin, rmax\n            },\n\n            sat: {  // val, optionally: x, y, z, rmin, rmax\n            },\n\n            brt: {  // val, optionally: x, y, z, rmin, rmax\n            },\n\n            o: {   // opacity: val, optionally: x, y, z, rmin, rmax\n            }\n        };\n    };\n\n    /**\n     * Sets this control's attribute values on the target object\n     */\n    Human.timeline.ObjectControl.prototype.update = function () {\n\n        // Lazy-locate the target object\n        // This is here so that we're not dependent on the object existing in advance\n\n        for (var i = 0, len = this._objectIds.length; i < len; ++i) {\n            var objectId = this._objectIds[i];\n            var object = Human.scene.objects[objectId];\n\n            if (!object) {\n\n                // Object not found\n                // Warn once only\n\n                if (!this._targetMissing) {\n                    Human.log.warn(\"Human.timeline.TweenAnimation\", \"'lerp:objectAttr' tween can't find object: \" + objectId);\n                    this._targetMissing = true;\n                }\n                return;\n            }\n\n            // Don't update the object if there is a currently-active\n            // chapter that makes it invisible\n            var oinchapter = Human.timeline.activeRoot._nowBranch.synchronization[objectId];\n            if (!oinchapter || oinchapter.shown !== false){\n                updateObject(object, this.attr, this.id);\n            }\n        }        \n\n    };\n    \n    var tmpColorModifier = {\n        applyTo: null,\n        value: 0,\n        range: null\n    };\n\n    var tmpOpacityModifier = {\n        value: 0,\n        range: null\n    };\n    /**\n     * Recursively sets attributes on objects in the given subtree\n     */\n    function updateObject(object, updates, tweenId) {\n        var attr = updates.attr;\n        var tnt = updates.tnt;\n        var cst = updates.cst;\n        var sat = updates.sat;\n        var brt = updates.brt;\n        var o = updates.o;\n\n        if (attr) {\n            if (attr.pickable !== undefined) {\n                object.setPickable(attr.pickable);\n            }\n\n            if (attr.opacity !== undefined) {\n                object.setOpacity(attr.opacity);\n            }\n\n            if (attr.shown !== undefined) {\n                Human.timeline.objectVisibilityUpdates[object.objectId] = attr.shown;\n            }\n        }\n\n        if (o && o.val !== undefined) {\n            tmpOpacityModifier.value = o.val;\n            if (o.x !== undefined) {\n                tmpOpacityModifier.range = {\n                    center: [o.x, o.y, o.z],\n                    minRadius: o.rmin,\n                    maxRadius: o.rmax\n                };\n            }\n            object.setOpacityModifier(\"__OPACITY_TWEEN_\" + tweenId, tmpOpacityModifier);\n        }\n\n        if (tnt && tnt.r !== undefined) {\n            tmpColorModifier.applyTo = \"tintColor\";\n            tmpColorModifier.value = [tnt.r, tnt.g, tnt.b];\n            if (tnt.x !== undefined) {\n                tmpColorModifier.range = {\n                    center: [tnt.x, tnt.y, tnt.z],\n                    minRadius: tnt.rmin,\n                    maxRadius: tnt.rmax\n                };\n            }\n            object.setColorModifier(\"__TINT_COLOR_TWEEN_\" + tweenId, tmpColorModifier);\n        }\n\n        if (cst && cst.val !== undefined) {\n            tmpColorModifier.applyTo = \"contrast\";\n            tmpColorModifier.value = cst.val;\n            if (cst.x !== undefined) {\n                tmpColorModifier.range = {\n                    center: [cst.x, cst.y, cst.z],\n                    minRadius: cst.rmin,\n                    maxRadius: cst.rmax\n                };\n            }\n            object.setColorModifier(\"_CONTRAST_TWEEN_\" + tweenId, tmpColorModifier);\n        }\n\n        if (sat && sat.val !== undefined) {\n            tmpColorModifier.applyTo = \"saturation\";\n            tmpColorModifier.value = sat.val;\n            if (sat.x !== undefined) {\n                tmpColorModifier.range = {\n                    center: [sat.x, sat.y, sat.z],\n                    minRadius: sat.rmin,\n                    maxRadius: sat.rmax\n                };\n            }\n            object.setColorModifier(\"__SATURATION_TWEEN_\" + tweenId, tmpColorModifier);\n        }\n\n        if (brt && brt.val !== undefined) {\n            tmpColorModifier.applyTo = \"brightness\";\n            tmpColorModifier.value = brt.val;\n            if (brt.x !== undefined) {\n                tmpColorModifier.range = {\n                    center: [brt.x, brt.y, brt.z],\n                    minRadius: brt.rmin,\n                    maxRadius: brt.rmax\n                };\n            }\n            object.setColorModifier(\"__BRIGHTNESS_TWEEN_\" + tweenId, tmpColorModifier);\n        }\n\n        if (object.objects.length > 0) {\n            var objects = object.objects;\n            for (var i = 0, len = objects.length; i < len; i++) {\n                updateObject(objects[i], updates, tweenId);\n            }\n        }\n    }\n\n})();\n;(function () {\n    \"use strict\";\n\n    /**\n     * Controls a scene object's transform\n     */\n    Human.timeline.ObjectTransformControl = function (params) {\n\n        var objectId = params.objectId;\n        var initial = params.initial;\n\n        if (objectId.indexOf(\".\") < 0 && objectId.indexOf(\"-\") < 0) {\n\n            // Relative ID of object within this model\n            objectId = params.modelId + \"-\" + params.objectId;\n\n        } // Otherwise absolute ID of object in another model\n\n        this._objectId = objectId;\n\n        /**\n         * Object's transform attribute values.\n         * These are set by the tween, which subsequently applies them to the object's transform with a call to #update()\n         */\n\n        var attr = this.attr = {};\n\n        [\"translate\", \"rotate\", \"scale\", \"pivot\"].forEach(function(xform) {\n            var val = xform === \"scale\" ? 1 : 0;\n\n            if (initial[xform] !== undefined) {\n                attr[xform] = {};\n\n                if (initial[xform].x !== undefined) {\n                    attr[xform].x = val;\n                }\n\n                if (initial[xform].y !== undefined) {\n                    attr[xform].y = val;\n                }\n\n                if (initial[xform].z !== undefined) {\n                    attr[xform].z = val;\n                }\n            }\n        });\n    };\n\n    /**\n     * Sets this control's attribute values on the target object's transform\n     */\n    Human.timeline.ObjectTransformControl.prototype.update = function () {\n\n        // Lazy-locate the target object\n        // This is here so that we're not dependent on the object existing in advance\n\n        var object = Human.scene.objects[this._objectId];\n\n        if (!object) {\n\n            // Object not found\n            // Warn once only\n\n            if (!this._targetMissing) {\n                Human.log.warn(\"Human.timeline.ObjectTransformControl\", \"Can't find object: \" + this._objectId);\n                this._targetMissing = true;\n            }\n\n            return;\n        }\n\n        // Don't update the object if there is a currently-active\n        // chapter that makes it invisible\n        //TODO: Do we need to prevent transform update if object is not shown?\n        // var shown = Human.timeline.showObjects[this._objectId];\n        var shown = true;\n        if (shown !== undefined && shown !== null && shown !== true) {\n            return;\n        }\n\n        object.setTransform(this.attr);\n    };\n\n})();\n;(function () {\n    \"use strict\";\n\n    /**\n     * Manipulates the texture of a material in a Material Module\n     */\n    Human.timeline.TextureControl = function (params) {\n\n        this._material = params.modelId + \"/\" + params.materialId;\n\n        if (params.targetLayer === undefined || params.targetLayer === null) {\n            Human.log.error(\"Human.timeline.TweenAnimation\", \"'texture' tween attribute expected: 'targetLayer'\");\n            return;\n        }\n\n        this._targetLayer = params.targetLayer;\n\n        /**\n         * Material texture layer attribute values.\n         * These are set by the tween, which subsequently applies them to the texture layer with a call to #update()\n         */\n        this.attr = {\n            rotate: {z: 0},\n            translate: {x: 0, y: 0},\n            scale: {x: 1, y: 1},\n            blend: {factor: 1.0}\n        };\n    };\n\n    /**\n     * Sets this control's attribute values on the target material's texture\n     */\n    Human.timeline.TextureControl.prototype.update = function () {\n\n        // Lazy-locate the target material\n        // This is here so that we're not dependent on the material being loaded in advance\n\n        var material = Human.assets.materials.materials[this._material];\n\n        if (!material) {\n\n            // Material not found\n            // Warn once only\n\n            if (!this._targetMissing) {\n                Human.log.error(\"Human.timeline.TweenAnimation\", \"'material' tween can't find material: \" + this._material);\n                this._targetMissing = true;\n            }\n\n            return;\n        }\n\n        // Update the material texture layer\n\n        var textures = material.textures;\n\n        if (this._targetLayer >= 0 && this._targetLayer < textures.length) {\n\n            var texture = textures[this._targetLayer];\n            var attr = this.attr;\n\n            if (attr.scale) {\n                texture.setScale(attr.scale);\n            }\n\n            if (attr.translate) {\n                texture.setTranslate(attr.translate);\n            }\n\n            if (attr.rotate !== undefined && attr.rotate !== null) {\n                texture.setRotate(attr.rotate.z);\n            }\n\n            if (attr.blend !== undefined && attr.blend !== null) {\n                texture.setBlendFactor(attr.blend.factor);\n            }\n        }\n    };\n\n\n})();\n;(function () {\n    \"use strict\";\n\n    /**\n     * Controls the attributes of a material\n     */\n    Human.timeline.FresnelControl = function (params) {\n\n        this._materialId = params.modelId + \"/\" + params.materialId;\n        this._fresnelType = params.fresnelType;\n\n        // Backwards Compatibility: Convert baseFresnel to colorFresnel\n        if (this._fresnelType === \"baseFresnel\"){\n            this._fresnelType = \"colorFresnel\";\n        }\n\n        // Fresnel attribute values.\n        // These are set by the tween, which subsequently applies them to the fresnel with a call to #update()\n        //\n        this.attr = {\n            bias: {\n                edge: 0.0,\n                center: 0.7,\n                power: 1.0\n            },\n            edge: {\n                r: 0.8,\n                g: 0.7,\n                b: 0.7\n            },\n            center: {\n                r: 0.05,\n                g: 0.05,\n                b: 0.09\n            }\n        };\n    };\n\n    /**\n     * Sets this control's attribute values on the target material\n     * @returns {Boolean} True if the attribute was updated\n     */\n    Human.timeline.FresnelControl.prototype.update = function () {\n\n        if (!this._fresnel) {\n\n            // Lazy-locate the target material\n            // This is here so that we're not dependent on the material being loaded in advance\n\n            var material = Human.assets.materials.materials[this._materialId];\n\n            if (!material) {\n\n                // Material not found\n\n                if (!this._materialMissing) {\n\n                    // Warn once only\n\n                    Human.log.error(\"Human.timeline.TweenAnimation\", \"'material' tween can't find material: \" + this._materialId);\n                    this._materialMissing = true;\n                }\n\n                return;\n            }\n\n\n            // Get color channel, eg \"emitFresnel\" -> \"emit\"\n            var type = this._fresnelType.length <= 7 ? this._fresnelType : this._fresnelType.substring(0, this._fresnelType.length - 7);\n\n            this._fresnel = material.fresnels[type];\n\n            if (!this._fresnel) {\n\n                // Fresnel not found\n\n                if (!this._fresnelMissing) {\n\n                    // Warn once only\n\n                    Human.log.error(\"Human.timeline.TweenAnimation\", \"'material' tween can't find fresnel type: \" + this._fresnelType);\n                    this._fresnelMissing = true;\n                }\n\n                return;\n            }\n        }\n\n        // TODO: Avoid needlessly resetting each attribute?\n\n        var bias = this.attr.bias;\n\n        this._fresnel.setEdgeBias(bias.edge);\n        this._fresnel.setCenterBias(bias.center);\n        this._fresnel.setPower(bias.power);\n        this._fresnel.setEdgeColor(this.attr.edge);\n        this._fresnel.setCenterColor(this.attr.center);\n\n        return true;\n    };\n\n})();\n;(function() {\n  \"use strict\";\n\n  /**\n   * Use the tweenParticleLookup calculated in the web app to locate\n   * the particle system of interest.  See `merge-particle-systems.ts` in human-studio-next for more info.\n   */\n  Human.timeline.tweenParticleLookup = function(particleSystemId) {\n    var activeChapterId = Human.timeline.activeRoot._nowBranch.id;\n    var activeModules = Object.keys(Human.modules.moduleData);\n\n    // There's currently behavior where multiple modules can be active at the same time\n    // This occurs when saving a module to a bookmark for the first time.\n    // assume the last module.\n    var activeModuleId = activeModules[activeModules.length - 1];\n    var lookup = Human.modules.moduleData[activeModuleId].tweenParticleLookup;\n\n    var id = lookup && lookup[activeChapterId] && lookup[activeChapterId][particleSystemId] ? lookup[activeChapterId][particleSystemId] : particleSystemId;\n\n    // We also need to have a fallback for data using the previous particle Id merging scheme (prepending chapter Ids)\n    // Once all the data is properly migrated to using TweenParticleLookups, then this code can be removed.\n    var legacyId = Human.timeline.activeRoot._nowBranch.id + \"/\" + id;\n    var ps = Human.particles.systems[id] || Human.particles.systems[legacyId];\n    \n    return ps;\n  };\n\n})();;(function () {\n    \"use strict\";\n\n    /**\n     * Controls the state of a scene object\n     */\n    Human.timeline.ParticleSystemControl = function (params) {\n\n        this.particleSystemId = params.particleSystemId;\n\n        /**\n         * Object attribute values.\n         * These are set by the tween, which subsequently applies them to the object with a call to #update()\n         */\n        this.attr = {\n\n            attr: {\n            }\n            \n        };\n\n        this._targetMissing = false;\n    };\n\n    /**\n     * Sets this control's attribute values on the target object\n     */\n    Human.timeline.ParticleSystemControl.prototype.update = function () {\n\n        // Lazy-locate the target object\n        // This is here so that we're not dependent on the object existing in advance\n        var ps = Human.timeline.tweenParticleLookup(this.particleSystemId);\n\n\n        if (!ps) {\n            // Object not found\n            // Warn once only\n            if (!this._targetMissing) {\n                Human.log.warn(\"ParticleSystemControl: can't find system: \", this.particleSystemId);\n                this._targetMissing = true;\n            }\n            return;\n        }\n\n        var attr = this.attr.attr;\n\n        // Don't update the object if there is a currently-active\n        // chapter that makes it invisible\n        if (ps.enabled && attr) {\n            if (attr.emissionAverage !== undefined) {\n                ps.emissionAverage = attr.emissionAverage;\n            }\n\n            if (attr.emissionVariance !== undefined) {\n                ps.emissionVariance = attr.emissionVariance;\n            } \n        }\n    };\n\n})();\n;(function () {\n    \"use strict\";\n\n    var tempVec3 = vec3.create();\n    var tempVec3b = vec3.create();\n\n    /**\n     * Controls the state of a scene object\n     */\n    Human.timeline.ParticleComponentControl = function (params) {\n\n        this.particleSystemId = params.particleSystemId;\n        this.componentId = params.componentId;\n\n        /**\n         * Object attribute values.\n         * These are set by the tween, which subsequently applies them to the object with a call to #update()\n         */\n        this.attr = {\n\n            attr: {\n            },\n\n            position: {\n            },\n\n            translate: {\n            },\n\n            scale: {\n            },\n\n            rotate: {\n            },\n\n            directionAverage: {\n            },\n\n            shapeTranslate: {\n            },\n\n            shapeScale: {\n            },\n\n            shapeRotate: {\n            }\n        };\n\n        this._targetMissing = false;\n    };\n\n    /**\n     * Sets this control's attribute values on the target object\n     */\n    Human.timeline.ParticleComponentControl.prototype.update = function () {\n\n        // Lazy-locate the target object\n        // This is here so that we're not dependent on the object existing in advance\n\n        var ps = Human.timeline.tweenParticleLookup(this.particleSystemId);\n\n        if (!ps) {\n\n            // Object not found\n            // Warn once only\n\n            if (!this._targetMissing) {\n                Human.log.warn(\"ParticleComponentControl: can't find system: \", this.particleSystemId);\n                this._targetMissing = true;\n            }\n            return;\n        }\n\n        var component = ps.components[this.componentId];\n\n        if (!component) {\n\n            // Object not found\n            // Warn once only\n\n            if (!this._targetMissing) {\n                Human.log.warn(\"ParticleComponentControl: can't find component: \" + this.componentId);\n                this._targetMissing = true;\n            }\n            return;\n        }\n\n        var shape = component.shape;\n\n        // Don't update the object if there is a currently-active\n        // chapter that makes it invisible\n        if (ps.enabled) {\n            var attr = this.attr.attr;\n            var position = this.attr.position;\n            var translate = this.attr.translate;\n            var scale = this.attr.scale;\n            var rotate = this.attr.rotate;\n            var directionAverage = this.attr.directionAverage;\n            var shapeTranslate = this.attr.shapeTranslate;\n            var shapeRotate = this.attr.shapeRotate;\n            var shapeScale = this.attr.shapeScale;\n\n            if (attr) {\n\n                if (attr.average !== undefined) {\n                    component.average = attr.average;\n                }\n\n                if (attr.variance !== undefined) {\n                    component.variance = attr.variance;\n                }\n\n                if (attr.forceAverage !== undefined) {\n                    component.forceAverage = attr.forceAverage;\n                }\n\n                if (attr.forceVariance !== undefined) {\n                    component.forceVariance = attr.forceVariance;\n                }\n\n                if (attr.frequency !== undefined) {\n                    component.frequency = attr.frequency;\n                }\n\n                if (attr.friction !== undefined) {\n                    component.friction = 1 - attr.friction;\n                }\n\n                if (attr.radius !== undefined) {\n                    component.radius = attr.radius;\n                }\n\n                if (attr.directionVariance !== undefined) {\n                    component.directionVariance = attr.directionVariance;\n                }\n            }\n\n            if (position && position.x !== undefined) {\n                tempVec3[0] = position.x;\n                tempVec3[1] = position.y;\n                tempVec3[2] = position.z;\n                component.position.set(tempVec3);\n            }\n\n            if (translate && translate.x !== undefined) {\n                tempVec3[0] = translate.x;\n                tempVec3[1] = translate.y;\n                tempVec3[2] = translate.z;\n                component.translate.set(tempVec3);\n            }\n\n            if ((scale || rotate) && component.xform) {\n                var scaleVec = null;\n                var rotateVec = null;\n\n                if (scale && scale.x !== undefined) {\n                    scaleVec = tempVec3;\n                    scaleVec[0] = scale.x;\n                    scaleVec[1] = scale.y;\n                    scaleVec[2] = scale.z;\n                }\n\n                if (rotate && rotate.x !== undefined) {\n                    rotateVec = tempVec3b;\n                    rotateVec[0] = rotate.x;\n                    rotateVec[1] = rotate.y;\n                    rotateVec[2] = rotate.z;\n                }\n\n                Human.math.buildRotationScaleMat3(component.xform, rotateVec, scaleVec);\n            }\n\n            if (directionAverage && directionAverage.x !== undefined) {\n                tempVec3[0] = directionAverage.x;\n                tempVec3[1] = directionAverage.y;\n                tempVec3[2] = directionAverage.z;\n                vec3.normalize(component.directionAverage, tempVec3);\n            }\n\n            if (shape) {\n\n                if (shapeTranslate && shapeTranslate.x !== undefined) {\n                    tempVec3[0] = shapeTranslate.x;\n                    tempVec3[1] = shapeTranslate.y;\n                    tempVec3[2] = shapeTranslate.z;\n                    shape.translate.set(tempVec3);\n                }\n\n                if (shapeRotate && shapeRotate.x !== undefined) {\n                    tempVec3[0] = shapeRotate.x;\n                    tempVec3[1] = shapeRotate.y;\n                    tempVec3[2] = shapeRotate.z;\n                    shape.rotate.set(tempVec3);\n                }\n\n                if (shapeScale && shapeScale.x !== undefined) {\n                    tempVec3[0] = shapeScale.x;\n                    tempVec3[1] = shapeScale.y;\n                    tempVec3[2] = shapeScale.z;\n                    shape.scale.set(tempVec3);\n                }\n\n                shape.updateXform();\n            }\n\n        }\n    };\n\n})();\n;/** Leaf timeline\n * Direct controller of animation assets (morphs and tweens)\n * Animations can come from model (state folder) or tween/morph creator functions.\n * Free Animations will be registered here, but played/updated by root.\n * Options to ignore animated camera.\n */\n(function(){\n    \"use strict\";\n\n    var Leaf = Human.timeline.LeafTimeline = function (name, params) {\n        \n        var self = this;\n        params = params || {};\n        self.level = \"leaf\";\t\t\t     // Identifies the kind of timeline\n        self.id = name;                // use required 'name' arguemnt\n        self.animations = {};          // all animations (free and timeline)\n        self.timelineAnimations = {};  // controlled by branch timelines\n        self.freeAnimations = {};\t\t   // always update on tick.\n        self.cameraTween = null;       // Null or first camera tween in animations.\n\n        //Camera Controls\n        self.animationCtx = {\n            cameraEnabled: true\t\t\t//Default is to allow animation camera tweens to play if present\n        };\n\n        //Register With Timeline Controller\n        Human.timeline.leafTimelines[self.id] = self;\n    };\n\n    /**\n     * Attaches animation to leaf.\n     * Animation object is a collection of tween/morph objects\n     */\n    Leaf.prototype.addAnimation = function (animationId, animation) {\n        var self = this;\n        // Validate\n        if (!animation) {\n            Human.log.error(\"LeafTimeline.addAnimation\", \"null or undefined animation object\");\n            return;\n        }\n\n        if (!animation.update) {\n            //All animations must come with update() function\n            Human.log.error(\"LeafTimeline.addAnimation\", \"Param expected: update\");\n            return;\n        }\n\n        // Replace and attach\n        if (self.animations[animationId]) {\n            self.removeAnimation(animationId);\n        }\n        self.animations[animationId] = animation;\n\n\n        // Attach to free or timeline\n        if (animation.timeline === false) {\n            // Free\n            self.freeAnimations[animationId] = animation;\n\n        } else {\n            // Controlled\n            self.timelineAnimations[animationId] = animation;\n        }\n\n        //Look for and register first camera tween object\n        if (!self.cameraTween) {\n\n            var found = false;\n            var i;\n            var len;\n            var tweens = animation._tweens || [];\n            var tween;\n            var CameraControl = Human.timeline.CameraControl;\n\n            for (i = 0, len = tweens.length; i < len && !found; i++) {\n                tween = tweens[i];\n                if (tween._control) {\n                    if (tween._control instanceof CameraControl) {\n                        found = true;\n                        self.cameraTween = tween;\n                    }\n                }\n            }\n        }\n\n        Human.events.fire(\"Timeline.Loaded\");\n    };\n\n    /**\n     * Destroy animation (all tweens/morphs associated)\n     */\n    Leaf.prototype.removeAnimation = function (animationId) {\n        var self = this;\n        var animation = self.animations[animationId];\n\n        // Validate\n        if (!animation) {\n            Human.log.warn(\"Human.timeline.LeafTimeline.removeAnimation\", \"Animation not found: \" + animationId);\n            return;\n        }\n\n\n        // Remove from free and controlled collections\n        if (animationId in self.freeAnimations) {\n            delete self.freeAnimations[animationId];\n        } else {\n            delete self.timelineAnimations[animationId];\n        }\n        delete self.animations[animationId];\n\n        // Destroy animaton (tween/morph prototype function)\n        if (animation.destroy) {\n            animation.destroy();\n        }\n    };\n\n    /**\n     * Returns maximum time frame in the collection of animations.\n     */\n    Leaf.prototype.getTimeFrame = function () {\n        var self = this;\n        var anyAnimations = false;\n        var max = 0;\n        var timeFrame;\n        var lastTime;\n        var timelineAnimations = self.timelineAnimations; // OPTIMIZATION: avoid dereference each iteration\n\n        // Count all controlled Animations\n        for (var animationId in  timelineAnimations) {\n            if (timelineAnimations.hasOwnProperty(animationId)) {\n\n                anyAnimations = true;\n                lastTime = timelineAnimations[animationId].lastTime;\n                max = Math.max(max, lastTime);\n            }\n        }\n\n        // Result\n        timeFrame = {\n            firstTime: 0.0,\n            lastTime: max\n        };\n\n        return timeFrame;\n    };\n\n    /**\n     * Calls the update() function on all constituent timelines for the passed time.\n     * @param boolean cameraEnabled  Whether to play camera tween or not\n     */\n    Leaf.prototype.update = function (cameraEnabled, time, params) {\n        var self = this;\n        params = params || {};\n\n        // Defaults to play camera tween unless told not to.\n        var ctx = {\n            cameraEnabled: cameraEnabled === false ? cameraEnabled : self.animationCtx.cameraEnabled\n        };\n\n        var timelineAnimations = self.timelineAnimations; // OPTIMIZATION: avoid dereference each iteration\n        var animation;\n\n        // Update all timeline Animations to given time\n        for (var animationId in timelineAnimations) {\n            if (timelineAnimations.hasOwnProperty(animationId)) {\n\n                //TODO: patch to make up for dynamic camera tweens having different update interface\n                animation = timelineAnimations[animationId];\n\n                if (animation.type === \"lerp:camera\") {\n                    //tween returned by flyTo() function -- dynamic tween\n                    animation.update(time);\n                } else {\n                    animation.update(ctx, time);\n                }\n            }\n        }\n    };\n\n    /** Remove references to Animations\n     */\n    Leaf.prototype.destroy = function () {\n        var self = this;\n        self.animations = {};\n        self.freeAnimations = {};\n        self.timelineAnimations = {};\n        self.cameraTween = null;\n        delete Human.timeline.leafTimelines[self.id];\n    };\n\n    /* Unload Animation type from\n     */\n    Leaf.prototype.unload = function(assetType) {\n        var self = this;\n        var targetType = (assetType===\"tweens\")? Human.timeline.TweenAnimation: Human.assets.morphs.Animation;\n        var animationId;\n        for (animationId in self.animations){\n            if (self.animations.hasOwnProperty(animationId)){\n                if (self.animations[animationId] instanceof targetType){\n                    delete self.animations[animationId]; // delete here\n                    Human.timeline.removeAnimation(animationId); // delete from timeline\n                }\n            }\n        }\n\n    };\n\n    /** Get camera of timeline at specific time\n     * Leaf timelines should only have one or zero cameras\n     * Returns camera info at time t if camera exists otherwise null.\n     */\n    Leaf.prototype.getCamera = function (time) {\n        var self = this;\n        if (self.cameraTween === null || self.cameraTween === undefined) {\n            return null;\n        }\n        return self.cameraTween.query(self.cameraTween._control, time);\n    };\n\n})();\n;/** Branch timeline\n * Branch timelines control updates to leaf timelines.\n * Can reference as many leaf-timelines as desired.\n * Should not map to two-different times on the same leaf.\n * INITIALIZATION - Special Handling of First Update to ensure all branches are independent.\n *    - Connfigurable initialization with default to clear and start with chapter data.\n *\n * Concerns:\n *    - Camera Animation:\n *      Engine can only handle one camera tween because there is only one Camera\n *      object. Theoretically, however, each branch map can point to one\n *      or more leaftimlines with a camera path. We currently have to stick with\n *      one; arbitrarily chosen to be the first one encountered.\n *      TODO: Tack and Obey \"timeline.chapterCameraPath\" property.\n *\n * TODO: Make this inherit from \"chapter\" data object?\n*/\n\n// unpack chapter data lights to the map of light-ids to be turned on.\nfunction unpackChapterLights(lightData){\n    /*\n    This allows us to keep shared lights belonging to a shared library\n    separate from the lights defined locally.\n    */\n    \"use strict\";\n    var lightConfig = {};\n    var i=0,j=0;\n    var libId, assetLibs = Human.assets.lights.lightIds;\n    var defaults = Human.renderer.lights.defaultLightIds;\n    // individual lights\n    if (lightData.lights.length){\n        for (i=0; i<lightData.lights.length; i++) {\n            lightConfig[lightData.lights[i]] = true;\n        }\n    }\n\n    // light libraries unpacked to individual lights\n    if (lightData.libraries.length){\n        for (i=0; i<lightData.libraries.length; i++){\n            libId = lightData.libraries[i];\n            if (assetLibs.hasOwnProperty(libId)){\n                for (j=0; j<assetLibs[libId].length; j++){\n                    lightConfig[assetLibs[libId][j]] = true;\n                }\n            } else if (libId === \"default\"){\n                for (j=0; j<defaults.length; j++){\n                    lightConfig[defaults[j]] = true;\n                }\n            }\n        }\n    }\n    return lightConfig;\n}\n\n(function(){\n    \"use strict\";\n\n    ///// BUG: see https://github.com/biodigital-human/human-studio-next/pull/590\n    Human.timeline.forceRefreshLightsForChapter = function(chapterLights) {\n        Human.renderer.lights.clearEnabled();\n        var unpacked = unpackChapterLights(chapterLights);\n        Human.renderer.lights.setEnabled(unpacked);\n    };\n    /////\n\n    var Branch = Human.timeline.BranchTimeline = function(humanChapter) {\n        var self = this;  // self refers to a specific chapter branch timeline object.\n        self._onEndOptions = [\"loop\", \"freeze\"]; //options for any constituent timelines after it has ended\n        self.level = \"branch\";\n        self.timeRange = null;\n\n        self.id = humanChapter.id;\n        self.maps = {};                    // Unique map components to map from branch timeline to child timelines - for animations\n        humanChapter.timelineMap.forEach(function(map, idx){\n          self.makeMapComponent(map, idx);\n        });\n\n        self.media = {};\n        for (var clipMap in humanChapter.media){\n            if (humanChapter.media.hasOwnProperty(clipMap)){\n                self.addClip(clipMap, humanChapter.media[clipMap]);\n            }\n        }\n\n        //TODO[PostRelease] - group info fields into single info object in humanChapter\n        self.info = {\n            displayName: humanChapter.displayName || \"\",\n            description: humanChapter.description || \"\"\n        };\n        self.synchronization = humanChapter.synchronization;\n        self.properties = humanChapter.properties || {};\n        self.annotations = humanChapter.annotations || [];\n        self.hotspots = humanChapter.hotspots || [];\n\n        // NOTE(Tarek): Don't support alphaToCoverage via content yet.\n        if (humanChapter.transparencyMode === \"alphaToCoverage\") {\n            humanChapter.transparencyMode = null;\n        }\n\n        self.transparencyMode = humanChapter.transparencyMode || \"alpha\";\n\n        if (self.transparencyMode === \"weightedOIT\" && !SceneJS.WEBGL_INFO.floatTexturesSupported) {\n            self.transparencyMode = humanChapter.fallbackTransparency || \"alpha\";\n        }\n\n        // View Modes: xray, single/multi-pick, dissect, isolate\n        self.viewModes = humanChapter.viewModes || {};\n\n        // TODO[PostRelease] - group options into options block in humanChapter\n        self.options = humanChapter.options || {};\n        if (humanChapter.hasOwnProperty(\"xray\")){\n          self.viewModes.xray = humanChapter.xray;\n        }\n\n        self.camera = {};\n        // TODO[PostRelease] - redefine humanChapter.camera to be action/location/screenPan in the data\n        if (humanChapter.camera){\n            self.camera = humanChapter.camera;\n        }\n        else {\n            if (humanChapter.jumpTo){\n                self.camera.action = \"jumpTo\";\n                self.camera.location = humanChapter.jumpTo;\n                if (humanChapter.jumpTo.hasOwnProperty(\"screenPan\")){\n                  self.camera.screenPan = humanChapter.jumpTo.screenPan;\n                }\n                if (humanChapter.jumpTo.hasOwnProperty(\"rotationCenter\")){\n                  self.camera.rotationCenter = humanChapter.jumpTo.rotationCenter;\n                }\n            } else if (humanChapter.flyTo) {\n                self.camera.action = \"flyTo\";\n                self.camera.location = humanChapter.flyTo;\n                if (humanChapter.flyTo.hasOwnProperty(\"screenPan\")){\n                  self.camera.screenPan = humanChapter.flyTo.screenPan;\n                }\n                if (humanChapter.flyTo.hasOwnProperty(\"rotationCenter\")){\n                  self.camera.rotationCenter = humanChapter.flyTo.rotationCenter;\n                }\n            }\n            if (humanChapter.options && humanChapter.options.screenPan){\n                self.camera.screenPan = humanChapter.options.screenPan;\n            } else if (humanChapter.hasOwnProperty(\"screenPan\")){\n                self.camera.screenPan = humanChapter.screenPan;\n            }\n        }\n\n        //TODO[PostRelease] - group animation options into animation block in humanChapter\n        self.animation = {\"loop\":false};\n        if (humanChapter.loop){\n            self.animation.loop = true;\n        }\n\n        //TODO[PostRelease] - should we copy default background to chapter background if not defined?\n        self.background = humanChapter.background || {};\n\n        // Clipping Planes\n        self.clippingPlanes = humanChapter.clippingPlanes || {};\n        self.effects = humanChapter.effects;\n\n        // Per-Chapter UI configuration\n        self.ui = humanChapter.ui || {};\n\n        // Per-Chapter lighting\n        self.lights = humanChapter.lights; // data format\n\n        var environment = humanChapter.environment || humanChapter; // TODO: Why some chapters wrap the cubemaps in 'environment' and not others?\n\n        // Per-Chapter reflections\n        if (environment.reflectionMap && environment.reflectionMap.length > 0) {\n            self.reflection = environment.reflectionMap[0];\n        }\n\n        // Per-Chapter light maps\n        if (environment.lightMap && environment.lightMap.length > 0) {\n            self.lightmap = environment.lightMap[0];\n        }\n\n        // Per-Chapter Graph\n        self.graph = humanChapter.graph || {};\n\n        // Bookkeeping Variables - track initialization progress\n        self.firstUpdate = true;          // on first update we want to force the camera into correct position\n        self.initializedCamera = false;\n        self.initializedAnnotations = false;\n        self.initializedProperties = false;\n        self.initializedGraph = false;\n        self.initializedHotspots = false;\n        self.initializedParticles = false;\n        self.initializedClippingPlanes = false;\n        self.initializedPostprocess = false;\n        self.initializedTransparencyMode = false;\n\n        // Custom Data\n        self.customData = humanChapter.customData || {};\n\n        // Particles TODO[EM] Add Particles to spec\n        self.particleSystems = self.customData.particleSystems || [];\n        self.ssaa = !!self.customData.ssaa;\n\n        self.postprocess = self.customData.postprocess || [];\n\n        if (window.localContentOnly) {\n            self.postprocess.push({\"effect\":\"fxaa\"});\n        }\n\n        // Translations for displayName and description\n        self.translations = self.translations || {};\n\n        //Register with Timeline\n        Human.timeline.branchTimelines[self.id] = self;\n    };\n\n    // Branch Media Clips\n    Branch.prototype.addClip = function (clipMap, clip) {\n        var self = this;\n        if (self.media.hasOwnProperty(clipMap)) {\n            delete self.media[clipMap];\n        }\n\n        // NOTE[EM] - fullUrl is a require clip property\n        // if (!clip.hasOwnProperty(\"fullUrl\")){\n        //     clip.fullUrl = Human.media[clip.streamType].clips[clip.clipId].fullUrl;\n        // }\n\n        var mclip = {\"data\": clip, \"published\": false};\n\n        mclip.publish = function () {\n            Human.events.fire(clip.streamType + \".suggestedClipInfo\", this.data);\n            Human.events.fire(clip.streamType + \".suggestedClips\", [this.data.clipId], true);\n            this.published = true;\n        };\n\n        mclip.update = function (time) {\n            if (this.data.time1 <= time && time <= this.data.time2) {\n                if (!this.published) {\n                    this.publish();\n                }\n            }\n        };\n\n        self.media[clipMap] = mclip;\n\n    };\n\n    // Branch Timeline Maps\n    Branch.prototype.makeMapComponent = function (mapData, idx) {\n        var self = this;\n        var map = {};\n        map.mapId = mapData.data.timeline + \"_\" + idx;\n        map.start = mapData.start;\n        map.end = mapData.end;\n        map.data = mapData.data;\n\n        if (Human.timeline.leafTimelines.hasOwnProperty(mapData.data.timeline)){\n          map.data.timeline = Human.timeline.leafTimelines[mapData.data.timeline];\n        } else {\n          var _leaf = new Human.timeline.LeafTimeline(mapData.data.timeline);\n          // map.data.timeline = Human.timeline.leafTimelines.dummy;\n          map.data.timeline = _leaf;\n        }\n\n        // Create mapping function childTime = f(branchTime) : map.calcChildTime()\n        var m;\n        var b;\n        if (map.data.fit) {\n            // y = mx+b;\n            var dy = map.data.end - map.data.start;\n            var dx = map.end - map.start;\n            m = dy / dx;\n            b = map.data.start;\n            map.calcChildTime = function (branchTime) {\n                return m * (branchTime - map.start) + b;\n            };\n        }\n        else {\n            //y = mx + b;  x can be offset by where in time the map starts.\n            m = 1.0;    //by definition\n            b = map.data.start;\n            if (map.data.onEnd === \"freeze\") {\n                map.calcChildTime = function (branchTime) {\n                    var y = m * (branchTime - map.start) + b;\n                    return Math.min(y, map.data.end);\n                };\n            }\n            else if (map.data.onEnd === \"loop\") {\n                map.calcChildTime = function (branchTime) {\n                    //SawTooth Function\n                    var period = map.data.end - map.data.start;\n                    var x = (branchTime - map.start);\n                    return x - (period * Math.floor(x / period)) + b;\n                };\n            }\n            else {\n                Human.log.warn(\"WARNING: invalid onEnd property for branch timeline map data.\");\n            }\n        }\n\n        self.maps[map.mapId] = map;\n\n        self.timeRange = self.getTimeFrame(); // update time range in case new map has changed it.\n    };\n\n    // Get All Branch Audio Clips\n    Branch.prototype._getAudio = function () {\n        var self = this;\n        var audioClips = [];\n        for (var clipId in self.media) {\n            if (self.media.hasOwnProperty(clipId)) {\n                if (self.media[clipId].data.streamType === \"audio\") {\n                    audioClips.push(self.media[clipId].data);\n                }\n            }\n        }\n        return audioClips;\n    };\n\n    // Get start and end time of the entire branch\n    Branch.prototype.getTimeFrame = function () {\n        var self = this;\n        var longestTime = 0.0;\n        for (var amapId in self.maps) {\n            if (self.maps.hasOwnProperty(amapId) && self.maps[amapId].end > longestTime) {\n                longestTime = self.maps[amapId].end;\n            }\n        }\n        if (longestTime === 0.0) {\n            longestTime = 2.0;//Default time frame.\n        }\n        var _timeFrame = {\n            firstTime: 0.0,\n            lastTime: longestTime\n        };\n        return _timeFrame;\n    };\n\n    // Get Camera Eye/Look/Up Location data\n    Branch.prototype.getCamera = function (time) {\n        var self = this;\n        if (time === \"end\") {\n            time = self.getTimeFrame().lastTime;\n        } else if (time === \"start\") {\n            time = 0.0;\n        }\n\n        // If camera is tweened query the camera tween: Return eye/look/up\n        var cameraLocation = self.getAnimatedCamera(time);\n        if (cameraLocation) {\n            cameraLocation.screenPan = cameraLocation.screenPan || self.options.screenPan;\n            return cameraLocation;\n        }\n\n        // If chapter has camera property\n        if (!Human.utils.isEmpty(self.camera)) {\n            cameraLocation = self.camera.location;\n            cameraLocation.screenPan = self.options.screenPan;\n            return cameraLocation;\n        }\n\n        // Otherwise Use Default\n        var defaultCamera = Human.renderer.camera._startcamera; //Fallback if no other methods found\n        defaultCamera.screenPan = self.options.screenPan;\n        return defaultCamera;\n    };\n\n    // Get the Eye/Look/Up from Camera tween, Null if DNE\n    Branch.prototype.getAnimatedCamera = function (time) {\n        var self = this;\n        var timeRange = self.getTimeFrame();\n\n        //cast time\n        if (time === \"start\" || time < timeRange.startTime) {\n            time = timeRange.startTime;\n        } else if (time === \"end\" || time === \"last\" || time > timeRange.lastTime) {\n            time = timeRange.lastTime;\n        }\n\n        var cameraMap = self.whichCameraMap(0);\n\n        if (cameraMap === null || cameraMap === undefined) {\n            return null;\n        } else if (time >= cameraMap.start && time <= cameraMap.end) {\n            var childTimeline = cameraMap.data.timeline;\n            var childtime = cameraMap.calcChildTime(time);\n            var camera = childTimeline.getCamera(childtime);\n            if (camera !== null && camera !== undefined) {\n                return camera;\n            }\n        } else {\n            return null;\n        }\n    };\n\n    Branch.prototype.whichCameraMap = function (time) {\n        var self = this;\n        var targetMaps = self.whichMaps(time);\n        var idx;\n        for (idx=0; idx<targetMaps.length; idx++){\n            if (!!targetMaps[idx].map.data.timeline.cameraTween){\n                return targetMaps[idx].map;\n            }\n        }\n        //return null if current branch does not have an animated camera tween in its data\n        return null;\n    };\n\n    Branch.prototype.reset = function () {\n        var self = this;\n        self.firstUpdate = true;\n        self.initializedGraph = false;\n        self.initializedCamera = false;\n        self.initializedHotspots = false;\n        self.initializedProperties = false;\n        self.initializedAnnotations = false;\n        self.initializedParticles = false;\n        self.initializedClippingPlanes = false;\n        self.initializedPostprocess = false;\n        self.initializedTransparencyMode = false;\n\n        // Reset media objects\n        var media = self.media;\n        var key;\n        var mediaObj;\n\n        // VERIFY: I'm assuming that each item in self.media is an object with a 'published' property\n        for (key in media) {\n            if (media.hasOwnProperty(key)) {\n                mediaObj = media[key];\n                mediaObj.published = false;\n            }\n        }\n    };\n\n    Branch.prototype.whichMaps = function (time) {\n        var self = this;\n        var theMapIds = [];\n        var result = [];\n\n        if (time === \"start\") {\n            time = 0.0;\n        } else if (time === \"end\") {\n            time = self.getTimeFrame().lastTime;\n        }\n\n\n        for (var mapId in self.maps) {\n            if (self.maps.hasOwnProperty(mapId)) {\n                var map = self.maps[mapId];\n                if (time >= map.start && time <= map.end) {\n                    theMapIds.push(mapId);\n                }\n            }\n        }\n\n        //Prefer \"keepCamera\" over \"camera\"\n        // TODO[EM]: Safe to delete?\n        // if (theMapIds.indexOf(\"transitionCamera\") >= 0) {\n        //     var ci = theMapIds.indexOf(\"camera\");\n        //     if (ci !== null && ci !== undefined) {\n        //         theMapIds.splice(ci, 1);\n        //     }\n        // }\n\n        theMapIds.every(function (mapId) {\n            var map = self.maps[mapId];\n            var o = {map: map};\n            if (map.data.timeline.level === \"leaf\") {\n                o.camera = true;\n                result.push(o);\n            } else {\n                o.camera = false;\n                result.unshift(o);\n            }\n            return true;\n        });\n\n        return result;\n\n    };\n\n    Branch.prototype.getChildLeafTimelines = function (time) {\n        var self = this;\n        var maps = self.whichMaps(time);\n        var result = {};\n        maps.every(function (d) {\n            var leaf = d.map.data.timeline.id;\n            var leafTime = d.map.calcChildTime(time);\n            result[leaf] = leafTime;\n            return true;\n        });\n        return result;\n    };\n\n    Branch.prototype.getUniqueLeafTimelines = function () {\n        var self= this;\n        var result = {};\n        for (var mapid in self.maps) {\n            if (self.maps.hasOwnProperty(mapid)) {\n                var map = self.maps[mapid];\n                result[map.data.timeline.id] = map.data.timeline;\n            }\n        }\n        return result;\n    };\n\n    Branch.prototype.initCamera = function(time, ok) {\n        /**\n         * Update camera if (a) no camera tween, and (b) not ignored\n         */\n        var self = this;\n        var cameraMap = self.whichCameraMap(time);\n        if (!cameraMap && ! self.camera.ignore) {\n            if (self.camera.screenPan) {\n                Human.renderer.camera.setScreenPan(self.camera.screenPan);\n            }\n            if (self.camera.action === \"flyTo\") {\n                Human.renderer.camera.fly.flyTo(self.camera.location, function() {\n                    if (self.camera.rotationCenter) {\n                        var rc = self.camera.rotationCenter;\n                        Human.renderer.camera.setRotationCenter(rc[0], rc[1], rc[2]);\n                    }\n                    ok();\n                });\n            }\n            else {\n                Human.renderer.camera.fly.jumpTo(self.camera.location, function() {\n                    if (self.camera.rotationCenter) {\n                        var rc = self.camera.rotationCenter;\n                        Human.renderer.camera.setRotationCenter(rc[0], rc[1], rc[2]);\n                    }\n                    ok();\n                });\n            }\n\n        } else if (!!cameraMap) {\n          if (self.camera.action === \"flyTo\") {\n              Human.renderer.camera.fly.flyTo(self.getCamera(time), function() {\n                if (self.camera.rotationCenter) {\n                    var rc = self.camera.rotationCenter;\n                    Human.renderer.camera.setRotationCenter(rc[0], rc[1], rc[2]);\n                }\n                ok();\n              });\n          }\n          else {\n              Human.renderer.camera.fly.jumpTo(self.getCamera(time), function() {\n                if (self.camera.rotationCenter) {\n                    var rc = self.camera.rotationCenter;\n                    Human.renderer.camera.setRotationCenter(rc[0], rc[1], rc[2]);\n                }\n                ok();\n              });\n          }\n        }\n        else if (ok) {\n            ok();\n        }\n    };\n\n    // deprecated\n    Branch.prototype.initAnnotations = function(annotations) {\n        var self = this;\n        if (Human.view) {\n            //clear all annotations\n            Human.view.annotations.clearAnnotations();\n\n            //add ones defined in chapter\n            annotations.forEach(function (annotation, i) {\n                var annotationId = \"___\" + self.id + \".\" + i;\n\n                if (!annotation.pos && annotation.objectId) {\n                    // an attempt to be generous\n                    var object = Human.scene.objects[annotation.objectId];\n                    if (object){\n                        annotation.pos = object.getCenter();\n                    }\n                }\n\n                annotation.annotationId = annotationId;\n                annotation.title = annotation.title || \"\";\n                annotation.description = annotation.description || \"\";\n                annotation.dir = annotation.pinVec || annotation.dir;\n                annotation.type = annotation.type || \"default\";\n                annotation.enabled = annotation.type !== \"secondary\";\n                annotation.shown = annotation.type !== \"secondary\";\n                annotation.labelShown = annotation.type !== \"secondary\";\n                annotation.labelOffset = annotation.labelOffset || null;\n                annotation.saved = true;\n\n                Human.view.annotations.createAnnotation(annotation);\n            });\n        }\n    };\n\n    Branch.prototype.initGraph = function(synchronization){\n        // Single-traversal object property setting procedure\n        Human.scene.setObjectProperties(synchronization);\n    };\n\n    Branch.prototype.initProperties = function(){\n        var self = this;\n\n        // activate lights\n        Human.renderer.lights.clearEnabled();\n        Human.renderer.lights.setEnabled(unpackChapterLights(self.lights));\n\n        var scene = Human.renderer.getScene();\n\n        // Activate reflections\n        scene.deactivateReflection();\n        if (self.reflection) {\n            scene.activateReflection(self.reflection);\n        }\n\n        // Activate lightmaps\n        scene.deactivateLightmap();\n        if (self.lightmap) {\n            scene.activateLightmap(self.lightmap);\n        }\n\n        if (Human.view) {\n            Human.view.setViewModes(self.viewModes);\n        }\n\n        Human.properties.applyDefaults();\n\n        //All other properties\n        Human.properties.set(self.properties);\n    };\n\n    Branch.prototype.initParticles = function(){\n        for (var i = 0, len = this.particleSystems.length; i < len; ++i) {\n            Human.particles.enable(this.particleSystems[i]);\n        }\n    };\n\n    Branch.prototype.initClippingPlanes = function(){\n      /* Clipping planes\n       *\n       * NOTE: Dependency on Boundary ==========================================\n       * By default, When setting a clipping plane, the clip manager will set the plane\n       * relative to the boundary of the enabled objects. If the objects are not loaded,\n       * the boundary will either be wrong (smaller than it should be) or inverted. When\n       * inverted, the clipping planes will block any objects from appearing. This feature\n       * does not play well with progressive loading.\n       *\n       * To recreate the intended clipping plane in the absence of complete object\n       * loading (i.e. during a progressive load), the boundary can be passed as a config\n       * to clip.setClip().\n       */\n\n      // alway start fresh\n      Human.renderer.clip.reset();\n\n\n      // only set the planes defined\n      var clipKey;\n      for (clipKey in this.clippingPlanes.clips) {\n        if (this.clippingPlanes.clips.hasOwnProperty(clipKey)) {\n          var clip = Human.utils.shallowClone(this.clippingPlanes.clips[clipKey]);\n          clip.boundary = this.clippingPlanes.boundary;\n          Human.renderer.clip.setClip(clip);\n        }\n      }\n    };\n\n    Branch.prototype.initPostprocess = function(){\n\n        // parse out groundShadow config and apply seperately.\n        var postprocess = this.postprocess.filter(function(effect) {\n            return effect.effect !== 'groundShadow';\n        });\n\n        Human.renderer.postprocess.parse(postprocess);\n\n\n        // set up the ground shadow if there is one:\n        for (var i = 0; i < this.postprocess.length; i++) {\n            if (this.postprocess[i].effect === 'groundShadow') {\n                var groundShadow = this.postprocess[i];\n                Human.renderer.groundShadow.init();\n                Human.renderer.groundShadow.update({\n                  blurAmount: groundShadow.blur,\n                  opacity: groundShadow.opacity,\n                  translation: [groundShadow.xPos, groundShadow.yPos, groundShadow.zPos],\n                  scale: groundShadow.size,\n                });\n                return;\n            }\n        }\n\n        // if there's no ground shadow in this chapter, turn it off:\n        Human.renderer.groundShadow.destroy();\n    };\n\n    Branch.prototype.initTransparencyMode = function(){\n        Human.renderer.setTransparencyMode(this.transparencyMode);\n    };\n\n\n    Branch.prototype.init = function(time, params, ok){\n        var self = this;\n        // book keeping\n        Human.events.fire(\"timeline.chapters.activate.start\", {\n            chapterId: self.id,\n            params: params\n        });\n        self.timeRange = self.getTimeFrame();\n\n        // configurable initialization update\n        if (params.camera && !self.initializedCamera) {\n            self.initializedCamera = true;\n            self.initCamera(time, params.cameraCallback || function(){});\n        }\n\n        if (params.graph && ! self.initializedGraph) {\n            self.initializedGraph = true;\n            self.initGraph(self.synchronization);\n        }\n\n        if (params.properties && !self.initializedProperties) {\n            self.initializedProperties = true;\n            self.initProperties();\n        }\n\n        if (params.particles && !self.initializedParticles) {\n            Human.particles.disableAll();\n            Human.particles.resetAll();\n            self.initializedParticles = true;\n            self.initParticles();\n        }\n\n        if (params.clipping && !self.initializedClippingPlanes) {\n          self.initializedClippingPlanes = true;\n          self.initClippingPlanes();\n        }\n\n        if (params.postprocess && !self.initializedPostprocess) {\n            self.initializedPostprocess = true;\n            self.initPostprocess();\n        }\n\n        if (params.transparencyMode && !self.initializedTransparencyMode) {\n            self.initializedTransparencyMode = true;\n            self.initTransparencyMode();\n        }\n\n        if (self.ssaa) {\n           if (Human.renderer.getResolutionScalingSupported()) {\n               Human.renderer.setResolutionScaling(2);\n           }\n        } else {\n            Human.renderer.setResolutionScaling(1);\n        }\n\n        Human.events.fire(\"timeline.chapters.initializing\", {\n            chapterId: self.id,\n            params: params\n        });\n\n        if (ok){\n            ok();\n        }\n        Human.events.fire(\"timeline.chapters.activate.finish\", {chapterId: self.id});\n    };\n\n    Branch.prototype.uninit = function(params,ok){\n        //TODO[EM]: How to restore properties?\n        //TODO[EM]: How to restore camera?\n        var self = this;\n        Human.events.fire(\"timeline.chapter.deactivate.start\");\n        self.initGraph({});\n\n        // #TODO[EM]: chapter handling of annotations is deprecated.\n        self.initAnnotations([]);\n\n        //self.initCamera();\n        if (ok){\n            ok();\n        }\n        Human.events.fire(\"timeline.chapter.deactivate.finish\");\n    };\n\n    Branch.prototype.update = function (time, params, ok) {\n        params = params || {};\n        var self = this;\n        // Handle first update\n        if (self.firstUpdate) {\n            self.firstUpdate = false;\n\n            if (!params.hasOwnProperty(\"camera\")){\n                params.camera = !self.initializedCamera;\n            }\n            if (!params.hasOwnProperty(\"annotations\")) {\n                params.annotations = !self.initializedAnnotations;\n            }\n            if (!params.hasOwnProperty(\"properties\")){\n                params.properties = !self.initializedProperties;\n            }\n            if (!params.hasOwnProperty(\"graph\")){\n                params.graph = !self.initializedGraph;\n            }\n            if (!params.hasOwnProperty(\"particles\")){\n                params.particles = !self.initializedParticles;\n            }\n\n            if (!params.hasOwnProperty(\"clipping\")){\n                params.clipping = !self.initializedClippingPlanes;\n            }\n\n            if (!params.hasOwnProperty(\"postprocess\")){\n                params.postprocess = !self.initializedPostprocess;\n            }\n\n            if (!params.hasOwnProperty(\"transparencyMode\")){\n                params.transparencyMode = !self.initializedTransparencyMode;\n            }\n\n            self.init(time, params, function(){});\n        }\n        self._update2(time);\n\n        if (ok){\n            ok();\n        }\n    };\n\n    Branch.prototype._update2 = function (time) {\n        var self = this;\n        if (self.timeRange === null || self.timeRange === undefined) {\n            self.timeRange = self.getTimeFrame();\n        }\n\n        var timeRange = self.timeRange;\n\n        if (time === \"start\" || time < timeRange.startTime) {\n            time = timeRange.startTime;\n        } else if (time === \"end\" || time === \"last\" || time > timeRange.lastTime) {\n            time = timeRange.lastTime;\n        }\n\n\n        //update timeline maps\n        var mapsData = self.whichMaps(time);\n\n        mapsData.forEach(function (d) {\n            var map = d.map;\n            var cam = d.camera;\n            var childTimeline = map.data.timeline;\n            var childTime = map.calcChildTime(time);\n            childTimeline.update(cam, childTime);\n            return true;\n        });\n\n        //update media clips\n        for (var mediaId in self.media) {\n            if (self.media.hasOwnProperty(mediaId)) {\n                self.media[mediaId].update(time);\n            }\n        }\n    };\n\n    Branch.prototype.destroy = function(){\n        var self = this;\n        // Destroys leaf timelines\n        var uniqueLeaves = self.getUniqueLeafTimelines();\n        for (var leafId in uniqueLeaves){\n            if (uniqueLeaves.hasOwnProperty(leafId) && leafId !==\"dummy\" ) {\n                uniqueLeaves[leafId].destroy();\n            }\n        }\n        delete Human.timeline.branchTimelines[self.id];\n    };\n})();\n;/** Root timeline\n * Construction modalities:\n *  - Constructed by module, chapters added by module, build when done\n *\n * Responsibilities:\n *     - manage global time and playing of chapters\n *     - building a global timeline from branches\n *             -- build chapters and manage chapter queue\n *     - managing play status at borders between chapters\n *             -- chapter | chapter boundary\n *     - mapping global (root) to local (branch) times and back\n *     - editing queue\n *             -- add chapters\n *             -- delete chapters\n *             -- reorder chapters\n *\n * Concerns:\n *    - Intuitive control of camera.\n *\n */\n(function(){\n    \"use strict\";\n\n    var Root = Human.timeline.RootTimeline = function (moduleId, params) {\n        params = params || {};\n        var self = this;\n\n        // Variables\n        self.id = moduleId;\n        self.level = 'root';\n        self.animationOptions = {}; // loop:true/false\n        self._theQueue = [];      //Master Sequence of All Branch Timelines in the scene registered to be played; can NOT contain empty timelines.\n        self._chapters = [];      //Only chapter branches in order\n        self._times = [];         // the times corresponding to starts of constituent branch timelines.\n        self._timeFrame = null;\n        self.freeAnimations = {};\n\n        // Variables: For Update\n        self._firstUpdate = true;\n        self._prevBranch = null;\n        self._prevTime = null;\n        self._nowBranch = null;\n        self._nowTime = null;\n    };\n\n    /** Global Animation Options\n     * Set and validate animation options from the 'data' object.\n     * Replaces existing animation options.\n     * Options that are only referenced at the start and end of global timeline.\n     * Note, that rebuilding the root will force a start.\n     */\n    Root.prototype.setAnimationOptions = function (data, params) {\n        var self = this;\n        params = params || {};\n\n        // Backwards Compatibility: animation property from module\n        if (data.animation) {\n            self.animationOptions = data.animation;\n        }\n\n        // TODO: Unspecified other options\n    };\n\n    /** Add Chapter Branch\n     * Add a chapter to the chapters array.\n     * @branch: a valid branch timeline object\n     * @params.position : (integer) position in the queue.\n     * @params.rebuild :  (boolean) specifying wheter to rebuild root after adding chapter.\n     *\n     * Generally, params.rebuild=false while loader is adding chapters to root and only true on the last chapter.\n     */\n    Root.prototype.addChapter = function (branch, params) {\n        var self = this;\n        params = params || {};\n        var rebuild = (params.hasOwnProperty(\"rebuild\")) ? params.rebuild : true;\n        var position = params.position || self._chapters.length;\n\n        if (position < 0 || position > self._chapters.length) {\n            Human.log.warn(\"RootTimeline.addChapter(): Invalid index \" + position + \"position\");\n        }\n\n        // Add to array\n        self._chapters.splice(position, 0, branch);\n        if (rebuild) {\n            self.build();\n        }\n    };\n\n    // Activate the Root and Step\n    // TODO[EM]: How should we handle the time config? Don't like that it's part of init()\n    Root.prototype.activate = function(time, config, ok){\n        var self = this;\n        Human.timeline.activeRoot = self;\n        var branchInfo = self.mapGlobalTime(time, {which : \"second\", direction : \"forwards\"});\n\n        // Fire Event and Inform Listeners\n        Human.events.fire(\"timeline.chapters.updated\", self._assembleChaptersUpdated());\n\n        Human.events.fire(\"timeline.timeFrame.updated\", {\n            firstTime: self._timeFrame.firstTime,\n            lastTime: self._timeFrame.lastTime\n        });\n\n        Human.timeline.stop();\n\n        branchInfo.branch.init(branchInfo.time, config, function(){});\n        Human.timeline.activeRoot.update(time, {\n          which: 'second', direction: 'forwards'\n        });\n\n        Human.timeline.time = time;\n        Human.timeline._time1 = time;\n        Human.timeline._time2 = time;\n        Human.timeline._freeTime = time;\n\n        ok();\n    };\n\n    // Deactive the Root\n    Root.prototype.deactivate = function(config, ok){\n        var self = this;\n        if (Human.timeline.activeRoot === null) {\n          return;\n        }\n        if (Human.timeline.activeRoot.id === self.id){\n            // Fire Event and Inform Listeners\n            Human.events.fire(\"timeline.chapters.updated\", []);\n            Human.events.fire(\"timeline.timeFrame.updated\", {\n                firstTime: 0,\n                lastTime: 0\n            });\n            Human.timeline.activeRoot = null;\n            Human.timeline.stop();\n            Human.timeline.time = 0;\n            Human.timeline._time1 = 0;\n            Human.timeline._time2 = 0;\n            Human.timeline._freeTime = 0.0;\n            self._nowBranch.uninit(config, ok);\n        }\n    };\n\n    /** --------------------------- HELPER AND QUERY FUNCTIONS ------------------------------\n     */\n\n    /** Get unique descendent leaf timeline\n     * Return : {leafId: leafTimeline}\n     */\n    Root.prototype.getDescendentLeaves = function () {\n        var self = this;\n        var result = {};\n        self._chapters.forEach(function (chapter) {\n            var leafReferences = chapter.getChildLeafTimelines(0);\n            for (var leafid in leafReferences) {\n                if (leafReferences.hasOwnProperty(leafid)) {\n                    if (!result.hasOwnProperty(leafid)) {\n                        result[leafid] = Human.timeline.leafTimelines[leafid];\n                    }\n                }\n            }\n        });\n\n        return result;\n    };\n\n    /** Get time frame (duration) of the root Timeline\n     */\n    Root.prototype.getTimeFrame = function (params) {\n        var self = this;\n        params = params || {};\n        var end = 0.0;\n        var sequence = self._chapters;\n\n        // Sum up time of all branches in sequence\n        sequence.forEach(function (branch) {\n            end += branch.getTimeFrame().lastTime;\n        });\n\n        return {\n            firstTime: 0.0,\n            lastTime: end\n        };\n    };\n\n    /** Get the index of branch.id in the root queue or optionally the chapters list.\n     * Return null if not found\n     */\n    Root.prototype.whereIsBranch = function (branch, params) {\n        var self = this;\n        params = params || {};\n\n        var idx = 0, found = false;\n        var branchIndex = null;\n        var sequence = [];\n        if (params.chapters === true) {\n            sequence = self._chapters;\n        } else {\n            // search whole timeline by default\n            sequence = self._theQueue;\n        }\n        while (!found && idx < sequence.length) {\n            found = (sequence[idx].id === branch.id) ? true : false;\n            if (!found) {\n                idx++;\n            } else {\n                branchIndex = idx;\n            }\n        }\n        return branchIndex;\n    };\n\n    /** Get Branch from Que based on one property\n     * @param.id : default, retrieve branch with specific id\n     */\n    Root.prototype.getBranch = function (params) {\n        var self = this;\n        params = params || {};\n        var key, value, found = false, i = 0, branch = {};\n\n        if (Human.utils.isEmpty(params)) {\n            return null;\n        } else if (Object.keys(params).length > 1) {\n            Human.log.warn(\"timeline.RootTimeline.getBranch\", \"too many parameters, using only the first.\");\n        }\n\n        // Search information\n        key = Object.keys(params)[0];\n        value = params[key];\n\n        while (!found && i < (self._theQueue.length)) {\n            branch = self._theQueue[i];\n            if (self._theQueue[i][key] === value) {\n                found = true;\n            }\n            i++;\n        }\n\n        var result;\n        if (found) {\n            result = branch;\n        } else {\n            result = null;\n        }\n        return result;\n    };\n\n    /** map global time TO local time on branch.\n     * Returns object : {\n        branch: branchTimeline,   # reference to corresponding branch timeline\n        time: float,              # corresponding local time on branch\n        index: integer            # the index of the branch in the reference sequence\n     }\n     *\n     * @params.tie = \"earlier\"/\"later\" if take earlier/later branch in a border case\n     * @params.which = \"first/second\"\n     * @params.direction = \"forwards/backwards\"\n     *\n     * In the event of a tie, this function references either (a) the tie parameter, or\n     * (b) the border condition which/direction parameters to pick the right target branch.\n     *\n     * Border cases include any time that can point to two branches.\n     * By convention, the first and last branches border eachother. Therefore,\n     * time 0 will point to lastBranch (as the \"earlier\" branch), and the first\n     * branch (as the \"later\" branch).\n     */\n    Root.prototype.mapGlobalTime = function (time, params) {\n        var self = this;\n        params = params || {};\n\n        // parameter checking\n        if (time === \"end\") {\n            time = self.getTimeFrame().lastTime;\n        } else if (time === \"start\") {\n            time = 0.0;\n        }\n\n        // parameter constraining\n        if (time < 0) {\n            time = 0;\n        } else if (time > self.getTimeFrame().lastTime) {\n            time = self.getTimeFrame().lastTime;\n        }\n\n        // tie handling and border conditions\n        var tie = \"earlier\"; // default\n        if (params.tie){\n            tie = params.tie;\n        } else if (params.which && params.direction){\n            if (params.direction === \"forwards\"){\n                if (params.which === \"second\"){\n                    tie = \"later\";\n                } else {\n                    tie = \"earlier\";\n                }\n            } else if (params.direction === \"backwards\") {\n                if (params.which === \"first\"){\n                    tie = \"later\";\n                } else {\n                    tie = \"earlier\";\n                }\n            }\n        }\n\n\n\n        var result = {\n            branch: null,\n            time: null,\n            index: null\n        };\n\n        var borderIndex = self._times.indexOf(time);\n        if (borderIndex >= 0) {\n            // Border Case: Use tie-breaker option\n            var branchIndex = (tie !== \"later\") ? (borderIndex - 1) : borderIndex;\n            branchIndex = (branchIndex < 0) ? self._theQueue.length - 1 : branchIndex;      // use last as \"before first\"\n            branchIndex = (branchIndex >= self._times.length - 1) ? 0 : branchIndex;      // use first as \"after last\"\n\n            result.branch = self._theQueue[branchIndex];\n            result.time = (tie !== \"later\") ? (time - self._times[branchIndex]) : 0.0;\n            result.index = branchIndex;\n        }\n        else {\n            var neighbors = Human.utils.binarySearch(self._times, time);\n            result.branch = self._theQueue[neighbors.index1]; // branch corresponding to left hand neighbor\n            result.time = time - neighbors.value1;\n            result.index = neighbors.index1;\n        }\n        return result;\n    };\n\n    /** map branch local time TO global time\n     */\n    Root.prototype.mapBranchTime = function (branch, branchTime, params) {\n        var self = this;\n        params = params || {};\n        var worldTime = 0.0;\n        var branchIndex = self.whereIsBranch(branch);\n        if (branchTime === \"end\") {\n            branchTime = branch.getTimeFrame().lastTime;\n        }\n        else if (branchTime === \"start\") {\n            branchTime = 0.0;\n        }\n\n        if (branchIndex === null) {\n            worldTime = null;\n        } else {\n            worldTime = self._times[branchIndex] + branchTime;\n        }\n        return worldTime;\n    };\n\n    /** Get the chapter-branch of the neighboring branch at specified time\n     * @which = \"next\"/\"previous\" chapter in sequence\n     *\n     * @param {now} [branch object, or time float]\n     * @param {params.tie} Which branch to use as current branch on border case.\n     * Return null if no valid chapter exists;\n     */\n    Root.prototype.getNeighborChapter = function (now, which, params) {\n        var self = this;\n        params = params || {};\n\n        var currentBranch = null;\n        var currentIndex = null;\n        which = (which === \"previous\") ? \"previous\" : \"next\";\n        if (now instanceof Human.timeline.BranchTimeline) {\n            currentBranch = now;\n        } else if (typeof(now) === \"number\") {\n            var tie = (params.tie === \"later\") ? \"later\" : \"earlier\";\n            currentBranch = self.mapGlobalTime(now, {tie: tie});\n        } else {\n            Human.log.warn(\"timeline.root.getNeighborChapter\", \"invalid 'now' argument :\" + JSON.stringify(now));\n            return null;\n        }\n\n        currentIndex = self.whereIsBranch(currentBranch);\n\n\n        // Edge Cases\n        if (currentIndex === 0 && which === \"previous\") {\n            return null;\n        } else if (currentIndex === self._theQueue.length - 1 && which === \"next\") {\n            return null;\n        }\n\n        // search up/down (maximum of two branches away in any direction)\n        var idx = currentIndex;\n        if (which === \"next\") {\n            idx++;\n        } else {\n            idx--;\n        }\n\n        // return chapter branch\n        return self._theQueue[idx];\n    };\n\n    /** Return True if branch is first chapter\n     */\n    Root.prototype.isFirst = function (branch) {\n        var self = this;\n        if (branch.id === self._theQueue[0].id) {\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    /** Return True if chapter is last chapter\n     */\n    Root.prototype.isLast = function (branch) {\n        var self = this;\n        var idx = self._theQueue.length - 1;\n        if (branch.id === self._theQueue[idx].id) {\n            return true;\n        } else {\n            return false;\n        }\n    };\n    //-----------------------------  BUILD FUNCTIONS ----------------------------------------\n    /** Add Free Animations to Global Timeline\n     * Animations tagged to be not on the timeline will be added to\n     * the global timeline and will not respond to play/stop status.\n     *\n     * This function will add all free animations in any descendent leaf timelines\n     */\n    Root.prototype.buildFreeAnimations = function (params) {\n        var self = this;\n        params = params || {};\n        var leaves = self.getDescendentLeaves();\n        for (var leafId in leaves) {\n            if (leaves.hasOwnProperty(leafId)) {\n                var _fa = leaves[leafId].freeAnimations;\n                for (var _fai in _fa) {\n                    if (_fa.hasOwnProperty(_fai) && !self.freeAnimations.hasOwnProperty(_fai)) {\n                        self.freeAnimations[_fai] = _fa[_fai];\n                    }\n                }\n            }\n        }\n    };\n\n    /** Build queue\n     * The Queue is the ordered list of all chapters that\n     * collectively constitue the global timeline.\n     *\n     * Also populate time (and border times)\n     */\n    Root.prototype.buildQueue = function (params) {\n        var self = this;\n        params = params || {};\n        self._theQueue = [];\n        var cumTime = 0.0; // keep track of cumulative time\n        self._times = [cumTime];\n\n        self._chapters.forEach(function (chapter) {\n            cumTime += chapter.getTimeFrame().lastTime;\n            self._theQueue.push(chapter);\n            self._times.push(cumTime);\n        });\n    };\n\n    /** Build Root Timeline\n     */\n    Root.prototype.build = function (params) {\n        var self = this;\n        params = params || {};\n        self._theQueue = [];\n        self._times = [];\n        self.buildFreeAnimations();\n        self.buildQueue();\n\n        // Register with replacement\n        if (Human.timeline.rootTimelines[self.id]) {\n            delete Human.timeline.rootTimelines[self.id];\n        }\n        Human.timeline.rootTimelines[self.id] = self;\n\n        self._timeFrame = self.getTimeFrame();\n\n\n        // (Re Set current now-branch and now-time\n        if (self._nowBranch === null) {\n            self._nowBranch = self._theQueue[0];\n            self._nowTime = 0.0;\n            self._prevBranch = self._nowBranch;\n            self._prevTime = 0.0;\n        } else if (self.whereIsBranch(self._nowBranch) === null) {\n            self._nowBranch = self._theQueue[0];\n            self._nowTime = 0.0;\n            if (self._prevBranch === null) {\n                self._prevBranch = self._nowBranch;\n                self._prevTime = self._nowTime;\n            } else if (self.whereIsBranch(self._prevBranch) === null) {\n                self._prevBranch = self._nowBranch;\n                self._prevTime = self._nowTime;\n            }\n        }\n\n        Human.events.fire(\"timeline.chapters.updated\", self._assembleChaptersUpdated());\n\n        Human.events.fire(\"timeline.timeFrame.updated\", {\n            firstTime: self._timeFrame.firstTime,\n            lastTime: self._timeFrame.lastTime\n        });\n    };\n\n    /** Destroy\n     * Soft Deletions of branch timelines\n     */\n    Root.prototype.destroy = function () {\n        var self = this;\n        // Remove branches\n        self._theQueue.forEach(function (branch) {\n            if (Human.timeline.branchTimelines.hasOwnProperty(branch.id)) {\n                branch.destroy();\n            }\n        });\n\n        // Remove from roots and as active root\n        if (Human.timeline.rootTimelines.hasOwnProperty(self.id)) {\n            delete Human.timeline.rootTimelines[self.id];\n        }\n    };\n\n    //------------------------------  ACTION FUNCTIONS -----------------------------------------\n    Root.prototype.updateFreeAnimations = function (time) {\n        var self = this;\n        for (var fid in self.freeAnimations) {\n            if (self.freeAnimations.hasOwnProperty(fid)) {\n                self.freeAnimations[fid].update({cameraEnabled: false}, time);\n            }\n        }\n\n        var particleSystems = self._nowBranch.particleSystems;\n\n        for (var i = 0, len = particleSystems.length; i < len; ++i) {\n            Human.particles.update(particleSystems[i], time);\n        }\n    };\n\n    // update the root timeline at the specified global time.\n    Root.prototype.update = function (time, params, ok) {\n        var self = this;\n        params = params || {};\n        var borderCondition = {}, toUpdate = [];\n        if (typeof(ok) !== \"function\"){\n            ok = function(){};\n        }\n\n        // Default parameter handling\n        borderCondition = {which: \"both\", direction: \"forwards\"};\n        if (params.hasOwnProperty(\"which\")) {\n            borderCondition.which = params.which;\n        }\n        if (params.hasOwnProperty(\"direction\")) {\n            borderCondition.direction = params.direction;\n        }\n\n        // Check for valid time\n        if (time < 0) {\n            time = 0;\n            Human.log.warn(\"Time violates lower bound. Updating to time = 0.0\");\n        }\n        else if (time > self._timeFrame.lastTime) {\n            time = self._timeFrame.lastTime;\n            Human.log.warn(\"Time violates upper bound. Updating to time = \" + time);\n        }\n\n        // get list of mapped branches and their local times to update.\n        toUpdate = self._getBranchesToUpdate(time, borderCondition);\n\n        // Check for first update\n        if (self._firstUpdate) {\n            self._nowBranch = toUpdate[0].branch;\n            self._nowTime = toUpdate[0].time;\n            self._firstUpdate = false;\n        }\n\n        // udpate mapped branches in order\n        var chaptersFirstUpdate = false;\n        toUpdate.forEach(function (item) {\n            self._prevBranch = self._nowBranch;\n            self._prevTime = self._nowTime;\n            chaptersFirstUpdate = item.branch.firstUpdate;\n            self._nowBranch = item.branch;\n            self._nowTime = item.time;\n            item.branch.update(item.time, {}, ok); // TODO[EM]: Some optional overrides to first upddate\n\n            /** Notify that new chapter has been entered the first time\n             * Ideally, the chapter-branch itself could do the notification,\n             * but for backwards compatibility the UI wants to know which chapter\n             * in the context of the whole root timeline has fired.\n             */\n            if (chaptersFirstUpdate) {\n              Human.events.fire(\"timeline.chapters.activated\", self._assembleChaptersActivated());\n            }\n\n        });\n\n        // reset previous branch if necessary.\n        if (self._prevBranch.id !== self._nowBranch.id) {\n            self._prevBranch.reset();\n        }\n\n    };\n\n    /** Return an array of the local information (branch, timeline) to be updated\n     *   based on global time and border Condition.\n     */\n    Root.prototype._getBranchesToUpdate = function (time, borderCondition) {\n        var self = this;\n        if (self._times.indexOf(time) >= 0) {\n            return self._getBorderBranches(time, borderCondition);\n        } else {\n            return [self.mapGlobalTime(time, {tie: \"earlier\"})];\n        }\n    };\n\n    /** Return one or more of the branches at specified boder time.\n     */\n    Root.prototype._getBorderBranches = function (time, borderCondition) {\n        var self = this;\n        var _left = self.mapGlobalTime(time, {tie: \"earlier\"});\n        var _right = self.mapGlobalTime(time, {tie: \"later\"});\n        var order = [_left, _right]; // default is to play in forwards order\n\n        // Modify the \"order\" based on border Condition\n        if (borderCondition.direction === \"backwards\") {\n            order = [_right, _left];\n        }\n        if (borderCondition.which === \"first\") {\n            order.splice(1, 1);\n        } else if (borderCondition.which === \"second\") {\n            order.splice(0, 1);\n        }\n        return order;\n    };\n\n    // ------------------------------ EVENT INFORMATION ----------------------------------------\n    /** This function returns the object to be sent with timeline.chapters.updated\n     * The result is a list of chapter blocks, each of which contains\n     * the chapter's global start time, duration, displayName, description, and index.\n     */\n    Root.prototype._assembleChaptersUpdated = function () {\n        var self = this;\n        var result = [];\n        var i;\n        var len;\n        var chapters = self._chapters;\n        var branch;\n        var block;\n\n        for (i = 0, len = chapters.length; i < len; i++) {\n            branch = chapters[i];\n            block = {\n                chapterId: branch.id,\n                time: self.mapBranchTime(branch, 0.0),\n                duration: branch.getTimeFrame().lastTime,\n                displayName: branch.info.displayName,\n                description: branch.info.description,\n                loop: branch.animation.loop,\n                index: i\n            };\n            result.push(block);\n        }\n\n        return result;\n    };\n\n    /** This function returns the object to be sent with timeline.chapters.activated\n     * events, which are fired on every update.\n     *\n     */\n    Root.prototype._assembleChaptersActivated = function () {\n        var self = this;\n        var result = {};\n        result.oldChapterIndex = self.whereIsBranch(self._prevBranch, {chapters: true}); // index of old chapter in sequence of chapters\n        result.newChapterIndex = self.whereIsBranch(self._nowBranch, {chapters: true}); // index of new chapter in sequence of chapters\n        result.time = self.mapBranchTime(self._nowBranch, self._nowTime);\n        result.loop = self._nowBranch.animation.loop || false;\n        result.branchID = self._nowBranch.id;   // branchID for mobile\n        return result;\n    };\n\n    /** This function returns per-chapter information for all chapters needed by timeline.query\n     */\n    Root.prototype._assembleQueryChapters = function () {\n        var self = this;\n        var result = [];\n        var i;\n        var len;\n        var chapters = self._chapters;\n        var branch;\n\n        for (i = 0, len = chapters.length; i < len; i++) { // OPTIMIZATION: Don't use GC-collected callback\n            branch = chapters[i];\n\n            result.push({\n                chapterId: branch.id,\n                time: self.mapBranchTime(branch, 0.0),\n                displayName: branch.info.displayName,\n                description: branch.info.description,\n                type: \"branch\",\n                tags: branch.tags || [],\n                annotations: branch.annotations,\n                hotspots: null,\n                flyTo: branch.camera.location,\n                active: (self._nowBranch.id === branch.id), // OPTIMIZATION: Remove redundant conditional\n                sounds: branch._getAudio(),\n                translations: branch.translations || null\n            });\n        }\n\n        return result;\n    };\n\n})();\n;(function() {\n    \"use strict\";\n\n    var idCounter = 0;\n\n\n    var Particles = Human.particles = {\n        creators: {},\n        updaters: {},\n        constraints: {},\n        shapes: {},\n        systems: {}\n    };\n\n    var boundary = {\n        xmin: Number.POSITIVE_INFINITY,\n        ymin: Number.POSITIVE_INFINITY,\n        zmin: Number.POSITIVE_INFINITY,\n        xmax: Number.NEGATIVE_INFINITY,\n        ymax: Number.NEGATIVE_INFINITY,\n        zmax: Number.NEGATIVE_INFINITY\n    };\n\n    Particles.parse = function(json, ok) {\n        json = Human.utils.deepClone(json);\n\n        var numSystems = json.length;\n\n        if (numSystems === 0) {\n            if (ok) {\n                ok();\n            }\n            return;\n        }\n\n        function done() {\n            if (--numSystems === 0 && ok) {\n                ok();\n            }\n        }\n\n        for (var i = 0, len = json.length; i < len; ++i) {\n            parseSystem(json[i], done);\n        }\n    };\n\n    Particles.getBoundary = function() {\n        boundary.xmin = Number.POSITIVE_INFINITY;\n        boundary.ymin = Number.POSITIVE_INFINITY;\n        boundary.zmin = Number.POSITIVE_INFINITY;\n        boundary.xmax = Number.NEGATIVE_INFINITY;\n        boundary.ymax = Number.NEGATIVE_INFINITY;\n        boundary.zmax = Number.NEGATIVE_INFINITY;\n\n        for (var id in Particles.systems) {\n            var bb = Particles.systems[id].getBoundary();\n            boundary.xmin = Math.min(boundary.xmin, bb.xmin);\n            boundary.ymin = Math.min(boundary.ymin, bb.ymin);\n            boundary.zmin = Math.min(boundary.zmin, bb.zmin);\n            boundary.xmax = Math.max(boundary.xmax, bb.xmax);\n            boundary.ymax = Math.max(boundary.ymax, bb.ymax);\n            boundary.zmax = Math.max(boundary.zmax, bb.zmax);\n        }\n\n        return boundary;\n    };\n\n    Particles.update = function(id, time) {\n        // Guard against particles being undefined \n        // This happens when saving a bookmark. and particles are destroyed, then re-created.\n        if (Particles.systems[id]) {\n            Particles.systems[id].update(time);\n            Human.renderer.camera.nearFarDirty = true;\n        }\n    };\n\n    Particles.updateAll = function(time) {\n        for (var id in Particles.systems) {\n            if (Particles.systems.hasOwnProperty(id)) {\n                Particles.update(id, time);\n            }\n        }\n    };\n\n    Particles.enable = function(id) {\n        Particles.systems[id].enable();\n    };\n\n    Particles.enableAll = function() {\n        for (var id in Particles.systems) {\n            if (Particles.systems.hasOwnProperty(id)) {\n                Particles.enable(id);\n            }\n        }\n    };\n\n    Particles.disable = function(id) {\n        Particles.systems[id].disable();\n    };\n\n    Particles.disableAll = function() {\n        for (var id in Particles.systems) {\n            if (Particles.systems.hasOwnProperty(id)) {\n                Particles.disable(id);\n            }\n        }\n    };\n\n    Particles.reset = function(id) {\n        Particles.systems[id].reset();\n    };\n\n    Particles.resetAll = function() {\n        for (var id in Particles.systems) {\n            if (Particles.systems.hasOwnProperty(id)) {\n                Particles.reset(id);\n            }\n        }\n    };\n\n    Particles.destroy = function(id) {\n        if (Particles.systems[id]) {\n            Particles.systems[id].destroy();\n            delete Particles.systems[id];\n        }\n    };\n\n    Particles.destroyAll = function() {\n        for (var id in Particles.systems) {\n            if (Particles.systems.hasOwnProperty(id)) {\n                Particles.destroy(id);\n            }\n        }\n    };\n\n    function parseSystem(json, ok) {\n        var id = json.id || (\"ps\" + idCounter++);\n        var numParticles = json.numParticles;\n        var options = {\n            properties: json.properties,\n            material: json.material,\n            textures: json.textures,\n            spriteRows: json.spriteRows || 0,\n            spriteCols: json.spriteCols || 0,\n            spriteStartFrame: json.spriteStartFrame || 0,\n            spriteEndFrame: json.spriteEndFrame || 0\n        };\n\n        if (options.spriteEndFrame === 0 && options.spriteRows > 0 && options.spriteCols > 0) {\n            options.spriteEndFrame = options.spriteRows * options.spriteCols - 1;\n        }\n\n        var creators = [];\n        var updaters = [];\n        var constraints = [];\n        var components = {};\n        var currentId = 0;\n\n        var creatorDefs = json.creators || [];\n        var updaterDefs = json.updaters || [];\n        var constraintDefs = json.constraints || [];\n\n        var trapIdCounter = 0;\n        var shape = null;\n        var shapeDirection = null;\n        var s, shapeType;\n\n        var i, len, type, componentId;\n        var creator, c, u;\n        for (i = 0, len = creatorDefs.length; i < len; ++i) {\n            c = creatorDefs[i];\n            componentId = c.id || (\"__CR\" + (++currentId));\n\n            if (components[componentId]) {\n                Human.log.error(\"Component \" + componentId + \" already exists. Skipping.\");\n                continue;\n            }\n            \n            type = c.type;\n\n            creator = new Particles.creators[type](c, options);\n            creators.push(creator);\n            components[componentId] = creator;\n\n            if (type === \"Lifetime\") {\n                options.lifetimes = true;\n            } else if (type === \"SolidColor\") {\n                options.colors = true;\n            } else if (type === \"RandomScale\" || type === \"RandomRotation\") {\n                options.scaleRotations = true;\n            } else if (type === \"RandomRotationSpeed\") {\n                options.scaleRotations = true;\n                options.rotationSpeeds = true;\n            } else if (type === \"SpriteAnimationDuration\") {\n                options.uvTranslates = true;\n                options.spriteFrameDuration = true;\n                options.spriteFrameCounter = true;\n                options.spriteCurrentTime = true;\n            }\n        }\n\n        var updater = null;\n        var path = null;\n        for (i = 0, len = updaterDefs.length; i < len; ++i) {\n            u = updaterDefs[i];\n            componentId = u.id || (\"__UP\" + (++currentId));\n\n            if (components[componentId]) {\n                Human.log.error(\"Component \" + componentId + \" already exists. Skipping.\");\n                continue;\n            }\n            \n            type = u.type;\n\n            if (u.shape) {\n                s = u.shape;\n                shapeType = s.type;\n\n                shape = new Particles.shapes[shapeType](s);\n                shapeDirection = s.direction || \"in\";\n            }\n\n            updater = new Particles.updaters[type](u, options);\n\n            if (type === \"AgeColorBlend\") {\n                options.colors = true;\n                options.lifetimes = true;\n            } else if (type === \"Path\") {\n                path = updater;\n                var nodes = u.nodes;\n                for (var j = 0; j < nodes.length; ++j) {\n                    updater.addNode(nodes[j]);\n                }\n                options.paths = true;\n            } else if (type === \"SpriteAnimation\") {\n                options.uvTranslates = true;\n            }\n\n            if (shape) {\n                updater.shape = shape;\n                updater.shapeDirection = shapeDirection;\n            }\n\n            updaters.push(updater);\n            components[componentId] = updater;\n        }\n\n        var constraint = null;\n        for (i = 0, len = constraintDefs.length; i < len; ++i) {\n            c = constraintDefs[i];\n            componentId = c.id || (\"__CN\" + (++currentId));\n\n            if (components[componentId]) {\n                Human.log.error(\"Component \" + componentId + \" already exists. Skipping.\");\n                continue;\n            }\n\n            type = c.type;\n\n            var trapId;\n\n            if (c.shape) {\n                s = c.shape;\n                shapeType = s.type;\n\n                shape = new Particles.shapes[shapeType](s);\n                shapeDirection = s.direction || \"in\";\n            }\n\n            if (c.trap) {\n                trapId = trapIdCounter++;\n                options.traps = true;\n            } else {\n                trapId = -1;\n            }\n\n            switch (type) {\n                case \"LifetimeKill\":\n                case \"LifetimeStop\":\n                    constraint = new Particles.constraints[type](options);\n                    break;\n\n                case \"PathKill\":\n                case \"PathRadius\":\n                case \"PathStop\":\n                    constraint = new Particles.constraints[type](path, options);\n                    break;\n\n                case \"ShapeBounce\":\n                case \"ShapeStop\":\n                case \"ShapeKill\":\n                    constraint = new Particles.constraints[type](shape, shapeDirection, trapId, options);\n                    break;\n\n            }\n\n            constraints.push(constraint);\n            components[componentId] = constraint;\n        }\n\n        var textures = options.textures || [];\n\n        for (i = 0, len = textures.length; i < len; ++i) {\n            textures[i].src = window.localBaseDirectory + \"content/states/\" + textures[i].src.replace(/^\\/+/, \"\");\n        }\n\n        Human.assets.textures.load(textures, function() {\n            var ps = new Particles.ParticleSystem(numParticles, options);\n            ps.creators = creators;\n            ps.updaters = updaters;\n            ps.constraints = constraints;\n            ps.components = components;\n\n            if (json.emissionAverage !== undefined) {\n                ps.emissionAverage = json.emissionAverage;\n            }\n\n            if (json.emissionVariance !== undefined) {\n                ps.emissionVariance = json.emissionVariance;\n            }\n\n            if (json.maxSpeed !== undefined) {\n                ps.maxSpeed = json.maxSpeed;\n            }\n\n            if (json.pointSize !== undefined) {\n                ps.pointSize(json.pointSize);\n            }\n\n            Particles.systems[id] = ps;\n\n            if (ok) {\n                ok();\n            }\n        });\n    }\n\n})();\n;(function() {\n    \"use strict\";\n\n    var tempPosition = new Float32Array(3);\n    var tempVelocity = new Float32Array(3);\n    var tempColor    = new Uint8Array(4);\n    var tempScaleRotations = new Float32Array(2);\n    var tempRotationSpeeds = new Float32Array(1);\n    var tempUVTranslates = new Float32Array(2);\n\n    var boundary = {\n        xmin: Number.POSITIVE_INFINITY,\n        ymin: Number.POSITIVE_INFINITY,\n        zmin: Number.POSITIVE_INFINITY,\n        xmax: Number.NEGATIVE_INFINITY,\n        ymax: Number.NEGATIVE_INFINITY,\n        zmax: Number.NEGATIVE_INFINITY\n    };\n\n    var ParticleSystem = Human.particles.ParticleSystem = function ParticleSystem(maxNumParticles, options) {\n        options = options || {};\n        \n        var material = options.material;\n        var textures = options.textures;\n        var properties = options.properties || {};\n        var layer = properties.layer || 0;\n        var addBlend = properties.addBlend || false;\n        var hasColors = !!options.colors;\n        var hasLifetimes = !!options.lifetimes;\n        var hasPaths = !!options.paths;\n        var hasTraps = !!options.traps;\n        var parentNode = Human.renderer.getScene();\n        var hasScaleRotations = !!options.scaleRotations;\n        var hasRotationSpeeds = !!options.rotationSpeeds;\n        var hasUVTranslates = !!options.uvTranslates;\n        var hasSpriteFrameDuration = !!options.spriteFrameDuration;\n        var hasSpriteFrameCounter = !!options.spriteFrameCounter;\n        var hasSpriteCurrentTime = !!options.spriteCurrentTime;\n\n        this.activeParticlesBegin = 0;\n        this.numParticles = 0;\n        this.maxSpeed = 0;\n        this.maxNumParticles = maxNumParticles;\n        this.spriteRows = options.spriteRows || 0;\n        this.spriteCols = options.spriteCols || 0;\n        this.spriteStartFrame = options.spriteStartFrame || 0;\n        this.spriteEndFrame = options.spriteEndFrame || 0;\n        this.attributes = {\n            stopped: new Array(maxNumParticles),\n            dead: new Array(maxNumParticles),\n            positions: new Float32Array(maxNumParticles * 3),\n            velocities: new Float32Array(maxNumParticles * 3),\n            colors: hasColors ? new Uint8Array(this.maxNumParticles * 4) : null,\n            lifetimes: hasLifetimes ? new Float32Array(this.maxNumParticles) : null,\n            ages: hasLifetimes ? new Float32Array(this.maxNumParticles) : null,\n            paths: hasPaths ? new Uint8Array(this.maxNumParticles) : null,\n            traps: hasTraps ? new Uint32Array(this.maxNumParticles) : null,\n            scaleRotations: hasScaleRotations ? new Float32Array(maxNumParticles * 2) : null,\n            rotationSpeeds: hasRotationSpeeds ? new Float32Array(maxNumParticles) : null,\n            uvTranslates: hasUVTranslates ? new Float32Array(maxNumParticles * 2) : null,\n            spriteFrameDuration: hasSpriteFrameDuration ? new Float32Array(maxNumParticles) : null,\n            spriteFrameCounter: hasSpriteFrameCounter ? new Uint8Array(maxNumParticles) : null,\n            spriteCurrentTime: hasSpriteCurrentTime ? new Float32Array(maxNumParticles) : null,\n        };\n\n        this.rootNode = null;\n        this.properties = null;\n        this.material = null;\n        this.geometry = null;\n\n        var node;\n\n        properties.enabled = false;\n        properties.picking = false;\n\n        if (properties.depthMask === false) {\n            properties.noDepthMask = true;\n        }\n\n        this.rootNode = this.properties = node = parentNode.addNode({\n            type: \"properties\",\n            properties: properties\n        });\n\n        if (material) {\n            material.type = \"material\";\n            this.material = node = node.addNode(material);\n        }\n\n        if (textures) {\n            for (var i = 0, len = textures.length; i < len; ++i) {\n                textures[i].type = \"texture\";\n                textures[i].src = window.localBaseDirectory + \"content/states/\" + textures[i].src;\n                node = node.addNode(textures[i]);\n            }\n        }\n\n        var pointUVScale = null;\n\n        if (this.spriteRows > 0 && this.spriteCols > 0) {\n            pointUVScale = new Float32Array([1 / this.spriteCols, 1 / this.spriteRows]);\n        }\n\n        this.geometry = node.addNode({\n            type: \"geometry\",\n            positions: this.attributes.positions,\n            colors: this.attributes.colors,\n            pointScaleRotations: this.attributes.scaleRotations,\n            pointUVTranslates: this.attributes.uvTranslates,\n            pointUVScale: pointUVScale,\n            layer: layer,\n            addBlend: addBlend,\n            primitive: \"points\"\n        });\n        \n\n        this.enabled = false;\n\n        this.emissionAverage = 0;\n        this.emissionVariance = 0;\n        this.creators = [];\n        this.updaters = [];\n        this.constraints = [];\n        this.components = {};\n        this.previousTime = null;\n    };\n\n    ParticleSystem.prototype.pointSize = function(size) {\n        this.geometry.setPointSize(size);\n    };\n\n    ParticleSystem.prototype.getBoundary = function() {\n        return boundary;\n    };\n\n    ParticleSystem.prototype.update = function(time) {\n        if (!this.enabled) {\n            return;\n        }\n        \n        boundary.xmin = Number.POSITIVE_INFINITY;\n        boundary.ymin = Number.POSITIVE_INFINITY;\n        boundary.zmin = Number.POSITIVE_INFINITY;\n        boundary.xmax = Number.NEGATIVE_INFINITY;\n        boundary.ymax = Number.NEGATIVE_INFINITY;\n        boundary.zmax = Number.NEGATIVE_INFINITY;\n\n        var max = Math.max;\n        var min = Math.min;\n        var sqrt = Math.sqrt;\n        var floor = Math.floor;\n        var rand = Math.random;\n\n        this.previousTime = this.previousTime || time;\n        var delta = min(time - this.previousTime, 0.04);\n        if (delta < 0) {\n            this.previousTime = time;\n            delta = 0;\n        }\n\n        var attributes = this.attributes;\n        var positions = attributes.positions;\n        var velocities = attributes.velocities;\n        var ages = attributes.ages;\n        var lifetimes = attributes.lifetimes;\n        var hasAges = !!ages;\n\n        var maxSpeed = this.maxSpeed * delta;\n        var maxSpeed2 = maxSpeed * maxSpeed;\n        var scaleRotations = attributes.scaleRotations;\n        var rotationSpeeds = attributes.rotationSpeeds;\n\n        var i, j, vi, len;\n        var xi, yi, zi, si;\n\n\n        if (this.numParticles < this.maxNumParticles) {\n            var emissionAverage = this.emissionAverage * delta;\n            var emissionVariance = this.emissionVariance * delta;\n\n            var count = max(emissionAverage + rand() * 2 * emissionVariance - emissionVariance, 0);\n\n            if (count >= 1) {\n                count = floor(count);\n            } else {\n                count = rand() < count ? 1 : 0;\n            }\n\n            var endEmit = min(this.numParticles + count, this.maxNumParticles);\n\n            for (i = this.numParticles; i < endEmit; ++i) {\n                vi = i * 3;\n                si = i * 2;\n\n                positions[vi]     = 0;\n                positions[vi + 1] = 0;\n                positions[vi + 2] = 0;\n\n                velocities[vi]     = 0;\n                velocities[vi + 1] = 0;\n                velocities[vi + 2] = 0;\n\n\n                attributes.dead[i] = false;\n                attributes.stopped[i] = false;\n                \n                if (attributes.paths) {\n                    attributes.paths[i] = 0;\n                }\n\n                if (attributes.traps) {\n                    attributes.traps[i] = 0;\n                }\n\n                if (attributes.traps) {\n                    attributes.traps[i] = 0;\n                }\n\n                if (attributes.scaleRotations) {\n                    attributes.scaleRotations[si]     = 1;\n                    attributes.scaleRotations[si + 1] = 0;\n                }\n\n                if (attributes.rotationSpeeds) {\n                    attributes.rotationSpeeds[i] = 0;\n                }\n\n                if (attributes.uvTranslates) {\n                    attributes.uvTranslates[si] = this.spriteStartFrame % this.spriteCols * 1.0 / this.spriteCols;\n                    attributes.uvTranslates[si + 1] = (this.spriteRows - 1.0 - floor(this.spriteStartFrame / this.spriteCols)) * 1.0 / this.spriteRows;\n                }\n\n                if (attributes.spriteFrameCounter) {\n                    attributes.spriteFrameCounter[i] = 0;\n                }\n\n                if (attributes.spriteFrameDuration) {\n                    attributes.spriteFrameDuration[i] = 0;\n                }\n\n                if (attributes.spriteCurrentTime) {\n                    attributes.spriteCurrentTime[i] = 0;\n                }\n            }\n\n            \n            for (j = 0, len = this.creators.length; j < len; ++j) {\n                this.creators[j].create(this.numParticles, endEmit, attributes);\n            }\n            \n            this.numParticles = endEmit;\n        }\n\n        for (j = 0, len = this.updaters.length; j < len; ++j) {\n            this.updaters[j].update(this.activeParticlesBegin, this.numParticles, attributes, delta);\n        }\n\n        for (i = this.activeParticlesBegin; i < this.numParticles; ++i) {\n            vi = i * 3;\n            si = i * 2;\n\n            xi = vi;\n            yi = vi + 1;\n            zi = vi + 2;\n\n            tempVelocity[0] = velocities[xi] * delta;\n            tempVelocity[1] = velocities[yi] * delta;\n            tempVelocity[2] = velocities[zi] * delta;\n\n            if (maxSpeed2 > 0) {\n                var speed2 = tempVelocity[0] * tempVelocity[0] + tempVelocity[1] * tempVelocity[1] + tempVelocity[2] * tempVelocity[2];\n\n                if (speed2 > maxSpeed2) {\n                    var speed = sqrt(speed2);\n                    var ratio = maxSpeed / speed;\n                    tempVelocity[0] *= ratio;\n                    tempVelocity[1] *= ratio;\n                    tempVelocity[2] *= ratio;\n\n                    velocities[xi] = tempVelocity[0];\n                    velocities[yi] = tempVelocity[1];\n                    velocities[zi] = tempVelocity[2];\n                }\n            }\n\n            \n\n            positions[xi] += tempVelocity[0];\n            positions[yi] += tempVelocity[1];\n            positions[zi] += tempVelocity[2];\n\n            if(rotationSpeeds) {\n                scaleRotations[si + 1] += rotationSpeeds[i] * delta;\n            }\n\n            boundary.xmin = min(boundary.xmin, positions[xi]);\n            boundary.ymin = min(boundary.ymin, positions[yi]);\n            boundary.zmin = min(boundary.zmin, positions[zi]);\n            boundary.xmax = max(boundary.xmax, positions[xi]);\n            boundary.ymax = max(boundary.ymax, positions[yi]);\n            boundary.zmax = max(boundary.zmax, positions[zi]);\n\n            if (hasAges && ages[i] < lifetimes[i]) {\n                ages[i] = min(ages[i] + delta, lifetimes[i]);\n            }\n        }\n\n        // Expand boundary for stopped particles\n        for (i = 0; i < this.activeParticlesBegin; ++i) {\n            vi = i * 3;\n            xi = vi;\n            yi = vi + 1;\n            zi = vi + 2;\n\n            boundary.xmin = min(boundary.xmin, positions[xi]);\n            boundary.ymin = min(boundary.ymin, positions[yi]);\n            boundary.zmin = min(boundary.zmin, positions[zi]);\n            boundary.xmax = max(boundary.xmax, positions[xi]);\n            boundary.ymax = max(boundary.ymax, positions[yi]);\n            boundary.zmax = max(boundary.zmax, positions[zi]);\n        }\n\n        for (j = 0, len = this.constraints.length; j < len; ++j) {\n            this.constraints[j].constrain(this.activeParticlesBegin, this.numParticles, attributes);\n        }\n\n        var stopped = attributes.stopped;\n        var dead = attributes.dead;\n        for (i = this.activeParticlesBegin; i < this.numParticles; ++i) {\n            if (dead[i]) {\n                this.kill(i);\n                --i;\n            } else if (stopped[i]) {\n                this.stop(i);\n            }\n        }\n            \n\n        this.geometry.setPositions(attributes.positions.subarray(0, this.numParticles * 3));\n        if (attributes.colors) {\n            this.geometry.setColors(attributes.colors.subarray(0, this.numParticles * 4));\n        }\n\n        if (attributes.scaleRotations) {\n            this.geometry.setPointScaleRotations(attributes.scaleRotations.subarray(0, this.numParticles * 2));\n        }\n\n        if (attributes.uvTranslates) {\n            this.geometry.setPointUVTranslates(attributes.uvTranslates.subarray(0, this.numParticles * 2));\n        }\n\n        if (this.numParticles > 0) {\n            this.properties.setEnabled(true);\n        } else {\n            this.properties.setEnabled(false);\n        }\n        \n        this.previousTime = time;\n    };\n\n    ParticleSystem.prototype.kill = function(i) {\n        var attributes = this.attributes;\n        var si = i * 2;\n        var vi = i * 3;\n        var ci = i * 4;\n        var li = i;\n        var sEnd = (this.numParticles - 1) * 2;\n        var vEnd = (this.numParticles - 1) * 3;\n        var cEnd = (this.numParticles - 1) * 4;\n        var lEnd = this.numParticles - 1;\n\n        var positions = attributes.positions;\n        var velocities = attributes.velocities;\n        var colors = attributes.colors;\n        var ages = attributes.ages;\n        var lifetimes = attributes.lifetimes;\n        var paths = attributes.paths;\n        var dead = attributes.dead;\n        var stopped = attributes.stopped;\n        var traps = attributes.traps;\n        var scaleRotations = attributes.scaleRotations;\n        var rotationSpeeds = attributes.rotationSpeeds;\n        var uvTranslates = attributes.uvTranslates;\n\n        positions[vi] = positions[vEnd];\n        positions[vi + 1] = positions[vEnd + 1];\n        positions[vi + 2] = positions[vEnd + 2];\n\n        velocities[vi] = velocities[vEnd];\n        velocities[vi + 1] = velocities[vEnd + 1];\n        velocities[vi + 2] = velocities[vEnd + 2];\n\n        dead[li] = dead[lEnd];\n        stopped[li] = stopped[lEnd];\n\n        if (colors) {\n            colors[ci] = colors[cEnd];\n            colors[ci + 1] = colors[cEnd + 1];\n            colors[ci + 2] = colors[cEnd + 2];\n            colors[ci + 3] = colors[cEnd + 3];\n        }\n\n        if (scaleRotations) {\n            scaleRotations[si] = scaleRotations[sEnd];\n            scaleRotations[si + 1] = scaleRotations[sEnd + 1];\n        }\n\n        if (rotationSpeeds) {\n            rotationSpeeds[li] = rotationSpeeds[lEnd];\n        }\n\n\n        if (uvTranslates) {\n            uvTranslates[si] = uvTranslates[sEnd];\n            uvTranslates[si + 1] = uvTranslates[sEnd + 1];\n        }\n        \n        if (lifetimes) {\n            ages[li] = ages[lEnd];\n            lifetimes[li] = lifetimes[lEnd];\n        } \n\n        if (paths) {\n            paths[li] = paths[lEnd];\n        }\n\n        if (traps) {\n            traps[li] = traps[lEnd];\n        }  \n\n        this.numParticles--;\n    };\n\n    ParticleSystem.prototype.stop = function(i) {\n        var attributes = this.attributes;\n        var si = i * 2;\n        var vi = i * 3;\n        var ci = i * 4;\n        var li = i;\n        var sBegin = this.activeParticlesBegin * 2;\n        var vBegin = this.activeParticlesBegin * 3;\n        var cBegin = this.activeParticlesBegin * 4;\n        var lBegin = this.activeParticlesBegin;\n\n        var positions = attributes.positions;\n        var velocities = attributes.velocities;\n        var colors = attributes.colors;\n        var ages = attributes.ages;\n        var lifetimes = attributes.lifetimes;\n        var paths = attributes.paths;\n        var stopped = attributes.stopped;\n        var traps = attributes.traps;\n        var scaleRotations = attributes.scaleRotations;\n        var rotationSpeeds = attributes.rotationSpeeds;\n        var uvTranslates = attributes.uvTranslates;\n\n        tempPosition[0] = positions[vBegin];\n        tempPosition[1] = positions[vBegin + 1];\n        tempPosition[2] = positions[vBegin + 2];\n\n        positions[vBegin]     = positions[vi]    ;\n        positions[vBegin + 1] = positions[vi + 1];\n        positions[vBegin + 2] = positions[vi + 2];\n\n        positions[vi]     = tempPosition[0];\n        positions[vi + 1] = tempPosition[1];\n        positions[vi + 2] = tempPosition[2];\n\n        tempVelocity[0] = velocities[vBegin];\n        tempVelocity[1] = velocities[vBegin + 1];\n        tempVelocity[2] = velocities[vBegin + 2];\n\n        velocities[vBegin]     = velocities[vi]    ;\n        velocities[vBegin + 1] = velocities[vi + 1];\n        velocities[vBegin + 2] = velocities[vi + 2];\n\n        velocities[vi]     = tempVelocity[0];\n        velocities[vi + 1] = tempVelocity[1];\n        velocities[vi + 2] = tempVelocity[2];\n\n        if (colors) {\n            tempColor[0] = colors[cBegin];\n            tempColor[1] = colors[cBegin + 1];\n            tempColor[2] = colors[cBegin + 2];\n            tempColor[3] = colors[cBegin + 3];\n\n            colors[cBegin]     = colors[ci];\n            colors[cBegin + 1] = colors[ci + 1];\n            colors[cBegin + 2] = colors[ci + 2];\n            colors[cBegin + 3] = colors[ci + 3];\n\n            colors[ci]     = tempColor[0];\n            colors[ci + 1] = tempColor[1];\n            colors[ci + 2] = tempColor[2];\n            colors[ci + 3] = tempColor[3];\n        }\n\n        if (scaleRotations) {\n            tempScaleRotations[0] = scaleRotations[sBegin];\n            tempScaleRotations[1] = scaleRotations[sBegin + 1];\n\n            scaleRotations[sBegin]     = scaleRotations[si];\n            scaleRotations[sBegin + 1] = scaleRotations[si + 1];\n\n            scaleRotations[si]     = tempScaleRotations[0];\n            scaleRotations[si + 1] = tempScaleRotations[1];\n        }\n            \n        if (rotationSpeeds) {\n\n            tempRotationSpeeds[0] = rotationSpeeds[lBegin];\n\n            rotationSpeeds[lBegin]     = rotationSpeeds[i];\n\n            rotationSpeeds[i]      = tempRotationSpeeds[0];\n        }\n\n        if (uvTranslates) {\n            tempUVTranslates[0] = uvTranslates[sBegin];\n            tempUVTranslates[1] = uvTranslates[sBegin + 1];\n\n            uvTranslates[sBegin]     = uvTranslates[si];\n            uvTranslates[sBegin + 1] = uvTranslates[si + 1];\n\n            uvTranslates[si]     = tempUVTranslates[0];\n            uvTranslates[si + 1] = tempUVTranslates[1];\n        }\n        \n        var tmp;\n        if (lifetimes) {\n            tmp = ages[lBegin];\n            ages[lBegin] = ages[li];\n            ages[li] = tmp;\n\n            tmp = lifetimes[lBegin];\n            lifetimes[lBegin] = lifetimes[li];\n            lifetimes[li] = tmp;\n        } \n\n        if (paths) {\n            tmp = paths[lBegin];\n            paths[lBegin] = paths[li];\n            paths[li] = tmp;\n        } \n\n        if (traps) {\n            tmp = traps[lBegin];\n            traps[lBegin] = traps[li];\n            traps[li] = tmp;\n        }  \n\n        stopped[li] = false;\n\n        this.activeParticlesBegin++;\n    };\n\n    ParticleSystem.prototype.reset = function() {\n        this.numParticles = 0;\n        this.activeParticlesBegin = 0;\n    };\n\n    ParticleSystem.prototype.enable = function() {\n        this.properties.setEnabled(true);\n        this.enabled = true;\n    };\n\n    ParticleSystem.prototype.disable = function() {\n        this.properties.setEnabled(false);\n        this.enabled = false;\n    };\n\n    ParticleSystem.prototype.destroy = function() {\n        this.rootNode.destroy();\n    };\n})();\n;(function() {\n    \"use strict\";\n\n    var direction = new Float32Array(3);\n\n    var DirectionalVelocity = Human.particles.creators.DirectionalVelocity = function(options) {\n        this.directionAverage = new Float32Array(options.directionAverage);\n        this.directionVariance = options.directionVariance || 0;\n        this.forceAverage = options.forceAverage;\n        this.forceVariance = options.forceVariance || 0;\n    \n        vec3.normalize(this.directionAverage, this.directionAverage);\n    };\n\n    DirectionalVelocity.prototype.create = function(begin, end, attributes) {\n        \n        var velocities = attributes.velocities;\n\n        var rand = Math.random;\n        var norm = vec3.normalize;\n\n        for (var i = begin; i < end; ++i) {\n            var vi = i * 3;\n\n            var acceleration = this.forceAverage + rand() * 2 * this.forceVariance - this.forceVariance;\n\n            direction[0] = this.directionAverage[0] + rand() * 2 * this.directionVariance - this.directionVariance;\n            direction[1] = this.directionAverage[1] + rand() * 2 * this.directionVariance - this.directionVariance;\n            direction[2] = this.directionAverage[2] + rand() * 2 * this.directionVariance - this.directionVariance;\n\n            norm(direction, direction);\n\n            velocities[vi]     = direction[0] * acceleration;\n            velocities[vi + 1] = direction[1] * acceleration;\n            velocities[vi + 2] = direction[2] * acceleration;\n        }\n        \n    };\n\n})();\n;(function() {\n    \"use strict\";\n\n    var Lifetime = Human.particles.creators.Lifetime = function(options) {\n        this.average = options.average;\n        this.variance = options.variance || 0;\n    };\n\n    Lifetime.prototype.create = function(begin, end, attributes) {\n        \n        var ages = attributes.ages;\n        var lifetimes = attributes.lifetimes;\n\n        var rand = Math.random;\n\n        for (var i = begin; i < end; ++i) {\n            ages[i] = 0;\n            lifetimes[i] = this.average;\n            if (this.variance > 0) {\n                lifetimes[i] += rand() * 2 * this.variance - this.variance;\n            } \n        }\n        \n    };\n\n})();\n;(function() {\n    \"use strict\";\n\n    var PointPosition = Human.particles.creators.PointPosition = function(options) {\n        this.position = new Float32Array(options.position);\n    };\n\n    PointPosition.prototype.create = function(begin, end, attributes) {\n        \n        var positions = attributes.positions;\n\n        for (var i = begin; i < end; ++i) {\n            var vi = i * 3;\n\n            positions[vi]     = this.position[0];\n            positions[vi + 1] = this.position[1];\n            positions[vi + 2] = this.position[2];\n        }\n        \n    };\n\n})();\n;(function() {\n    \"use strict\";\n\n    var direction = new Float32Array(3);\n\n    var RandomVelocity = Human.particles.creators.RandomVelocity = function(options) {\n        this.forceAverage = options.forceAverage;\n        this.forceVariance = options.forceVariance || 0;\n    };\n\n    RandomVelocity.prototype.create = function(begin, end, attributes) {\n        \n        var velocities = attributes.velocities;\n\n        var rand = Math.random;\n        var norm = vec3.normalize;\n\n        for (var i = begin; i < end; ++i) {\n            var vi = i * 3;\n\n            var acceleration = this.forceAverage;\n\n            if (this.forceVariance > 0) {\n                acceleration += rand() * 2 * this.forceVariance - this.forceVariance;\n            }\n\n            direction[0] = rand() * 2 - 1;\n            direction[1] = rand() * 2 - 1;\n            direction[2] = rand() * 2 - 1;\n\n            norm(direction, direction);\n\n            velocities[vi]     = direction[0] * acceleration;\n            velocities[vi + 1] = direction[1] * acceleration;\n            velocities[vi + 2] = direction[2] * acceleration;\n        }\n        \n    };\n\n})();\n;(function() {\n    \"use strict\";\n\n    var position = vec3.create();\n\n    var SpherePosition = Human.particles.creators.SpherePosition = function(options) {\n        this.translate = null;\n        this.xform = null;\n\n        if (options.translate) {\n            this.translate = new Float32Array(options.translate);\n        }\n\n        if (options.scale || options.rotate) {\n            this.xform = mat3.create();\n\n            Human.math.buildRotationScaleMat3(this.xform, options.rotate, options.scale);\n        }\n    };\n\n    SpherePosition.prototype.create = function(begin, end, attributes) {\n\n        var positions = attributes.positions;\n\n        var rand = Math.random;\n        var PI = Math.PI;\n        var sin = Math.sin;\n        var cos = Math.cos;\n        \n        for (var i = begin; i < end; ++i) {\n            var vi = i * 3;\n\n            var phi = rand() * PI;\n            var theta = rand() * PI * 2;\n\n            var r = rand();\n\n            position[0] = r * sin(phi) * sin(theta);\n            position[1] = r * cos(phi);\n            position[2] = r * sin(phi) * cos(theta);\n\n            if (this.xform) {\n                vec3.transformMat3(position, position, this.xform);\n            }\n\n            if (this.translate) {\n                position[0] += this.translate[0];\n                position[1] += this.translate[1];\n                position[2] += this.translate[2];\n            }\n\n            positions[vi]     = position[0];\n            positions[vi + 1] = position[1];\n            positions[vi + 2] = position[2];\n        }\n        \n    };\n\n})();\n;(function() {\n    \"use strict\";\n\n    var position = vec3.create();\n\n    var CubePosition = Human.particles.creators.CubePosition = function(options) {\n        this.translate = null;\n        this.xform = null;\n\n        if (options.translate) {\n            this.translate = new Float32Array(options.translate);\n        }\n\n        if (options.scale || options.rotate) {\n            this.xform = mat3.create();\n\n            Human.math.buildRotationScaleMat3(this.xform, options.rotate, options.scale);\n        }\n    };\n\n    CubePosition.prototype.create = function(begin, end, attributes) {\n\n        var positions = attributes.positions;\n        \n        var rand = Math.random;\n\n        for (var i = begin; i < end; ++i) {\n            var vi = i * 3;\n\n            position[0] = rand() - 0.5;\n            position[1] = rand() - 0.5;\n            position[2] = rand() - 0.5;\n\n            if (this.xform) {\n                vec3.transformMat3(position, position, this.xform);\n            }\n\n            if (this.translate) {\n                position[0] += this.translate[0];\n                position[1] += this.translate[1];\n                position[2] += this.translate[2];\n            }\n\n            positions[vi]     = position[0];\n            positions[vi + 1] = position[1];\n            positions[vi + 2] = position[2];\n        }\n        \n    };\n\n})();\n;(function() {\n    \"use strict\";\n\n    var position = vec3.create();\n\n    var CylinderPosition = Human.particles.creators.CylinderPosition = function(options) {\n        this.translate = null;\n        this.xform = null;\n\n        if (options.translate) {\n            this.translate = new Float32Array(options.translate);\n        }\n\n        if (options.scale || options.rotate) {\n            this.xform = mat3.create();\n\n            Human.math.buildRotationScaleMat3(this.xform, options.rotate, options.scale);\n        }\n    };\n\n    CylinderPosition.prototype.create = function(begin, end, attributes) {\n\n        var positions = attributes.positions;\n\n        var rand = Math.random;\n        var PI = Math.PI;\n        var sin = Math.sin;\n        var cos = Math.cos;\n        \n        for (var i = begin; i < end; ++i) {\n            var vi = i * 3;\n\n            var theta = rand() * PI * 2;\n            var r = rand();\n            var y = rand() * 2 - 1;\n\n            position[0] = r * cos(theta);\n            position[1] = y;\n            position[2] = r * sin(theta);\n\n            if (this.xform) {\n                vec3.transformMat3(position, position, this.xform);\n            }\n\n            if (this.translate) {\n                position[0] += this.translate[0];\n                position[1] += this.translate[1];\n                position[2] += this.translate[2];\n            }\n\n            positions[vi]     = position[0];\n            positions[vi + 1] = position[1];\n            positions[vi + 2] = position[2];\n        }\n        \n    };\n\n})();\n;(function() {\n    \"use strict\";\n\n    var RandomScale = Human.particles.creators.RandomScale = function(options) {\n        this.average = options.average;\n        this.variance = options.variance || 0;\n    };\n\n    RandomScale.prototype.create = function(begin, end, attributes) {\n        \n        var scaleRotations = attributes.scaleRotations;\n\n        var rand = Math.random;\n\n        var sBegin = begin * 2;\n        var sEnd = end * 2;\n        for (var i = sBegin; i < sEnd; i += 2) {\n            var scale = this.average;\n\n            if (this.variance > 0) {\n                scale += rand() * 2 * this.variance - this.variance;\n            }\n\n            scaleRotations[i] = scale;\n        }\n        \n    };\n\n})();\n;(function() {\n    \"use strict\";\n\n    var RandomRotation = Human.particles.creators.RandomRotation = function(options) {\n        this.average = options.average * Human.math.TO_RADIANS;\n        this.variance = (options.variance || 0) * Human.math.TO_RADIANS;\n    };\n\n    RandomRotation.prototype.create = function(begin, end, attributes) {\n        \n        var scaleRotations = attributes.scaleRotations;\n\n        var rand = Math.random;\n\n        var rBegin = begin * 2 + 1;\n        var rEnd = end * 2 + 1;\n        for (var i = rBegin; i < rEnd; i += 2) {\n            var rotation = this.average;\n\n            if (this.variance > 0) {\n                rotation += rand() * 2 * this.variance - this.variance;\n            }\n\n            scaleRotations[i] = rotation;\n        }\n        \n    };\n\n})();\n;(function() {\n    \"use strict\";\n\n    var RandomRotationSpeed = Human.particles.creators.RandomRotationSpeed = function(options) {\n        this.average = options.average * Human.math.TO_RADIANS;\n        this.variance = (options.variance || 0) * Human.math.TO_RADIANS;\n    };\n\n    RandomRotationSpeed.prototype.create = function(begin, end, attributes) {\n        \n        var rotationSpeeds = attributes.rotationSpeeds;\n\n        var rand = Math.random;\n\n        for (var i = begin; i < end; i++) {\n            var rotationSpeed = this.average;\n            \n            if (this.variance > 0) {\n                rotationSpeed += rand() * 2 * this.variance - this.variance;\n            }\n\n            rotationSpeeds[i] = rotationSpeed;\n        }\n        \n    };\n\n})();;(function() {\n    \"use strict\";\n\n    var SpriteAnimationDuration = Human.particles.creators.SpriteAnimationDuration = function(options, systemOptions) {\n        this.rows = systemOptions.spriteRows;\n        this.cols = systemOptions.spriteCols;\n        this.startFrame = systemOptions.spriteStartFrame;\n        this.endFrame = systemOptions.spriteEndFrame;\n        this.average = options.average;\n        this.variance = options.variance;\n    };\n\n    SpriteAnimationDuration.prototype.create = function(begin, end, attributes) {\n        \n        var frameDuration = attributes.spriteFrameDuration;\n\n        var rand = Math.random;\n        var max = Math.max;\n\n        for (var i = begin; i < end; i++) {\n            var secPerLoop = this.average;\n\n            if (this.variance > 0) {\n                secPerLoop += rand() * 2 * this.variance - this.variance;\n            }\n\n            frameDuration[i] = max(secPerLoop / (this.endFrame - this.startFrame), 0);\n        }\n        \n    };\n\n})();\n;(function() {\n    \"use strict\";\n\n    var direction = new Float32Array(3);\n\n    var BrownianMotion = Human.particles.updaters.BrownianMotion = function(options) {\n        this.frequency = options.frequency;\n        this.forceAverage = options.forceAverage;\n        this.forceVariance = options.forceVariance || 0;\n        this.shape = null;\n        this.shapeDirection = \"in\";\n    };\n\n    BrownianMotion.prototype.update = function(begin, end, attributes, delta) {\n        \n        var positions = attributes.positions;\n        var velocities = attributes.velocities;\n        var rand = Math.random;\n        var norm = vec3.normalize;\n        var hasShape = !!this.shape;\n\n        var frequency = this.frequency * delta;\n        var forceAverage = this.forceAverage * delta;\n        var forceVariance = this.forceVariance * delta;\n\n        for (var i = begin; i < end; ++i) {\n\n            if (hasShape && !this.shape[this.shapeDirection](positions, i)) {\n                continue;\n            }\n\n            if (rand() < frequency) {\n                var vi = i * 3;\n\n                var acceleration = forceAverage;\n\n                if (forceVariance > 0) {\n                    acceleration += rand() * 2 * forceVariance - forceVariance;\n                }\n\n                direction[0] = rand() * 2 - 1;\n                direction[1] = rand() * 2 - 1;\n                direction[2] = rand() * 2 - 1;\n\n                norm(direction, direction);\n\n                velocities[vi]     += direction[0] * acceleration;\n                velocities[vi + 1] += direction[1] * acceleration;\n                velocities[vi + 2] += direction[2] * acceleration;\n            }\n        }\n        \n    };\n\n})();\n;(function() {\n    \"use strict\";\n\n    var Friction = Human.particles.updaters.Friction = function(options) {\n        this.friction = 1 - options.friction;\n        this.shape = null;\n        this.shapeDirection = \"in\";\n    };\n\n    Friction.prototype.update = function(begin, end, attributes, delta) {\n        \n        var positions = attributes.positions;\n        var velocities = attributes.velocities;\n        var hasShape = !!this.shape;\n\n        var friction = Math.pow(this.friction, delta);\n\n        for (var i = begin; i < end; ++i) {\n\n            if (hasShape && !this.shape[this.shapeDirection](positions, i)) {\n                continue;\n            }\n\n            var vi = i * 3;\n\n            velocities[vi] *= friction;\n            velocities[vi + 1] *= friction;\n            velocities[vi + 2] *= friction;\n        }\n        \n    };\n\n})();\n;(function() {\n    \"use strict\";\n\n    var direction = new Float32Array(3);\n\n    var UniformForce = Human.particles.updaters.UniformForce = function(options) {\n        this.directionAverage = new Float32Array(options.directionAverage);\n        this.directionVariance = options.directionVariance || 0;\n        this.forceAverage = options.forceAverage;\n        this.forceVariance = options.forceVariance || 0;\n        this.shape = null;\n        this.shapeDirection = \"in\";\n    \n        vec3.normalize(this.directionAverage, this.directionAverage);\n    };\n\n    UniformForce.prototype.update = function(begin, end, attributes, delta) {\n        \n        var positions = attributes.positions;\n        var velocities = attributes.velocities;\n        var rand = Math.random;\n        var norm = vec3.normalize;\n        var hasShape = !!this.shape;\n\n        var forceAverage = this.forceAverage * delta;\n        var forceVariance = this.forceVariance * delta;\n\n        for (var i = begin; i < end; ++i) {\n\n            if (hasShape && !this.shape[this.shapeDirection](positions, i)) {\n                continue;\n            }\n\n            var vi = i * 3;\n\n            var acceleration = forceAverage;\n\n            if (forceVariance > 0) {\n                acceleration += rand() * 2 * forceVariance - forceVariance;\n            }\n\n            direction[0] = this.directionAverage[0];\n            direction[1] = this.directionAverage[1];\n            direction[2] = this.directionAverage[2];\n\n            if (this.directionVariance) {\n                direction[0] += rand() * 2 * this.directionVariance - this.directionVariance;\n                direction[1] += rand() * 2 * this.directionVariance - this.directionVariance;\n                direction[2] += rand() * 2 * this.directionVariance - this.directionVariance;\n            \n                norm(direction, direction);\n            }\n\n            velocities[vi]     += direction[0] * acceleration;\n            velocities[vi + 1] += direction[1] * acceleration;\n            velocities[vi + 2] += direction[2] * acceleration;\n        }\n    };\n\n})();\n;(function() {\n    \"use strict\";\n\n    var direction = new Float32Array(3);\n\n    var RadialForce = Human.particles.updaters.RadialForce = function(options) {\n        this.position = new Float32Array(options.position);\n        this.forceAverage = options.forceAverage;\n        this.forceVariance = options.forceVariance || 0;\n        this.shape = null;\n        this.shapeDirection = \"in\";\n    };\n\n    RadialForce.prototype.update = function(begin, end, attributes, delta) {\n        \n        var positions = attributes.positions;\n        var velocities = attributes.velocities;\n        var rand = Math.random;\n        var norm = vec3.normalize;\n        var hasShape = !!this.shape;\n\n        var forceAverage = this.forceAverage * delta;\n        var forceVariance = this.forceVariance * delta;\n\n        for (var i = begin; i < end; ++i) {\n\n            if (hasShape && !this.shape[this.shapeDirection](positions, i)) {\n                continue;\n            }\n\n            var vi = i * 3;\n            var acceleration = forceAverage;\n\n            if (forceVariance) {\n                acceleration += rand() * 2 * forceVariance - forceVariance;\n            }\n\n            direction[0] = positions[vi]     - this.position[0];\n            direction[1] = positions[vi + 1] - this.position[1];\n            direction[2] = positions[vi + 2] - this.position[2];\n\n            norm(direction, direction);\n\n            velocities[vi]     += direction[0] * acceleration;\n            velocities[vi + 1] += direction[1] * acceleration;\n            velocities[vi + 2] += direction[2] * acceleration;\n        }\n    };\n\n})();\n;(function() {\n    \"use strict\";\n\n    var AgeColorBlend = Human.particles.updaters.AgeColorBlend = function(options) {\n        this.colors = new Array(options.colors.length);\n\n        for (var i = 0, len = options.colors.length; i < len; ++i) {\n            this.colors[i] = new Uint8Array(options.colors[i]);\n        }\n        \n        this.shape = null;\n        this.shapeDirection = \"in\";\n    };\n\n    AgeColorBlend.prototype.update = function(begin, end, attributes) {\n        \n        var positions = attributes.positions;\n        var ages = attributes.ages;\n        var lifetimes = attributes.lifetimes;\n        var colors = attributes.colors;\n        var hasShape = !!this.shape;\n        var numIntervals = this.colors.length - 1;\n\n        var floor = Math.floor;\n\n        for (var i = begin; i < end; ++i) {\n\n            if (hasShape && !this.shape[this.shapeDirection](positions, i)) {\n                continue;\n            }\n\n            var ci = i * 4;\n            var index = (ages[i] / lifetimes[i]) * numIntervals;\n            var idx1 = floor(index);\n            var idx2 = idx1 + 1;\n\n            var color1 = this.colors[idx1];\n            var color2 = this.colors[idx2] || this.colors[idx1];\n\n            var factor = index - idx1;\n            var oneMinus = 1 - factor;\n            colors[ci]     = oneMinus * color1[0] + factor * color2[0];\n            colors[ci + 1] = oneMinus * color1[1] + factor * color2[1];\n            colors[ci + 2] = oneMinus * color1[2] + factor * color2[2];\n            colors[ci + 3] = oneMinus * color1[3] + factor * color2[3];\n        }\n        \n    };\n\n})();\n;(function () {\n    \"use strict\";\n\n    var tempPosition = new Float32Array(3);\n    var tempVelocity = new Float32Array(3);\n    var tempVec3 = new Float32Array(3);\n\n\n    var Path = Human.particles.updaters.Path = function Path() {\n        this.nodes = [];\n        this.shape = null;\n        this.shapeDirection = \"in\";\n    };\n\n    Path.prototype.addNode = function(node) {\n        \n        node.first = this.nodes.length === 0;\n        node.position = new Float32Array(node.position);\n        node.forceVariance = node.forceVariance || 0;\n        this.nodes.push(node);\n\n        if (node.first) {\n            node.vec = null;\n            node.dir = null;\n            node.length = null;\n        } else {\n            var prevNode = this.nodes[this.nodes.length - 2];\n            node.vec = vec3.subtract(vec3.create(), node.position, prevNode.position);\n            node.dir = vec3.normalize(vec3.create(), node.vec);\n            node.length = vec3.length(node.vec);\n        }  \n    };\n\n    Path.prototype.updateNode = function(i, nodeData) {\n        var node = this.nodes[i];\n\n        if (nodeData.position) {\n            node.position = nodeData.position;\n\n            if (!node.first) {\n                var prevNode = this.nodes[i - 1];\n                vec3.subtract(node.vec, node.position, prevNode.position);\n                vec3.normalize(node.dir, node.vec);\n                node.length = vec3.length(node.vec);\n            }  \n\n            if (i < this.nodes.length - 1) {\n                var nextNode = this.nodes[i + 1];\n                vec3.subtract(nextNode.vec, nextNode.position, node.position);\n                vec3.normalize(nextNode.dir, nextNode.vec);\n                nextNode.length = vec3.length(nextNode.vec);\n            }\n        }\n\n        if (nodeData.radius) {\n            node.radius = nodeData.radius;\n        }\n\n        if (nodeData.forceAverage) {\n            node.forceAverage = nodeData.forceAverage;\n        }\n    };\n\n    Path.prototype.update = function(begin, end, attributes, delta) {\n        \n        var positions = attributes.positions;\n        var velocities = attributes.velocities;\n        var paths = attributes.paths;\n        var hasShape = !!this.shape;\n\n        var rand = Math.random;\n        var dist = vec3.distance;\n        var norm = vec3.normalize;\n        var sub = vec3.subtract;\n        var dot = vec3.dot;\n        var length = vec3.length;\n        var scale = vec3.scale;\n\n        var node;\n\n        for (var i = begin; i < end; ++i) {\n\n            if (hasShape && !this.shape[this.shapeDirection](positions, i)) {\n                continue;\n            }\n\n            node = this.nodes[paths[i]];\n            if (!node) {\n                continue;\n            }\n\n            var vi = i * 3;\n\n            tempPosition[0] = positions[vi];\n            tempPosition[1] = positions[vi + 1];\n            tempPosition[2] = positions[vi + 2];\n\n            var pathDir;\n\n            if (node.first) {\n                if (dist(tempPosition, node.position) < node.radius) {\n                    paths[i]++;\n                    node = this.nodes[paths[i]];\n                    if (!node) {\n                        continue;\n                    }\n                }\n\n                pathDir = sub(tempVec3, node.position, tempPosition);\n                norm(pathDir, pathDir);\n                \n            } else {\n                var prevNode = this.nodes[paths[i] - 1];\n                var diff = sub(tempVec3, tempPosition, prevNode.position);\n                var proj = dot(diff, node.dir);\n\n                if (proj > node.length) {\n                    paths[i]++;\n                    node = this.nodes[paths[i]];\n                    if (!node) {\n                        continue;\n                    }\n\n                    tempVelocity[0] = velocities[vi];    \n                    tempVelocity[1] = velocities[vi + 1];\n                    tempVelocity[2] = velocities[vi + 2];\n\n                    var speed = length(tempVelocity);\n                    scale(tempVelocity, node.dir, speed);\n\n                    velocities[vi]     = tempVelocity[0];\n                    velocities[vi + 1] = tempVelocity[1];\n                    velocities[vi + 2] = tempVelocity[2];\n                }\n\n                pathDir = node.dir;\n            }\n\n            var forceAverage = node.forceAverage * delta;\n            var forceVariance = node.forceVariance * delta;\n\n            var acceleration = forceAverage;\n\n            if (forceVariance > 0) {\n                acceleration += rand() * 2 * forceVariance - forceVariance;\n            }\n\n            velocities[vi]     += pathDir[0] * acceleration;\n            velocities[vi + 1] += pathDir[1] * acceleration;\n            velocities[vi + 2] += pathDir[2] * acceleration;\n\n        }\n\n    };\n})();\n;(function() {\n    \"use strict\";\n\n    var direction = new Float32Array(3);\n\n    var Gravity = Human.particles.updaters.Gravity = function(options) {\n        this.position = new Float32Array(options.position);\n        this.radius = options.radius;\n        this.forceAverage = options.forceAverage;\n        this.forceVariance = options.forceVariance || 0;\n        this.shape = null;\n        this.shapeDirection = \"in\";\n    };\n\n    Gravity.prototype.update = function(begin, end, attributes, delta) {\n        \n        var positions = attributes.positions;\n        var velocities = attributes.velocities;\n        var rand = Math.random;\n        var max = Math.max;\n        var length = vec3.length;\n        var hasShape = !!this.shape;\n\n        var forceAverage = this.forceAverage * delta;\n        var forceVariance = this.forceVariance * delta;\n\n        for (var i = begin; i < end; ++i) {\n\n            if (hasShape && !this.shape[this.shapeDirection](positions, i)) {\n                continue;\n            }\n\n            var vi = i * 3;\n            var acceleration = forceAverage;\n\n            if (forceVariance) {\n                acceleration += rand() * 2 * forceVariance - forceVariance;\n            }\n\n            direction[0] = this.position[0] - positions[vi];\n            direction[1] = this.position[1] - positions[vi + 1];\n            direction[2] = this.position[2] - positions[vi + 2];\n\n            var distance = max(length(direction), this.radius);\n\n            direction[0] /= distance;\n            direction[1] /= distance;\n            direction[2] /= distance;\n\n            acceleration /= distance * distance;\n\n            velocities[vi]     += direction[0] * acceleration;\n            velocities[vi + 1] += direction[1] * acceleration;\n            velocities[vi + 2] += direction[2] * acceleration;\n        }\n    };\n\n})();\n;(function() {\n    \"use strict\";\n\n    var SpriteAnimation = Human.particles.updaters.SpriteAnimation = function(options, systemOptions) {\n        this.rows = systemOptions.spriteRows;\n        this.cols = systemOptions.spriteCols;\n        this.startFrame = systemOptions.spriteStartFrame;\n        this.endFrame = systemOptions.spriteEndFrame;\n    };\n\n    SpriteAnimation.prototype.update = function(begin, end, attributes, delta) {\n\n        var uvTranslates = attributes.uvTranslates;\n        var frameCounter = attributes.spriteFrameCounter;\n        var frameDuration = attributes.spriteFrameDuration;\n        var currentTime = attributes.spriteCurrentTime;\n        \n        for (var i = begin; i < end; i++) {\n            currentTime[i] += delta;\n            if(currentTime[i] >= frameDuration[i]) {\n                currentTime[i] = 0.0;\n                frameCounter[i]++;\n                uvTranslates[i * 2] += 1.0 / this.cols;\n                if(uvTranslates[i * 2] === 1.0) {\n                    uvTranslates[i * 2] = 0.0;\n                    uvTranslates[i * 2 + 1] -= 1.0 / this.rows;\n                }\n                if(uvTranslates[i * 2 + 1] === -1.0 / this.rows) {\n                    uvTranslates[i * 2] = this.startFrame % this.cols * 1.0 / this.cols;\n                    uvTranslates[i * 2 + 1] = (this.rows - 1.0 - Math.floor(this.startFrame / this.cols)) * 1.0 / this.rows;\n                }\n                if(frameCounter[i] > this.endFrame) {\n                    frameCounter[i] = this.startFrame;\n                    uvTranslates[i * 2] = this.startFrame % this.cols * 1.0 / this.cols;\n                    uvTranslates[i * 2 + 1] = (this.rows - 1.0 - Math.floor(this.startFrame / this.cols)) * 1.0 / this.rows;\n                }\n            }\n        }\n    };\n\n})();\n;(function() {\n    \"use strict\";\n\n    var direction = new Float32Array(3);\n    var position = new Float32Array(3);\n    var diff = new Float32Array(3);\n    var projection = new Float32Array(3);\n    var x = new Float32Array(3);\n\n    var AxisForce = Human.particles.updaters.AxisForce = function(options) {\n        this.position = new Float32Array(options.position);//point on line\n        vec3.normalize(options.direction, options.direction);\n        this.direction = new Float32Array(options.direction);//directon of line\n        this.forceAverage = options.forceAverage;\n        this.forceVariance = options.forceVariance || 0;\n        this.shape = null;\n        this.shapeDirection = \"in\";\n    };\n\n    AxisForce.prototype.update = function(begin, end, attributes, delta) {\n        \n        var positions = attributes.positions;\n        var velocities = attributes.velocities;\n        var rand = Math.random;\n        var hasShape = !!this.shape;\n\n        var forceAverage = this.forceAverage * delta;\n        var forceVariance = this.forceVariance * delta;\n\n        for (var i = begin; i < end; ++i) {\n\n            if (hasShape && !this.shape[this.shapeDirection](positions, i)) {\n                continue;\n            }\n\n            var vi = i * 3;\n            var acceleration = forceAverage;\n\n            if (forceVariance) {\n                acceleration += rand() * 2 * forceVariance - forceVariance;\n            }\n\n            position[0] = positions[vi];\n            position[1] = positions[vi + 1];\n            position[2] = positions[vi + 2];\n\n            vec3.sub(diff, position, this.position);\n            var d = vec3.dot(diff, this.direction);// Scalar projection of diff on line direction.\n            vec3.scale(projection, this.direction, d);// Vector projection of diff on line.\n            vec3.add(x, projection, this.position);// Perpendicular projection of particle position on line\n            vec3.sub(direction, position, x);// Perpendicular vector from line to particle position\n            vec3.normalize(direction, direction);// Unit vector of perp direction from line to point\n\n            velocities[vi]     += direction[0] * acceleration;\n            velocities[vi + 1] += direction[1] * acceleration;\n            velocities[vi + 2] += direction[2] * acceleration;\n        }\n    };\n\n})();\n;(function() {\n    \"use strict\";\n\n    var LifetimeKill = Human.particles.constraints.LifetimeKill = function() {\n    };\n\n    LifetimeKill.prototype.constrain = function(begin, end, attributes) {\n        \n        var ages = attributes.ages;\n        var lifetimes = attributes.lifetimes;\n        var dead = attributes.dead;\n\n        for (var i = begin; i < end; ++i) {\n            if (ages[i] >= lifetimes[i]) {\n                dead[i] = true;\n            }\n        }\n        \n    };\n\n})();;(function() {\n    \"use strict\";\n\n    var LifetimeStop = Human.particles.constraints.LifetimeStop = function() {\n    };\n\n    LifetimeStop.prototype.constrain = function(begin, end, attributes) {\n        \n        var ages = attributes.ages;\n        var lifetimes = attributes.lifetimes;\n        var stopped = attributes.stopped;\n\n        for (var i = begin; i < end; ++i) {\n            if (ages[i] >= lifetimes[i]) {\n                stopped[i] = true;\n            }\n        }\n        \n    };\n\n})();\n;(function() {\n    \"use strict\";\n\n    var ShapeKill =  Human.particles.constraints.ShapeKill = function ShapeKill(shape, direction, trapId) {\n        this.shape = shape;\n        this.direction = direction;\n\n        if (trapId >= 0) {\n            this.trap = true;\n            this.trapMask = 1 << trapId;\n        } else {\n            this.trap = false;\n            this.trapMask = 0;\n        }\n    };\n\n    ShapeKill.prototype.constrain = function(begin, end, attributes) {\n\n        var positions = attributes.positions;\n        var dead = attributes.dead;\n        var traps = attributes.traps;\n        \n        var trap = this.trap;\n        var mask = this.trapMask;\n        \n        for (var i = begin; i < end; ++i) {\n            if (this.shape[this.direction](positions, i)) {\n                if (trap && (traps[i] & mask) === 0) {\n                    continue;\n                }\n\n                dead[i] = true;\n            } else if (trap) {\n                traps[i] |= mask;\n            }\n            \n        }\n    };\n\n})();\n;(function() {\n    \"use strict\";\n\n    var ShapeStop =  Human.particles.constraints.ShapeStop = function ShapeStop(shape, direction, trapId) {\n        this.shape = shape;\n        this.direction = direction;\n\n        if (trapId >= 0) {\n            this.trap = true;\n            this.trapMask = 1 << trapId;\n        } else {\n            this.trap = false;\n            this.trapMask = 0;\n        }\n    };\n\n    ShapeStop.prototype.constrain = function(begin, end, attributes) {\n\n        var positions = attributes.positions;\n        var stopped = attributes.stopped;\n        var traps = attributes.traps;\n\n        var trap = this.trap;\n        var mask = this.trapMask;\n        \n        for (var i = begin; i < end; ++i) {\n            if (this.shape[this.direction](positions, i)) {\n                if (trap && (traps[i] & mask) === 0) {\n                    continue;\n                }\n\n                stopped[i] = true;\n            } else if (trap) {\n                traps[i] |= mask;\n            }\n            \n        }\n    };\n\n})();\n;(function() {\n    \"use strict\";\n\n    var tempPosition = new Float32Array(3);\n    var tempVec3 = new Float32Array(3);\n    var tempVec3b = new Float32Array(3);\n    var tempVec3c = new Float32Array(3);\n    var tempVec3d = new Float32Array(3);\n\n    var PathRadius = Human.particles.constraints.PathRadius = function PathRadius(path) {\n        this.nodes = path.nodes;\n    };\n\n    PathRadius.prototype.constrain = function(begin, end, attributes) {\n\n        var positions = attributes.positions;\n        var paths = attributes.paths;\n\n        var norm = vec3.normalize;\n        var sub = vec3.subtract;\n        var dot = vec3.dot;\n        var length = vec3.length;\n        var scale = vec3.scale;\n\n        for (var i = begin; i < end; ++i) {\n            var vi = i * 3;\n\n            if (paths[i] < 1) {\n                continue;\n            }\n\n            var node = this.nodes[paths[i]];\n\n            if (!node) {\n                continue;\n            }\n\n            tempPosition[0] = positions[vi];\n            tempPosition[1] = positions[vi + 1];\n            tempPosition[2] = positions[vi + 2];\n\n            var prevNode = this.nodes[paths[i] - 1];\n            var diff = sub(tempVec3, tempPosition, prevNode.position);\n            var proj = dot(diff, node.dir);\n\n            var positionProj = scale(tempVec3b, node.dir, proj);\n            var positionPerp = sub(tempVec3c, diff, positionProj);\n            var dist = length(positionPerp);\n\n            if (dist > node.radius) {\n                norm(positionPerp, positionPerp);\n                var correct = scale(tempVec3d, positionPerp, node.radius - dist);\n                positions[vi]     += correct[0];\n                positions[vi + 1] += correct[1];\n                positions[vi + 2] += correct[2];\n            }\n        }        \n\n    };\n})();;(function() {\n    \"use strict\";\n\n\n    var PathKill = Human.particles.constraints.PathKill = function PathKill(path) {\n        this.nodes = path.nodes;\n    };\n\n    PathKill.prototype.constrain = function(begin, end, attributes) {\n\n        var numNodes = this.nodes.length;\n        var paths = attributes.paths;\n        var dead = attributes.dead;\n\n        for (var i = begin; i < end; ++i) {\n            if (paths[i] >= numNodes) {\n                dead[i] = true;\n            }\n        }        \n\n    };\n})();;(function() {\n    \"use strict\";\n\n\n    var PathStop = Human.particles.constraints.PathStop = function PathStop(path) {\n        this.nodes = path.nodes;\n    };\n\n    PathStop.prototype.constrain = function(begin, end, attributes) {\n\n        var numNodes = this.nodes.length;\n        var paths = attributes.paths;\n        var stopped = attributes.stopped;\n\n        for (var i = begin; i < end; ++i) {\n            if (paths[i] >= numNodes) {\n                stopped[i] = true;\n            }\n        }        \n\n    };\n})();;(function() {\n    \"use strict\";\n\n    var tempVelocity = new Float32Array(3);\n    var tempVec3 = new Float32Array(3);\n    var tempVec3b = new Float32Array(3);\n\n    var surfacePosition = new Float32Array(3);\n    var surfaceNormal = new Float32Array(3);\n\n    var ShapeBounce =  Human.particles.constraints.ShapeBounce = function ShapeBounce(shape, direction, trapId) {\n        this.shape = shape;\n        this.direction = direction;\n\n        if (trapId >= 0) {\n            this.trap = true;\n            this.trapMask = 1 << trapId;\n        } else {\n            this.trap = false;\n            this.trapMask = 0;\n        }\n    };\n\n    ShapeBounce.prototype.constrain = function(begin, end, attributes) {\n\n        var positions = attributes.positions;\n        var velocities = attributes.velocities;\n        var traps = attributes.traps;\n\n        var trap = this.trap;\n        var mask = this.trapMask;\n\n        var sub = vec3.subtract;\n        var dot = vec3.dot;\n        var length = vec3.length;\n        var scale = vec3.scale;\n        \n        for (var i = begin; i < end; ++i) {\n            if (this.shape[this.direction](positions, i)) {\n                if (trap && (traps[i] & mask) === 0) {\n                    continue;\n                }\n\n                var vi = i * 3;\n\n                this.shape.surfaceProjection(positions, i, surfacePosition, surfaceNormal);\n                positions.set(surfacePosition, vi);\n\n                tempVelocity[0] = velocities[vi];\n                tempVelocity[1] = velocities[vi + 1];\n                tempVelocity[2] = velocities[vi + 2];\n\n                var speed = length(tempVelocity);\n                \n                tempVelocity[0] /= speed;\n                tempVelocity[1] /= speed;\n                tempVelocity[2] /= speed;\n\n                var dotN = dot(tempVelocity, surfaceNormal);\n                var scaledN = scale(tempVec3, surfaceNormal, 2 * dotN);\n                var reflect = sub(tempVec3b, tempVelocity, scaledN);\n                scale(reflect, reflect, speed);\n\n                velocities[vi]     = reflect[0]; \n                velocities[vi + 1] = reflect[1]; \n                velocities[vi + 2] = reflect[2];\n            } else if (trap) {\n                traps[i] |= mask;\n            }\n        }\n    };\n\n})();\n;(function () {\n    \"use strict\";\n\n    var position = vec3.create();\n\n    var Sphere = Human.particles.shapes.Sphere = function(options) {\n        this.translate = null;\n        this.rotate = null;\n        this.scale = null;\n        this.xform = null;\n        this.inverseXform = null;\n        this.normalXform = null;\n\n        if (options.translate) {\n            this.translate = new Float32Array(options.translate);\n        }\n\n        if (options.scale || options.rotate) {\n            this.xform = mat3.create();\n            this.inverseXform = mat3.create();\n            this.normalXform = mat3.create();\n\n            if (options.rotate) {\n                this.rotate = new Float32Array(options.rotate);\n            }\n\n            if (options.scale) {\n                this.scale = new Float32Array(options.scale);\n            }\n\n            this.updateXform();\n        }\n    };\n\n    Sphere.prototype.updateXform = function() {\n        if (!this.xform) {\n            return;\n        }\n        \n        Human.math.buildRotationScaleMat3(this.xform, this.rotate, this.scale);\n        mat3.invert(this.inverseXform, this.xform);\n        mat3.transpose(this.normalXform, this.inverseXform);\n    };\n\n    Sphere.prototype.in = function(positions, i) {\n        var vi = i * 3;\n\n        position[0] = positions[vi];\n        position[1] = positions[vi + 1];\n        position[2] = positions[vi + 2];\n\n        if (this.translate) {\n            position[0] -= this.translate[0];\n            position[1] -= this.translate[1];\n            position[2] -= this.translate[2];\n        }\n\n        if (this.inverseXform) {\n            vec3.transformMat3(position, position, this.inverseXform);\n        }\n\n        var x = position[0];\n        var y = position[1];\n        var z = position[2];\n\n        return x * x + y * y + z * z <= 1;\n    };\n\n    Sphere.prototype.out = function(positions, i) {\n        var vi = i * 3;\n        \n        position[0] = positions[vi];\n        position[1] = positions[vi + 1];\n        position[2] = positions[vi + 2];\n\n        if (this.translate) {\n            position[0] -= this.translate[0];\n            position[1] -= this.translate[1];\n            position[2] -= this.translate[2];\n        }\n\n        if (this.inverseXform) {\n            vec3.transformMat3(position, position, this.inverseXform);\n        }\n\n        var x = position[0];\n        var y = position[1];\n        var z = position[2];\n\n        return x * x + y * y + z * z >= 1;\n    };\n\n    Sphere.prototype.surfaceProjection = function(positions, i, position, normal) {\n        var vi = i * 3;\n\n        position[0] = positions[vi];\n        position[1] = positions[vi + 1];\n        position[2] = positions[vi + 2];\n\n        if (this.translate) {\n            position[0] -= this.translate[0];\n            position[1] -= this.translate[1];\n            position[2] -= this.translate[2];\n        }\n\n        if (this.inverseXform) {\n            vec3.transformMat3(position, position, this.inverseXform);\n        }\n\n\n        vec3.normalize(position, position);\n        normal.set(position);\n\n        if (this.xform) {\n            vec3.transformMat3(position, position, this.xform);\n            vec3.transformMat3(normal, normal, this.normalXform);\n            vec3.normalize(normal, normal);\n        }\n\n        if (this.translate) {\n            position[0] += this.translate[0];\n            position[1] += this.translate[1];\n            position[2] += this.translate[2];\n        }\n    };\n\n\n\n})();\n;(function () {\n    \"use strict\";\n\n    var tempPosition = new Float32Array(3);\n    var perp = new Float32Array(3);\n    var xform = mat3.create();\n    var defaultN = new Float32Array([0, 1, 0]);\n\n    var Plane = Human.particles.shapes.Plane = function(options) {\n        this.translate = new Float32Array(options.translate || Human.math.VEC3_ZEROS);\n        this.rotate = new Float32Array(options.rotate || Human.math.VEC3_ZEROS);\n\n        this.normal = vec3.create();\n        this.distance = 0;\n    };\n\n    Plane.prototype.updateXform = function() {\n        this.normal.set(defaultN);\n        Human.math.buildRotationScaleMat3(xform, this.rotate, null);\n        vec3.transformMat3(this.normal, this.normal, xform);\n\n        this.distance = vec3.dot(this.translate, this.normal);\n    };\n\n    Plane.prototype.in = function(positions, i) {\n        var vi = i * 3;\n\n        var x = positions[vi];\n        var y = positions[vi + 1];\n        var z = positions[vi + 2];\n\n        var nx = this.normal[0];\n        var ny = this.normal[1];\n        var nz = this.normal[2];\n\n        return x * nx + y * ny + z * nz <= this.distance;\n    };\n\n    Plane.prototype.out = function(positions, i) {\n        var vi = i * 3;\n\n        var x = positions[vi];\n        var y = positions[vi + 1];\n        var z = positions[vi + 2];\n\n        var nx = this.normal[0];\n        var ny = this.normal[1];\n        var nz = this.normal[2];\n\n        return x * nx + y * ny + z * nz >= this.distance;\n    };\n\n    Plane.prototype.surfaceProjection = function(positions, i, position, normal) {\n        var vi = i * 3;\n\n        tempPosition[0] = positions[vi];\n        tempPosition[1] = positions[vi + 1];\n        tempPosition[2] = positions[vi + 2];\n\n        normal[0] = this.normal[0];\n        normal[1] = this.normal[1];\n        normal[2] = this.normal[2];\n\n        vec3.scale(perp, normal, this.distance - vec3.dot(tempPosition, normal));\n        vec3.add(position, tempPosition, perp);\n    };\n\n\n\n})();\n;(function () {\n    \"use strict\";\n\n    var position = vec3.create();\n\n    var Cube = Human.particles.shapes.Cube = function(options) {\n        this.translate = null;\n        this.rotate = null;\n        this.scale = null;\n        this.xform = null;\n        this.inverseXform = null;\n        this.normalXform = null;\n\n        if (options.translate) {\n            this.translate = new Float32Array(options.translate);\n        }\n\n        if (options.scale || options.rotate) {\n            this.xform = mat3.create();\n            this.inverseXform = mat3.create();\n            this.normalXform = mat3.create();\n\n            if (options.rotate) {\n                this.rotate = new Float32Array(options.rotate);\n            }\n\n            if (options.scale) {\n                this.scale = new Float32Array(options.scale);\n            }\n\n            this.updateXform();\n        }\n    };\n\n    Cube.prototype.updateXform = function() {\n        if (!this.xform) {\n            return;\n        }\n\n        Human.math.buildRotationScaleMat3(this.xform, this.rotate, this.scale);\n        mat3.invert(this.inverseXform, this.xform);\n        mat3.transpose(this.normalXform, this.inverseXform);\n    };\n\n    Cube.prototype.in = function(positions, i) {\n        var vi = i * 3;\n\n        position[0] = positions[vi];\n        position[1] = positions[vi + 1];\n        position[2] = positions[vi + 2];\n\n        if (this.translate) {\n            position[0] -= this.translate[0];\n            position[1] -= this.translate[1];\n            position[2] -= this.translate[2];\n        }\n\n        if (this.inverseXform) {\n            vec3.transformMat3(position, position, this.inverseXform);\n        }\n\n        var x = position[0];\n        var y = position[1];\n        var z = position[2];\n\n        return x >= -0.5 && x <= 0.5 && \n               y >= -0.5 && y <= 0.5 && \n               z >= -0.5 && z <= 0.5;\n    };\n\n    Cube.prototype.out = function(positions, i) {\n        var vi = i * 3;\n\n        position[0] = positions[vi];\n        position[1] = positions[vi + 1];\n        position[2] = positions[vi + 2];\n\n        if (this.translate) {\n            position[0] -= this.translate[0];\n            position[1] -= this.translate[1];\n            position[2] -= this.translate[2];\n        }\n\n        if (this.inverseXform) {\n            vec3.transformMat3(position, position, this.inverseXform);\n        }\n\n        var x = position[0];\n        var y = position[1];\n        var z = position[2];\n\n        return x <= -0.5 || x >= 0.5 || \n               y <= -0.5 || y >= 0.5 || \n               z <= -0.5 || z >= 0.5;\n    };\n\n    Cube.prototype.surfaceProjection = function(positions, i, position, normal) {\n        var vi = i * 3;\n        var abs = Math.abs;\n\n        position[0] = positions[vi];\n        position[1] = positions[vi + 1];\n        position[2] = positions[vi + 2];\n\n        if (this.translate) {\n            position[0] -= this.translate[0];\n            position[1] -= this.translate[1];\n            position[2] -= this.translate[2];\n        }\n\n        if (this.inverseXform) {\n            vec3.transformMat3(position, position, this.inverseXform);\n        }\n\n        var x = position[0];\n        var y = position[1];\n        var z = position[2];\n\n        var left = abs(x + 0.5);\n        var right = abs(x - 0.5);\n        var bottom = abs(y + 0.5);\n        var top = abs(y - 0.5);\n        var back = abs(z + 0.5);\n        var front = abs(z - 0.5);\n\n        if (left < right && left < bottom && left < top && left < back && left < front) {\n            x = -0.5;\n\n            normal[0] = -1;\n            normal[1] = 0;\n            normal[2] = 0;\n        } else if (right < bottom && right < top && right < back && right < front) {\n            x = 0.5;\n\n            normal[0] = 1;\n            normal[1] = 0;\n            normal[2] = 0;\n        } else if (bottom < top && bottom < back && bottom < front) {\n            y = -0.5;\n            \n            normal[0] = 0;\n            normal[1] = -1;\n            normal[2] = 0;\n        } else if (top < back && top < front) {\n            y = 0.5;\n\n            normal[0] = 0;\n            normal[1] = 1;\n            normal[2] = 0;\n        } else if (back < front) {\n            z = -0.5;\n            \n            normal[0] = 0;\n            normal[1] = 0;\n            normal[2] = -1;\n        } else {\n            z = 0.5;\n\n            normal[0] = 0;\n            normal[1] = 0;\n            normal[2] = 1;\n        }\n        \n        if (x < -0.5) {\n            x = -0.5;\n        } else if (x > 0.5) {\n            x = 0.5;\n        }\n\n        if (y < -0.5) {\n            y = -0.5;\n        } else if (y > 0.5) {\n            y = 0.5;\n        }\n\n        if (z < -0.5) {\n            z = -0.5;\n        } else if (z > 0.5) {\n            z = 0.5;\n        }\n\n        position[0] = x;\n        position[1] = y;\n        position[2] = z;\n\n        if (this.xform) {\n            vec3.transformMat3(position, position, this.xform);\n            vec3.transformMat3(normal, normal, this.normalXform);\n            vec3.normalize(normal, normal);\n        }\n\n        if (this.translate) {\n            position[0] += this.translate[0];\n            position[1] += this.translate[1];\n            position[2] += this.translate[2];\n        }\n    };\n\n\n\n})();\n;(function () {\n    \"use strict\";\n\n    var position = vec3.create();\n\n    var Cylinder = Human.particles.shapes.Cylinder = function(options) {\n        this.translate = null;\n        this.rotate = null;\n        this.scale = null;\n        this.xform = null;\n        this.inverseXform = null;\n        this.normalXform = null;\n\n        if (options.translate) {\n            this.translate = new Float32Array(options.translate);\n        }\n\n        if (options.scale || options.rotate) {\n            this.xform = mat3.create();\n            this.inverseXform = mat3.create();\n            this.normalXform = mat3.create();\n\n            if (options.rotate) {\n                this.rotate = new Float32Array(options.rotate);\n            }\n\n            if (options.scale) {\n                this.scale = new Float32Array(options.scale);\n            }\n\n            this.updateXform();\n        }\n    };\n\n    Cylinder.prototype.updateXform = function() {\n        if (!this.xform) {\n            return;\n        }\n        \n        Human.math.buildRotationScaleMat3(this.xform, this.rotate, this.scale);\n        mat3.invert(this.inverseXform, this.xform);\n        mat3.transpose(this.normalXform, this.inverseXform);\n    };\n\n    Cylinder.prototype.in = function(positions, i) {\n        var vi = i * 3;\n\n        position[0] = positions[vi];\n        position[1] = positions[vi + 1];\n        position[2] = positions[vi + 2];\n\n        if (this.translate) {\n            position[0] -= this.translate[0];\n            position[1] -= this.translate[1];\n            position[2] -= this.translate[2];\n        }\n\n        if (this.inverseXform) {\n            vec3.transformMat3(position, position, this.inverseXform);\n        }\n\n        var x = position[0];\n        var y = position[1];\n        var z = position[2];\n\n        return x * x + z * z <= 1 && y >= -1 && y <= 1;\n    };\n\n    Cylinder.prototype.out = function(positions, i) {\n        var vi = i * 3;\n        \n        position[0] = positions[vi];\n        position[1] = positions[vi + 1];\n        position[2] = positions[vi + 2];\n\n        if (this.translate) {\n            position[0] -= this.translate[0];\n            position[1] -= this.translate[1];\n            position[2] -= this.translate[2];\n        }\n\n        if (this.inverseXform) {\n            vec3.transformMat3(position, position, this.inverseXform);\n        }\n\n        var x = position[0];\n        var y = position[1];\n        var z = position[2];\n\n        return x * x + z * z >= 1 || y <= -1 || y >= 1;\n    };\n\n    Cylinder.prototype.surfaceProjection = function(positions, i, position, normal) {\n        var vi = i * 3;\n\n        position[0] = positions[vi];\n        position[1] = positions[vi + 1];\n        position[2] = positions[vi + 2];\n\n        if (this.translate) {\n            position[0] -= this.translate[0];\n            position[1] -= this.translate[1];\n            position[2] -= this.translate[2];\n        }\n\n        if (this.inverseXform) {\n            vec3.transformMat3(position, position, this.inverseXform);\n        }\n\n        var x = position[0];\n        var y = position[1];\n        var z = position[2];\n        var r, r2;\n\n        if (y < -1) {\n            normal[0] = 0;\n            normal[1] = -1;\n            normal[2] = 0;\n        } else if (y > 1) {\n            normal[0] = 0;\n            normal[1] = 1;\n            normal[2] = 0;\n        } else {\n            r2 = x * x + z * z;\n            r = Math.sqrt(r2);\n            normal[0] = x / r;\n            normal[1] = 0;\n            normal[2] = z / r;\n            \n        }\n\n        if (y < -1) {\n            y = -1;\n        }\n\n        if (y > 1) {\n            y = 1;\n        }\n\n        r2 = r2 || (x * x + z * z);\n        if (r2 > 1) {\n            r = r || Math.sqrt(r);\n            x /= r;\n            z /= r;\n        }\n\n        position[0] = x;\n        position[1] = y;\n        position[2] = z;\n\n        if (this.xform) {\n            vec3.transformMat3(position, position, this.xform);\n            vec3.transformMat3(normal, normal, this.normalXform);\n            vec3.normalize(normal, normal);\n        }\n\n        if (this.translate) {\n            position[0] += this.translate[0];\n            position[1] += this.translate[1];\n            position[2] += this.translate[2];\n        }\n    };\n\n\n\n})();\n;/**\n * @namespace Engine media (videos, audio etc).\n */\nHuman.media = Human.media || {};;/**\n * @namespace Generic container for streaming media clips\n *\n * NOTE: Clips are now registered by the chapter that wants to play clips.\n * Clip data is still stored with the state folder, but the chapter publishes the clip by id\n *\n */\nHuman.media.Clips = function (streamType) {\n    \"use strict\";\n\n    var self = this;\n\n    this._streamType = streamType;\n\n    /** Clips mapped to IDs\n     */\n    this.clips = {};\n\n    /** Clips ordered by their timeline times\n     *\n     * @type {Array}\n     */\n    this.clipsList = [];\n\n    /** Clips grouped into libraries\n     */\n    this.libraries = {};\n\n    /**\n     * IDs of clips that are currently \"suggested\", where those clips have time1 and time2 properties\n     * that interesect the current timeline scrubber.\n     * @type {Array}\n     */\n    this.suggestedClips = [];\n\n    Human.events.fire(this._streamType + \".clips\", self.clipsList, true);\n\n    //get clip by id\n    self.getClipById = function(clipid){\n      var result = null;\n      this.clipsList.forEach(function(clip){\n        if (clip.clipId === clipid){\n          result = clip;\n        }\n      });\n      return result;\n    };\n\n    /**\n     * Creates a clips library\n     * NOTE: from state folder\n     *\n     * @param {String} libraryId Unique library ID\n     * @param {[{}]} clips Clips within the library\n     */\n    this.createLibrary = function (libraryId, clips) {\n\n        if (this.libraries[libraryId]) {\n\n            // Tolerate reload of same library\n            Human.log.warn(\"Human.media.\" + this._streamType + \".createLibrary\", \"Library already loaded: \" + libraryId);\n            return;\n        }\n\n        var parts = libraryId.split(\"/\");\n        var modelId = parts[0];\n        var subasset = parts[1];\n\n        var library = this.libraries[libraryId] = {\n            libraryId: libraryId,\n            clips: {}\n        };\n\n        var p;\n        var clip;\n\n        // Create clips\n        for (var i = 0, len = clips.length; i < len; i++) {\n            p = clips[i];\n\n            // Validate each clip\n            if (!p.clipId) {\n                Human.log.error(\"Human.media.\" + this._streamType + \".createLibrary\", \"Clip property missing: clipId\");\n                continue;\n            }\n            // if (!p.displayName) {\n            //     Human.log.error(\"Human.media.\" + this._streamType + \".createLibrary\", \"Clip property missing: displayName\");\n            //     continue;\n            // }\n            if (!p.type) {\n                Human.log.error(\"Human.media.\" + this._streamType + \".createLibrary\", \"Clip property missing: type\");\n                continue;\n            }\n            if (!p.src) {\n                Human.log.error(\"Human.media.\" + this._streamType + \".createLibrary\", \"Clip property missing: src\");\n                continue;\n            }\n            if (p.time1 === undefined || p.time1 === null) {\n                //Human.log.error(\"Human.media.\" + this._streamType + \".createLibrary\", \"Clip property missing: time1 - defaulting to 0 seconds\");\n                p.time1 = null;\n            }\n            if (p.time2 === undefined || p.time2 === null) {\n                //Human.log.error(\"Human.media.\" + this._streamType + \".createLibrary\", \"Clip property missing: time2 - defaulting to 0 seconds\");\n                p.time2 = null;\n            }\n            if (this.clips[p.clipId]) {\n                Human.log.error(\"Human.media.\" + this._streamType + \".createLibrary\", \"Clip 'clipId' clashes with another clip: '\" + p.clipId + \"' - replacing existing clip\");\n            }\n\n            var fullURL = [modelId, this._streamType, subasset, p.src].join(\"/\");\n\n            clip = {\n                clipId: p.clipId,\n                modelId: modelId,\n                streamType: this._streamType,\n                subasset: subasset,\n                displayName: p.displayName,\n                description: p.description || \"\",\n                time1: p.time1,\n                time2: p.time2,\n                type: p.type || \"\",\n                src: p.src,\n                fullUrl: fullURL,\n                alternatives: p.alternatives || [],\n                length: p.length || 0,\n                suggested: false,\n                status: \"closed\"\n            };\n\n            // Register clip against library\n            library.clips[p.clipId] = clip;\n\n            // Add clip to ID map\n            this.clips[p.clipId] = clip;\n        }\n\n        // Rebuild time-ordered clip list from ID map\n        this._rebuildClipList();\n    };\n\n    /** Rebuilds time-ordered clip list and exports it via event\n     * @private\n     */\n    this._rebuildClipList = function () {\n        this.clipsList = [];\n        for (var clipId in this.clips) {\n            if (this.clips.hasOwnProperty(clipId)) {\n                this._insertClipIntoList(this.clipsList, this.clips[clipId]);\n            }\n        }\n        // Publish new clip list\n        Human.events.fire(this._streamType + \".clips\", this.clipsList, true);\n    };\n\n    /**\n     * Inserts a clip into list of clips ordered by time\n     * @private\n     */\n    this._insertClipIntoList = function (list, clip) {\n        if (list.length === 0) {\n            // First clip in list\n            list.push(clip);\n        } else {\n            // Find place and insert\n            var v;\n            for (var j = list.length - 1; j >= 0; j--) {\n                v = list[j];\n                if (v.time1 < clip.time1) {\n                    list.splice(j + 1, 0, clip);\n                    return;\n                }\n            }\n            // Clip is earliest - insert at front of list\n            list.splice(0, 0, clip);\n        }\n    };\n\n    /**\n     * Destroys a clips library\n     * @param libraryId\n     */\n    this.destroyLibrary = function (libraryId) {\n        var lib = this.libraries[libraryId];\n        if (!lib) {\n            // Tolerate missing library\n            Human.log.warn(\"Human.media.\" + this._streamType + \".destroyLibrary\", \"Library not found: \" + libraryId);\n            return;\n        }\n        for (var clipId in lib.clips) {\n            if (lib.clips.hasOwnProperty(clipId)) {\n                delete this.clips[clipId];\n                Human.events.fire(this._streamType + \".status\", { clipId: clipId, status: \"destroyed\" });\n            }\n        }\n        delete this.libraries[libraryId];\n\n        // Rebuild time-ordered clip list from remaining clips in ID map\n        this._rebuildClipList();\n    };\n\n    /**\n     * Opens a clip\n     * @param clipId\n     */\n    this.open = function (clipId, ok) {\n        Human.events.fire(this._streamType + \".status\", { clipId: clipId, status: \"open\" }, true);\n        ok();\n    };\n\n    /**\n     * Plays a clip\n     * @param clipId\n     */\n    this.play = function (clipId) {\n        Human.events.fire(this._streamType + \".status\", { clipId: clipId, status: \"playing\" }, true);\n    };\n\n    /**\n     * Scrubs a clip to the given time\n     * @param clipId\n     * @param time\n     */\n    this.scrub = function (clipId, time) {\n        Human.events.fire(this._streamType + \".scrubbed\", { clipId: clipId, time: time });\n    };\n\n    /**\n     * Pauses a clip\n     * @param clipId\n     */\n    this.pause = function (clipId) {\n        Human.events.fire(this._streamType + \".status\", { clipId: clipId, status: \"paused\" }, true);\n    };\n\n    /**\n     * Stops a clip\n     * @param clipId\n     */\n    this.stop = function (clipId) {\n        Human.events.fire(this._streamType + \".status\", { clipId: clipId, status: \"stopped\" }, true);\n    };\n\n    /**\n     * Closes a clip\n     * @param clipId\n     */\n    this.close = function (clipId) {\n        Human.events.fire(this._streamType + \".status\", { clipId: clipId, status: \"closed\" }, true);\n    };\n\n    /**\n     * Destroys all clip libraries\n     */\n    this.reset = function () {\n        for (var libraryId in this.libraries) {\n            if (this.libraries.hasOwnProperty(libraryId)) {\n                this.destroyLibrary(libraryId);\n            }\n        }\n    };\n};\n;/**\n * @namespace Audio clips\n */\nHuman.media.audio= new Human.media.Clips(\"audio\");;/**\n * @namespace Video clips\n */\nHuman.media.videos = new Human.media.Clips(\"videos\");;/**\n * @namespace Engine asset libraries.\n * @private\n */\n\n(function() {\n    \"use strict\";\n\n    var assets = Human.assets = {\n        loadedAssets: {},\n        nullAssets: {},\n        assetUseCounts: {},\n        libUseCounts: {},\n        requestedAssets: 0\n    };\n\n    // Defaults to adding an \"s\" to type\n    var ASSET_MODULES = {\n        geometry: \"geometries\",\n        audio: \"audio\",\n        videos: \"video\"\n    };\n\n    var libModules = {}; // For each library remembers the module that loaded it, so the module can unload again\n    var nullLibs = {};\n\n    var assetCallbacks = {};\n\n    var receivedAssets = 0;\n    var loadPercent = 0;\n\n    assets.init = function () {\n        this.server.init();\n        this.geometries.init();\n        this.materials.init();\n        this.morphs.init();\n        this.reflections.init();\n    };\n\n    assets.getAsset = function (assetId, type, ok) {\n        if (assets.nullAssets[assetId]) {\n\n            if (ok) {\n                Human.utils.async(function () {\n                    ok(null);\n                });\n            }\n\n            return;\n        }\n\n        if (assets.loadedAssets[assetId] === \"LOADING\") {\n\n            if (ok) {\n                assetCallbacks[assetId].push(ok);\n            }\n\n            return;\n        }\n\n        // we have already loaded this asset, possibly from packed files\n        if (assets.loadedAssets[assetId]) {\n            processAsset(assetId, type, assets.loadedAssets[assetId], ok);\n            return;\n        }\n\n        if (assets.requestedAssets === 0) {\n            assets.assetLoadStart();\n        }\n\n        assets.requestedAssets++;\n\n        assets.loadedAssets[assetId] = \"LOADING\";\n        assetCallbacks[assetId] = [];\n\n        if (ok) {\n            assetCallbacks[assetId].push(ok);\n        }\n\n        // [MOBILE] - check if the asset is on the device\n        if (window.localContentOnly || Human.mobile.iOS || Human.mobile.android) {\n            var isBinary = ((type === \"morph\") || (type === \"geometry\"));\n\n            var oid = assetId;\n\n            if (window.localContentOnly) {\n                assetId = assetId.replace(/\\|/g, '/').replace(/:/g, ';') + '.bda';\n            }\n            var request = new XMLHttpRequest();\n            request.responseType = isBinary ? \"arraybuffer\" : \"text\";\n            request.open(\"GET\", window.localBaseDirectory + \"assets/\" + assetId, true);\n\n            request.onerror = function () {\n                if (!window.localContentOnly) {\n                    assets.server.getAsset(type, oid, function(asset) {\n                        gotAsset(type, oid, asset, true);\n                    });\n                } else {\n                    gotAsset(type, oid, null, false);\n                }\n            };\n            request.onload = function() {\n                if (request.status === 200 || window.localContentOnly) {\n                    var data = request.response;\n                    var asset = (isBinary)? data : JSON.parse(data);\n                    if ( window.localContentOnly && !isBinary ) {\n                        asset = asset.asset;\n                    }\n                    gotAsset(type, oid, asset, false);\n                } else {\n                    assets.server.getAsset(type, assetId, function(asset) {\n                        gotAsset(type, assetId, asset, true);\n                    });\n                }\n            };   \n            request.send(null);\n        } else {\n            assets.server.getAsset(type, assetId, function(asset) {\n                gotAsset(type, assetId, asset, false);\n            });\n        }\n    };\n\n    function processAsset(assetId,type,theAsset, ok) {\n        assetAcquired(assetId);\n        // process theAsset.asset for transforms unpacked from transforms.json\n        if (type === \"transform\" && Human.unpackAssets.transformJson === true) {\n            assetCallbacks[assetId] = [];\n            if (ok) {\n                assetCallbacks[assetId].push(ok);\n            }\n            gotAsset(type,assetId,theAsset.asset,false);\n        }\n        // process theAsset for data \n        else if (type === \"geometry\" && Human.unpackAssets.geometryJson === true && theAsset instanceof ArrayBuffer) {\n            assetCallbacks[assetId] = [];\n            if (ok) {\n                assetCallbacks[assetId].push(ok);\n            }\n            gotAsset(type,assetId,theAsset,false);\n        }\n        else if (ok) {\n            Human.utils.async(function () {\n                ok(assets.loadedAssets[assetId]);\n            });\n        }\n    }\n\n\n    assets.getAssetLibrary = function (type, dir, libId, fileName, params, ok) {\n        if (nullLibs[libId]) {\n            Human.utils.async(ok);\n            return;\n        }\n\n        if (assets.libUseCounts[libId]) {\n\n            libAcquired(libId);\n            Human.utils.async(ok);\n\n            return;\n        }\n\n        assets.server.getAssetLibrary(dir, libId, fileName, function(data) {\n            var module;\n\n            if (!data) {\n                nullLibs[libId] = true;\n\n                if (ok) {\n                    ok();\n                }\n\n                return;\n            }\n\n\n            if (assets.libUseCounts[libId]) {\n\n                libAcquired(libId);\n\n                if (ok) {\n                    ok();\n                }\n                return;\n            }\n\n            if (type === \"animation\") {\n                if (data.format === \"binary\") {\n                    if (ok) {\n                        ok();\n                    }\n                    return;\n                }\n                module = Human.assets.tweens;\n            } else {\n                module = Human.assets[getModuleName(type)];\n            }\n\n\n            if (module) {\n                // TODO: Do we need a semaphore to prevent concurrent asynch load of same library?\n\n                module.parseLibrary(libId, data, params, function() {\n\n                    libAcquired(libId);\n\n                    libModules[libId] = module;\n\n                    if (ok) {\n                        ok();\n                    }\n                });\n\n            } else {\n                Human.log.error(\"Unknown asset library type: \" + type);\n                if (ok) {\n                    ok();\n                }\n            }\n        });\n    };\n\n    /**\n     * Release an asset library that was acquired previously by #getAssetLibrary.\n     * Deletes the lib when its use count count has then become zero.\n     * Assumes that the library has completely loaded; don't call this while library is still loading.\n     *\n     * @param {String} libId ID of the asset library to releas\n        if (--libUseCounts[lLibId] <= 0) {\n\n            // Last reference released, destroy lib and use ce.\n     */\n    assets.putAssetLibrary = function(libId) {\n        if (assets.libUseCounts[libId] === undefined) { // Not currently loaded\n            return;\n        }\n\n        if (--assets.libUseCounts[libId] <= 0) {\n\n            // Last reference released, destroy lib and use count\n\n            delete assets.libUseCounts[libId];\n\n            // Delegate asset unloading to module\n\n            var module = libModules[libId];\n\n            if (module && module.unloadLibrary) {\n                module.unloadLibrary(libId);\n            }\n\n            delete libModules[libId];\n        }\n    };\n\n    /**\n     * Release an assets that was acquired previously by #getAsset.\n     *\n     * Deletes the asset when its use count count has then become zero.\n     *\n     * @param {String} assetId ID of the asset to release.\n     */\n    assets.putAsset = function (assetId) {\n\n        if (this.assetUseCounts[assetId] === undefined) {\n            return;\n        }\n\n        if (--this.assetUseCounts[assetId] <= 0) {\n\n            // Last reference released, destroy asset and use count\n            var asset = assets.loadedAssets[assetId];\n            var module = Human.assets[getModuleName(asset.type)];\n            module.destroyAsset(assetId);\n\n            delete assets.loadedAssets[assetId];\n            delete this.assetUseCounts[assetId];\n        }\n    };\n\n    // Indicates that an asset library has been acquired, incrementing its use count.\n    //\n    function libAcquired(libId) {\n        if (assets.libUseCounts[libId] === undefined) {\n            assets.libUseCounts[libId] = 1;\n            return;\n        }\n        assets.libUseCounts[libId]++;\n    }\n\n    // Indicates that an asset has been acquired, incrementing its use count.\n    //\n    function assetAcquired(assetId) {\n        if (assets.assetUseCounts[assetId] === undefined) {\n            assets.assetUseCounts[assetId] = 1;\n            return;\n        }\n        assets.assetUseCounts[assetId]++;\n    }\n\n    function getModuleName(type) {\n        return ASSET_MODULES[type] || type + \"s\";\n    }\n\n    function gotAsset(type, assetId, asset, putToServer) {\n        assetLoadProgress(assetId, type);\n        var callbacks;\n        var i, len;\n\n        if (!asset || asset === assets.server.TIMEOUT) {\n            if (!asset) {\n                assets.nullAssets[assetId] = true;\n            }\n            assets.loadedAssets[assetId] = null;\n            callbacks = assetCallbacks[assetId];\n            for (i = 0, len = callbacks.length; i < len; i++) {\n                callbacks[i](null);\n            }\n            delete assetCallbacks[assetId];\n            return;\n        }\n\n        try {\n            if (putToServer) {\n                var isBinary = ((type === \"morph\") || (type === \"geometry\"));\n                var xhr = new XMLHttpRequest();\n                xhr.open(\"PUT\", \"/assets/\" + assetId, true);\n                if (isBinary) {\n                    xhr.send(asset);\n                } else {\n                    xhr.send(JSON.stringify(asset));\n                }\n            }\n            if (type === \"transform\") {\n                callbacks = assetCallbacks[assetId];\n                for (i = 0, len = callbacks.length; i < len; i++) {\n                    callbacks[i](asset);\n                }\n                // Don't cache transform assets\n                delete assets.loadedAssets[assetId];\n                delete assetCallbacks[assetId];\n            } else {\n                var module = Human.assets[getModuleName(type)];\n                module.parseAsset(assetId, asset, function(asset) {\n                    assets.loadedAssets[assetId] = asset;\n                    callbacks = assetCallbacks[assetId];\n                    for (i = 0, len = callbacks.length; i < len; i++) {\n                        assetAcquired(assetId);\n                        callbacks[i](asset);\n                    }\n                    delete assetCallbacks[assetId];\n                });\n            }\n            \n        } catch (e) {\n            Human.log.error(\"Error parsing asset: \" + assetId + \" - \" + e.message);\n            assets.loadedAssets[assetId] = null;\n            assets.nullAssets[assetId] = true;\n            var callbacks = assetCallbacks[assetId];\n            for (var i = 0, len = callbacks.length; i < len; i++) {\n                callbacks[i](null);\n            }\n            delete assetCallbacks[assetId];\n        }\n    }\n\n    assets.assetLoadStart = function() {\n        Human.events.fire(\"assets.load.start\");\n        Human.stats.loadSequence.assetsRequested = Human.timer.now();\n        Human.stats.loadTimes.preAsset = Human.stats.loadSequence.assetsRequested - Human.stats.loadSequence.startTime;\n        loadPercent = 0;\n    };\n\n    function assetLoadProgress(assetId, type) {\n        receivedAssets++;\n\n        // don't emit more than 100 events\n        var progress = Math.floor(100 * (receivedAssets/assets.requestedAssets));\n        if (loadPercent !== progress) {\n            loadPercent = progress;\n            Human.events.fire(\"assets.load.progress\", {\n                assetId: assetId,\n                assetType: type,\n                requestedAssets: assets.requestedAssets,\n                receivedAssets: receivedAssets\n            });\n        }\n\n        if(receivedAssets === assets.requestedAssets) {\n            assetLoadFinish();\n        }\n    }\n\n    function assetLoadFinish() {\n        Human.events.fire(\"assets.load.finish\");\n\n        assets.requestedAssets = 0;\n        receivedAssets = 0;\n\n        Human.stats.loadSequence.assetsLoaded = Human.timer.now();\n        Human.stats.loadTimes.assetDownload = Human.stats.loadSequence.assetsLoaded - Human.stats.loadSequence.assetsRequested;\n        Human.renderer.resetFrameThrottling();\n    }\n\n\n})();\n;(function() {\n    \"use strict\";\n\n    var assetServer = Human.assets.server = {\n        TIMEOUT: 1\n    };\n\n    var TIMEOUT = 120000; //ms\n\n    var ENABLE_DRACO = Human.request.getSearchParam(\"__bdh_engine_draco\") === \"true\";\n\n    // Callbacks to be run when the socket opens.\n    var openCallbacks = [];\n\n    // Callbacks to be run when a message is received.\n    // Organized by asset ID.\n    var messageCallbacks = {};\n\n    var requestQueue = [];\n\n    // Defaults to adding an \"s\" to type\n    var URL_BASE = {\n        geometry: \"geometry\"\n    };\n\n    var moduleDefinitions = {};\n    var stateIndexes = {};\n\n    var lastNetworkTime;\n\n    var assetDomain;\n    var socket;\n    var socketURL;\n\n    var assetServerInitialized = false;\n\n    Human.properties.subscribe({\n        propId: \"assetDomain\",\n        value: \"assets-human.biodigital.com\",\n        callback: function (value) {\n            assetDomain = value;\n        }\n    });\n\n    assetServer.init = function () {\n        // the offline environment file sets assetDomain = '' to prevent the connection\n        if (assetServerInitialized || assetDomain === '') {\n            return;\n        }\n\n        var socketProtocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n\n        // mobile connects locally via http but wants a secure connection to the asset server\n        if (Human.mobile.android || Human.mobile.iOS) {\n            socketProtocol = \"wss:\";\n        }\n\n        socketURL = socketProtocol + \"//\" + assetDomain + \"/assets/ws\" + (ENABLE_DRACO ? 4 : 3);\n\n        socket = createSocket();\n\n        setInterval(function() {\n\n            socketSend();\n\n            var now = Date.now();\n\n            if (now - lastNetworkTime > TIMEOUT) {\n                for (var assetId in messageCallbacks) {\n                    if (messageCallbacks.hasOwnProperty(assetId)) {\n                        Human.log.error(\"Server timeout on asset: \" + assetId);\n                        var callbacks = messageCallbacks[assetId];\n\n                        for (var i = 0, len = callbacks.length; i < len; i++) {\n                            callbacks[i](assetServer.TIMEOUT);\n                        }\n                        delete messageCallbacks[assetId];\n                    }\n                }\n            }\n\n        }, 100);\n\n        assetServerInitialized = true;\n    };\n\n    assetServer.cacheModuleDefinition = function(moduleId, moduleDefinition) {\n        if (moduleDefinitions[moduleId]) {\n            return;\n        }\n\n        if (moduleDefinition) {\n            moduleDefinitions[moduleId] = JSON.stringify(moduleDefinition);\n            return;\n        }\n\n        assetServer.getModuleDefinition(moduleId);\n    };\n\n    assetServer.getModuleDefinition = function (moduleName, ok, error) {\n        if (moduleDefinitions[moduleName]) {\n            if (ok) {\n                ok(JSON.parse(moduleDefinitions[moduleName]));\n            }\n            return;\n        }\n\n        Human.stats.loadSequence.moduleRequest = Human.timer.now();\n        Human.stats.loadTimes.preModule = Human.stats.loadSequence.moduleRequest - Human.stats.loadSequence.startTime;\n\n        Human.utils.getText(window.localBaseDirectory + \"content/modules/\" + moduleName,\n            function (moduleDefinition) {\n                jsonDownloadSize(moduleName, moduleDefinition);\n\n                moduleDefinitions[moduleName] = moduleDefinition;\n\n                Human.stats.loadSequence.moduleLoaded = Human.timer.now();\n                Human.stats.loadTimes.moduleDownload = Human.stats.loadSequence.moduleLoaded - Human.stats.loadSequence.moduleRequest;\n\n                if (ok) {\n                    ok(JSON.parse(moduleDefinition));\n                }\n            },\n            function (xhr, textStatus, errorThrown) {\n                Human.events.fire(\"net.error\", {\n                    id: moduleName,\n                    type: \"modules\",\n                    status: xhr.status,\n                    statusText: xhr.statusText\n                });\n\n                if (error) {\n                    error(errorThrown);\n                }\n            }\n\n        );\n    };\n\n    assetServer.cacheStateIndex = function(stateId, index) {\n        if (stateIndexes[stateId]) {\n            return;\n        }\n\n        if (index) {\n            stateIndexes[stateId] = JSON.stringify(index);\n            return;\n        }\n\n        Human.utils.getText(window.localBaseDirectory + \"content/states/\" + stateId + \"/index?v=\" + Human.VERSION + \"&locale=\" + Human.locale,\n            function (index) {\n                jsonDownloadSize(stateId + \"/index\", index);\n                stateIndexes[stateId] = index;\n            }\n        );\n    };\n\n    assetServer.getStateIndex = function(stateId, ok, error) {\n        if (stateIndexes[stateId]) {\n            if (ok) {\n                ok(JSON.parse(stateIndexes[stateId]));\n            }\n            return;\n        }\n\n        Human.utils.getText(window.localBaseDirectory + \"content/states/\" + stateId + \"/index?v=\" + Human.VERSION + \"&locale=\" + Human.locale,\n            function(index) {\n                jsonDownloadSize(stateId + \"/index\", index);\n                ok(JSON.parse(index));\n            },\n            error\n        );\n    };\n\n    assetServer.getAnimationManifest = function(libId, ok, error) {\n        var parts = libId.split(\"/\");\n\n        Human.utils.getText(window.localBaseDirectory + \"content/states/\" + parts[0] + \"/animations/\" + parts[1] + \"/manifest\",\n            function(manifest) {\n                jsonDownloadSize(libId, manifest);\n                ok(JSON.parse(manifest));\n            },\n            error\n        );\n    };\n\n    assetServer.getAsset = function(type, id, ok) {\n        var parts = id.split(\"/\");\n        var stateId = parts[0];\n        var assetId = parts[1];\n        var key = parts[2];\n        var assetURI = stateId + \"/\" + (URL_BASE[type] || type + \"s\") + \"/\" + assetId;\n        if (key) {\n            assetURI += \"/\" + key;\n        }\n\n        if (messageCallbacks[assetURI]) {\n            messageCallbacks[assetURI].push(ok);\n            return;\n        }\n\n        messageCallbacks[assetURI] = [ok];\n\n        requestQueue.push(assetURI);\n    };\n\n    assetServer.getAssetLibrary = function (dir, libId, fileName, ok) {\n        var parts = libId.split(\"/\");\n\n        var directory = (typeof(window.localBaseDirectory) !== 'undefined') ? window.localBaseDirectory : '/';\n        Human.utils.getJSON(directory + \"content/states/\" + parts[0] + \"/\" + dir + \"/\" + parts[1] + \"/\" + fileName,\n            ok,\n            function() {\n                Human.log.error(\"Asset library not found: \" + libId);\n                ok(null);\n            }\n        );\n    };\n\n    function createSocket() {\n        var socket = new WebSocket(socketURL);\n\n        socket.binaryType = \"arraybuffer\";\n\n        socket.addEventListener(\"open\", function() {\n            socket.send(JSON.stringify({ open: \"sesame!\" }));\n\n            for (var i = 0, len = openCallbacks.length; i < len; i++) {\n                openCallbacks[i]();\n            }\n\n            openCallbacks.length = 0;\n        });\n\n        socket.addEventListener(\"close\", function(event) {\n            Human.log.log(\"Socket closed\", event.code, event.reason);\n        });\n\n        socket.addEventListener(\"error\", function() {\n            Human.log.error(\"Socket error\");\n        });\n\n        socket.addEventListener(\"message\", function(response) {\n\n            var data = response.data;\n            var asset;\n            var assetId;\n\n            lastNetworkTime = Date.now();\n\n            if (typeof data === \"string\") {\n\n                // Non-data \"message received\" signal\n                if (data === \"\\uD83C\\uDF7A\") {\n                    return;\n                }\n\n\n                var json = JSON.parse(data);\n                assetId = json.id;\n\n                jsonDownloadSize(assetId, data);\n\n                if (json.error) {\n                    Human.log.error(\"Asset not found: \" + assetId);\n                    asset = null;\n                } else if (!json.asset) {\n                    Human.log.error(\"Null asset: \" + assetId);\n                    asset = null;\n                } else {\n                    asset = json.asset;\n                }\n\n\n            } else {\n\n                /*\n                 Geometry or morph\n\n                 bytes   : info\n                 [0.. 3]: uint32; file type identifer (= 0x11)\n                 [4.. 7]: uint32; byte-length of padded asset id\n                 [8..11]: uint32; byte-length of padded morph keys JSON\n                 [12..15]: uint32; byte-length of positions array\n                 [16..19]: uint32; byte-length of normals array\n                 [20..23]: uint32; byte-length of indices array\n                 [24..27]: uint32; byte-length of uv array\n                 [28..43]: unit32[4]; unused, reserved for future use\n                 [  ..  ]: text; asset id (tail-padded with empty spaces, e.g. 0x20)\n                 [  ..  ]: text; morph key JSON (tail-padded with 0x20)\n                 [  ..  ]: float32[]; positions array\n                 [  ..  ]: float32[]; normals array\n                 [  ..  ]: int32[];   indices array\n                 [  ..  ]: float32[]; uv array\n                 */\n\n\n                asset = data;\n\n                var index = new DataView(asset);\n\n                var fileType = index.getUint32(0, true);\n\n                var assetIdStart, assetIdSize;\n\n                if (fileType === 0x11) {\n                    assetIdSize = new Uint32Array(asset, 0, 2)[1];\n                    assetIdStart = 11 * Uint32Array.BYTES_PER_ELEMENT;\n                } else {\n                    assetIdSize = index.getUint32(4, true);\n                    assetIdStart = index.getUint32(12, true);\n                }\n\n\n                assetId = Human.utils.atos(asset, assetIdStart, assetIdSize).trim();\n\n                binaryDownloadSize(assetId, data);\n            }\n\n            var callbacks = messageCallbacks[assetId];\n\n            if (callbacks) {\n                for (var i = 0, len = callbacks.length; i < len; i++) {\n                    callbacks[i](asset);\n                }\n                delete messageCallbacks[assetId];\n            }\n        });\n\n        return socket;\n    }\n\n    function socketSend() {\n\n        if (requestQueue.length === 0) {\n            return;\n        }\n\n        lastNetworkTime = Date.now();\n\n        if (socket.readyState === WebSocket.OPEN) {\n            socket.send(JSON.stringify({\n                assets: requestQueue\n            }));\n            requestQueue.length = 0;\n            return;\n        }\n\n        openCallbacks.push(function() {\n            socket.send(JSON.stringify({\n                assets: requestQueue\n            }));\n            requestQueue.length = 0;\n        });\n\n        if (socket.readyState === WebSocket.CLOSING || socket.readyState === WebSocket.CLOSED) {\n            socket = createSocket();\n        }\n    }\n\n    function jsonDownloadSize(id, str) {\n        if (Human.stats.trackingDownloadSize) {\n            var size = Human.utils.textGzipSize(str);\n            Human.stats.jsonDownloadSizes[id] = size;\n            Human.stats.jsonDownloadTotal += size;\n        }\n    }\n\n    function binaryDownloadSize(id, data) {\n        if (Human.stats.trackingDownloadSize) {\n            var size = Human.utils.binaryGzipSize(data);\n            Human.stats.geometryDownloadSizes[id] = size;\n            Human.stats.geometryDownloadTotal += size;\n        }\n    }\n\n})();\n;(function () {\n    \"use strict\";\n\n    var Textures = Human.assets.textures = {};\n\n    var DXT_SUPPORTED = SceneJS.checkExtension(\"WEBGL_compressed_texture_s3tc\");\n    var PVRTC_SUPPORTED = SceneJS.checkExtension(\"WEBGL_compressed_texture_pvrtc\");\n    var ETC1_SUPPORTED = SceneJS.checkExtension(\"WEBGL_compressed_texture_etc1\");\n\n    var BLEND_MODE_MAP = {\n        add: \"over\",\n        \"hack_add\": \"add\"\n    };\n\n    Textures.load = function(textures, ok) {\n        textures = textures || [];\n\n        var numTextures = textures.length;\n\n        if (numTextures === 0) {\n            ok();\n            return;\n        }\n\n        function done() {\n            if (--numTextures === 0) {\n                Human.utils.filterInPlace(textures, filterNotFound);\n                ok();\n            }\n        }\n\n        for (var i = 0; i < numTextures; ++i) {\n            // Filter out valid parameters.\n            var texture = textures[i];\n            texture = {\n                src: texture.src || texture.uri,\n                applyTo: texture.applyTo,\n                blendMode: BLEND_MODE_MAP[texture.blendMode] || texture.blendMode,\n                blendFactor: texture.blendFactor,\n                preloadColor: texture.preloadColor,\n                preloadSrc: texture.preloadSrc,\n                swizzledNormals: texture.swizzledNormals || false,\n            };\n            textures[i] = texture;\n            compressTextureSrc(texture);\n            if (texture.compressedSrc) {\n                Human.utils.getBinary(\n                    texture.compressedSrc,\n                    getCompressedTextureCallback(texture, done),\n                    getCompressedTextureErrorCallback(texture, done)\n                );\n            } else {\n                getImageTexture(texture, done);\n            }\n        }\n    };\n\n    function getCompressedTextureCallback(texture, ok) {\n        return function(data) {\n            if (Human.stats.trackingDownloadSize) {\n                var size = Human.utils.binaryGzipSize(data);\n                Human.stats.textureDownloadSizes[texture.compressedSrc] = size;\n                Human.stats.textureDownloadTotal += size;\n            }\n\n            texture.type = \"texture\";\n            texture.compressedImage = data;\n            texture.src = null;\n            ok();\n        };\n    }\n\n    function getCompressedTextureErrorCallback(texture, ok) {\n        return function() {\n            texture.compressedSrc = null;\n            texture.swizzledNormals = null;\n            getImageTexture(texture, ok);\n        };\n    }\n\n    function getImageTexture(texture, ok) {\n        if (Human.stats.trackingDownloadSize) {\n            var src = texture.src;\n            Human.utils.getBinary(src, function(data) {\n                Human.stats.textureDownloadSizes[src] = data.byteLength;\n                Human.stats.textureDownloadTotal += data.byteLength;\n            });\n        }\n        var img = new Image();\n        img.onload = getImageCallback(img, texture, ok);\n        img.onerror = ok;\n        img.src = texture.src;\n        texture.src = null;\n    }\n\n    function getImageCallback(img, texture, ok) {\n        return function() {\n            texture.type = \"texture\";\n            texture.image = img;\n            ok();\n        };\n    }\n\n    function compressTextureSrc(texture) {\n        var baseSrc = texture.src.replace(/(\\.jpg|\\.jpeg|\\.png)$/, \"\");\n\n        if (DXT_SUPPORTED) {\n            // do we have swizzled normals?\n            if (texture.applyTo === \"normals\" && texture.swizzledNormals === true) {\n                texture.compressedSrc = baseSrc + \"-sw-dxt5.dds\";\n                texture.containerFormat = \"dds\";\n            } else {\n                texture.compressedSrc = baseSrc + \"-dxt1.dds\";\n                texture.containerFormat = \"dds\";\n            }\n            return;\n        }\n\n        if (PVRTC_SUPPORTED) {\n            texture.compressedSrc = baseSrc + \"-pvrtc.pvr\";\n            texture.containerFormat = \"pvr\";\n            return;\n        }\n\n        if (ETC1_SUPPORTED) {\n            texture.compressedSrc = baseSrc + \"-etc1.pvr\";\n            texture.containerFormat = \"pvr\";\n            return;\n        }\n    }\n\n    function filterNotFound(t) {\n        return t.image || t.compressedImage;\n    }\n\n})();\n;/**\n * @namespace Engine unpacked concatenated transform and geometry assets.\n * @private\n */\n\n(function() {\n    \"use strict\";\n\n    var unpackAssets = Human.unpackAssets = {\n        blocksWaiting: 0,\n        transformJson: false,\n        geometryJson: false\n    };\n\n    var blocks = {};\n    var geomRequests = {};\n\n    Human.events.on(\"modules.fetch.start\", function(modelId) {\n        if (window.localBaseDirectory === undefined || window.localBaseDirectory === '/') {\n            window.localBaseDirectory = '/';\n            window.localContentOnly = false;\n        }  else {\n            window.localContentOnly = true;\n            unpackAssets.transformJson = false;\n            unpackAssets.geometryJson = false;\n            blocks = {};\n            geomRequests = {};\n            unpackAssets.blocksWaiting = 0;\n            loadGeometry(modelId);\n            loadTransforms(modelId);\n        }\n    });\n\n    function getGeometry(geometryData) {\n        var block = blocks[geometryData.block];\n        var offlen = geometryData.offlen;\n        var destArray = new ArrayBuffer(offlen[1]);\n        var asset = new Uint8Array(destArray, 0, offlen[1]);\n        var srcU8 = new Uint8Array(block, offlen[0], offlen[1]);\n        asset.set(srcU8);\n        return destArray;\n    }\n\n    function openBlock(moduleId, block) {\n        unpackAssets.blocksWaiting++;\n        var request = new XMLHttpRequest();\n        request.responseType = \"arraybuffer\";\n        var target = window.localBaseDirectory + \"blocks/geometry/modules/\" + moduleId + \"/\" + block;\n        request.open(\"GET\", target, true);\n\n        request.onerror = function () {\n            console.log(\"error getting \" + target);\n        };\n        request.onload = function() {\n            if (request.status === 200 || window.localContentOnly) {\n                blocks[block] = request.response;\n                unpackAssets.blocksWaiting--;\n                geomRequests[block].forEach(function(geometry) {\n                    Human.assets.loadedAssets[geometry.assetId] = getGeometry(geometry.geometry);\n                    assetRequested();\n                });\n                // if (unpackAssets.blocksWaiting === 0) {\n                //     console.log(\"GEOM BLOCKS DONE \" + Human.timer.now());\n                // }\n            }\n        };\n        request.send(null);\n    }\n\n    function loadGeometry(moduleId) {\n//        console.log(moduleId + \" GEOM START \" + Human.timer.now());\n        var request = new XMLHttpRequest();\n        request.responseType = \"text\";\n        var target = window.localBaseDirectory + \"blocks/geometry/modules/\" + moduleId + \"/index.json\";\n        request.open(\"GET\", target, true);\n\n        request.onerror = function () {\n            console.log(\"error getting \" + target);\n        };\n        request.onload = function() {\n            var count = 0;\n            unpackAssets.geometryJson = true;\n            if (request.status === 200 || window.localContentOnly) {\n                var data = request.response;\n                var geometries = JSON.parse(data);\n                // parse transforms\n                Object.keys(geometries).forEach(function(assetId) {\n                    var geometry = geometries[assetId];\n                    var block = geometry.block;\n                    if (blocks[block] === undefined) {\n                        blocks[block] = \"Loading\";\n                        openBlock(moduleId, block);\n                        geomRequests[block] = [];\n                    }\n                    count++;\n                    geomRequests[block].push({assetId: assetId, geometry:geometry});\n                });\n //               console.log(\"*** loaded \" + count + \" geometries from \" + target);\n            }\n        };\n        request.send(null);\n    }\n\n    function loadTransforms(moduleId) {\n        var request = new XMLHttpRequest();\n        request.responseType = \"text\";\n        var target = window.localBaseDirectory + \"transforms/modules/\" + moduleId + \".json\";\n        request.open(\"GET\", target, true);\n\n        request.onerror = function () {\n            console.log(\"error getting \" + target);\n        };\n        request.onload = function() {\n            var count = 0;\n            unpackAssets.transformJson = true;\n            if (request.status === 200 || window.localContentOnly) {\n                var data = request.response;\n                var transforms = JSON.parse(data);\n                // parse transforms\n                Object.keys(transforms).forEach(function(assetId) {\n                    Human.assets.loadedAssets[assetId] = transforms[assetId];\n                    assetRequested();\n                    count++;\n                });\n//                console.log(\"*** loaded \" + count + \" transforms from \" + target);\n            }\n        };\n        request.send(null);\n    }\n\n    function assetRequested() {\n        if (Human.assets.requestedAssets === 0) {\n            Human.assets.assetLoadStart();\n        }\n        Human.assets.requestedAssets++;\n    }\n})();;/**\n * @namespace Geometry libraries\n * @private\n */\n(function () {\n    \"use strict\";\n\n    var HumanAssetsGeometries = Human.assets.geometries = {};\n\n    /** All geometries\n     */\n    HumanAssetsGeometries.geometries = {};\n\n    var INDEX_TYPE_MAP = {\n        \"1\": Uint8Array,\n        \"2\": Uint16Array,\n        \"4\": Uint32Array\n    };\n\n    var ENABLE_DRACO = Human.request.getSearchParam(\"__bdh_engine_draco\") === \"true\";\n    var DRACO_WORKER_FILE = 'draco/worker.js';\n\n    // Draco Worker Setup\n    var dracoUnpackCallbacks = {};\n    var dracoWorkerLimit = 2;\n    var dracoWorkers = new Array(dracoWorkerLimit);\n    var dracoWorkerIdx = 0;\n    function dracoWorkerMessageCallback(event){\n        var status = event.data[0];\n        var geoId = event.data[1];\n        if (status===1){\n            // SUCCESS\n            var cfg = event.data[2];\n            dracoUnpackCallbacks[geoId](HumanAssetsGeometries.createGeometry(geoId, cfg));\n        } else {\n            // ERROR\n            var message = event.data[2];\n            Human.log.error(\"Human.assets.geometries\", message + \" : \" + geoId);\n        }\n        delete dracoUnpackCallbacks[geoId];\n    }\n\n    // Initialization required after application setup, because worker file base directory must be set by application\n    function initializeDracoWorkers(){\n        for (var i = 0; i < dracoWorkerLimit; i++) {\n            var worker = Human.workers.loadWorker(DRACO_WORKER_FILE);\n            worker.onmessage = dracoWorkerMessageCallback;\n            dracoWorkers[i] = worker;\n        }\n    }\n\n    // Holds all SceneJS nodes for geometries\n    var libRoot;\n    HumanAssetsGeometries.init = function () {\n        // Init Draco workers if enabled\n        if (ENABLE_DRACO) {\n            initializeDracoWorkers();\n        }\n        // Scene graph now available\n        libRoot = Human.renderer.getLibraryRoot().addNode({\n            type: \"library\",\n            data: \"Geometry library\"\n        });\n    };\n\n    HumanAssetsGeometries.parseAsset = function(geometryId, asset, ok) {\n        var fileType = new Uint32Array(asset, 0, 1)[0];\n\n        var cfg = {\n            geometry: {\n                primitive: 'triangles'\n            },\n            draco: fileType === 0x13,\n            compressed: (fileType !== 0x11)\n        };\n\n        if (cfg.draco){\n            parseCompressedDracoGeometry(asset, cfg, geometryId, ok);\n        } else if (cfg.compressed){\n            parseCompressedGeometry(asset, cfg, geometryId, ok);\n        } else {\n            parseRawGeometry(asset, cfg, geometryId, ok);\n        }\n    };\n\n    /** Creates a geometry within an existing geometries library\n    NOTE: Consider whether createGeometry() needs to be exposed to the public API for geometries.\n     * @param libraryId ID of library\n     * @param geometryId ID for new geometry, globally unique among geometries in all libraries\n     * @param params Geometry params - geometry, texture, flags\n     */\n    HumanAssetsGeometries.createGeometry = function (geometryId, params) {\n        if (HumanAssetsGeometries.geometries[geometryId]) {\n            Human.log.error(\"Human.assets.geometries.createGeometry\", \"Geometry already loaded: \" + geometryId);\n            return;\n        }\n        if (!params.geometry) {\n            Human.log.error(\"Human.assets.geometries.createGeometry\", \"Mandatory attribute 'geometryId' expected on geometry: \" + geometryId);\n            return;\n        }\n        params.geometry.type = \"geometry\";\n        var geometry = {\n            //   materialId: params.materialId, // HACK while materialId can be on geometries\n            geometry: libRoot.addNode(params.geometry),\n            type: \"geometry\",\n            compressed: params.compressed\n        };\n\n        var boundary = params.boundary;\n\n        if (!boundary) {\n            var scale = null;\n            var translate = null;\n            if (params.geometry.positionDecodeMat) {\n                var mat = params.geometry.positionDecodeMat;\n                scale = new Float32Array([mat[0], mat[5], mat[10]]);\n                translate = new Float32Array([mat[12], mat[13], mat[14]]);\n            }\n\n            boundary = getBoundary(params.geometry.positions, scale, translate);\n        }\n\n        // Boundary and center\n        geometry.boundary = boundary;\n        geometry.center = [\n            (boundary.xmax + boundary.xmin) * 0.5,\n            (boundary.ymax + boundary.ymin) * 0.5,\n            (boundary.zmax + boundary.zmin) * 0.5\n        ];\n        geometry.axisBoundary = new Float32Array([\n            boundary.xmin, boundary.ymin, boundary.zmin,\n            boundary.xmax, boundary.ymax, boundary.zmax]);\n\n        HumanAssetsGeometries.geometries[geometryId] = geometry;\n\n        return geometry;\n    };\n\n    HumanAssetsGeometries.getCompressionStats = function() {\n        var stats = {\n            compressed: 0,\n            uncompressed: 0\n        };\n\n        for (var geometryId in HumanAssetsGeometries.geometries) {\n            if (HumanAssetsGeometries.geometries.hasOwnProperty(geometryId)) {\n                if (HumanAssetsGeometries.geometries[geometryId].compressed) {\n                    stats.compressed++;\n                } else {\n                    stats.uncompressed++;\n                }\n            }\n        }\n\n        return stats;\n    };\n\n    /**\n     * Destroys a geometries library\n     * @param libraryId\n     */\n    HumanAssetsGeometries.destroyAsset = function (geometryId) {\n        if (geometryId) {\n            var geometry = HumanAssetsGeometries.geometries[geometryId];\n            geometry.geometry.destroy();\n            delete HumanAssetsGeometries.geometries[geometryId];\n        } else {\n            HumanAssetsGeometries.reset();\n        }\n    };\n\n    /** Destroys all geometry libraries\n     */\n    HumanAssetsGeometries.reset = function () {\n        for (var geometryId in HumanAssetsGeometries.geometries) {\n            if (HumanAssetsGeometries.geometries.hasOwnProperty(geometryId)) {\n                HumanAssetsGeometries.destroyAsset(geometryId);\n            }\n        }\n    };\n\n    // comprssed asset variables\n    var positionScaleMat = mat4.create();\n    var positionTranslateMat = mat4.create();\n    var uvScaleMat = mat3.create();\n    var uvTranslateMat = mat3.create();\n\n    // create decode matrix for quantized geometry given the decode data\n    function createPositionDecodeMatrix(cfg, elements){\n        var positionTranslate = elements.subarray(0,3);\n        var positionScale = elements.subarray(3,6);\n        var positionDecodeMatrix = mat4.create();\n\n        mat4.fromScaling(positionScaleMat, positionScale);\n        mat4.fromTranslation(positionTranslateMat, positionTranslate);\n        mat4.multiply(positionDecodeMatrix, positionTranslateMat, positionScaleMat);\n\n        // assign to config\n        cfg.positionTranslate = positionTranslate;\n        cfg.positionScale = positionScale;\n        cfg.geometry.positionDecodeMat = positionDecodeMatrix;\n        return cfg;\n    }\n\n    // create decode uv matrix for quantized geometry given the decode data\n    function createUvDecodeMatrix(cfg, elements, uvCount){\n        cfg.geometry.uvDecodeMats = new Array(uvCount);\n        cfg.uvTranslates = new Array(uvCount);\n        cfg.uvScales = new Array(uvCount);\n\n        for (var i = 0; i < uvCount; i++) {\n            var _start = i * 4;\n            var uvTranslate = cfg.uvTranslates[i] = elements.subarray(_start, _start + 2); //new Float32Array(asset, bytePos, 2);\n            var uvScale = cfg.uvScales[i] = elements.subarray(_start + 2, _start + 4);   //new Float32Array(asset, bytePos + 8, 2);\n\n            mat3.fromScaling(uvScaleMat, uvScale);\n            mat3.fromTranslation(uvTranslateMat, uvTranslate);\n            cfg.geometry.uvDecodeMats[i] = mat3.create();\n            mat3.multiply(cfg.geometry.uvDecodeMats[i], uvTranslateMat, uvScaleMat);\n        }\n        return cfg;\n    }\n\n    // parse uncompressed geo asset and create the geometry\n    function parseRawGeometry(asset, cfg, geometryId, ok) {\n        /*\n         Geometry format\n\n         bytes   : info\n         [0.. 3]: uint32; file type identifer (= 0x11)\n         [4.. 7]: uint32; byte-length of padded asset id\n         [8..11]: uint32; byte-length of padded morph keys JSON\n         [12..15]: uint32; byte-length of positions array\n         [16..19]: uint32; byte-length of normals array\n         [20..23]: uint32; byte-length of indices array\n         [24..27]: uint32; byte-length of uv array\n         [28..43]: unit32[4]; unused, reserved for future use\n         [  ..  ]: text; asset id (tail-padded with empty spaces, e.g. 0x20)\n         [  ..  ]: text; morph key JSON (tail-padded with 0x20)\n         [  ..  ]: float32[]; positions array\n         [  ..  ]: float32[]; normals array\n         [  ..  ]: int32[];   indices array\n         [  ..  ]: float32[]; uv array\n        */\n\n        var index = new Uint32Array(asset, 0, 11);\n\n        var assetIdSize = index[1];\n        var keysSize = index[2];\n        var positionsSize = index[3];\n        var normalsSize = index[4];\n        var indicesSize = index[5];\n        var uvsSize = index[6];\n        // var unused = index[7 ... 10];\n\n        var assetIdStart = 11  * Uint32Array.BYTES_PER_ELEMENT;\n        var keysStart = assetIdStart + assetIdSize;\n        var positionsStart = keysStart + keysSize;\n        var normalsStart = positionsStart + positionsSize;\n        var indicesStart = normalsStart + normalsSize;\n        var uvsStart = indicesStart + indicesSize;\n\n        var numVertices = 0;\n\n        if (positionsSize > 0) {\n           cfg.geometry.positions = new Float32Array(asset, positionsStart, positionsSize / Float32Array.BYTES_PER_ELEMENT);\n           cfg.boundary = getBoundary(cfg.geometry.positions);\n           numVertices = cfg.geometry.positions.length / 3;\n        }\n\n        if (normalsSize > 0) {\n           cfg.geometry.normals = new Float32Array(asset, normalsStart, normalsSize / Float32Array.BYTES_PER_ELEMENT);\n        }\n\n        if (uvsSize > 0) {\n           cfg.geometry.uv = new Float32Array(asset, uvsStart, uvsSize / Float32Array.BYTES_PER_ELEMENT);\n        }\n\n        if (indicesSize > 0) {\n           cfg.geometry.indices = new Uint32Array(asset, indicesStart, indicesSize / Uint32Array.BYTES_PER_ELEMENT);\n           if (numVertices <= 256) {\n               cfg.geometry.indices = new Uint8Array(cfg.geometry.indices);\n           } else if (numVertices <= 65536) {\n               cfg.geometry.indices = new Uint16Array(cfg.geometry.indices);\n           }\n        }\n\n        ok(HumanAssetsGeometries.createGeometry(geometryId, cfg));\n    }\n\n    // parse compressed geo asset and create the geometry\n    function parseCompressedGeometry(asset, cfg, geometryId, ok) {\n        /*\n        # HEADER\n         [0.. 3]: uint32; file type identifier (= 0x12)\n         [4.. 7]: uint32; byte-length of padded asset id\n         [8..11]: uint32; byte-length of padded morph JSON\n        [12..15]: uint32; data segment offset (e.g. where DATA starts)\n        [16..19]: uint32; indices offset\n        [20..23]: uint32; byte-length of positions array\n        [24..27]: uint32; byte-length of normals array\n        [28..31]: uint32; byte-length of indices array\n            [32]: uchar; byte-length of positions matrix elements (= 24)\n            [33]: uchar; size (bytes) of indices type (e.g. 1, 2, 4)\n            [34]: uchar; # of uv sets\n            [35]: unused\n        (36..39): uint32; byte-length of array for uv set 1\n          ... repeat for uvs\n        (  ..  ): uint32; byte-length of array for uv set n\n            (  ): uchar; byte-length of uv set 1 matrix elements (= 16)\n          ... repeat for uvs\n            (  ): uchar; byte-length of uv set n matrix elements (= 16)\n        (  ..  ): padding to align DATA to uint32; \"unused\" is obviated by data offset\n\n        # DATA\n        [  ..  ]: quad-char[]/text; asset id (tail-padded with empty spaces, e.g. 0x20)\n        [  ..  ]: quad-char[]/text; morph JSON (tail-padded; includes extra info)\n        [  ..  ]: float32[]; positions matrix elements\n        (  ..  ): float32[]; uv set 1 matrix elements\n          ... repeat for uvs\n        (  ..  ): float32[]; uv set n matrix elements\n        [  ..  ]: uint16[]; quantized positions array\n        (  ..  ): uint16[]; quantized uv set 1 array\n          ... repeat for uvs\n        (  ..  ): uint16[]; quantized uv set n array\n        (  ..  ): signed char[]; oct-encoded normals array\n        (  ..  ): padding to align indices to uint32, which will work for all sizes\n        (  ..  ): indices_t[]; indices array\n        */\n\n        var index = new DataView(asset);\n\n        var assetIdSize = index.getUint32(4, true);\n        var morphDataSize = index.getUint32(8, true);\n        var dataOffset = index.getUint32(12, true);\n        var indexOffset = index.getUint32(16, true);\n        var positionsSize = index.getUint32(20, true);\n        var normalsSize = index.getUint32(24, true);\n        var indicesSize = index.getUint32(28, true);\n        var positionDecodeSize = index.getUint16(32, true);\n        var indexType = index.getUint8(34);\n        var uvCount = index.getUint8(35);\n\n        var uvIndex = new Array(uvCount);\n\n        var bytePos, i;\n\n        for (i = 0, bytePos = 36; i < uvCount; i++, bytePos += 6) {\n            uvIndex[i] = {\n                uvSize: index.getUint32(bytePos, true),\n                uvDecodeSize: index.getUint16(bytePos + 4, true)\n            };\n        }\n\n        // Start at position transform data\n        bytePos = dataOffset + assetIdSize + morphDataSize;\n\n        if (positionDecodeSize > 0) {\n            createPositionDecodeMatrix(cfg, new Float32Array(asset, bytePos, positionDecodeSize / Float32Array.BYTES_PER_ELEMENT));\n            bytePos += positionDecodeSize;\n        }\n\n        if (uvCount > 0) {\n            createUvDecodeMatrix(cfg, new Float32Array(asset, bytePos, uvCount * 4), uvCount);\n            bytePos += uvCount * 16;\n        }\n\n        if (positionsSize > 0) {\n            cfg.geometry.positions = new Uint16Array(asset, bytePos, positionsSize / Uint16Array.BYTES_PER_ELEMENT);\n            cfg.boundary = getBoundary(cfg.geometry.positions, cfg.positionScale, cfg.positionTranslate);\n\n            bytePos += positionsSize;\n        }\n\n        if (uvCount > 0) {\n            cfg.geometry.uvs = new Array(uvCount);\n\n            for (i = 0; i < uvCount; i++) {\n                cfg.geometry.uvs[i] = new Uint16Array(asset, bytePos, uvIndex[i].uvSize / Uint16Array.BYTES_PER_ELEMENT);\n                bytePos += uvIndex[i].uvSize;\n            }\n        }\n\n        if (normalsSize > 0) {\n            cfg.geometry.normals = new Int8Array(asset, bytePos, normalsSize / Int8Array.BYTES_PER_ELEMENT);\n            bytePos += normalsSize;\n        }\n\n        if (indicesSize > 0) {\n            var IndexType = INDEX_TYPE_MAP[indexType];\n            cfg.geometry.indices = new IndexType(asset, indexOffset, indicesSize / IndexType.BYTES_PER_ELEMENT);\n        }\n\n        ok(HumanAssetsGeometries.createGeometry(geometryId, cfg));\n    }\n\n    // parse draco-compressed geo asset (via worker) and create the geometry (on worker message callback)\n    function parseCompressedDracoGeometry(asset, cfg, geometryId, ok) {\n        /*\n        # HEADER\n         [0.. 3]: uint32; file type identifier (if draco, = 0x13)\n         [4.. 7]: uint32; byte-length of padded asset id\n         [8..11]: uint32; byte-length of padded morph JSON\n        [12..15]: uint32; data segment offset (e.g. where DATA starts)\n        [16..19]: uint32; byte-length of the draco blob\n        [20..21]: uint16; byte-length of positions matrix elements (= 24)\n            [22]: uchar; # of uv sets\n            [23]: uchar; uint32 padding\n            (  ): uint16; byte-length of uv set 1 matrix elements (= 16)\n          ... repeat for uvs\n            (  ): uint16; byte-length of uv set n matrix elements (= 16)\n        (  ..  ): padding to align DATA to uint32\n        # DATA\n        [  ..  ]: text; asset id (tail-padded with empty spaces, e.g. 0x20)\n        [  ..  ]: text; morph JSON (tail-padded; includes extra info)\n        [  ..  ]: float32[]; positions matrix elements\n        (  ..  ): float32[]; uv set 1 matrix elements\n          ... repeat for uvs\n        (  ..  ): float32[]; uv set n matrix elements\n        [  ..  ]: uchar[]; draco blob byte array\n        (  ..  ): padding for uint32 alignment\n        */\n        var index = new DataView(asset);\n        var dataByteStart = index.getUint32(12, true); // little-endian\n        var _idChunkLength = index.getUint32(4, true);\n        var _morphChunkLength = index.getUint32(8, true);\n        var _positionsDecodeLength = 24; // constant 24; 6 elements\n        var _numUVs = index.getUint8(22, true);\n        var _uvDecodeLength = 16 * _numUVs; // constant 16 for each uv-set: 4 elements\n\n        // data starting byte index values;\n        var idByteStart = dataByteStart;\n        var morphByteStart = idByteStart + _idChunkLength;\n        var positionsByteStart = morphByteStart + _morphChunkLength;\n        var uvByteStart = positionsByteStart + _positionsDecodeLength;\n        var dracoByteStart = uvByteStart + _numUVs * _uvDecodeLength;\n\n        var dracoByteLength = index.getUint32(16, true);\n        var dracoBuffer = new Int8Array(asset, dracoByteStart, dracoByteLength/Int8Array.BYTES_PER_ELEMENT);\n\n        // Quantization Decode\n        createPositionDecodeMatrix(cfg, new Float32Array(asset, positionsByteStart, _positionsDecodeLength / Float32Array.BYTES_PER_ELEMENT));\n        if (_numUVs > 0 ){\n            createUvDecodeMatrix(cfg, new Float32Array(asset, uvByteStart, _uvDecodeLength/Float32Array.BYTES_PER_ELEMENT), _numUVs);\n        }\n        dracoUnpackCallbacks[geometryId] = ok; // callback when worker is done.\n        var currentidx = dracoWorkerIdx % dracoWorkerLimit;\n        dracoWorkers[currentidx].postMessage([dracoBuffer, geometryId, cfg], [dracoBuffer.buffer]); // use transferable interface\n        dracoWorkerIdx++;\n    }\n\n    // boundary variables\n    var defaultTranslate = vec3.fromValues(0, 0, 0);\n    var defaultScale = vec3.fromValues(1, 1, 1);\n    // Get minimal boundary enclosing the given array\n    function getBoundary(positions, scale, translate) {\n        scale = scale || defaultScale;\n        translate = translate || defaultTranslate;\n        var xmin = 100000;\n        var ymin = 100000;\n        var zmin = 100000;\n        var xmax = -100000;\n        var ymax = -100000;\n        var zmax = -100000;\n        var x, y, z;\n        for (var i = 0, len = positions.length - 2; i < len; i += 3) {\n            x = positions[i] * scale[0] + translate[0];\n            y = positions[i + 1] * scale[1] + translate[1];\n            z = positions[i + 2] * scale[2] + translate[2];\n\n            if (x < xmin) {\n                xmin = x;\n            }\n            if (y < ymin) {\n                ymin = y;\n            }\n            if (z < zmin) {\n                zmin = z;\n            }\n            if (x > xmax) {\n                xmax = x;\n            }\n            if (y > ymax) {\n                ymax = y;\n            }\n            if (z > zmax) {\n                zmax = z;\n            }\n        }\n        return { xmin: xmin, ymin: ymin, zmin: zmin, xmax: xmax, ymax: ymax, zmax: zmax };\n    }\n\n})();\n;\n/**\n * @namespace Material libraries\n * @private\n */\n(function () {\n    \"use strict\";\n\n    var HumanAssetsMaterials = Human.assets.materials = {};\n\n    /** All materials\n     */\n    HumanAssetsMaterials.materials = {};\n\n    // Holds all SceneJS nodes for materials\n    var libRoot;\n\n    var EMBEDDED = false;\n\n    HumanAssetsMaterials.init = function () {\n        // Scene graph now available\n        libRoot = Human.renderer.getLibraryRoot().addNode({\n            type:\"library\",\n            data: \"Materials library\"\n        });\n    };\n\n    HumanAssetsMaterials.parseAsset = function(materialId, asset, ok) {\n        var parts = materialId.split(\"/\");\n        var libId = parts[1].split(\".\")[0];\n        var directory = (typeof(window.localBaseDirectory) !== 'undefined') ? window.localBaseDirectory : '/';\n        var imagePath = directory + \"content/states/\" + parts[0] + \"/materials/\" + libId + \"/\";\n        HumanAssetsMaterials.createMaterial(materialId, parseManifest(asset, imagePath), ok);\n    };\n\n    /** Given a state ID and a relative material ID, attempts to find the material within the libraries\n     * @param materialId Relative material ID, ie. not prefixed by libraryId\n     */\n    HumanAssetsMaterials.findMaterial = function (materialId) {\n        var material = HumanAssetsMaterials.materials[materialId];\n\n        if (material) {\n            return material;\n        } else {\n            return null;\n        }\n    };\n\n    /** Creates a material within an existing materials library\n     * @param libraryId ID of library\n     * @param materialId ID for new material, globally unique among materials in all libraries\n     * @param params Material params - material, texture, flags\n     */\n    HumanAssetsMaterials.createMaterial = function (materialId, params, ok) {\n        if (HumanAssetsMaterials.materials[materialId]) {\n            Human.log.warn(\"Human.assets.materials.createMaterial\", \"Material already loaded: \" + materialId);\n            return;\n        }\n\n        var material = {\n            type: \"material\",\n            textureCompressionStats: {\n                compressed: 0,\n                uncompressed: 0\n            },\n            hasAlphaTexture: false,\n            hasAlphaFresnel: false,\n            partiallyOpaque: false\n        };\n\n        if (params.material) {\n            material.material = libRoot.addNode({\n                type: \"material\",\n                workflow: params.material.workflow,\n                baseColor: params.material.baseColor,\n                specularColor: params.material.specularColor,\n                emitColor: params.material.emitColor,\n                shine: params.material.shine,\n                alpha: params.material.alpha,\n                emit: params.material.emit,\n                metallic: params.material.metallic,\n                roughness: params.material.roughness,\n                specularf0: params.material.specularf0\n            });\n\n            material.glassFactor = params.material.glassFactor !== undefined && params.material.glassFactor !== null ? params.material.glassFactor : 1.0;\n            material.murkiness = params.material.murkiness !== undefined && params.material.murkiness !== null ? params.material.murkiness : 1.0;\n\n            // Fresnels\n\n            var fresnel;\n            var edge;\n            var center;\n\n            // Base color Fresnel\n\n            if (params.material.baseFresnel) {\n\n                fresnel = params.material.baseFresnel;\n\n                material.fresnels = material.fresnels || {};\n\n                edge = fresnel.edge !== undefined ? fresnel.edge : {r: 1, g: 1, b: 1};\n                center = fresnel.center !== undefined ? fresnel.center : {r: 0, g: 0, b: 0};\n\n                material.fresnels.color = libRoot.addNode({\n                    type: \"fresnel\",\n                    applyTo: \"color\",\n                    edgeBias: fresnel.biasEdge,\n                    centerBias: fresnel.biasCenter,\n                    power: fresnel.power || 1,\n                    edgeColor: edge,\n                    centerColor: center,\n                    blendMode: fresnel.blendMode || \"multiply\"\n                });\n            }\n\n            // Alpha Fresnel\n\n            if (params.material.alphaFresnel) {\n\n                fresnel = params.material.alphaFresnel;\n\n                material.fresnels = material.fresnels || {};\n\n                edge = fresnel.edge !== undefined ? fresnel.edge : 0;\n                center = fresnel.center !== undefined ? fresnel.center  : 1;\n\n                material.fresnels.alpha = libRoot.addNode({\n                    type: \"fresnel\",\n                    applyTo: \"alpha\",\n                    edgeBias: fresnel.biasEdge,\n                    centerBias: fresnel.biasCenter,\n                    power: fresnel.power || 1,\n                    edgeColor: {\n                        r: edge,\n                        g: edge,\n                        b: edge\n                    },\n                    centerColor: {\n                        r: center,\n                        g: center,\n                        b: center\n                    },\n                    blendMode: fresnel.blendMode || \"multiply\"\n                });\n\n                material.hasAlphaFresnel = true;\n            }\n\n            if (params.material.transparencyFresnel){\n                fresnel = params.material.transparencyFresnel;\n                material.fresnels = material.fresnels || {};\n                edge = fresnel.edge !== undefined ? fresnel.edge : 0;\n                center = fresnel.center !== undefined ? fresnel.center  : 1;\n\n                material.fresnels.transparency = libRoot.addNode({\n                    type: \"fresnel\",\n                    applyTo: \"transparency\",\n                    edgeBias: fresnel.biasEdge,\n                    centerBias: fresnel.biasCenter,\n                    power: fresnel.power || 1,\n                    edgeColor: {\n                        r: edge,\n                        g: edge,\n                        b: edge\n                    },\n                    centerColor: {\n                        r: center,\n                        g: center,\n                        b: center\n                    },\n                    blendMode: fresnel.blendMode || \"multiply\"\n                });\n                \n                material.hasAlphaFresnel = true;\n            }\n\n            // Reflection Fresnel\n\n            if (params.material.reflectionFresnel) {\n\n                fresnel = params.material.reflectionFresnel;\n\n                material.fresnels = material.fresnels || {};\n\n                edge = fresnel.edge !== undefined ? fresnel.edge : 1;\n                center = fresnel.center !== undefined ? fresnel.center  : 0;\n\n                material.fresnels.reflect = libRoot.addNode({\n                    type: \"fresnel\",\n                    applyTo: \"reflect\",\n                    centerBias: fresnel.biasCenter,\n                    edgeBias: fresnel.biasEdge,\n                    power: fresnel.power || 1,\n                    edgeColor: {\n                        r: edge,\n                        g: edge,\n                        b: edge\n                    },\n                    centerColor: {\n                        r: center,\n                        g: center,\n                        b: center\n                    },\n                    blendMode: fresnel.blendMode || \"multiply\"\n                });\n            }\n\n            // Specular Fresnel\n\n            if (params.material.specularFresnel) {\n\n                fresnel = params.material.specularFresnel;\n\n                material.fresnels = material.fresnels || {};\n\n                edge = fresnel.edge !== undefined ? fresnel.edge  : {r: 0, g: 0, b: 0};\n                center = fresnel.center !== undefined ? fresnel.center : {r: 1, g: 1, b: 1};\n\n                material.fresnels.specular = libRoot.addNode({\n                    type: \"fresnel\",\n                    applyTo: \"specular\",\n                    centerBias: fresnel.biasCenter,\n                    edgeBias: fresnel.biasEdge,\n                    power: fresnel.power || 1,\n                    edgeColor: edge,\n                    centerColor: center,\n                    blendMode: fresnel.blendMode || \"multiply\"\n                });\n            }\n\n            // Emit Fresnel\n\n            if (params.material.emitFresnel) {\n\n                fresnel = params.material.emitFresnel;\n\n                material.fresnels = material.fresnels || {};\n\n                edge = fresnel.edge !== undefined ? fresnel.edge  : {r: 0, g: 0, b: 0};\n                center = fresnel.center !== undefined ? fresnel.center : {r: 1, g: 1, b: 1};\n\n                material.fresnels.emit = libRoot.addNode({\n                    type: \"fresnel\",\n                    applyTo: \"emit\",\n                    centerBias: fresnel.biasCenter,\n                    edgeBias: fresnel.biasEdge,\n                    power: fresnel.power || 1,\n                    edgeColor: edge,\n                    centerColor: center,\n                    blendMode: fresnel.blendMode || \"multiply\"\n                });\n            }\n\n        } else {\n            material.glassFactor = 1.0;\n            material.murkiness = 1.0;\n        }\n\n        if (params.reflection) { // Reflection asset\n            material.reflection = libRoot.addNode({\n                type: \"cubemap\",\n                applyTo: \"reflect\",\n                coreId: params.reflection.getCoreId() // Share core with reflection scene node\n            });\n        }\n\n        if (params.lightmap) {\n            material.lightmap = libRoot.addNode({\n                type: \"cubemap\",\n                applyTo: \"light\",\n                coreId: params.lightmap.getCoreId()\n            });\n        }\n\n        var depthMask;\n        var layer;\n        if (params.flags && params.flags.flags.skybox) {\n            depthMask = false;\n            layer = Number.MIN_SAFE_INTEGER;\n        }\n\n        if (params.flags) {\n            material.flags = {\n                // Object flags\n                skybox: params.flags.flags.skybox,\n                billboard: params.flags.flags.billboard,\n                frontface: params.flags.flags.frontface,\n\n                // Renderable flags\n                backfaces: params.flags.flags.backfaces,\n                addBlend: params.flags.flags.addBlend\n            };\n\n            material.partiallyOpaque = !!material.flags.partiallyOpaque;\n        }\n\n        var textures = params.texture ? params.texture.layers : [];\n\n        Human.assets.textures.load(textures, function() {\n            material.textures = new Array(textures.length);\n\n            for (var i = 0, len = textures.length; i < len; ++i) {\n                if (textures[i].compressedSrc) {\n                    material.textureCompressionStats.compressed++;\n                } else {\n                    material.textureCompressionStats.uncompressed++;\n                }\n\n                if (textures[i].applyTo === \"alpha\" || textures[i].applyTo === \"transparency\") {\n                    material.hasAlphaTexture = true;\n                }\n\n                material.textures[i] = libRoot.addNode(textures[i]);\n            }\n\n            HumanAssetsMaterials.materials[materialId] = material;\n\n            ok(material);\n        });\n    };\n\n    HumanAssetsMaterials.getTextureCompressionStats = function () {\n        var stats = {\n            compressed: 0,\n            uncompressed: 0\n        };\n\n        for (var materialId in HumanAssetsMaterials.materials) {\n            if (HumanAssetsMaterials.materials.hasOwnProperty(materialId)) {\n                stats.compressed += HumanAssetsMaterials.materials[materialId].textureCompressionStats.compressed;\n                stats.uncompressed += HumanAssetsMaterials.materials[materialId].textureCompressionStats.uncompressed;\n            }\n        }\n\n        return stats;\n    };\n\n    /**\n     * Destroys a materials library\n     * @param libraryId\n     */\n    HumanAssetsMaterials.destroyAsset = function (materialId) {\n        // Also check for \"\" libraries, otherwise will run into circular dependency with reset\n        if (materialId) {\n            var material = HumanAssetsMaterials.materials[materialId];\n\n            for (var type in material) {\n                if (material.hasOwnProperty(type) && typeof material[type].destroy === \"function\") {\n                    material[type].destroy();\n                }\n            }\n\n            delete HumanAssetsMaterials.materials[materialId];\n        } else {\n            HumanAssetsMaterials.reset();\n        }\n    };\n\n    /** Destroys all material libraries\n     */\n    HumanAssetsMaterials.reset = function () {\n        for (var materialId in HumanAssetsMaterials.materials) {\n            if (HumanAssetsMaterials.materials.hasOwnProperty(materialId)) {\n                HumanAssetsMaterials.destroyAsset(materialId);\n            }\n        }\n    };\n\n    function parseManifest(node, path, material) {\n        material = material || {};\n        var i, len;\n\n        if (node.id) {\n            node.id = null; // Don't let SceneJS create a node with this ID - would cause ID clash\n        }\n        switch (node.type) {\n            case  \"texture\":\n                var layer;\n                for (i = 0, len = node.layers.length; i < len; i++) {\n                    layer = node.layers[i];\n                    layer.src = layer.uri || layer.src;\n                    if (!EMBEDDED) {\n                        layer.src = path + layer.src;\n                    }\n\n                    layer.preloadURI = layer.preloadURI || layer.preloadSrc;\n                    if (layer.preloadURI) {\n                        if (EMBEDDED) {\n                            // (bas) these were changed to absolute uris\n                            layer.preloadURI += \"?v=\" + Human.VERSION;\n                        } else {\n                            layer.preloadURI = path + layer.preloadURI + \"?v=\" + Human.VERSION;\n                        }\n                    }\n\n                    // In SceneJS V3.0, texture blendMode has changed from \"add\" to \"multiply\".\n                    // Some of our materials for texture have black base color, which worked fine with \"add\",\n                    // but not with \"multiply\", so we'll default to \"add\" here.\n                    layer.blendMode = layer.blendMode || \"over\";\n\n                    if (layer.blendMode === \"add\") {\n                        layer.blendMode = \"over\";\n                    } else if (layer.blendMode === \"forceAdd\") {\n                        layer.blendMode = \"add\";\n                    }\n                }\n                if (material) {\n                    material.texture = node;\n                }\n                break;\n\n            case \"material\":\n                if (material) {\n                    material.material = node;\n                    var reflectionId, lightmapId, reflections, assetId, reflection;\n                    if (node.reflectionId) {\n                        reflectionId = node.reflectionId;\n                        reflections = Human.assets.reflections;\n                        assetId = reflections.exportedReflectionIds[reflectionId];\n                        // [GH] - look for a merged reflection ID (stateID + reflectionID)\n                        if (!assetId) {\n                            var bits = path.split(\"/\");\n                            if (bits.length > 3) {  \n                                var state = bits[3];\n                                reflectionId = state + \"/\" + reflectionId;\n                                assetId = reflections.exportedReflectionIds[reflectionId];\n                                if (!assetId) { \n                                    Human.log.error(\"Human.assets.materials.parseManifest\", \"Reflection not found: \" + reflectionId);\n                                }\n                            }\n\n                        }\n                        if (assetId) {\n                            reflection = Human.assets.reflections.reflections[assetId];\n                            if (reflection) {\n                                material.reflection = reflection.node;\n                            } else {\n                                Human.log.error(\"Human.assets.materials.parseManifest\", \"Reflection not found: \" + reflectionId);\n                            }\n                        }\n                    }\n                    if (node.lightmapId) {\n                        lightmapId = node.lightmapId;\n                        reflections = Human.assets.reflections; // Lightmaps are also kept in Human.assets.reflections\n                        assetId = reflections.exportedReflectionIds[lightmapId];\n                        if (!assetId) {\n                            Human.log.error(\"Human.assets.materials.parseManifest\", \"Lightmap not found: \" + reflectionId);\n                        } else {\n                            reflection = Human.assets.reflections.reflections[assetId];\n                            if (reflection) {\n                                material.lightmap = reflection.node;\n                            } else {\n                                Human.log.error(\"Human.assets.materials.parseManifest\", \"Lightmap not found: \" + reflectionId);\n                            }\n                        }\n                    }\n                }\n                break;\n\n            case \"flags\":\n                if (material) {\n                    material.flags = node;\n                }\n                break;\n        }\n        if (node.nodes) {\n            for (i = 0, len = node.nodes.length; i < len; i++) {\n                parseManifest(node.nodes[i], path, material);\n            }\n            node.nodes = null;\n        }\n        return material;\n    }\n})();\n;/**\n * @namespace Morph libraries\n * @private\n */\n(function () {\n    \"use strict\";\n\n    var HumanAssetsMorphs = Human.assets.morphs = {};\n\n    /** All morphs\n     */\n    HumanAssetsMorphs.morphs = {};\n\n\n    // Holds all SceneJS nodes for morphs\n    var libRoot;\n\n    HumanAssetsMorphs.init = function () {\n        // Scene graph now available\n        libRoot = Human.renderer.getLibraryRoot().addNode({\n            type: \"library\",\n            data: \"Morphs library\"\n        });\n        \n    };\n\n    HumanAssetsMorphs.parseAsset = function(morphId, asset, ok) {\n\n        var morph;\n\n        var fileType = new Uint32Array(asset, 0, 1)[0];\n\n        if (fileType === 0x11) {\n            morph = parseRawMorph(asset);\n        } else {\n            morph = parseCompressedMorph(asset);\n        }\n\n\n        ok(\n            Human.assets.morphs.createMorph(morphId, morph)\n        );\n    };\n\n    /** Given a relative morph ID, attempts to find the morph within the libraries\n     * @param morphId Relative morph ID, ie. not prefixed by libraryId\n     */\n    HumanAssetsMorphs.findMorph = function (morphId) {\n        var morph = HumanAssetsMorphs.morphs[morphId];\n\n        if (morph) {\n            return morph;\n        } else {\n            return null;\n        }\n    };\n\n    /** Creates a material within an existing morphs library\n     * @param libraryId ID of library\n     * @param morphId ID for new material, globally unique among morphs in all libraries\n     * @param params Material params - material, texture, flags\n\n     */\n\n    HumanAssetsMorphs.createMorph = function (morphId, params) {\n\n        var morph = HumanAssetsMorphs.morphs[morphId];\n\n        if (morph) {\n            Human.log.warn(\"Human.assets.morphs.createMorph\", \"Morph already loaded: \" + morphId);\n            return morph;\n        }\n\n        params.morphGeometry.type = \"morphGeometry\";\n        var morphGeometry = libRoot.addNode(params.morphGeometry);\n        var targets = morphGeometry.getTargets();\n        var boundary = {\n            xmin: Number.POSITIVE_INFINITY,\n            ymin: Number.POSITIVE_INFINITY,\n            zmin: Number.POSITIVE_INFINITY,\n            xmax: Number.NEGATIVE_INFINITY,\n            ymax: Number.NEGATIVE_INFINITY,\n            zmax: Number.NEGATIVE_INFINITY\n        };\n\n        var position = vec3.create();\n        var decompressPosition = Human.math.decompressPosition;\n\n        for (var i = 0, len = targets.length; i < len; ++i) {\n            var target = targets[i];\n            var positions = target.positions;\n            var decompress = target.positionDecodeMat;\n\n            for (var j = 0, lenJ = positions.length; j < lenJ; j += 3) {\n                position[0] = positions[j];\n                position[1] = positions[j + 1];\n                position[2] = positions[j + 2];\n\n                if (decompress) {\n                    decompressPosition(position, position, decompress);\n                }\n\n                if (position[0] < boundary.xmin) {\n                    boundary.xmin = position[0];\n                }\n\n                if (position[0] > boundary.xmax) {\n                    boundary.xmax = position[0];\n                }\n\n                if (position[1] < boundary.ymin) {\n                    boundary.ymin = position[1];\n                }\n\n                if (position[1] > boundary.ymax) {\n                    boundary.ymax = position[1];\n                }\n\n                if (position[2] < boundary.zmin) {\n                    boundary.zmin = position[2];\n                }\n\n                if (position[2] > boundary.zmax) {\n                    boundary.zmax = position[2];\n                }\n            }\n        }\n\n        morph = {\n            type: \"morph\",\n            morphGeometry: morphGeometry,\n            boundary: boundary,\n            center: [\n                (boundary.xmax + boundary.xmin) * 0.5,\n                (boundary.ymax + boundary.ymin) * 0.5,\n                (boundary.zmax + boundary.zmin) * 0.5\n            ],\n            positionTranslates: params.positionTranslates,\n            positionScales: params.positionScales\n        };\n\n        var animation = new Human.assets.morphs.Animation();\n        var keys = params.morphGeometry.keys;\n\n        animation.addMorph(keys[0], keys[keys.length - 1],\n            function (factor) {\n                morph.morphGeometry.setFactor(factor);\n            });\n\n        animation.calculateTimeFrame();\n\n        Human.timeline.addAnimation(morphId, animation);\n\n        var stateId = morphId.split(\"/\")[0];\n        var leaf = Human.timeline.leafTimelines[stateId] || new Human.timeline.LeafTimeline(stateId);\n\n        leaf.addAnimation(morphId, animation); // add to leaf\n\n        HumanAssetsMorphs.morphs[morphId] = morph;\n        return morph;\n    };\n\n    /**\n     * Destroys a morph library\n     * @param libraryId\n     */\n    HumanAssetsMorphs.destroyAsset = function (morphId) {\n        if (morphId) {\n            var morph = HumanAssetsMorphs.morphs[morphId];\n            if (!morph) {\n                Human.log.warn(\"Human.assets.morphs.destroyMorph\", \"Morph not found: \" + morphId);\n                return;\n            }\n            morph.morphGeometry.destroy(); // Blow away scene subgraph\n\n            delete HumanAssetsMorphs.morphs[morphId];\n        } else {\n            HumanAssetsMorphs.reset();\n        }\n    };\n\n    /** Destroys all morph libraries\n     */\n    HumanAssetsMorphs.reset = function () {\n        for (var morphId in HumanAssetsMorphs.morphs) {\n            if (HumanAssetsMorphs.morphs.hasOwnProperty(morphId)) {\n                HumanAssetsMorphs.destroyAsset(morphId);\n            }\n        }\n    };\n\n    function parseRawMorph(asset) {\n        /*\n\n         Morph format\n\n         bytes   : info\n         [0.. 3]: uint32; file type identifer (= 0x11)\n         [4.. 7]: uint32; byte-length of padded asset id\n         [8..11]: uint32; byte-length of padded morph keys JSON\n         [12..15]: uint32; byte-length of positions array\n         [16..19]: uint32; byte-length of normals array\n         [20..23]: uint32; byte-length of indices array\n         [24..27]: uint32; byte-length of uv array\n         [28..43]: unit32[4]; unused, reserved for future use\n         [  ..  ]: text; asset id (tail-padded with empty spaces, e.g. 0x20)\n         [  ..  ]: text; morph key JSON (tail-padded with 0x20)\n         [  ..  ]: float32[]; positions array\n         [  ..  ]: float32[]; normals array\n         [  ..  ]: int32[];   indices array\n         [  ..  ]: float32[]; uv array\n         */\n\n        var morph = {\n            morphGeometry: {}\n        };\n\n        var index = new Uint32Array(asset, 0, 11);\n\n        // var unusedFileType = index[0];\n        var assetIdSize = index[1];\n        var keysSize = index[2];\n        var positionsSize = index[3];\n        var normalsSize = index[4];\n        var indicesSize = index[5];\n        var uvsSize = index[6];\n        // var unused = index[7 ... 10];\n\n        var assetIdStart = 11  * Uint32Array.BYTES_PER_ELEMENT;\n        var keysStart = assetIdStart + assetIdSize;\n        var positionsStart = keysStart + keysSize;\n        var normalsStart = positionsStart + positionsSize;\n        var indicesStart = normalsStart + normalsSize;\n        var uvsStart = indicesStart + indicesSize;\n\n        var keys = morph.morphGeometry.keys = Human.utils.atoj(asset, keysStart, keysSize);\n\n        var numKeys = keys.length;\n\n        var target;\n        var targets = morph.morphGeometry.targets = [];\n\n        var targetPositionsSize = positionsSize / numKeys;\n        var targetPositionsLength = targetPositionsSize / Float32Array.BYTES_PER_ELEMENT;\n\n        var targetNormalSize = normalsSize / numKeys;\n        var targetNormalLength = targetNormalSize / Float32Array.BYTES_PER_ELEMENT;\n\n        var targetUVsSize = uvsSize / numKeys;\n        var targetUVsLength = uvsSize / Float32Array.BYTES_PER_ELEMENT;\n\n        for (var i = 0; i < numKeys; i++) {\n\n            target = {};\n\n            if (positionsSize > 0) {\n                target.positions = new Float32Array(asset, positionsStart + (i * targetPositionsSize), targetPositionsLength);\n            }\n\n            if (normalsSize > 0) {\n                target.normals = new Float32Array(asset, normalsStart + (i * targetNormalSize), targetNormalLength);\n            }\n\n            if (uvsSize > 0) {\n                target.uvs = new Float32Array(asset, uvsStart + (i * targetUVsSize), targetUVsLength);\n            }\n\n            targets.push(target);\n        }\n\n        return morph;\n    }\n\n    var positionScaleMat = mat4.create();\n    var positionTranslateMat = mat4.create();\n\n    function parseCompressedMorph(asset) {\n        /*\n        # HEADER\n         [0.. 3]: uint32; file type identifier (= 0x12)\n         [4.. 7]: uint32; byte-length of padded asset id\n         [8..11]: uint32; byte-length of padded morph JSON\n        [12..15]: uint32; data segment offset (e.g. where DATA starts)\n        [16..19]: uint32; indices offset\n        [20..23]: uint32; byte-length of positions array\n        [24..27]: uint32; byte-length of normals array\n        [28..31]: uint32; byte-length of indices array\n            [32]: uchar; byte-length of positions matrix elements (= 24)\n            [33]: uchar; size (bytes) of indices type (e.g. 1, 2, 4)\n            [34]: uchar; # of uv sets\n            [35]: unused\n        (36..39): uint32; byte-length of array for uv set 1\n          ... repeat for uvs\n        (  ..  ): uint32; byte-length of array for uv set n\n            (  ): uchar; byte-length of uv set 1 matrix elements (= 16)\n          ... repeat for uvs\n            (  ): uchar; byte-length of uv set n matrix elements (= 16)\n        (  ..  ): padding to align DATA to uint32; \"unused\" is obviated by data offset\n\n        # DATA\n        [  ..  ]: quad-char[]/text; asset id (tail-padded with empty spaces, e.g. 0x20)\n        [  ..  ]: quad-char[]/text; morph JSON (tail-padded; includes extra info)\n        [  ..  ]: float32[]; positions matrix elements\n        (  ..  ): float32[]; uv set 1 matrix elements\n          ... repeat for uvs\n        (  ..  ): float32[]; uv set n matrix elements\n        [  ..  ]: uint16[]; quantized positions array\n        (  ..  ): uint16[]; quantized uv set 1 array\n          ... repeat for uvs\n        (  ..  ): uint16[]; quantized uv set n array\n        (  ..  ): signed char[]; oct-encoded normals array\n        (  ..  ): padding to align indices to uint32, which will work for all sizes\n        (  ..  ): indices_t[]; indices array\n        */\n\n        var morph = {};\n\n        var index = new DataView(asset);\n\n        var assetIdSize = index.getUint32(4, true);\n        var morphDataSize = index.getUint32(8, true);\n        var dataOffset = index.getUint32(12, true);\n        var positionsSize = index.getUint32(20, true);\n        var normalsSize = index.getUint32(24, true);\n        var positionDecodeSize = index.getUint16(32, true);\n        var uvCount = index.getUint8(34);\n\n        var uvIndex = new Array(uvCount);\n\n        var bytePos, i;\n\n        for (i = 0, bytePos = 36; i < uvCount; i++, bytePos += 5) {\n            uvIndex[i] = {\n                uvSize: index.getUint32(bytePos, true),\n                uvDecodeSize: index.getUint8(bytePos + 4)\n            };\n        }\n\n        // Start at position transform data\n        bytePos = dataOffset + assetIdSize;\n\n        morph.morphGeometry = Human.utils.atoj(asset, bytePos, morphDataSize);\n\n        var keys = morph.morphGeometry.keys;\n        var numKeys = keys.length;\n\n        var targets = morph.morphGeometry.targets = new Array(numKeys);\n        var target;\n\n        for (i = 0; i < numKeys; i++) {\n            targets[i] = {};\n        }\n\n        morph.positionTranslates = new Array(numKeys);\n        morph.positionScales = new Array(numKeys);\n\n        var targetPositionDecodeSize = positionDecodeSize / numKeys;\n\n        var targetPositionsSize = positionsSize / numKeys;\n        var targetPositionsLength = targetPositionsSize / Uint16Array.BYTES_PER_ELEMENT;\n\n        var targetNormalSize = normalsSize / numKeys;\n        var targetNormalLength = targetNormalSize / Int8Array.BYTES_PER_ELEMENT;\n\n        bytePos += morphDataSize;\n\n        if (positionDecodeSize > 0) {\n\n            for (i = 0; i < numKeys; i++) {\n                target = targets[i];\n\n                var positionTranslate = morph.positionTranslates[i] = new Float32Array(asset, bytePos, 3);\n                var positionScale = morph.positionScales[i] = new Float32Array(asset, bytePos + 12, 3);\n\n                mat4.fromScaling(positionScaleMat, positionScale);\n                mat4.fromTranslation(positionTranslateMat, positionTranslate);\n                target.positionDecodeMat = mat4.create();\n\n                mat4.multiply(target.positionDecodeMat, positionTranslateMat, positionScaleMat);\n\n                bytePos += targetPositionDecodeSize;\n            }\n        }\n\n        if (positionsSize > 0) {\n            for (i = 0; i < numKeys; i++) {\n                targets[i].positions = new Uint16Array(asset, bytePos + (i * targetPositionsSize), targetPositionsLength);\n            }\n\n            bytePos += positionsSize;\n        }\n\n        if (normalsSize > 0) {\n            for (i = 0; i < numKeys; i++) {\n                targets[i].normals = new Int8Array(asset, bytePos + (i * targetNormalSize), targetNormalLength);\n            }\n        }\n\n        return morph;\n    }\n\n})();\n;(function() {\n    \"use strict\";\n\n    /**\n     * An animation comprised of a set of morphs, which may be installed into the {@link Human.timeline}.\n     * Like all such animations, it has an {@link #update} method through which the timeline updates the\n     * progress of the morphs. The morphs each contain a {@link SceneJS.MorphGeometry} and possibly\n     * a {@link SceneJS.Geometry}, which are kept externally in a {@link Human.assets.morphs}.\n     *\n     * @class\n     * @constructor\n     * @private\n     */\n    Human.assets.morphs.Animation = function (cfg) {\n        cfg = cfg || {};\n\n        this.type = \"morph-animation\";\n        this._loop = (cfg.loop !== false);\n        this._morphList = [];\n        this.timeline = cfg.timeline;\n        this.firstTime = null;\n        this.lastTime = null;\n    };\n\n    /**\n     * Adds a morph to this animation\n     * @param firstTime First time key\n     * @param lastTime Last time key\n     * @param update Callback to update the morph progress\n     */\n    Human.assets.morphs.Animation.prototype.addMorph = function (firstTime, lastTime, update) {\n        this._morphList.push({ firstTime:firstTime, lastTime:lastTime, update:update  });\n    };\n\n    /**\n     * Calculates time frame enclosing keys of all contained morphs\n     * @return {*}\n     */\n    Human.assets.morphs.Animation.prototype.calculateTimeFrame = function () {\n        var min = 1000000;\n        var max = -1000000;\n        var morph;\n        var morphList = this._morphList;\n        for (var i = 0, len = this._morphList.length; i < len; i++) {\n            morph = morphList[i];\n            if (morph.firstTime < min) {\n                min = morph.firstTime;\n            }\n            if (morph.lastTime > max) {\n                max = morph.lastTime;\n            }\n        }\n\n        this.firstTime = min;\n        this.lastTime = max;\n    };\n\n    /**\n     * Updates progress of morphs\n     * @param ctx\n     * @param time\n     */\n    Human.assets.morphs.Animation.prototype.update = function (ctx, time) {\n        var morph;\n        var time2;\n        for (var i = 0, len = this._morphList.length; i < len; i++) {\n            morph = this._morphList[i];\n            if (this._loop) {\n                // Dont wrap when time is right on the last key\n                time2 = (time === morph.lastTime) ? time : (morph.firstTime + time % (morph.lastTime - morph.firstTime));\n            } else {\n                if (time2 < morph.firstTime) {\n                    time2 = morph.firstTime;\n                }\n                if (time2 > morph.lastTime) {\n                    time2 = morph.lastTime;\n                }\n            }\n            morph.update(time2);\n        }\n    };\n\n    /**\n     * Destroys this module\n     */\n    Human.assets.morphs.Animation.prototype.destroy = function () {\n        this.destroyed = true;\n    };\n})();\n;(function () {\n    \"use strict\";\n\n    /**\n     * @namespace Loads and unloads lights to and from {@link Human.renderer.lights}.\n     *\n     * Loads lights in batches for models (states). When loading a batch, will immediately enable those lights, then\n     * push a record of those lights onto a stack.\n     *\n     * After unloading a batch of lights for a model, will remove that batch from the stack, then\n     * enable the batch (if any) that remains on the top of the stack.\n     *\n     * @private\n     */\n    var lightAssets = Human.assets.lights = {\n        lightIds: {}\n    };\n\n    /**\n     * Loads a library of light sources\n     *\n     * @param libId Library ID\n     * @param manifest Library manifest\n     * @param params Options applied while loading\n     * @param ok Callback fired on completion\n     */\n    lightAssets.parseLibrary = function (libId, manifest, params, ok) {\n\n        var lightIds = lightAssets.lightIds[libId];\n\n        if (lightIds) {\n            // Should have hit cache at higher level\n            Human.log.warn(\"Human.assets.lights.parseLibrary\", \"library already loaded\");\n            ok();\n            return;\n        }\n\n        var lights = manifest.lights;\n\n        if (!lights) {\n            Human.log.error(\"Human.assets.lights.parseLibrary\", \"'lights' section expected in lights library\");\n            ok();\n            return;\n        }\n\n        lightIds = lightAssets.lightIds[libId] = [];\n\n        // Disable any lights already enabled\n        Human.renderer.lights.clearEnabled(); \n\n        var light;\n        var lightId;\n\n        for (var i = 0, len = lights.length; i < len; i++) {\n\n            light = lights[i];\n\n            if (!light.lightId) {\n\n                // Skip invalid light\n                Human.log.error(\"Human.assets.lights.load\", \"'lightId' missing on light\");\n                ok();\n                continue;\n            }\n\n            lightId = libId + \".\" + light.lightId;\n\n            light.lightId = lightId;\n            light.enabled = true;\n\n            Human.renderer.lights.addLight(light);\n\n            lightIds.push(lightId);\n        }\n\n        if (ok) {\n            ok();\n        }\n    };\n\n    /**\n     * Unloads a lights library.\n     *\n     * @param libId ID of lights library to unload.\n     */\n    lightAssets.unloadLibrary = function (libId) {\n\n        var lightIds = lightAssets.lightIds[libId];\n\n        if (!lightIds) {\n            Human.log.warn(\"Human.assets.lights.unloadLibrary\", \"library not loaded\");\n            return;\n        }\n\n        var i;\n        var len;\n        var lights = Human.renderer.lights;\n\n        for (i = 0, len = lightIds.length; i < len; i++) {\n            lights.removeLight(lightIds[i]);\n        }\n\n        delete lightAssets.lightIds[libId];\n    };\n})();\n;(function() {\n    \"use strict\";\n\n    var tweenAssets = Human.assets.tweens = {};\n\n    /**\n     * Loads a tweens library\n     *\n     * @param libId Library ID\n     * @param manifest Library manifest\n     * @param params Options applied while loading\n     * @param ok Callback fired on completion\n     */\n    tweenAssets.parseLibrary = function (libId, manifest, params, ok) {\n        var tweenDefs = manifest.tweens || {};\n        var tweenDef;\n        var type;\n        var tweenType;\n        var controlType;\n        var tokens;\n        var control;\n        var tween;\n        var tweens = [];\n\n        var modelId = libId.split(\"/\")[0];\n        var leaf;\n\n        if (!Human.timeline.leafTimelines.hasOwnProperty(modelId)){\n            leaf = new Human.timeline.LeafTimeline(modelId);\n        }\n\n        for (var tweenName in tweenDefs) {\n            if (tweenDefs.hasOwnProperty(tweenName)) {\n\n                tweenDef = tweenDefs[tweenName];\n\n                // Validate tween data\n\n                if (!tweenDef.keys) {\n                    Human.log.error(\"Human.timeline.tweenAnimationLoader\", \"Tween attribute missing: 'keys'\");\n                    continue;\n                }\n\n                if (!tweenDef.targets) {\n                    Human.log.error(\"Human.timeline.tweenAnimationLoader\", \"Tween attribute missing: 'targets'\");\n                    continue;\n                }\n\n                if (tweenDef.keys.length < 2 || tweenDef.targets.length < 2) {\n                    Human.log.error(\"Human.timeline.tweenAnimationLoader\", \"tween has insufficient keys or targets - minimum of two required\");\n                    continue;\n                }\n\n                if (tweenDef.keys.length !== tweenDef.targets.length) {\n                    Human.log.error(\"Human.timeline.tweenAnimationLoader\", \"tween has mismatching numbers of keys and targets\");\n                    continue;\n                }\n\n                tweenDef.options = Human.utils.applyIf(this.options, tweenDef.options || {});\n\n                type = tweenDef.type;\n\n                if (!type) {\n                    Human.log.error(\"Human.timeline.tweenAnimationLoader\", \"Tween attribute missing: 'type'\");\n                    continue;\n                }\n\n                tokens = type.split(\":\");\n\n                tweenType = tokens[0];\n                controlType = tokens[1];\n\n                if (tweenType === \"lerp\") {\n                    tweenType = \"tween\";\n                }\n\n                if (!tweenType || !controlType) {\n                    Human.log.error(\"Human.timeline.tweenAnimationLoader\", \"Tween attribute invalid: 'type'\");\n                    continue;\n                }\n\n                // Create control strategy\n\n                switch (controlType) {\n\n                    // Tween attributes of a scene object\n\n                    case \"objectAttr\":\n                        control = new Human.timeline.ObjectControl({\n                            modelId: modelId,\n                            objectId: getAbsoluteID(modelId, tweenDef.objectId || tweenDef.targetId),\n                            objectIds: tweenDef.objectIds,\n                            id: tweenName\n                        });\n                        break;\n\n                    // Tween attributes of a transform via a scene object\n\n                    case \"objectXForm\":\n                        control = new Human.timeline.ObjectTransformControl({\n                            modelId: modelId,\n                            objectId: getAbsoluteID(modelId, tweenDef.objectId || tweenDef.targetId),\n                            initial: tweenDef.targets[0]\n                        });\n                        break;\n\n                    // Tween attributes of a material\n\n                    case \"material\":\n                        control = new Human.timeline.MaterialControl({\n                            modelId: modelId,\n                            materialId: getAbsoluteID(modelId, tweenDef.materialId || tweenDef.targetId),\n                            attributes: tweenDef.targets[0]\n                        });\n                        break;\n\n                    // Tween attributes of a material's texture\n\n                    case \"texture\":\n                        control = new Human.timeline.TextureControl({\n                            modelId: modelId,\n                            materialId: getAbsoluteID(modelId, tweenDef.materialId || tweenDef.targetId),\n                            targetLayer: tweenDef.targetLayer\n                        });\n                        break;\n\n                    // Tween a frenel on a material\n\n                    case \"fresnel\":\n                        control = new Human.timeline.FresnelControl({\n                            modelId: modelId,\n                            materialId: getAbsoluteID(modelId, tweenDef.materialId),\n                            fresnelType: tweenDef.fresnelType\n                        });\n                        break;\n\n                    case \"particleSystem\":\n                        control = new Human.timeline.ParticleSystemControl({\n                            particleSystemId: tweenDef.particleSystemId\n                        });\n                        break;\n\n                    case \"particleComponent\":\n                        control = new Human.timeline.ParticleComponentControl({\n                            particleSystemId: tweenDef.particleSystemId,\n                            componentId: tweenDef.componentId\n                        });\n                        break;\n\n                    // Tween camera\n\n                    case \"camera\":\n                        control = new Human.timeline.CameraControl();\n                        break;\n\n                    default:\n                        Human.log.error(\"Human.timeline.tweenAnimationLoader\", \"Unsupported tween type: \" + type);\n                        continue;\n                }\n\n                // Create tween\n\n                switch (tweenType) {\n\n                    case \"tween\":\n                        tween = new Human.timeline.Tween({\n                            keys: tweenDef.keys,\n                            targets: tweenDef.targets,\n                            control: control\n                        });\n                        break;\n\n                    case \"switch\":\n                        tween = new Human.timeline.Switch({\n                            keys: tweenDef.keys,\n                            targets: tweenDef.targets,\n                            control: control\n                        });\n                        break;\n\n                    default:\n                        Human.log.error(\"Human.timeline.tweenAnimationLoader\", \"Unsupported tween type: \" + type);\n                        continue;\n                }\n\n                tweens.push(tween);\n            }\n        }\n\n        if (tweens.length > 0) {\n\n            // Create tween animation\n            // Only if we have valid tweens\n\n            var animation = new Human.timeline.TweenAnimation({\n                tweens: tweens\n            });\n\n            // Add to timeline\n\n            Human.timeline.addAnimation(libId, animation);\n        }\n\n        leaf = Human.timeline.leafTimelines[modelId];\n        leaf.addAnimation(libId, Human.timeline.animations[libId]); // add to leaf\n\n        if (ok) {\n            ok();\n        }\n    };\n\n    /**\n     * Unloads a tweens library.\n     *\n     * @param libId ID of library to unload.\n     */\n    tweenAssets.unloadLibrary = function(libId) {\n        var modelId = libId.split(\"/\")[0];\n\n        // Delete Tweens From Leaf Timelines\n        Human.timeline.leafTimelines[modelId].unload(\"tweens\");\n    };\n\n    /**\n     * Converts an ID to an absolute ID if necessary.\n     *\n     * If the element ID has no \".\" then it is the relative ID of an element\n     * within the given model. Otherwise, it will be the absolute ID of element\n     * in another model.\n     */\n    function getAbsoluteID(modelId, elementId) {\n        if (modelId && elementId) {\n            return (elementId.indexOf(\".\") < 0) ? modelId + \"-\" + elementId : elementId;\n        } else {\n            return null;\n        }\n        \n    }\n\n})();\n;/**\n * @namespace Reflection libraries\n * @private\n */\n(function () {\n    \"use strict\";\n\n    var HumanAssetsReflections = Human.assets.reflections = {};\n\n    // Array of reflection IDs for each library, used for unloading\n    var libReflectionIds = {};\n\n    /**\n     * All reflections\n     */\n    HumanAssetsReflections.reflections = {};\n\n    /**\n     * Reflection IDs exported by #exportReflectionIds; a map of exported IDs to real asset IDs\n     *\n     * @type {{String:String}}\n     * @deprecated\n     */\n    HumanAssetsReflections.exportedReflectionIds = {};\n\n    // Holds all SceneJS nodes for reflections\n    var libRoot;\n\n    HumanAssetsReflections.init = function () {\n        // Scene graph now available\n        libRoot = Human.renderer.getLibraryRoot().addNode({\n            type: \"library\",\n            data: \"Reflections library\" // For debugging\n        });\n    };\n\n    /**\n     * Loads a reflections library\n     *\n     * @param libId Library ID\n     * @param manifest Library manifest\n     * @param params Options applied while loading\n     * @param ok Callback fired on completion\n     */\n    HumanAssetsReflections.parseLibrary = function (libId, manifest, params, ok) {\n\n        var reflectionIds = libReflectionIds[libId];\n\n        if (reflectionIds) {\n\n            // Should have hit cache at higher level\n            Human.log.warn(\"Human.assets.reflections.parseLibrary\", \"library already loaded\");\n\n            ok();\n            return;\n        }\n\n        reflectionIds = [];\n        libReflectionIds[libId] = reflectionIds;\n\n        var parts = libId.split(\"/\");\n        var imagePath = window.localBaseDirectory + \"content/states/\" + parts[0] + \"/reflections/\" + parts[1] + \"/\";\n        var reflectionParams;\n        var srcList;\n        var reflectionId;\n        var reflection;\n\n        var graph = Human.renderer.graph;\n\n        for (var key in manifest) {\n            if (manifest.hasOwnProperty(key)) {\n\n                reflectionParams = manifest[key];\n\n                reflectionParams.type = \"reflect\";\n                reflectionParams.blendMode = reflectionParams.blendMode || \"add\";\n\n                srcList = reflectionParams.src;\n\n                if (!srcList) {\n                    Human.log.error(\"Human.assets.reflections.loader\", \"Reflection property missing: src\");\n                    continue;\n                }\n\n                if (!Human.utils.isArray(srcList)) {\n                    Human.log.error(\"Human.assets.reflections.loader\", \"Reflection property should be array: src\");\n                    continue;\n                }\n\n                for (var i = 0, len = srcList.length; i < len; i++) {\n                    srcList[i] = imagePath + srcList[i] + \"?v=\" + Human.VERSION;\n                }\n\n                reflectionId = libId + \".\" + key;\n\n                reflection = {\n                    applyTo: reflectionParams.applyTo || \"reflect\",\n                    node: graph.insertNode(Human.renderer.getLibraryRoot(), reflectionParams) // For non-PBR, deprecated\n                };\n\n                HumanAssetsReflections.reflections[reflectionId] = reflection;\n\n                if (reflection.applyTo === \"reflect\") {\n                    Human.renderer.getScene().createReflection(reflectionId, { // For PBR, in future also for non-PBR\n                        src: reflectionParams.src,\n                        intensity: reflectionParams.intensity,\n                        space: reflectionParams.space || \"world\"\n                    });\n                } else {\n                    Human.renderer.getScene().createLightmap(reflectionId, { // For PBR, in future also for non-PBR\n                        src: reflectionParams.src,\n                        intensity: reflectionParams.intensity,\n                        space: reflectionParams.space || \"world\"\n                    });\n                }\n\n                reflectionIds.push(reflectionId);\n            }\n        }\n\n        // Subsequently-loaded materials will need our reflections to exist, so render a frame\n        // to force the creation of the reflections' nodes in the scene graph\n        Human.renderer.compile();\n\n        if (ok) {\n            ok();\n        }\n    };\n\n    /** Only once reflections are activated and mapped to names can they be used\n     * <p>Enable materials to use a particular reflection when they have a \"reflectionId\" set to \"myReflection\":</p>\n     * <pre>\n     *     #exportReflections({\n     *          \"myReflection\" : \"someState.someReflectionLib.someReflectionId\"\n     *          });\n     * </pre>\n     *\n     * @param mapping\n     */\n    HumanAssetsReflections.exportReflections = function (mapping) {\n        mapping = mapping || {};\n\n        for (var key in mapping) {\n            if (mapping.hasOwnProperty(key)) {\n                var value = mapping[key];\n                if (value.indexOf(\"/\") === -1) {\n                    mapping[key] = value.replace(/^([^\\.]+)\\./, \"$1/\");\n                }\n            }\n        }\n\n        HumanAssetsReflections.exportedReflectionIds = mapping || {};\n    };\n\n    /**\n     * Unloads a reflections library.\n     *\n     * @param libId ID of reflections library to unload.\n     */\n    HumanAssetsReflections.unloadLibrary = function (libId) {\n\n        var reflectionIds = libReflectionIds[libId];\n\n        if (!reflectionIds) {\n            Human.log.warn(\"Human.assets.reflections.unloadLibrary\", \"library not loaded\");\n            return;\n        }\n\n        var i;\n        var len;\n        var reflectionId;\n        var reflection;\n\n        for (i = 0, len = reflectionIds.length; i < len; i++) {\n            reflectionId = reflectionIds[i];\n            reflection = HumanAssetsReflections.reflections[reflectionId];\n            reflection.node.destroy();\n\n            if (reflection.applyTo === \"reflect\") {\n                Human.renderer.getScene().destroyReflection(reflectionId);\n            } else {\n                Human.renderer.getScene().destroyLightmap(reflectionId);\n            }\n        }\n\n        HumanAssetsReflections.exportedReflectionIds = {};\n        delete libReflectionIds[libId];\n    };\n})();\n;(function() {\n    \"use strict\";\n\n    /**\n     * @namespace Loads and unloads audio to and from {@link Human.media.audio}.\n     *\n     * @private\n     */\n    var audioAssets = Human.assets.audio = {};\n\n    /**\n     * Loads an audio clips library\n     * @param libId Library ID\n     * @param manifest Library manifest\n     * @param params Options applied while loading\n     * @param ok Callback fired on completion\n     */\n    audioAssets.parseLibrary = function (libId, manifest, params, ok) {\n        Human.media.audio.createLibrary(libId, manifest);\n        if (ok) {\n            ok();\n        }\n    };\n\n    /**\n     * Unloads an audio clips library\n     * @param libId Library ID\n     */\n    audioAssets.unloadLibrary = function (libId) {\n        Human.media.audio.destroyLibrary(libId);\n    };\n\n})();\n;(function() {\n    \"use strict\";\n\n    /**\n     * @namespace Loads and unloads video to and from {@link Human.media.video}.\n     *\n     * @private\n     */\n    var videoAssets = Human.assets.video = {};\n\n    /**\n     * Loads a video clips library\n     *\n     * @param libId Library ID\n     * @param manifest Library manifest\n     * @param params Options applied while loading\n     * @param ok Callback fired on completion\n     */\n    videoAssets.parseLibrary = function (libId, manifest, params, ok) {\n        Human.media.videos.createLibrary(libId, manifest);\n        if (ok) {\n            ok();\n        }\n    };\n\n    /**\n     * Unloads a video clips library\n     * @param libId Library ID\n     */\n    videoAssets.unloadLibrary = function (libId) {\n        Human.media.videos.destroyLibrary(libId);\n    };\n\n})();\n;/**\n @namespace Captures and restores engine state to and from JSON bookmark objects.\n\n */\n(function () {\n    \"use strict\";\n\n    var HumanBookmarks = Human.bookmarks = {};\n    var _HACK_TITLE, _HACK_DESCRIPTION; // Helpful for temporarily inserting bookmark data into chapters.\n\n    /**\n     * Captures the current engine state to a JSON bookmark object\n     * <h4>Examples</h4>\n     * <p>Capture everything:</p>\n     * <pre>\n     *     var bookmark = Human.bookmarks.capture();\n     * </pre>\n     * <p>Capture just camera and view modes:</p>\n     * <pre>\n     *     var bookmark = Human.bookmarks.capture({\n     *         camera: true,\n     *         view: true\n     *     });\n     * </pre>\n     * <p>Capture everything but view modes:</p>\n     * <pre>\n     *     var bookmark = Human.bookmarks.capture({\n     *         view: false\n     *     });\n     * </pre>\n     * @memberof Human.bookmarks\n     * @param {{String: Boolean}} mask Mask which specifies what to capture in the bookmark\n     * @param {Boolean} mask.modules Capture what modules are loaded?\n     * @param {Boolean} mask.camera Capture camera state?\n     * @param {Boolean} mask.modes Capture view modes?\n     * @param {Boolean} mask.objects Capture scene object states?\n     * @param {Boolean} mask.annotations Capture annotations?\n     * @returns {{}} The JSON bookmark object\n     */\n    HumanBookmarks.capture = function (mask) {\n        var bm = {\n            engineVersion: Human.VERSION\n        };\n        if (masked(mask, \"modules\")) {\n            bm.modules = {\n                moduleLibs: captureModuleLibs(),\n                activeModules: captureActiveModules()\n            };\n        }\n        if (masked(mask, \"camera\")) {\n            bm.camera = captureCamera();\n        }\n        if (masked(mask, \"clips\")) {\n            bm.clips = captureCrossSections();\n        }\n        if (masked(mask, \"objects\")) {\n            bm.objects = captureObjectStates();\n        }\n\n        if (masked(mask, \"timeline\")) {\n            bm.timeline = Human.timeline.getBookmark();\n        }\n\n        if (masked(mask, \"background\")) {\n            bm.background = {\n                colors: Human.renderer.bg.getBGColor()\n            };\n        }\n\n        // Plugins are free to read and write state anywhere in a bookmark, but we'll\n        // define a convenient namespace as a convention that they may opt to stay within.\n        bm.plugins = {};\n\n        var plugins = Human.plugins;\n        var plugin;\n        for (var id in plugins) {\n            if (plugins.hasOwnProperty(id)) {\n                plugin = plugins[id];\n                if (plugin.writeBookmark) {\n                    plugin.writeBookmark(bm);\n                }\n            }\n        }\n\n        Human.events.fire(\"bookmarks.capture\", {\n          bookmark: bm\n        });\n\n        return bm;\n    };\n\n    function masked(mask, key) {\n        if (!mask) {\n            return true;\n        }\n        if (mask[key] === true) {\n            return true;\n        }\n        if (mask[key] === false) {\n            return false;\n        }\n        return false;\n    }\n\n    /**\n     * Bookmarks which module libraries are currently loaded\n     */\n    function captureModuleLibs() {\n        var obj = Human.modules.moduleLibs;\n        var keys = [];\n        for (var k in obj) {\n            if (obj.hasOwnProperty(k)) {\n                keys.push(k);\n            }\n        }\n        return keys;\n    }\n\n    /**\n     * Bookmarks which modules are currently active\n     */\n    function captureActiveModules() {\n        var modules = [];\n        if (Human.modules.numActiveModules > 0) {\n            var activeModules = Human.modules.activeModules;\n            for (var moduleId in activeModules) {\n                if (activeModules.hasOwnProperty(moduleId)) {\n                    modules.push(moduleId);\n                }\n            }\n        }\n        return modules;\n    }\n\n    /**\n     * Bookmarks current state of the camera\n     * @return {Object}\n     */\n    function captureCamera() {\n        return Human.renderer.camera.getLookAt();\n    }\n\n    /**\n     * Bookmarks current state of cross-section planes\n     * @return {Object} Map containing state of each clip plane, mapped to the plane IDs\n     */\n    function captureCrossSections() {\n        return Human.renderer.clip.serialize();\n    }\n\n    /**\n     * Bookmarks current visibility, selection and transparency states of scene objects\n     * @return {Object} Map containing set of flags for each object\n     */\n    function captureObjectStates() {\n        var map = {};\n        var anatomy = Human.scene;\n        var objects = anatomy.objects;\n        var object, transform;\n        var enabledObjects = anatomy.enabledObjects;\n        \n        var mapData;\n        for (var objectId in objects) {\n            if (objects.hasOwnProperty(objectId)) {\n                object = objects[objectId];\n                mapData = null;\n\n                // Only capture enabled leaf objects\n                if (object.objects.length === 0 && enabledObjects[objectId]) {\n                    mapData = mapData || {};\n\n                    mapData.enabled = true;\n\n                    transform = captureTransformData(object);\n                    if (transform) {\n                        mapData.transform = transform;\n                    }\n                    mapData.opacity = object.opacity;\n                }\n                if (mapData) {\n                    map[objectId] = mapData;\n                }\n            }\n        }\n\n        for (var idx = 0; idx < Human.scene.rootObjects.length; idx++) {\n          object = Human.scene.rootObjects[idx];\n          objectId = object.objectId;\n          if (!object.shown){\n            // make sure these never get turned on, during restore\n            map[objectId] = {\n              enabled: object.shown,\n              opacity: object.opacity\n            };\n          }\n\n        }\n\n        Human.events.fire(\"bookmarks.captureObjectStates\", {\n          data: map\n        });\n\n        return map;\n    }\n\n    function captureTransformData(object) {\n        if (object.pivot === null) {\n            // Object transform not initialized\n            return null;\n        }\n\n        var mapTransform = {};\n\n        if (object.pivot.x !== 0) {\n            mapTransform.pivot = mapTransform.pivot || {};\n            mapTransform.pivot.x = object.pivot.x;\n        }\n        if (object.pivot.y !== 0) {\n            mapTransform.pivot = mapTransform.pivot || {};\n            mapTransform.pivot.y = object.pivot.y;\n        }\n        if (object.pivot.z !== 0) {\n            mapTransform.pivot = mapTransform.pivot || {};\n            mapTransform.pivot.z = object.pivot.z;\n        }\n\n        if (object.translate.x !== 0) {\n            mapTransform.translate = mapTransform.translate || {};\n            mapTransform.translate.x = object.translate.x;\n        }\n        if (object.translate.y !== 0) {\n            mapTransform.translate = mapTransform.translate || {};\n            mapTransform.translate.y = object.translate.y;\n        }\n        if (object.translate.z !== 0) {\n            mapTransform.translate = mapTransform.translate || {};\n            mapTransform.translate.z = object.translate.z;\n        }\n\n        if (object.scale.x !== 1) {\n            mapTransform.scale = mapTransform.scale || {};\n            mapTransform.scale.x = object.scale.x;\n        }\n        if (object.scale.y !== 1) {\n            mapTransform.scale = mapTransform.scale || {};\n            mapTransform.scale.y = object.scale.y;\n        }\n        if (object.scale.z !== 1) {\n            mapTransform.scale = mapTransform.scale || {};\n            mapTransform.scale.z = object.scale.z;\n        }\n\n        if (object.rotate.x !== 0) {\n            mapTransform.rotate = mapTransform.rotate || {};\n            mapTransform.rotate.x = object.rotate.x;\n        }\n        if (object.rotate.y !== 0) {\n            mapTransform.rotate = mapTransform.rotate || {};\n            mapTransform.rotate.y = object.rotate.y;\n        }\n        if (object.rotate.z !== 0) {\n            mapTransform.rotate = mapTransform.rotate || {};\n            mapTransform.rotate.z = object.rotate.z;\n        }\n\n        if (Object.keys(mapTransform).length > 0) {\n            return mapTransform;\n        } else {\n            return null;\n        }\n    }\n\n    /* Returns the objects from a module to restore during bookmark activation\n    * object id must be shown or enabled in bookmark\n    * normalized objectId must exist in Human.scene.objects\n    */\n    function _buildAssetObjects(bookmark){\n      var loadObjects = [];\n      var seen = {};\n      var sync = bookmark.objects;\n      var objId;\n\n      for (objId in sync) {\n        if (!sync[objId].shown && !sync[objId].enabled) {\n          continue;\n        }\n        var objectId = Human.modules.convertBaseAnatomyObjectId(objId);\n        if (seen[objectId]) {\n            continue;\n        }\n        seen[objectId] = true;\n        var object = Human.scene.objects[objectId];\n\n        if (!object) {\n            objectId = Human.modules.convertBaseAnatomyObjectId(normalizeAnonymousObject(objId));\n            if (seen[objectId]) {\n                continue;\n            }\n            seen[objectId] = true;\n            object = Human.scene.objects[objectId];\n        }\n        \n        if (object && object.isLeaf()) {\n            loadObjects.push(object);\n        }\n      }\n\n      return loadObjects;\n    }\n\n    function trimUntargetedChapters(moduleId, bookmark){\n      var time = 0;\n      var root = Human.timeline.rootTimelines[moduleId];\n      if (bookmark.timeline) {\n        if (bookmark.timeline.hasOwnProperty(\"scrub\")) {\n          try {\n            time = bookmark.timeline.scrub.time;\n          } catch(err) {\n            time = 0;\n          }\n\n        } else if (bookmark.timeline.hasOwnProperty(\"play\")) {\n          var pi = bookmark.timeline.play;\n          // pi.root = root;\n          try {\n            time = Human.timeline.parsePlayInstruction(pi).t;\n          } catch(err){\n            time = 0;\n          }\n\n        }\n      }\n\n      var chapterIndex = root.mapGlobalTime(time).index;\n\n      //root._chapters = [Human.modules.modules[moduleId].chapters[chapterIndex]];\n      root._chapters = [root._chapters[chapterIndex]];\n      root.build();\n    }\n\n    function _bookmarkModuleActivationCallback(bookmark, moduleId, ok) {\n      // now show the results of the changes\n\n      //overwrite graph\n      restoreGraph(bookmark.objects);\n\n      // set modes\n      restoreModes(bookmark.modes);\n\n\n      // overwrite camera\n      restoreCamera(bookmark.camera, function() {});\n\n      Human.renderer.resumeCompilation();\n      Human.renderer.popPause();\n\n      if (!moduleId || moduleId === undefined) {\n          if (ok) {\n              ok();\n          }\n          return;\n      }\n\n      var loadObjects = _buildAssetObjects(bookmark);\n      var assetTypes = [\"tweens\", \"reflections\", \"audio\", \"videos\", \"lights\", \"skyBoxes\", \"geometry\", \"material\", \"transform\", \"morph\"];\n      Human.modules.load(moduleId, loadObjects, assetTypes, function(){\n          //overwrite transforms\n          restoreObjectTransforms(bookmark.objects);\n\n          // set clipping planes\n          restoreCrossSections(bookmark.clips);\n\n          playTimeline(bookmark);\n          Human.events.fire(\"bookmarks.restored\", bookmark);\n          if(ok) {\n              ok();\n          }\n      });\n\n    }\n\n    function swapInfoInTarget(bookmark, moduleId) {\n        // assumes module with moduleId has been turned into root timeline.\n        var root = Human.timeline.rootTimelines[moduleId];\n        root._chapters[0].info.displayName = bookmark.title;\n        root._chapters[0].info.description = bookmark.description;\n        var oldTitle = Human.modules.modules[moduleId].displayName;\n        var oldDescription = Human.modules.modules[moduleId].description;\n        var oldAnnotations = Human.utils.shallowClone(root._chapters[0].annotations);\n        root._chapters[0].annotations = bookmark.annotations;\n        Human.modules.modules[moduleId].displayName = bookmark.title; // HACK: for the ui panel viewer\n        Human.modules.modules[moduleId].description = bookmark.description; // HACK: for the ui panel viewer\n        Human.modules.modules[moduleId].chapters[0].displayName = bookmark.title;\n        Human.modules.modules[moduleId].chapters[0].description = bookmark.description;\n\n        return {title: oldTitle, description: oldDescription, annotations: oldAnnotations};\n    }\n\n    HumanBookmarks.restore = function(bookmark, ok) {\n        Human.events.fire(\"bookmarks.restoring\");\n\n        // We have an oldie\n        if(!Human.utils.isObject(bookmark.modules)) {\n            normalizeLegacy(bookmark);\n        }\n\n        // HACK: Client Side data migration of bookmarks.\n        // Old bookmarks referencing states (maleAdult) that newer engines don't understand.\n        var activeModules = bookmark.modules.activeModules;\n        var multipleModules = activeModules.length > 1;\n        var activeModulesClone = [];\n\n        for (var i = 0, len = activeModules.length; i < len; i++) {\n          activeModulesClone[i] = Human.modules.convertBaseAnatomyModuleId(activeModules[i]);\n        }\n\n        Human.utils.filterInPlace(activeModulesClone, function(moduleId) {\n            if (Human.modules.activeModules[moduleId]) {\n                return false;\n            }\n\n            if (multipleModules && Human.modules.isBaseModule(moduleId)) {\n                return false;\n            }\n\n            return true;\n        });\n\n        // Custom Loading Options\n        var moduleId = activeModulesClone[0];\n        var modConfig = {\n            camera: true,\n            graph: true,\n            annotations: true,\n            properties: true,\n            time: true,\n            hotspots: true\n        };\n\n        bookmark.theModuleId = moduleId;\n\n        // Load Module Life Cycle\n        Human.renderer.pushPause();\n        Human.renderer.pauseCompilation();\n\n        if (!moduleId){ // Scene Restore\n\n          _bookmarkModuleActivationCallback(bookmark, moduleId, ok);\n\n        } else if (Human.modules.modules.hasOwnProperty(moduleId)){\n          var moduleData = Human.modules.moduleData[moduleId];\n          Human.modules.create(moduleId, moduleData, function(){\n            trimUntargetedChapters(moduleId, bookmark);\n            //HACK: TEMPORARILY REPLACE MODULE AND ROOT DATA: HACK FOR INFO PANEL IN FLAGSHIP APP\n            var oldInfo = swapInfoInTarget(bookmark, moduleId);\n            _HACK_TITLE = oldInfo.title;\n            _HACK_DESCRIPTION = oldInfo.description;\n            Human.modules.activate(moduleId, 0, modConfig, function(){\n                _bookmarkModuleActivationCallback(bookmark, moduleId, ok);\n            });\n          });\n        } else {\n          Human.modules.fetch(moduleId, function() {\n              var moduleData = Human.modules.moduleData[moduleId];\n              Human.modules.create(moduleId, moduleData, function() {\n                  trimUntargetedChapters(moduleId, bookmark);\n                  //HACK: TEMPORARILY REPLACE MODULE AND ROOT DATA: HACK FOR INFO PANEL IN FLAGSHIP APP\n                  var oldInfo = swapInfoInTarget(bookmark, moduleId);\n                  _HACK_TITLE = oldInfo.title;\n                  _HACK_DESCRIPTION = oldInfo.description;\n                  Human.modules.activate(moduleId, 0, modConfig, function() {\n                    _bookmarkModuleActivationCallback(bookmark, moduleId, ok);\n                });\n              });\n          });\n        }\n    };\n\n\n    //////////////////////////////////////////////////////\n    // HANDLE LEGACY BOOKMARKS\n    //////////////////////////////////////////////////////\n\n    function normalizeAnonymousObject(objectId){\n        // anonymous objects inherit their first named ancestor's ID with padded integers e.g. Group_ID01\n        return objectId.replace(/_ID[0-9]+$/,\"_ID\");\n    }\n\n    // Some Normalization of the synchronization data\n    function normalizeSynchronization(bookmarkObjects){\n        var objectId, normalizedObjectId;\n        var synchronization = {};\n        var bookmarkDef, anonymousLeaves, i;\n\n        // start with assuming all are false\n        for (objectId in Human.scene.objects) {\n          if (Human.scene.objects[objectId] && !Human.scene.objects[objectId].anonymous) {\n            synchronization[objectId] = {shown:false};\n          }\n        }\n\n        for (objectId in bookmarkObjects){\n            if (bookmarkObjects.hasOwnProperty(objectId)){\n                bookmarkDef = bookmarkObjects[objectId];\n                normalizedObjectId = Human.modules.convertBaseAnatomyObjectId(objectId);\n                normalizedObjectId = normalizeAnonymousObject(normalizedObjectId);\n                var object = Human.scene.objects[normalizedObjectId];\n\n                if (object) {\n                    if (bookmarkDef.hasOwnProperty(\"enabled\")){\n                        bookmarkDef.shown = bookmarkDef.enabled;\n                        delete bookmarkDef.enabled;\n                    }\n\n                    if (!bookmarkDef.hasOwnProperty(\"pickable\")) {\n                        bookmarkDef.pickable = object.pickable;\n                    }\n\n                    if (!bookmarkDef.hasOwnProperty(\"backfaces\")) {\n                        bookmarkDef.backfaces = object.backfaces;\n                    }\n\n                    if (!bookmarkDef.hasOwnProperty(\"opacity\")) {\n                        bookmarkDef.opacity = object.opacity;\n                    }\n\n                    bookmarkDef.glassFactor = object.glassFactor;\n                    bookmarkDef.murkiness = object.murkiness;\n\n                    synchronization[normalizedObjectId] = bookmarkDef;\n                }\n\n                // anonymous objects need to be forcibly added.\n                if (objectId.match(\"_ID[0-9]+$\")){\n                    anonymousLeaves = Human.scene.getLeaves(normalizedObjectId);\n                    for (i = 0; i < anonymousLeaves.length; i++){\n                        if (Human.scene.objects[anonymousLeaves[i]].anonymous) {\n                            if (!bookmarkObjects[anonymousLeaves[i]]) {\n                              bookmarkObjects[anonymousLeaves[i]] = { shown : bookmarkDef.shown };\n                            } else {\n                              bookmarkObjects[anonymousLeaves[i]].shown = bookmarkDef.shown;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return synchronization;\n    }\n\n    function normalizeLegacy(bookmark) {\n        bookmark.modules = {};\n        bookmark.modules.activeModules = [];\n        bookmark.modules.moduleLibs = [];\n\n        if(!Human.utils.isObject(bookmark.objects)) {\n            bookmark.objects = {};\n        }\n\n        var genderModuleId = getGenderModule(bookmark.objects);\n\n        if(genderModuleId) {\n            bookmark.modules.activeModules.unshift(genderModuleId);\n        }\n    }\n\n    function getGenderModule(objects) {\n        var genderModuleId = null;\n        var match;\n\n        for (var id in objects) {\n            if(objects.hasOwnProperty(id)) {\n                match = id.match(/^(fe)?maleAdult/);\n                if(match) {\n                    genderModuleId = ['production', match[0], match[0] + '.json']\n                    .join('/');\n\n                    break;\n                }\n            }\n        }\n\n        return genderModuleId;\n    }\n\n    // ================== RESTORE FUNCTIONS =====================================\n    function playTimeline(bookmark) {\n        if (!bookmark.timeline) {\n            Human.timeline.scrub({time:0.0});\n            return;\n        }\n        if (bookmark.timeline.scrub) {\n            Human.timeline.scrub(bookmark.timeline.scrub);\n        } else if (bookmark.timeline.play) {\n            Human.timeline.play(bookmark.timeline.play);\n        }\n    }\n\n    /**\n     * Loads camera position as given in bookmark\n     * @param camera\n     */\n    function restoreCamera(camera, ok) {\n        Human.renderer.camera.fly.flyTo(camera, function(){\n            if (ok){\n                ok();\n            }\n        });\n    }\n\n    /**\n     * Loads viewing modes as given in bookmark\n     * @param modes Flag for each view mode, indicating enable or disable\n     */\n    function restoreModes(modes) {\n        if (!modes) {\n          return;\n        }\n\n        if (modes.highlight !== undefined && modes.highlight !== null) {\n            Human.rpc.call(null, \"highlight.setEnabled\", { enable: modes.highlight });\n        }\n        // Only enable isolate if objects are selected\n        if (Human.scene.anySelected() && modes.isolate) {\n            if (modes.isolate !== undefined && modes.isolate !== null) {\n                Human.rpc.call(null, \"isolate.setEnabled\", { enable: modes.isolate  });\n            }\n        } else {\n            if (modes.isolate !== undefined && modes.isolate !== null) {\n                Human.rpc.call(null, \"isolate.setEnabled\", { enable: false  });\n            }\n        }\n        if (modes.labels !== undefined && modes.labels !== null) {\n            Human.rpc.call(null, \"labels.setEnabled\", { enable: modes.labels });\n        }\n        if (modes.singlePick !== undefined && modes.singlePick !== null) {\n            Human.rpc.call(null, \"pick.single.setEnabled\", { enable: modes.singlePick });\n        }\n        if (modes.multiPick !== undefined && modes.multiPick !== null) {\n            Human.rpc.call(null, \"pick.multi.setEnabled\", { enable: modes.multiPick });\n        }\n\n        if (modes.xray !== undefined && modes.xray !== null) {\n            Human.rpc.call(null, \"xray.setEnabled\", { enable: modes.xray });\n        }\n    }\n\n    /**\n     * Restore the state of the current scene graph against the passed synchronization object.\n     * @param synchronization Object of objectIds and their non-default states\n     */\n    function restoreGraph(synchronization){\n        //Human.scene.setEnabledObjects({ objectIds: {}, replace: true });\n        synchronization = normalizeSynchronization(synchronization);\n        Human.scene.setObjectProperties(synchronization);\n\n    }\n\n    /**\n     * Loads cross-section clip plane states as given in bookmark\n     * @param clips Clip plane states, mapped to IDs of the planes\n     */\n    function restoreCrossSections(clips) {\n        Human.renderer.clip.reset();\n        for (var clipId in clips) {\n            if (clips.hasOwnProperty(clipId)) {\n                var clip = clips[clipId];\n\n                // Normalize from older format\n                if (clip.state !== undefined) {\n                    if (clip.state === \"clipping\" || clip.state === 3 || clip.state === \"visible\" || clip.state === 4) {\n                        clip.enabled = true;\n                    }\n\n                    if (typeof clip.clipId === \"number\") {\n                        clip.clipId--;\n                    }\n\n                }\n\n                Human.renderer.clip.setClip(clips[clipId]);\n            }\n        }\n    }\n\n    /** Overwrites the transform position of objects in scene.\n     *\n     */\n    function restoreObjectTransforms(objectData) {\n        objectData = objectData || {};\n        var object, objectId, transform;\n\n        for (objectId in objectData) {\n            if (objectData.hasOwnProperty(objectId)) {\n                object = Human.scene.objects[objectId];\n                transform = objectData[objectId].transform;\n                if (object && transform) {\n                    object.setTransform(restoreTransform(object, transform));\n                }\n            }\n        }\n    }\n\n    function restoreTransform(object, transform) {\n        var objectPivot = object.pivot || { x: 0, y: 0, z: 0 };\n        var objectTranslate = object.translate || { x: 0, y: 0, z: 0 };\n        var objectScale = object.scale || { x: 1, y: 1, z: 1 };\n        var objectRotate = object.rotate || { x: 0, y: 0, z: 0 };\n\n        transform.pivot = transform.pivot || {};\n        transform.translate = transform.translate || {};\n        transform.scale = transform.scale || {};\n        transform.rotate = transform.rotate || {};\n\n        transform.pivot.x = transform.pivot.x === undefined ? objectPivot.x : transform.pivot.x;\n        transform.pivot.y = transform.pivot.y === undefined ? objectPivot.y : transform.pivot.y;\n        transform.pivot.z = transform.pivot.z === undefined ? objectPivot.z : transform.pivot.z;\n\n        transform.translate.x = transform.translate.x === undefined ? objectTranslate.x : transform.translate.x;\n        transform.translate.y = transform.translate.y === undefined ? objectTranslate.y : transform.translate.y;\n        transform.translate.z = transform.translate.z === undefined ? objectTranslate.z : transform.translate.z;\n\n        transform.scale.x = transform.scale.x === undefined ? objectScale.x : transform.scale.x;\n        transform.scale.y = transform.scale.y === undefined ? objectScale.y : transform.scale.y;\n        transform.scale.z = transform.scale.z === undefined ? objectScale.z : transform.scale.z;\n\n        transform.rotate.x = transform.rotate.x === undefined ? objectRotate.x : transform.rotate.x;\n        transform.rotate.y = transform.rotate.y === undefined ? objectRotate.y : transform.rotate.y;\n        transform.rotate.z = transform.rotate.z === undefined ? objectRotate.z : transform.rotate.z;\n\n        return transform;\n    }\n\n\n})();\n;/**\n @namespace Handles module creation, activation, deactivation, destruction and query.\n\n <p>Modules are the engine's abstract unit of content. These are extensible and can be all sorts things, such as anatomies,\n disease conditions, guided tours, bookmarks, medline conditions etc.</p>\n */\n(function () {\n    \"use strict\";\n\n    var MAX_HISTORY = 5;\n\n    var HumanModules = Human.modules = {};\n\n    // =========== MODULE MANAGEMENT =========================================\n\n    // Module IDs are internally generated from this pool\n    var idPool = new Human.utils.IDPool();\n\n    // Existing and Active modules\n    HumanModules.modules = {};\n    HumanModules.moduleData = {}; // stores module definitions\n    HumanModules.moduleLibs = {};\n    HumanModules.activeModules = {};\n    HumanModules.numActiveModules = 0;\n    HumanModules.history = [];\n\n    // ========= MODULE LIFE CYCLE MANAGEMENT  ================================\n\n    /* Get Module Data from the asset server\n     * \"ok\" and \"error\" are callbacks\n     */\n    HumanModules.fetch = function(moduleId, ok, error){\n        Human.events.fire(\"modules.fetch.start\", {moduleId: moduleId});\n        Human.assets.server.getModuleDefinition(moduleId, function (moduleData) {\n                // Attach id to module data\n                moduleData.moduleId = moduleId;\n                HumanModules.moduleData[moduleId] = moduleData; // you can count on this being pure\n                Human.events.fire(\"modules.fetch.finish\", {moduleId: moduleId, moduleData:moduleData});\n                if (ok){\n                    ok();\n                }\n            }, function(e){\n                Human.log.info(\"Human.modules.activateModules\", \"Failed to activate module: '\" + moduleId + \"' - \" + e);\n                if (error) {\n                    error(e);\n                }\n        });\n    };\n\n\n    /* Create the Module Object from the module data\n     * \"ok\" is a callback function that accepts two parameters:\n     *      1) moduleId\n     *      2) Human Module (Human Object)\n     */\n    HumanModules.create = function(moduleId, moduleData, ok){\n        moduleData = Human.utils.deepClone(moduleData);\n        Human.events.fire(\"modules.create.start\", {moduleId:moduleId, moduleData:moduleData});\n\n        if (HumanModules.modules[moduleId]){\n            delete HumanModules.modules[moduleId];\n        }\n        // Create the Human Module Object\n        var module = new HumanModules.Module(moduleData);\n        var _ok = function() {\n            HumanModules.modules[moduleId] = module;\n            Human.events.fire(\"modules.created\", moduleData);\n            Human.events.fire(\"modules.create.finish\", {moduleId:moduleId, module:HumanModules.modules[moduleId]});\n            if (ok){\n                ok();\n            }\n        };\n\n        module.create(_ok);\n\n        HumanModules.history.unshift(moduleId);\n        if (HumanModules.history.length > MAX_HISTORY) {\n            HumanModules.history.pop();\n        }\n    };\n\n    /* Activates the module according to configuration provided.\n     *\n     * Module activation simply sets up the scenegraph, the rootTimeline and steps into the rootTimeline\n     *\n     */\n    HumanModules.activate = function(moduleId, time, config, ok){\n        Human.events.fire(\"modules.activate.start\", {moduleId:moduleId, config:config});\n        Human.events.fire(\"modules.activating\",{moduleId:moduleId});\n        var _ok = function(){\n            HumanModules.activeModules[moduleId] = HumanModules.modules[moduleId];\n            HumanModules.numActiveModules++;\n            Human.events.fire(\"modules.activated\", {moduleId:moduleId}); // backwards compatibility.\n            Human.events.fire(\"modules.activate.finish\", {moduleId:moduleId});\n            if (ok){\n                ok();\n            }\n        };\n        HumanModules.modules[moduleId].activate(time, config, _ok);\n    };\n\n    /* Loads requisite assets and asset libraries from CDB via graph traversal and module library requests\n     *\n     * Unlike other life cycle steps, this function operates on the scene graph\n     */\n    HumanModules.load = function(moduleId, graphNodes, assetTypes, ok){\n        Human.events.fire(\"modules.load.start\", {moduleId:moduleId, graphNodes:graphNodes, assetTypes:assetTypes});\n        // wrap passed callback into new callback\n        var _ok = function(){\n            Human.renderer.prepareFrame(); // Calculate xforms, boundaries, etc.\n            Human.events.fire(\"modules.load.finish\", {moduleId:moduleId, graphNodes:graphNodes, assetTypes:assetTypes});\n            if (ok){\n                ok();\n            }\n        };\n        if (assetTypes.includes('geometry')) {\n            blockLoad(moduleId, graphNodes, assetTypes, _ok); \n        } else {\n            HumanModules.modules[moduleId].load(graphNodes, assetTypes, _ok);\n        }\n    };\n\n    function blockLoad(moduleId, graphNodes, assetTypes, ok) {\n        if (Human.unpackAssets.blocksWaiting > 0) {\n            // try again on the next loop\n            setTimeout(function() { \n                blockLoad(moduleId, graphNodes, assetTypes, ok);\n            }, 2);\n        } else {\n            HumanModules.modules[moduleId].load(graphNodes, assetTypes, ok);\n        }\n    }\n\n    /* Unload assets from moduleId that are unique that module.\n     */\n    HumanModules.unload = function(moduleId, graphNodes, assetTypes, ok){\n        Human.events.fire(\"modules.unload.start\",{moduleId:moduleId, graphNodes:graphNodes, assetTypes:assetTypes});\n        var _ok = function(){\n            Human.events.fire(\"modules.unload.finish\",{moduleId:moduleId, graphNodes:graphNodes, assetTypes:assetTypes});\n            if (ok){\n                ok();\n            }\n        };\n        HumanModules.modules[moduleId].unload(graphNodes, assetTypes, _ok);\n    };\n\n    // Detaches module root from the active root\n    HumanModules.deactivate = function(moduleId, config, ok){\n        Human.events.fire(\"modules.deactivate.start\", {moduleId:moduleId, config: config});\n        var _ok = function(){\n            delete HumanModules.activeModules[moduleId];\n            HumanModules.numActiveModules--;\n            Human.events.fire(\"modules.deactivated\", {moduleId:moduleId});\n            Human.events.fire(\"modules.deactivate.finish\", {moduleId:moduleId});\n            if (ok){\n                ok();\n            }\n        };\n        HumanModules.modules[moduleId].deactivate(config, _ok);\n    };\n\n    // Removes the module from memory, and calls module destroy which destroys root and branch timelines\n    HumanModules.destroy = function(moduleId, ok){\n        Human.events.fire(\"modules.destory.start\", {moduleId:moduleId});\n        if (!HumanModules.modules[moduleId]){\n            Human.log.warn(\"Human.modules.destroyModule\", \"Module does not exist, cannot be destoryed: + \" + moduleId);\n        }\n        else {\n            var _ok = function(){\n                delete HumanModules.moduleData[moduleId];\n                delete HumanModules.modules[moduleId];\n                idPool.putId(moduleId);\n                Human.events.fire(\"modules.destroy.finish\",{moduleId:moduleId});\n                if (ok){\n                    ok();\n                }\n            };\n            HumanModules.modules[moduleId].destroy(_ok);\n        }\n\n    };\n\n    // NOTE[EM] - This is bad to bake in knowledge of our content management.\n    /* BASE ANATOMY UTILITY METHODS */\n    HumanModules.isBase = function (input) {\n       var match = input.match(/^(femaleAdult|maleAdult|female_complete_anatomy_[0-9]+\\.json|male_complete_anatomy_[0-9]+\\.json)/);\n       return match && match[0];\n    };\n\n    HumanModules.isBaseModule = function (input) {\n       var parts = input.split('/');\n       return HumanModules.isBase(parts[parts.length - 1]) ? input : false;\n    };\n\n   HumanModules.requiresBase = function (objectIds) {\n       var baseFound = false;\n\n       for (var i = 0; i < objectIds.length; i++) {\n           baseFound = HumanModules.isBase(objectIds[i]);\n\n           if(baseFound) {\n               break;\n           }\n       }\n\n       return baseFound;\n   };\n\n\n   /* STATE CONVERSION METHODS */\n   var MALE_STATE_ID = HumanModules.MALE_STATE_ID = 'maleAdult_standard';\n   var FEMALE_STATE_ID = HumanModules.FEMALE_STATE_ID = 'femaleAdult_standard';\n   var MODULE_ID_CONVERSIONS = {\n       \"production/maleAdult/maleAdult.json\": \"production/maleAdult/maleAdult_standard.json\",\n       \"production/femaleAdult/femaleAdult.json\": \"production/femaleAdult/femaleAdult_standard.json\"\n   };\n\n   HumanModules.convertBaseAnatomyModuleId = function (moduleId) {\n       return MODULE_ID_CONVERSIONS[moduleId] || moduleId;\n   };\n\n   HumanModules.convertBaseAnatomyStateId = function (stateId) {\n       return stateId.replace(/^femaleAdult$/, FEMALE_STATE_ID)\n           .replace(/^maleAdult$/, MALE_STATE_ID);\n   };\n\n   HumanModules.convertBaseAnatomyObjectId = function (objectId) {\n       if(HumanModules.isBase(objectId)) {\n           var parts = objectId.split('-');\n           var stateId = HumanModules.convertBaseAnatomyStateId(parts[0]);\n\n           objectId = [stateId, parts[1]].join('-');\n\n           if(!/_ID$/.test(objectId)) {\n               objectId += \"_ID\";\n           }\n       }\n\n       return objectId;\n   };\n\n})();\n;(function () {\n    \"use strict\";\n\n    // MODULE CREATION constructor\n    var Module = Human.modules.Module = function (cfg) {\n        // Metadata\n        this.moduleId = cfg.moduleId;\n        this.displayName = cfg.displayName || \"\";\n        this.description = cfg.description || \"\";\n        this.translations = cfg.translations || {};\n        this.tags = cfg.tags || [];\n        this.ui = cfg.ui || {};\n        this.active = false;\n        this.timeActivated = -1;\n\n        // List of objectIds of objects created by this module\n        this.rootObjects = [];\n\n        // Specific to this module type\n        this.animation = cfg.animation || {};\n        this.camera = cfg.camera;\n        this.jumpTo = cfg.jumpTo;\n        this.flyTo = cfg.flyTo;\n        var p = cfg.modelIds || cfg.stateId;\n        this.modelIds = p ? (Human.utils.isArray(p) ? p : [p]) : [];\n        this.showObjects = cfg.showObjects;\n        this.selectObjects = cfg.selectObjects;\n        this.pickThroughObjects = cfg.pickThroughObjects;\n        this.opacityObjects = cfg.opacityObjects;\n        this.xray = cfg.xray;\n        this.properties = cfg.properties;\n        this.swapped = false;\n        this.swappedObjectId = null;\n        this.background = cfg.background || null;\n        this.customData = cfg.customData || {};\n        this.cache = false;\n\n        this.chapters = cfg.chapters || null;\n        this.sceneGraph = cfg.sceneGraph;\n\n        if (cfg.customData && cfg.customData.particleSystems) {\n            this.particleSystems = cfg.customData.particleSystems;\n        } else {\n            this.particleSystems = [];\n        }\n\n        this.assetLibraries = cfg.assetLibraries;\n\n        // Help track whether lights are defined and loaded\n        this.hasAssetLights = this.assetLibraries.hasOwnProperty('lights') && this.assetLibraries.lights.length > 0;\n        this.lights = cfg.lights; // lights defined on the module\n        this.hasLights = this.hasAssetLights || !!this.lights;\n\n        // Maps reflection-id shorthand to true reflection asset. NOTE[EM] - parsing could be cleaned up in data\n        this.reflections = cfg.reflections || {};\n        for (var refid in this.reflections){\n          if (this.reflections.hasOwnProperty(refid)){\n            var ref = this.reflections[refid];\n            var refparts = ref.split(\".\");\n            ref = refparts[0] + \"/\" + refparts.slice(1).join(\".\");\n            Human.assets.reflections.exportedReflectionIds[refid] = ref;\n          }\n        }\n\n        this.layers = cfg.layers || {};         // layer slider data structures\n\n        this.objectState = cfg.objects || {}; // hook when module created from bookmark\n        this.clips = cfg.clips || {};         // hook when module created from bookmark\n        this.modes = cfg.modes || {};         // hook when module created from bookmark\n\n        this.colorRecipes = cfg.colorRecipes || {}; //module-specific color recipes\n        this.loadedLibs = {};\n    };\n\n\n    // TODO[EM]: Find a better location for this\n    function createSynchronization(chapter, defaultState){\n        var objectId, prop;\n        defaultState = defaultState || {\n            \"showObjects\": {},\n            \"selectObjects\": {},\n            \"pickThroughObjects\": {},\n            \"colorRecipeObjects\": {}\n        };\n        var showObjects = chapter.showObjects || defaultState.showObjects || {};\n        var selectObjects = chapter.selectObjects || defaultState.selectObjects || {};\n        var pickThroughObjects = chapter.pickThroughObjects || defaultState.pickThroughObjects || {};\n        var opacityObjects = chapter.opacityObjects || defaultState.opacityObjects || {};\n        var colorRecipeObjects = chapter.colorRecipeObjects || defaultState.colorRecipeObjects || {};\n\n        var synchronization = chapter.synchronization || {}; // merge legacy object-property-maps into synchronization\n\n        // Collect Shown Objects\n        prop = \"shown\";\n        for (objectId in showObjects){\n            if (showObjects.hasOwnProperty(objectId)){\n                if (!synchronization.hasOwnProperty(objectId)){\n                    synchronization[objectId] = {};\n                }\n                synchronization[objectId][prop] = showObjects[objectId];\n            }\n        }\n\n        // Collect Selected Objects\n        prop = \"selected\";\n        for (objectId in selectObjects){\n            if (selectObjects.hasOwnProperty(objectId)){\n                if (!synchronization.hasOwnProperty(objectId)){\n                    synchronization[objectId] = {};\n                }\n                synchronization[objectId][prop] = selectObjects[objectId];\n            }\n        }\n\n        // Collect UnPickable Objects\n        prop = \"pickable\";\n        for (objectId in pickThroughObjects){\n            if (pickThroughObjects.hasOwnProperty(objectId)){\n                if (!synchronization.hasOwnProperty(objectId)){\n                    synchronization[objectId] = {};\n                }\n                synchronization[objectId][prop] = !pickThroughObjects[objectId];\n            }\n        }\n\n        prop = \"opacity\";\n        for (objectId in opacityObjects){\n            if (!synchronization[objectId]){\n                synchronization[objectId] = {};\n            }\n            synchronization[objectId][prop] = opacityObjects[objectId];\n        }\n\n        // per-chapter colorRecipes (for all named color recipes)\n        for (var recipeName in colorRecipeObjects) {\n            for (objectId in colorRecipeObjects[recipeName]) {\n                if (!synchronization[objectId]) {\n                    synchronization[objectId] = {};\n                }\n                synchronization[objectId][recipeName] = colorRecipeObjects[recipeName][objectId];\n            }\n        }\n\n        return synchronization;\n\n    }\n\n    Module.prototype.create = function(ok){\n        var self = this;\n        var i, branch, root;\n\n        // Construct the Scene graph for each root\n        Human.scene.graph.buildGraph(self.sceneGraph, null, {});\n        for (i=0; i< self.sceneGraph.length; i++){\n            self.rootObjects.push( Human.scene.objects[self.sceneGraph[i].objectId]);\n        }\n\n        // Add Module Lights, if available\n        if (this.lights) {\n            // lights are globally scoped, and not scoped to module or chapter.\n            Human.renderer.lights.addLights(this.lights);\n        }\n\n        // lights patch - Update Chapter data structure to include requisite lights\n        // NOTE[EM]:BACKWARDS This is for backwards compatibility for chapters that DO NOT define their lights\n        var chapter;\n        for (i = 0; i < self.chapters.length; i++){\n            chapter = self.chapters[i]; // modify the chapter data in place\n            if (chapter.lights){\n                // Ensure light libraries exist\n                // Note(Tarek): This means we're getting bad data!\n                if (this.hasAssetLights) {\n                    var lightLibs = chapter.lights.libraries;\n                    Human.utils.filterInPlace(lightLibs, lightFilterFunction(this.assetLibraries.lights));\n\n                    if (lightLibs.length === 0) {\n                        lightLibs.push(\"default\");\n                    }\n                } else {\n                    chapter.lights.libraries = [\"default\"];\n                }\n            } else {\n                chapter.lights = { libraries:[], lights:[] }; // data spec for per-chapter lighting\n                //if module has a light asset-library, use that; otherwise use default\n                if (self.hasAssetLights){\n                    chapter.lights.libraries = Human.utils.deepClone(self.assetLibraries.lights);\n                } else {\n                    chapter.lights.libraries = [\"default\"];\n                }\n            }\n\n        }\n\n        // Construct Root Timeline\n        root = new Human.timeline.RootTimeline(self.moduleId);\n\n        var modStateInstructions = {\n          \"showObjects\": self.showObjects,\n          \"pickThroughObjects\": self.pickThroughObjects,\n          \"selectObjects\": self.selectObjects,\n          \"opacityObjects\": self.opacityObjects\n        };\n\n        // Construct Branch Timelines\n        // TODO[EM]: consider prepending module name to branch-ids to ensure uniqueness\n        for (i=0 ; i < self.chapters.length; i++){\n            self.chapters[i].synchronization = createSynchronization(self.chapters[i], modStateInstructions);\n            if (!self.chapters[i].hasOwnProperty(\"id\")){\n                self.chapters[i].id = self.moduleId + \"_\" + i;\n            }\n            branch = new Human.timeline.BranchTimeline(self.chapters[i]);\n            root.addChapter(branch, { rebuild: false });\n        }\n        root.build();\n        self.rootTimeline = root;\n\n        // Flush existing particles\n        // Bookmark saving does not flush active modules. Bug!\n        Human.particles.destroyAll();\n        Human.particles.parse(self.particleSystems, ok);\n    };\n\n    // TODO[EM]: Consult on time requirement\n    Module.prototype.activate = function(time, config, ok){\n        var self = this;\n        self.timeActivated = Date.now();\n        self.active = true;\n\n        // Set Module-Level Properties\n        if (self.properties){\n          Human.properties.set(self.properties);\n        }\n\n        // Create color recipes\n        if (self.colorRecipes){\n            Human.scene.colorRecipes.clearRecipes();\n            for (var recipeName in self.colorRecipes) {\n                Human.scene.colorRecipes.registerRecipe(recipeName, self.colorRecipes[recipeName]);\n            }\n        }\n\n        // Activate Timeline\n        if (time !== false){\n            self.rootTimeline.activate(time, config, ok);\n        }\n\n    };\n\n    // [GH] only load libraries once per module, not for every call to load, as it may happen more than once\n    function loadAssetLibrary(libs, type, dir, libId, fileName, params, ok) {\n        if (!libs[libId]) {\n            libs[libId] = true;\n            Human.assets.getAssetLibrary(type, dir, libId, fileName, params, ok);\n        }\n    }\n\n    function unloadAssetLibrary(libs, libId) {\n        if (libs[libId]) {\n            delete libs[libId];\n            Human.assets.putAssetLibrary(libId);\n        }\n    }\n\n    function countRequests(assetLibs, types, loaded) {\n        var libType, lib, counter = 0;\n        // count the number of asset libraries to expect\n        for (libType in assetLibs){\n            if (assetLibs.hasOwnProperty(libType) && types.indexOf(libType) >= 0) {\n                var libsList = assetLibs[libType]; \n                for (var i = 0; i < libsList.length; i++) {\n                    lib = libsList[i];\n                    if (!loaded[lib]) {       \n                        counter += 1;\n                    }\n                }\n            }\n        }\n        return counter;\n    }\n\n    /* Load all assets; whole asset libraries, and assets attached to scene graphs.\n     *\n     * This function will first load all asset libraries.\n     * Once all asset libraries are downloaded, then the assets will be attached to the scene graph.\n     *\n     * NOTE: this \"ok\" callback will only be called when ALL assets are loaded\n     *\n     * NOTE[EM]: Lights are to be enabled on load - they are not otherwise 'activated' by module or chapters\n     */\n    Module.prototype.load = function(graphNodes, assetTypes, ok){\n        var self = this, i = 0;\n\n        if (this.customData.tweens) {\n            Human.assets.tweens.parseLibrary(this.customData.tweenId, this.customData.tweens);\n        }\n\n        var numRequestedLibs = countRequests(self.assetLibraries, assetTypes, self.loadedLibs);\n        if (numRequestedLibs > 0) {\n            // tracks the number of unloaded libraries, until all libraries are loaded before kicking off scene graph asset loading\n            var countAssetLibs = function() {\n                numRequestedLibs--;\n                if (numRequestedLibs === 0) {\n                    Human.scene.graph.attachAssetSetsToSubtree(graphNodes, [assetTypes], ok);\n                }\n            };\n\n            // kick off library requests\n            if (self.assetLibraries.tweens && assetTypes.indexOf(\"tweens\")>=0){\n                for (i=0; i<self.assetLibraries.tweens.length; i++){\n                    loadAssetLibrary(self.loadedLibs, \"animation\", \"animations\", self.assetLibraries.tweens[i], \"manifest\", {}, countAssetLibs);\n                }\n            }\n            if (self.assetLibraries.reflections && assetTypes.indexOf(\"reflections\")>=0){\n                for (i=0; i<self.assetLibraries.reflections.length; i++){\n                    loadAssetLibrary(self.loadedLibs, \"reflection\", \"reflections\", self.assetLibraries.reflections[i], \"outline\", {}, countAssetLibs);\n                }\n            }\n            if (self.assetLibraries.lights && self.assetLibraries.lights.length > 0 && assetTypes.indexOf(\"lights\") >= 0){\n                for (i = 0; i < self.assetLibraries.lights.length; i++){\n                    loadAssetLibrary(self.loadedLibs, \"light\", \"lights\", self.assetLibraries.lights[i], \"outline\", {}, countAssetLibs);\n                }\n            }\n        } else {\n            Human.scene.graph.attachAssetSetsToSubtree(graphNodes, [assetTypes], ok);\n        }\n    };\n\n    /* Unload all assets; whole asset libraries, and assets attached to scene graphs.\n     *\n     * This function first unload all asset libraries.\n     * Once all asset libarries are deleted, the assets attached to the scene graph will be removed.\n     *\n     * NOTE: this \"ok\" callback will only be called when ALL assets are removed.\n     *\n     * NOTE: assets on the graph are only fully deleted from memory when their reference count hits 0.\n     */\n    Module.prototype.unload = function(graphNodes, assetTypes, ok){\n        var self = this;\n        var i = 0;\n\n        // Unloading is not asynchronous, so we don't need to track progress of unloading\n        if (self.assetLibraries.tweens && assetTypes.indexOf(\"tweens\")>=0){\n            for (i=0; i<self.assetLibraries.tweens.length; i++){\n                unloadAssetLibrary(self.loadedLibs, self.assetLibraries.tweens[i]);\n            }\n        }\n        if (self.assetLibraries.reflections && assetTypes.indexOf(\"reflections\")>=0){\n            for (i=0; i<self.assetLibraries.reflections.length; i++){\n                unloadAssetLibrary(self.loadedLibs, self.assetLibraries.reflections[i]);\n            }   \n        }\n        if (self.assetLibraries.lights && assetTypes.indexOf(\"lights\")>=0){\n            for (i=0; i<self.assetLibraries.lights.length; i++){\n                unloadAssetLibrary(self.loadedLibs, self.assetLibraries.lights[i]);\n            }\n        }\n        \n        Human.scene.graph.unloadSubtree(graphNodes, assetTypes, ok);\n    };\n\n    Module.prototype.deactivate = function (config, ok) {\n        var self= this;\n        self.timeActivated = -1;\n        self.active = false;\n        self.rootTimeline.deactivate(config, ok);\n    };\n\n    // Destroy the root timeline\n    Module.prototype.destroy = function(ok){\n        var self = this;\n        Human.particles.destroyAll();\n        self.rootTimeline.destroy();\n        Human.scene.graph.destroySubtree(self.rootObjects);\n        self = null;\n        if (ok){\n            ok();\n        }\n    };\n\n    function lightFilterFunction(lightAssets) {\n        return function(lightId) {\n            return lightAssets.indexOf(lightId) > -1;\n        };\n    }\n\n})();\n;(function() {\n    \"use strict\";\n\n    Human.mobile = {\n        android: window.HumanKitAndroid !== undefined,\n        iOS: window.webkit !== undefined,\n        bundleid : window.mobilebundleid !== undefined ? window.mobilebundleid : null\n    };\n})();\n;(function () {\n    \"use strict\";\n\n    var HumanWorkers = Human.workers = {};\n\n    var basePath = '';\n    /*\n    Web worker scripts are loaded relative to the executing page. Since that location varies\n    depending on the application, it is a requirement that the app registers the location of\n    engine worker scripts.\n    */\n    HumanWorkers.setPath = function(path){\n        basePath = path;\n    };\n\n    /*\n    Once base path is established, the engine can load its workers through loadWorker,\n    specifying only the path of the worker relative to the src/workers/ engine directory.\n\n    E.g. Human.worker.loadWorker('draco/worker.js');\n    */\n    HumanWorkers.loadWorker = function(workerFileName){\n        var uri  = basePath + '/' + workerFileName;\n        return new Worker(uri);\n    };\n\n})();\n;/**\n @namespace Plugin registry.\n */\n(function () {\n\n    \"use strict\";\n\n    Human.plugins = {};\n\n    Human.addPlugin = function (id, plugin) {\n        Human.plugins[id] = plugin;\n    };\n})();;(function(global) {\n  'use strict';\n\n  //\n  // Utilities\n  //\n\n  /**\n   * @param {number} a The number to test.\n   * @param {number} min The minimum value in the range, inclusive.\n   * @param {number} max The maximum value in the range, inclusive.\n   * @return {boolean} True if a >= min and a <= max.\n   */\n  function inRange(a, min, max) {\n    return min <= a && a <= max;\n  }\n\n  /**\n   * @param {number} n The numerator.\n   * @param {number} d The denominator.\n   * @return {number} The result of the integer division of n by d.\n   */\n  function div(n, d) {\n    return Math.floor(n / d);\n  }\n\n\n  //\n  // Implementation of Encoding specification\n  // http://dvcs.w3.org/hg/encoding/raw-file/tip/Overview.html\n  //\n\n  //\n  // 3. Terminology\n  //\n\n  //\n  // 4. Encodings\n  //\n\n  /** @const */ var EOF_byte = -1;\n  /** @const */ var EOF_code_point = -1;\n\n  /**\n   * @constructor\n   * @param {Uint8Array} bytes Array of bytes that provide the stream.\n   */\n  function ByteInputStream(bytes) {\n    /** @type {number} */\n    var pos = 0;\n\n    /** @return {number} Get the next byte from the stream. */\n    this.get = function() {\n        return (pos >= bytes.length) ? EOF_byte : Number(bytes[pos]);\n    };\n\n    /** @param {number} n Number (positive or negative) by which to\n     *      offset the byte pointer. */\n    this.offset = function(n) {\n      pos += n;\n      if (pos < 0) {\n        throw new Error('Seeking past start of the buffer');\n      }\n      if (pos > bytes.length) {\n        throw new Error('Seeking past EOF');\n      }\n    };\n\n    /**\n     * @param {Array.<number>} test Array of bytes to compare against.\n     * @return {boolean} True if the start of the stream matches the test\n     *     bytes.\n     */\n    this.match = function(test) {\n      if (test.length > pos + bytes.length) {\n        return false;\n      }\n      var i;\n      for (i = 0; i < test.length; i += 1) {\n        if (Number(bytes[pos + i]) !== test[i]) {\n          return false;\n        }\n      }\n      return true;\n    };\n  }\n\n  /**\n   * @constructor\n   * @param {Array.<number>} bytes The array to write bytes into.\n   */\n  function ByteOutputStream(bytes) {\n    /** @type {number} */\n    var pos = 0;\n\n    /**\n     * @param {...number} var_args The byte or bytes to emit into the stream.\n     * @return {number} The last byte emitted.\n     */\n    this.emit = function(var_args) {\n      /** @type {number} */\n      var last = EOF_byte;\n      var i;\n      for (i = 0; i < arguments.length; ++i) {\n        last = Number(arguments[i]);\n        bytes[pos++] = last;\n      }\n      return last;\n    };\n  }\n\n  /**\n   * @constructor\n   * @param {string} string The source of code units for the stream.\n   */\n  function CodePointInputStream(string) {\n    /** @type {number} */\n    var pos = 0;\n    /** @type {Array.<number>} */\n    var cps = (/** @return {Array.<number>} Code points. */function() {\n      /** @type {Array.<number>} */\n      var cps = [];\n      // Based on http://www.w3.org/TR/WebIDL/#idl-DOMString\n      var i = 0, n = string.length;\n      while (i < string.length) {\n        var c = string.charCodeAt(i);\n        if (!inRange(c, 0xD800, 0xDFFF)) {\n          cps.push(c);\n        } else if (inRange(c, 0xDC00, 0xDFFF)) {\n          cps.push(0xFFFD);\n        } else { // (inRange(cu, 0xD800, 0xDBFF))\n          if (i === n - 1) {\n            cps.push(0xFFFD);\n          } else {\n            var d = string.charCodeAt(i + 1);\n            if (inRange(d, 0xDC00, 0xDFFF)) {\n              var a = c & 0x3FF;\n              var b = d & 0x3FF;\n              i += 1;\n              cps.push(0x10000 + (a << 10) + b);\n            } else {\n              cps.push(0xFFFD);\n            }\n          }\n        }\n        i += 1;\n      }\n      return cps;\n    }());\n\n    /** @param {number} n The number of bytes (positive or negative)\n     *      to advance the code point pointer by.*/\n    this.offset = function(n) {\n      pos += n;\n      if (pos < 0) {\n        throw new Error('Seeking past start of the buffer');\n      }\n      if (pos > cps.length) {\n        throw new Error('Seeking past EOF');\n      }\n    };\n\n\n    /** @return {number} Get the next code point from the stream. */\n    this.get = function() {\n      if (pos >= cps.length) {\n        return EOF_code_point;\n      }\n      return cps[pos];\n    };\n  }\n\n  /**\n   * @constructor\n   */\n  function CodePointOutputStream() {\n    /** @type {string} */\n    var string = '';\n\n    /** @return {string} The accumulated string. */\n    this.string = function() {\n      return string;\n    };\n\n    /** @param {number} c The code point to encode into the stream. */\n    this.emit = function(c) {\n      if (c <= 0xFFFF) {\n        string += String.fromCharCode(c);\n      } else {\n        c -= 0x10000;\n        string += String.fromCharCode(0xD800 + ((c >> 10) & 0x3ff));\n        string += String.fromCharCode(0xDC00 + (c & 0x3ff));\n      }\n    };\n  }\n\n  /**\n   * @param {boolean} fatal If true, decoding errors raise an exception.\n   * @param {number=} opt_code_point Override the standard fallback code point.\n   * @return {number} The code point to insert on a decoding error.\n   */\n  function decoderError(fatal, opt_code_point) {\n    if (fatal) {\n      throw new Error('EncodingError');\n    }\n    return opt_code_point || 0xFFFD;\n  }\n\n  /**\n   * @param {number} code_point The code point that could not be encoded.\n   */\n  function encoderError(code_point) {\n    throw new Error('EncodingError');\n  }\n\n  /**\n   * @param {string} label The encoding label.\n   */\n  function getEncoding(label) {\n    label = String(label).trim().toLowerCase();\n    if (Object.prototype.hasOwnProperty.call(label_to_encoding, label)) {\n      return label_to_encoding[label];\n    }\n    throw new Error('EncodingError: Unknown encoding: ' + label);\n  }\n\n  /** @type {Array.<{encodings: Array.<{name:string,labels:Array.<string>}>,\n   *      heading: string}>} */\n  var encodings = [\n    {\n      \"encodings\": [\n        {\n          \"labels\": [\n            \"unicode-1-1-utf-8\",\n            \"utf-8\",\n            \"utf8\"\n          ],\n          \"name\": \"utf-8\"\n        }\n      ],\n      \"heading\": \"The Encoding\"\n    },\n    {\n      \"encodings\": [\n        {\n          \"labels\": [\n            \"cp864\",\n            \"ibm864\"\n          ],\n          \"name\": \"ibm864\"\n        },\n        {\n          \"labels\": [\n            \"cp866\",\n            \"ibm866\"\n          ],\n          \"name\": \"ibm866\"\n        },\n        {\n          \"labels\": [\n            \"csisolatin2\",\n            \"iso-8859-2\",\n            \"iso-ir-101\",\n            \"iso8859-2\",\n            \"iso_8859-2\",\n            \"l2\",\n            \"latin2\"\n          ],\n          \"name\": \"iso-8859-2\"\n        },\n        {\n          \"labels\": [\n            \"csisolatin3\",\n            \"iso-8859-3\",\n            \"iso_8859-3\",\n            \"iso-ir-109\",\n            \"l3\",\n            \"latin3\"\n          ],\n          \"name\": \"iso-8859-3\"\n        },\n        {\n          \"labels\": [\n            \"csisolatin4\",\n            \"iso-8859-4\",\n            \"iso_8859-4\",\n            \"iso-ir-110\",\n            \"l4\",\n            \"latin4\"\n          ],\n          \"name\": \"iso-8859-4\"\n        },\n        {\n          \"labels\": [\n            \"csisolatincyrillic\",\n            \"cyrillic\",\n            \"iso-8859-5\",\n            \"iso_8859-5\",\n            \"iso-ir-144\"\n          ],\n          \"name\": \"iso-8859-5\"\n        },\n        {\n          \"labels\": [\n            \"arabic\",\n            \"csisolatinarabic\",\n            \"ecma-114\",\n            \"iso-8859-6\",\n            \"iso_8859-6\",\n            \"iso-ir-127\"\n          ],\n          \"name\": \"iso-8859-6\"\n        },\n        {\n          \"labels\": [\n            \"csisolatingreek\",\n            \"ecma-118\",\n            \"elot_928\",\n            \"greek\",\n            \"greek8\",\n            \"iso-8859-7\",\n            \"iso_8859-7\",\n            \"iso-ir-126\"\n          ],\n          \"name\": \"iso-8859-7\"\n        },\n        {\n          \"labels\": [\n            \"csisolatinhebrew\",\n            \"hebrew\",\n            \"iso-8859-8\",\n            \"iso-8859-8-i\",\n            \"iso-ir-138\",\n            \"iso_8859-8\",\n            \"visual\"\n          ],\n          \"name\": \"iso-8859-8\"\n        },\n        {\n          \"labels\": [\n            \"csisolatin6\",\n            \"iso-8859-10\",\n            \"iso-ir-157\",\n            \"iso8859-10\",\n            \"l6\",\n            \"latin6\"\n          ],\n          \"name\": \"iso-8859-10\"\n        },\n        {\n          \"labels\": [\n            \"iso-8859-13\"\n          ],\n          \"name\": \"iso-8859-13\"\n        },\n        {\n          \"labels\": [\n            \"iso-8859-14\",\n            \"iso8859-14\"\n          ],\n          \"name\": \"iso-8859-14\"\n        },\n        {\n          \"labels\": [\n            \"iso-8859-15\",\n            \"iso_8859-15\"\n          ],\n          \"name\": \"iso-8859-15\"\n        },\n        {\n          \"labels\": [\n            \"iso-8859-16\"\n          ],\n          \"name\": \"iso-8859-16\"\n        },\n        {\n          \"labels\": [\n            \"koi8-r\",\n            \"koi8_r\"\n          ],\n          \"name\": \"koi8-r\"\n        },\n        {\n          \"labels\": [\n            \"koi8-u\"\n          ],\n          \"name\": \"koi8-u\"\n        },\n        {\n          \"labels\": [\n            \"csmacintosh\",\n            \"mac\",\n            \"macintosh\",\n            \"x-mac-roman\"\n          ],\n          \"name\": \"macintosh\"\n        },\n        {\n          \"labels\": [\n            \"iso-8859-11\",\n            \"tis-620\",\n            \"windows-874\"\n          ],\n          \"name\": \"windows-874\"\n        },\n        {\n          \"labels\": [\n            \"windows-1250\",\n            \"x-cp1250\"\n          ],\n          \"name\": \"windows-1250\"\n        },\n        {\n          \"labels\": [\n            \"windows-1251\",\n            \"x-cp1251\"\n          ],\n          \"name\": \"windows-1251\"\n        },\n        {\n          \"labels\": [\n            \"ascii\",\n            \"ansi_x3.4-1968\",\n            \"csisolatin1\",\n            \"iso-8859-1\",\n            \"iso8859-1\",\n            \"iso_8859-1\",\n            \"l1\",\n            \"latin1\",\n            \"us-ascii\",\n            \"windows-1252\"\n          ],\n          \"name\": \"windows-1252\"\n        },\n        {\n          \"labels\": [\n            \"cp1253\",\n            \"windows-1253\"\n          ],\n          \"name\": \"windows-1253\"\n        },\n        {\n          \"labels\": [\n            \"csisolatin5\",\n            \"iso-8859-9\",\n            \"iso-ir-148\",\n            \"l5\",\n            \"latin5\",\n            \"windows-1254\"\n          ],\n          \"name\": \"windows-1254\"\n        },\n        {\n          \"labels\": [\n            \"cp1255\",\n            \"windows-1255\"\n          ],\n          \"name\": \"windows-1255\"\n        },\n        {\n          \"labels\": [\n            \"cp1256\",\n            \"windows-1256\"\n          ],\n          \"name\": \"windows-1256\"\n        },\n        {\n          \"labels\": [\n            \"windows-1257\"\n          ],\n          \"name\": \"windows-1257\"\n        },\n        {\n          \"labels\": [\n            \"cp1258\",\n            \"windows-1258\"\n          ],\n          \"name\": \"windows-1258\"\n        },\n        {\n          \"labels\": [\n            \"x-mac-cyrillic\",\n            \"x-mac-ukrainian\"\n          ],\n          \"name\": \"x-mac-cyrillic\"\n        }\n      ],\n      \"heading\": \"Legacy single-byte encodings\"\n    },\n    {\n      \"encodings\": [\n        {\n          \"labels\": [\n            \"chinese\",\n            \"csgb2312\",\n            \"csiso58gb231280\",\n            \"gb2312\",\n            \"gbk\",\n            \"gb_2312\",\n            \"gb_2312-80\",\n            \"iso-ir-58\",\n            \"x-gbk\"\n          ],\n          \"name\": \"gbk\"\n        },\n        {\n          \"labels\": [\n            \"gb18030\"\n          ],\n          \"name\": \"gb18030\"\n        },\n        {\n          \"labels\": [\n            \"hz-gb-2312\"\n          ],\n          \"name\": \"hz-gb-2312\"\n        }\n      ],\n      \"heading\": \"Legacy multi-byte Chinese (simplified) encodings\"\n    },\n    {\n      \"encodings\": [\n        {\n          \"labels\": [\n            \"big5\",\n            \"big5-hkscs\",\n            \"cn-big5\",\n            \"csbig5\",\n            \"x-x-big5\"\n          ],\n          \"name\": \"big5\"\n        }\n      ],\n      \"heading\": \"Legacy multi-byte Chinese (traditional) encodings\"\n    },\n    {\n      \"encodings\": [\n        {\n          \"labels\": [\n            \"cseucpkdfmtjapanese\",\n            \"euc-jp\",\n            \"x-euc-jp\"\n          ],\n          \"name\": \"euc-jp\"\n        },\n        {\n          \"labels\": [\n            \"csiso2022jp\",\n            \"iso-2022-jp\"\n          ],\n          \"name\": \"iso-2022-jp\"\n        },\n        {\n          \"labels\": [\n            \"csshiftjis\",\n            \"ms_kanji\",\n            \"shift-jis\",\n            \"shift_jis\",\n            \"sjis\",\n            \"windows-31j\",\n            \"x-sjis\"\n          ],\n          \"name\": \"shift_jis\"\n        }\n      ],\n      \"heading\": \"Legacy multi-byte Japanese encodings\"\n    },\n    {\n      \"encodings\": [\n        {\n          \"labels\": [\n            \"cseuckr\",\n            \"csksc56011987\",\n            \"euc-kr\",\n            \"iso-ir-149\",\n            \"korean\",\n            \"ks_c_5601-1987\",\n            \"ks_c_5601-1989\",\n            \"ksc5601\",\n            \"ksc_5601\",\n            \"windows-949\"\n          ],\n          \"name\": \"euc-kr\"\n        },\n        {\n          \"labels\": [\n            \"csiso2022kr\",\n            \"iso-2022-kr\"\n          ],\n          \"name\": \"iso-2022-kr\"\n        }\n      ],\n      \"heading\": \"Legacy multi-byte Korean encodings\"\n    },\n    {\n      \"encodings\": [\n        {\n          \"labels\": [\n            \"utf-16\",\n            \"utf-16le\"\n          ],\n          \"name\": \"utf-16\"\n        },\n        {\n          \"labels\": [\n            \"utf-16be\"\n          ],\n          \"name\": \"utf-16be\"\n        }\n      ],\n      \"heading\": \"Legacy utf-16 encodings\"\n    }\n  ];\n\n  var name_to_encoding = {};\n  var label_to_encoding = {};\n  encodings.forEach(\n    /** @param {{encodings: Array.<{name:string,labels:Array.<string>}>,\n     *      heading:string}} category */\n    function(category) {\n      category.encodings.forEach(\n        /** @param {{name:string,labels:Array.<string>}} encoding */\n        function(encoding) {\n          name_to_encoding[encoding.name] = encoding;\n          encoding.labels.forEach(\n            /** @param {string} label */\n            function(label) {\n              label_to_encoding[label] = encoding;\n            });\n        });\n    });\n\n  //\n  // 5. Indexes\n  //\n\n  /**\n   * @param {number} pointer The |pointer| to search for.\n   * @param {Array.<?number>} index The |index| to search within.\n   * @return {?number} The code point corresponding to |pointer| in |index|,\n   *     or null if |code point| is not in |index|.\n   */\n  function indexCodePointFor(pointer, index) {\n    return (index || [])[pointer] || null;\n  }\n\n  /**\n   * @param {number} code_point The |code point| to search for.\n   * @param {Array.<?number>} index The |index| to search within.\n   * @return {?number} The first pointer corresponding to |code point| in\n   *     |index|, or null if |code point| is not in |index|.\n   */\n  function indexPointerFor(code_point, index) {\n    var pointer = index.indexOf(code_point);\n    return pointer === -1 ? null : pointer;\n  }\n\n  /** @type {Object.<string, (Array.<number>|Array.<Array.<number>>)>} */\n  var indexes = global['encoding-indexes'] || {};\n\n  /**\n   * @param {number} pointer The |pointer| to search for in the gb18030 index.\n   * @return {?number} The code point corresponding to |pointer| in |index|,\n   *     or null if |code point| is not in the gb18030 index.\n   */\n  function indexGB18030CodePointFor(pointer) {\n    if ((pointer > 39419 && pointer < 189000) || (pointer > 1237575)) {\n      return null;\n    }\n    var /** @type {number} */ offset = 0,\n        /** @type {number} */ code_point_offset = 0,\n        /** @type {Array.<Array.<number>>} */ index = indexes['gb18030'];\n    var i;\n    for (i = 0; i < index.length; ++i) {\n      var entry = index[i];\n      if (entry[0] <= pointer) {\n        offset = entry[0];\n        code_point_offset = entry[1];\n      } else {\n        break;\n      }\n    }\n    return code_point_offset + pointer - offset;\n  }\n\n  /**\n   * @param {number} code_point The |code point| to locate in the gb18030 index.\n   * @return {number} The first pointer corresponding to |code point| in the\n   *     gb18030 index.\n   */\n  function indexGB18030PointerFor(code_point) {\n    var /** @type {number} */ offset = 0,\n        /** @type {number} */ pointer_offset = 0,\n        /** @type {Array.<Array.<number>>} */ index = indexes['gb18030'];\n    var i;\n    for (i = 0; i < index.length; ++i) {\n      var entry = index[i];\n      if (entry[1] <= code_point) {\n        offset = entry[1];\n        pointer_offset = entry[0];\n      } else {\n        break;\n      }\n    }\n    return pointer_offset + code_point - offset;\n  }\n\n  //\n  // 7. The encoding\n  //\n\n  // 7.1 utf-8\n\n  /**\n   * @constructor\n   * @param {{fatal: boolean}} options\n   */\n  function UTF8Decoder(options) {\n    var fatal = options.fatal;\n    var /** @type {number} */ utf8_code_point = 0,\n        /** @type {number} */ utf8_bytes_needed = 0,\n        /** @type {number} */ utf8_bytes_seen = 0,\n        /** @type {number} */ utf8_lower_boundary = 0;\n\n    /**\n     * @param {ByteInputStream} byte_pointer\n     * @return {?number} The next code point decoded, or null if not enough\n     *     data exists in the input stream to decode a complete code point.\n     */\n    this.decode = function(byte_pointer) {\n      var bite = byte_pointer.get();\n      if (bite === EOF_byte) {\n        if (utf8_bytes_needed !== 0) {\n          return decoderError(fatal);\n        }\n        return EOF_code_point;\n      }\n      byte_pointer.offset(1);\n\n      if (utf8_bytes_needed === 0) {\n        if (inRange(bite, 0x00, 0x7F)) {\n          return bite;\n        }\n        if (inRange(bite, 0xC2, 0xDF)) {\n          utf8_bytes_needed = 1;\n          utf8_lower_boundary = 0x80;\n          utf8_code_point = bite - 0xC0;\n        } else if (inRange(bite, 0xE0, 0xEF)) {\n          utf8_bytes_needed = 2;\n          utf8_lower_boundary = 0x800;\n          utf8_code_point = bite - 0xE0;\n        } else if (inRange(bite, 0xF0, 0xF4)) {\n          utf8_bytes_needed = 3;\n          utf8_lower_boundary = 0x10000;\n          utf8_code_point = bite - 0xF0;\n        } else {\n          return decoderError(fatal);\n        }\n        utf8_code_point = utf8_code_point * Math.pow(64, utf8_bytes_needed);\n        return null;\n      }\n      if (!inRange(bite, 0x80, 0xBF)) {\n        utf8_code_point = 0;\n        utf8_bytes_needed = 0;\n        utf8_bytes_seen = 0;\n        utf8_lower_boundary = 0;\n        byte_pointer.offset(-1);\n        return decoderError(fatal);\n      }\n      utf8_bytes_seen += 1;\n      utf8_code_point = utf8_code_point + (bite - 0x80) *\n        Math.pow(64, utf8_bytes_needed - utf8_bytes_seen);\n      if (utf8_bytes_seen !== utf8_bytes_needed) {\n        return null;\n      }\n      var code_point = utf8_code_point;\n      var lower_boundary = utf8_lower_boundary;\n      utf8_code_point = 0;\n      utf8_bytes_needed = 0;\n      utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0;\n      if (inRange(code_point, lower_boundary, 0x10FFFF) &&\n          !inRange(code_point, 0xD800, 0xDFFF)) {\n        return code_point;\n      }\n      return decoderError(fatal);\n    };\n  }\n\n  /**\n   * @constructor\n   * @param {{fatal: boolean}} options\n   */\n  function UTF8Encoder(options) {\n    var fatal = options.fatal;\n    /**\n     * @param {ByteOutputStream} output_byte_stream Output byte stream.\n     * @param {CodePointInputStream} code_point_pointer Input stream.\n     * @return {number} The last byte emitted.\n     */\n    this.encode = function(output_byte_stream, code_point_pointer) {\n      var code_point = code_point_pointer.get();\n      if (code_point === EOF_code_point) {\n        return EOF_byte;\n      }\n      code_point_pointer.offset(1);\n      if (inRange(code_point, 0xD800, 0xDFFF)) {\n        return encoderError(code_point);\n      }\n      if (inRange(code_point, 0x0000, 0x007f)) {\n        return output_byte_stream.emit(code_point);\n      }\n      var count, offset;\n      if (inRange(code_point, 0x0080, 0x07FF)) {\n          count = 1;\n        offset = 0xC0;\n      } else if (inRange(code_point, 0x0800, 0xFFFF)) {\n        count = 2;\n        offset = 0xE0;\n      } else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n        count = 3;\n        offset = 0xF0;\n      }\n      var result = output_byte_stream.emit(\n        div(code_point, Math.pow(64, count)) + offset);\n      while (count > 0) {\n        var temp = div(code_point, Math.pow(64, count - 1));\n        result = output_byte_stream.emit(0x80 + (temp % 64));\n        count -= 1;\n      }\n      return result;\n    };\n  }\n\n  name_to_encoding['utf-8'].getEncoder = function(options) {\n    return new UTF8Encoder(options);\n  };\n  name_to_encoding['utf-8'].getDecoder = function(options) {\n    return new UTF8Decoder(options);\n  };\n\n  //\n  // 8. Legacy single-byte encodings\n  //\n\n  /**\n   * @constructor\n   * @param {Array.<number>} index The encoding index.\n   * @param {{fatal: boolean}} options\n   */\n  function SingleByteDecoder(index, options) {\n    var fatal = options.fatal;\n    /**\n     * @param {ByteInputStream} byte_pointer\n     * @return {?number} The next code point decoded, or null if not enough\n     *     data exists in the input stream to decode a complete code point.\n     */\n    this.decode = function(byte_pointer) {\n      var bite = byte_pointer.get();\n      if (bite === EOF_byte) {\n        return EOF_code_point;\n      }\n      byte_pointer.offset(1);\n      if (inRange(bite, 0x00, 0x7F)) {\n        return bite;\n      }\n      var code_point = index[bite - 0x80];\n      if (code_point === null) {\n        return decoderError(fatal);\n      }\n      return code_point;\n    };\n  }\n\n  /**\n   * @constructor\n   * @param {Array.<?number>} index The encoding index.\n   * @param {{fatal: boolean}} options\n   */\n  function SingleByteEncoder(index, options) {\n    var fatal = options.fatal;\n    /**\n     * @param {ByteOutputStream} output_byte_stream Output byte stream.\n     * @param {CodePointInputStream} code_point_pointer Input stream.\n     * @return {number} The last byte emitted.\n     */\n    this.encode = function(output_byte_stream, code_point_pointer) {\n      var code_point = code_point_pointer.get();\n      if (code_point === EOF_code_point) {\n        return EOF_byte;\n      }\n      code_point_pointer.offset(1);\n      if (inRange(code_point, 0x0000, 0x007F)) {\n        return output_byte_stream.emit(code_point);\n      }\n      var pointer = indexPointerFor(code_point, index);\n      if (pointer === null) {\n        encoderError(code_point);\n      }\n      return output_byte_stream.emit(pointer + 0x80);\n    };\n  }\n\n  (function() {\n    ['ibm864', 'ibm866', 'iso-8859-2', 'iso-8859-3', 'iso-8859-4',\n     'iso-8859-5', 'iso-8859-6', 'iso-8859-7', 'iso-8859-8', 'iso-8859-10',\n     'iso-8859-13', 'iso-8859-14', 'iso-8859-15', 'iso-8859-16', 'koi8-r',\n     'koi8-u', 'macintosh', 'windows-874', 'windows-1250', 'windows-1251',\n     'windows-1252', 'windows-1253', 'windows-1254', 'windows-1255',\n     'windows-1256', 'windows-1257', 'windows-1258', 'x-mac-cyrillic'\n    ].forEach(\n      function(name) {\n        var encoding = name_to_encoding[name];\n        var index = indexes[name];\n        encoding.getDecoder = function(options) {\n          return new SingleByteDecoder(index, options);\n        };\n        encoding.getEncoder = function(options) {\n          return new SingleByteEncoder(index, options);\n        };\n      }\n    );\n  }());\n\n  //\n  // 9. Legacy multi-byte Chinese (simplified) encodings\n  //\n\n  // 9.1 gbk\n\n  /**\n   * @constructor\n   * @param {boolean} gb18030 True if decoding gb18030, false otherwise.\n   * @param {{fatal: boolean}} options\n   */\n  function GBKDecoder(gb18030, options) {\n    var fatal = options.fatal;\n    var /** @type {number} */ gbk_first = 0x00,\n        /** @type {number} */ gbk_second = 0x00,\n        /** @type {number} */ gbk_third = 0x00;\n    /**\n     * @param {ByteInputStream} byte_pointer\n     * @return {?number} The next code point decoded, or null if not enough\n     *     data exists in the input stream to decode a complete code point.\n     */\n    this.decode = function(byte_pointer) {\n      var bite = byte_pointer.get();\n      if (bite === EOF_byte && gbk_first === 0x00 &&\n          gbk_second === 0x00 && gbk_third === 0x00) {\n        return EOF_code_point;\n      }\n      if (bite === EOF_byte &&\n          (gbk_first !== 0x00 || gbk_second !== 0x00 || gbk_third !== 0x00)) {\n        gbk_first = 0x00;\n        gbk_second = 0x00;\n        gbk_third = 0x00;\n        decoderError(fatal);\n      }\n      byte_pointer.offset(1);\n      var code_point;\n      if (gbk_third !== 0x00) {\n        code_point = null;\n        if (inRange(bite, 0x30, 0x39)) {\n          code_point = indexGB18030CodePointFor(\n            (((gbk_first - 0x81) * 10 + (gbk_second - 0x30)) * 126 +\n             (gbk_third - 0x81)) * 10 + bite - 0x30);\n        }\n        gbk_first = 0x00;\n        gbk_second = 0x00;\n        gbk_third = 0x00;\n        if (code_point === null) {\n          byte_pointer.offset(-3);\n          return decoderError(fatal);\n        }\n        return code_point;\n      }\n      if (gbk_second !== 0x00) {\n        if (inRange(bite, 0x81, 0xFE)) {\n          gbk_third = bite;\n          return null;\n        }\n        byte_pointer.offset(-2);\n        gbk_first = 0x00;\n        gbk_second = 0x00;\n        return decoderError(fatal);\n      }\n      if (gbk_first !== 0x00) {\n        if (inRange(bite, 0x30, 0x39) && gb18030) {\n          gbk_second = bite;\n          return null;\n        }\n        var lead = gbk_first;\n        var pointer = null;\n        gbk_first = 0x00;\n        var offset = bite < 0x7F ? 0x40 : 0x41;\n        if (inRange(bite, 0x40, 0x7E) || inRange(bite, 0x80, 0xFE)) {\n          pointer = (lead - 0x81) * 190 + (bite - offset);\n        }\n        code_point = pointer === null ? null :\n          indexCodePointFor(pointer, indexes['gbk']);\n        if (pointer === null) {\n          byte_pointer.offset(-1);\n        }\n        if (code_point === null) {\n          return decoderError(fatal);\n        }\n        return code_point;\n      }\n      if (inRange(bite, 0x00, 0x7F)) {\n        return bite;\n      }\n      if (bite === 0x80) {\n        return 0x20AC;\n      }\n      if (inRange(bite, 0x81, 0xFE)) {\n        gbk_first = bite;\n        return null;\n      }\n      return decoderError(fatal);\n    };\n  }\n\n  /**\n   * @constructor\n   * @param {boolean} gb18030 True if decoding gb18030, false otherwise.\n   * @param {{fatal: boolean}} options\n   */\n  function GBKEncoder(gb18030, options) {\n    var fatal = options.fatal;\n    /**\n     * @param {ByteOutputStream} output_byte_stream Output byte stream.\n     * @param {CodePointInputStream} code_point_pointer Input stream.\n     * @return {number} The last byte emitted.\n     */\n    this.encode = function(output_byte_stream, code_point_pointer) {\n      var code_point = code_point_pointer.get();\n      if (code_point === EOF_code_point) {\n        return EOF_byte;\n      }\n      code_point_pointer.offset(1);\n      if (inRange(code_point, 0x0000, 0x007F)) {\n        return output_byte_stream.emit(code_point);\n      }\n      var pointer = indexPointerFor(code_point, indexes['gbk']);\n      if (pointer !== null) {\n        var lead = div(pointer, 190) + 0x81;\n        var trail = pointer % 190;\n        var offset = trail < 0x3F ? 0x40 : 0x41;\n        return output_byte_stream.emit(lead, trail + offset);\n      }\n      if (pointer === null && !gb18030) {\n        return encoderError(code_point);\n      }\n      pointer = indexGB18030PointerFor(code_point);\n      var byte1 = div(div(div(pointer, 10), 126), 10);\n      pointer = pointer - byte1 * 10 * 126 * 10;\n      var byte2 = div(div(pointer, 10), 126);\n      pointer = pointer - byte2 * 10 * 126;\n      var byte3 = div(pointer, 10);\n      var byte4 = pointer - byte3 * 10;\n      return output_byte_stream.emit(byte1 + 0x81,\n                                     byte2 + 0x30,\n                                     byte3 + 0x81,\n                                     byte4 + 0x30);\n    };\n  }\n\n  name_to_encoding['gbk'].getEncoder = function(options) {\n    return new GBKEncoder(false, options);\n  };\n  name_to_encoding['gbk'].getDecoder = function(options) {\n    return new GBKDecoder(false, options);\n  };\n\n  // 9.2 gb18030\n  name_to_encoding['gb18030'].getEncoder = function(options) {\n    return new GBKEncoder(true, options);\n  };\n  name_to_encoding['gb18030'].getDecoder = function(options) {\n    return new GBKDecoder(true, options);\n  };\n\n  // 9.3 hz-gb-2312\n\n  /**\n   * @constructor\n   * @param {{fatal: boolean}} options\n   */\n  function HZGB2312Decoder(options) {\n    var fatal = options.fatal;\n    var /** @type {boolean} */ hzgb2312 = false,\n        /** @type {number} */ hzgb2312_lead = 0x00;\n    /**\n     * @param {ByteInputStream} byte_pointer\n     * @return {?number} The next code point decoded, or null if not enough\n     *     data exists in the input stream to decode a complete code point.\n     */\n    this.decode = function(byte_pointer) {\n      var bite = byte_pointer.get();\n      if (bite === EOF_byte && hzgb2312_lead === 0x00) {\n        return EOF_code_point;\n      }\n      if (bite === EOF_byte && hzgb2312_lead !== 0x00) {\n        hzgb2312_lead = 0x00;\n        return decoderError(fatal);\n      }\n      byte_pointer.offset(1);\n      if (hzgb2312_lead === 0x7E) {\n        hzgb2312_lead = 0x00;\n        if (bite === 0x7B) {\n          hzgb2312 = true;\n          return null;\n        }\n        if (bite === 0x7D) {\n          hzgb2312 = false;\n          return null;\n        }\n        if (bite === 0x7E) {\n          return 0x007E;\n        }\n        if (bite === 0x0A) {\n          return null;\n        }\n        byte_pointer.offset(-1);\n        return decoderError(fatal);\n      }\n      if (hzgb2312_lead !== 0x00) {\n        var lead = hzgb2312_lead;\n        hzgb2312_lead = 0x00;\n        var code_point = null;\n        if (inRange(bite, 0x21, 0x7E)) {\n          code_point = indexCodePointFor((lead - 1) * 190 +\n                                         (bite + 0x3F), indexes['gbk']);\n        }\n        if (bite === 0x0A) {\n          hzgb2312 = false;\n        }\n        if (code_point === null) {\n          return decoderError(fatal);\n        }\n        return code_point;\n      }\n      if (bite === 0x7E) {\n        hzgb2312_lead = 0x7E;\n        return null;\n      }\n      if (hzgb2312) {\n        if (inRange(bite, 0x20, 0x7F)) {\n          hzgb2312_lead = bite;\n          return null;\n        }\n        if (bite === 0x0A) {\n          hzgb2312 = false;\n        }\n        return decoderError(fatal);\n      }\n      if (inRange(bite, 0x00, 0x7F)) {\n        return bite;\n      }\n      return decoderError(fatal);\n    };\n  }\n\n  /**\n   * @constructor\n   * @param {{fatal: boolean}} options\n   */\n  function HZGB2312Encoder(options) {\n    var fatal = options.fatal;\n    var hzgb2312 = false;\n    /**\n     * @param {ByteOutputStream} output_byte_stream Output byte stream.\n     * @param {CodePointInputStream} code_point_pointer Input stream.\n     * @return {number} The last byte emitted.\n     */\n    this.encode = function(output_byte_stream, code_point_pointer) {\n      var code_point = code_point_pointer.get();\n      if (code_point === EOF_code_point) {\n        return EOF_byte;\n      }\n      code_point_pointer.offset(1);\n      if (inRange(code_point, 0x0000, 0x007F) && hzgb2312) {\n        code_point_pointer.offset(-1);\n        hzgb2312 = false;\n        return output_byte_stream.emit(0x7E, 0x7D);\n      }\n      if (code_point === 0x007E) {\n        return output_byte_stream.emit(0x7E, 0x7E);\n      }\n      if (inRange(code_point, 0x0000, 0x007F)) {\n        return output_byte_stream.emit(code_point);\n      }\n      if (!hzgb2312) {\n        code_point_pointer.offset(-1);\n        hzgb2312 = true;\n        return output_byte_stream.emit(0x7E, 0x7B);\n      }\n      var pointer = indexPointerFor(code_point, indexes['gbk']);\n      if (pointer === null) {\n        return encoderError(code_point);\n      }\n      var lead = div(pointer, 190) + 1;\n      var trail = pointer % 190 - 0x3F;\n      if (!inRange(lead, 0x21, 0x7E) || !inRange(trail, 0x21, 0x7E)) {\n        return encoderError(code_point);\n      }\n      return output_byte_stream.emit(lead, trail);\n    };\n  }\n\n  name_to_encoding['hz-gb-2312'].getEncoder = function(options) {\n    return new HZGB2312Encoder(options);\n  };\n  name_to_encoding['hz-gb-2312'].getDecoder = function(options) {\n    return new HZGB2312Decoder(options);\n  };\n\n  //\n  // 10. Legacy multi-byte Chinese (traditional) encodings\n  //\n\n  // 10.1 big5\n\n  /**\n   * @constructor\n   * @param {{fatal: boolean}} options\n   */\n  function Big5Decoder(options) {\n    var fatal = options.fatal;\n    var /** @type {number} */ big5_lead = 0x00,\n        /** @type {?number} */ big5_pending = null;\n\n    /**\n     * @param {ByteInputStream} byte_pointer\n     * @return {?number} The next code point decoded, or null if not enough\n     *     data exists in the input stream to decode a complete code point.\n     */\n    this.decode = function(byte_pointer) {\n      // NOTE: Hack to support emitting two code points\n      if (big5_pending !== null) {\n        var pending = big5_pending;\n        big5_pending = null;\n        return pending;\n      }\n      var bite = byte_pointer.get();\n      if (bite === EOF_byte && big5_lead === 0x00) {\n        return EOF_code_point;\n      }\n      if (bite === EOF_byte && big5_lead !== 0x00) {\n        big5_lead = 0x00;\n        return decoderError(fatal);\n      }\n      byte_pointer.offset(1);\n      if (big5_lead !== 0x00) {\n        var lead = big5_lead;\n        var pointer = null;\n        big5_lead = 0x00;\n        var offset = bite < 0x7F ? 0x40 : 0x62;\n        if (inRange(bite, 0x40, 0x7E) || inRange(bite, 0xA1, 0xFE)) {\n          pointer = (lead - 0x81) * 157 + (bite - offset);\n        }\n        if (pointer === 1133) {\n          big5_pending = 0x0304;\n          return 0x00CA;\n        }\n        if (pointer === 1135) {\n          big5_pending = 0x030C;\n          return 0x00CA;\n        }\n        if (pointer === 1164) {\n          big5_pending = 0x0304;\n          return 0x00EA;\n        }\n        if (pointer === 1166) {\n          big5_pending = 0x030C;\n          return 0x00EA;\n        }\n        var code_point = (pointer === null) ? null :\n              indexCodePointFor(pointer, indexes['big5']);\n        if (pointer === null) {\n          byte_pointer.offset(-1);\n        }\n        if (code_point === null) {\n          return decoderError(fatal);\n        }\n        return code_point;\n      }\n      if (inRange(bite, 0x00, 0x7F)) {\n        return bite;\n      }\n      if (inRange(bite, 0x81, 0xFE)) {\n        big5_lead = bite;\n        return null;\n      }\n      return decoderError(fatal);\n    };\n  }\n\n  /**\n   * @constructor\n   * @param {{fatal: boolean}} options\n   */\n  function Big5Encoder(options) {\n    var fatal = options.fatal;\n    /**\n     * @param {ByteOutputStream} output_byte_stream Output byte stream.\n     * @param {CodePointInputStream} code_point_pointer Input stream.\n     * @return {number} The last byte emitted.\n     */\n    this.encode = function(output_byte_stream, code_point_pointer) {\n      var code_point = code_point_pointer.get();\n      if (code_point === EOF_code_point) {\n        return EOF_byte;\n      }\n      code_point_pointer.offset(1);\n      if (inRange(code_point, 0x0000, 0x007F)) {\n        return output_byte_stream.emit(code_point);\n      }\n      var pointer = indexPointerFor(code_point, indexes['big5']);\n      if (pointer === null) {\n        return encoderError(code_point);\n      }\n      var lead = div(pointer, 157) + 0x81;\n      //if (lead < 0xA1) {\n      //  return encoderError(code_point);\n      //}\n      var trail = pointer % 157;\n      var offset = trail < 0x3F ? 0x40 : 0x62;\n      return output_byte_stream.emit(lead, trail + offset);\n    };\n  }\n\n  name_to_encoding['big5'].getEncoder = function(options) {\n    return new Big5Encoder(options);\n  };\n  name_to_encoding['big5'].getDecoder = function(options) {\n    return new Big5Decoder(options);\n  };\n\n\n  //\n  // 11. Legacy multi-byte Japanese encodings\n  //\n\n  // 11.1 euc.jp\n\n  /**\n   * @constructor\n   * @param {{fatal: boolean}} options\n   */\n  function EUCJPDecoder(options) {\n    var fatal = options.fatal;\n    var /** @type {number} */ eucjp_first = 0x00,\n        /** @type {number} */ eucjp_second = 0x00;\n    /**\n     * @param {ByteInputStream} byte_pointer\n     * @return {?number} The next code point decoded, or null if not enough\n     *     data exists in the input stream to decode a complete code point.\n     */\n    this.decode = function(byte_pointer) {\n      var bite = byte_pointer.get();\n      if (bite === EOF_byte) {\n        if (eucjp_first === 0x00 && eucjp_second === 0x00) {\n          return EOF_code_point;\n        }\n        eucjp_first = 0x00;\n        eucjp_second = 0x00;\n        return decoderError(fatal);\n      }\n      byte_pointer.offset(1);\n\n      var lead, code_point;\n      if (eucjp_second !== 0x00) {\n        lead = eucjp_second;\n        eucjp_second = 0x00;\n        code_point = null;\n        if (inRange(lead, 0xA1, 0xFE) && inRange(bite, 0xA1, 0xFE)) {\n          code_point = indexCodePointFor((lead - 0xA1) * 94 + bite - 0xA1,\n                                         indexes['jis0212']);\n        }\n        if (!inRange(bite, 0xA1, 0xFE)) {\n          byte_pointer.offset(-1);\n        }\n        if (code_point === null) {\n          return decoderError(fatal);\n        }\n        return code_point;\n      }\n      if (eucjp_first === 0x8E && inRange(bite, 0xA1, 0xDF)) {\n        eucjp_first = 0x00;\n        return 0xFF61 + bite - 0xA1;\n      }\n      if (eucjp_first === 0x8F && inRange(bite, 0xA1, 0xFE)) {\n        eucjp_first = 0x00;\n        eucjp_second = bite;\n        return null;\n      }\n      if (eucjp_first !== 0x00) {\n        lead = eucjp_first;\n        eucjp_first = 0x00;\n        code_point = null;\n        if (inRange(lead, 0xA1, 0xFE) && inRange(bite, 0xA1, 0xFE)) {\n          code_point = indexCodePointFor((lead - 0xA1) * 94 + bite - 0xA1,\n                                         indexes['jis0208']);\n        }\n        if (!inRange(bite, 0xA1, 0xFE)) {\n          byte_pointer.offset(-1);\n        }\n        if (code_point === null) {\n          return decoderError(fatal);\n        }\n        return code_point;\n      }\n      if (inRange(bite, 0x00, 0x7F)) {\n        return bite;\n      }\n      if (bite === 0x8E || bite === 0x8F || (inRange(bite, 0xA1, 0xFE))) {\n        eucjp_first = bite;\n        return null;\n      }\n      return decoderError(fatal);\n    };\n  }\n\n  /**\n   * @constructor\n   * @param {{fatal: boolean}} options\n   */\n  function EUCJPEncoder(options) {\n    var fatal = options.fatal;\n    /**\n     * @param {ByteOutputStream} output_byte_stream Output byte stream.\n     * @param {CodePointInputStream} code_point_pointer Input stream.\n     * @return {number} The last byte emitted.\n     */\n    this.encode = function(output_byte_stream, code_point_pointer) {\n      var code_point = code_point_pointer.get();\n      if (code_point === EOF_code_point) {\n        return EOF_byte;\n      }\n      code_point_pointer.offset(1);\n      if (inRange(code_point, 0x0000, 0x007F)) {\n        return output_byte_stream.emit(code_point);\n      }\n      if (code_point === 0x00A5) {\n        return output_byte_stream.emit(0x5C);\n      }\n      if (code_point === 0x203E) {\n        return output_byte_stream.emit(0x7E);\n      }\n      if (inRange(code_point, 0xFF61, 0xFF9F)) {\n        return output_byte_stream.emit(0x8E, code_point - 0xFF61 + 0xA1);\n      }\n\n      var pointer = indexPointerFor(code_point, indexes['jis0208']);\n      if (pointer === null) {\n        return encoderError(code_point);\n      }\n      var lead = div(pointer, 94) + 0xA1;\n      var trail = pointer % 94 + 0xA1;\n      return output_byte_stream.emit(lead, trail);\n    };\n  }\n\n  name_to_encoding['euc-jp'].getEncoder = function(options) {\n    return new EUCJPEncoder(options);\n  };\n  name_to_encoding['euc-jp'].getDecoder = function(options) {\n    return new EUCJPDecoder(options);\n  };\n\n  // 11.2 iso-2022-jp\n\n  /**\n   * @constructor\n   * @param {{fatal: boolean}} options\n   */\n  function ISO2022JPDecoder(options) {\n    var fatal = options.fatal;\n    /** @enum */\n    var state = {\n      ASCII: 0,\n      escape_start: 1,\n      escape_middle: 2,\n      escape_final: 3,\n      lead: 4,\n      trail: 5,\n      Katakana: 6\n    };\n    var /** @type {number} */ iso2022jp_state = state.ASCII,\n        /** @type {boolean} */ iso2022jp_jis0212 = false,\n        /** @type {number} */ iso2022jp_lead = 0x00;\n    /**\n     * @param {ByteInputStream} byte_pointer\n     * @return {?number} The next code point decoded, or null if not enough\n     *     data exists in the input stream to decode a complete code point.\n     */\n    this.decode = function(byte_pointer) {\n      var bite = byte_pointer.get();\n      if (bite !== EOF_byte) {\n        byte_pointer.offset(1);\n      }\n      switch (iso2022jp_state) {\n      default:\n      case state.ASCII:\n        if (bite === 0x1B) {\n          iso2022jp_state = state.escape_start;\n          return null;\n        }\n        if (inRange(bite, 0x00, 0x7F)) {\n          return bite;\n        }\n        if (bite === EOF_byte) {\n          return EOF_code_point;\n        }\n        return decoderError(fatal);\n\n      case state.escape_start:\n        if (bite === 0x24 || bite === 0x28) {\n          iso2022jp_lead = bite;\n          iso2022jp_state = state.escape_middle;\n          return null;\n        }\n        if (bite !== EOF_byte) {\n          byte_pointer.offset(-1);\n        }\n        iso2022jp_state = state.ASCII;\n        return decoderError(fatal);\n\n      case state.escape_middle:\n        var lead = iso2022jp_lead;\n        iso2022jp_lead = 0x00;\n        if (lead === 0x24 && (bite === 0x40 || bite === 0x42)) {\n          iso2022jp_jis0212 = false;\n          iso2022jp_state = state.lead;\n          return null;\n        }\n        if (lead === 0x24 && bite === 0x28) {\n          iso2022jp_state = state.escape_final;\n          return null;\n        }\n        if (lead === 0x28 && (bite === 0x42 || bite === 0x4A)) {\n          iso2022jp_state = state.ASCII;\n          return null;\n        }\n        if (lead === 0x28 && bite === 0x49) {\n          iso2022jp_state = state.Katakana;\n          return null;\n        }\n        if (bite === EOF_byte) {\n          byte_pointer.offset(-1);\n        } else {\n          byte_pointer.offset(-2);\n        }\n        iso2022jp_state = state.ASCII;\n        return decoderError(fatal);\n\n      case state.escape_final:\n        if (bite === 0x44) {\n          iso2022jp_jis0212 = true;\n          iso2022jp_state = state.lead;\n          return null;\n        }\n        if (bite === EOF_byte) {\n          byte_pointer.offset(-2);\n        } else {\n          byte_pointer.offset(-3);\n        }\n        iso2022jp_state = state.ASCII;\n        return decoderError(fatal);\n\n      case state.lead:\n        if (bite === 0x0A) {\n          iso2022jp_state = state.ASCII;\n          return decoderError(fatal, 0x000A);\n        }\n        if (bite === 0x1B) {\n          iso2022jp_state = state.escape_start;\n          return null;\n        }\n        if (bite === EOF_byte) {\n          return EOF_code_point;\n        }\n        iso2022jp_lead = bite;\n        iso2022jp_state = state.trail;\n        return null;\n\n      case state.trail:\n        iso2022jp_state = state.lead;\n        if (bite === EOF_byte) {\n          return decoderError(fatal);\n        }\n        var code_point = null;\n        var pointer = (iso2022jp_lead - 0x21) * 94 + bite - 0x21;\n        if (inRange(iso2022jp_lead, 0x21, 0x7E) && inRange(bite, 0x21, 0x7E)) {\n          code_point = (iso2022jp_jis0212 === false) ?\n            indexCodePointFor(pointer, indexes['jis0208']) :\n            indexCodePointFor(pointer, indexes['jis0212']);\n        }\n        if (code_point === null) {\n          return decoderError(fatal);\n        }\n        return code_point;\n\n      case state.Katakana:\n        if (bite === 0x1B) {\n          iso2022jp_state = state.escape_start;\n          return null;\n        }\n        if (inRange(bite, 0x21, 0x5F)) {\n          return 0xFF61 + bite - 0x21;\n        }\n        if (bite === EOF_byte) {\n          return EOF_code_point;\n        }\n        return decoderError(fatal);\n      }\n    };\n  }\n\n  /**\n   * @constructor\n   * @param {{fatal: boolean}} options\n   */\n  function ISO2022JPEncoder(options) {\n    var fatal = options.fatal;\n    /** @enum */\n    var state = {\n      ASCII: 0,\n      lead: 1,\n      Katakana: 2\n    };\n    var /** @type {number} */ iso2022jp_state = state.ASCII;\n    /**\n     * @param {ByteOutputStream} output_byte_stream Output byte stream.\n     * @param {CodePointInputStream} code_point_pointer Input stream.\n     * @return {number} The last byte emitted.\n     */\n    this.encode = function(output_byte_stream, code_point_pointer) {\n      var code_point = code_point_pointer.get();\n      if (code_point === EOF_code_point) {\n        return EOF_byte;\n      }\n      code_point_pointer.offset(1);\n      if ((inRange(code_point, 0x0000, 0x007F) ||\n           code_point === 0x00A5 || code_point === 0x203E) &&\n          iso2022jp_state !== state.ASCII) {\n        code_point_pointer.offset(-1);\n        iso2022jp_state = state.ASCII;\n        return output_byte_stream.emit(0x1B, 0x28, 0x42);\n      }\n      if (inRange(code_point, 0x0000, 0x007F)) {\n        return output_byte_stream.emit(code_point);\n      }\n      if (code_point === 0x00A5) {\n        return output_byte_stream.emit(0x5C);\n      }\n      if (code_point === 0x203E) {\n        return output_byte_stream.emit(0x7E);\n      }\n      if (inRange(code_point, 0xFF61, 0xFF9F) &&\n          iso2022jp_state !== state.Katakana) {\n        code_point_pointer.offset(-1);\n        iso2022jp_state = state.Katakana;\n        return output_byte_stream.emit(0x1B, 0x28, 0x49);\n      }\n      if (inRange(code_point, 0xFF61, 0xFF9F)) {\n        return output_byte_stream.emit(code_point - 0xFF61 - 0x21);\n      }\n      if (iso2022jp_state !== state.lead) {\n        code_point_pointer.offset(-1);\n        iso2022jp_state = state.lead;\n        return output_byte_stream.emit(0x1B, 0x24, 0x42);\n      }\n      var pointer = indexPointerFor(code_point, indexes['jis0208']);\n      if (pointer === null) {\n        return encoderError(code_point);\n      }\n      var lead = div(pointer, 94) + 0x21;\n      var trail = pointer % 94 + 0x21;\n      return output_byte_stream.emit(lead, trail);\n    };\n  }\n\n  name_to_encoding['iso-2022-jp'].getEncoder = function(options) {\n    return new ISO2022JPEncoder(options);\n  };\n  name_to_encoding['iso-2022-jp'].getDecoder = function(options) {\n    return new ISO2022JPDecoder(options);\n  };\n\n  // 11.3 shift_jis\n\n  /**\n   * @constructor\n   * @param {{fatal: boolean}} options\n   */\n  function ShiftJISDecoder(options) {\n    var fatal = options.fatal;\n    var /** @type {number} */ shiftjis_lead = 0x00;\n    /**\n     * @param {ByteInputStream} byte_pointer\n     * @return {?number} The next code point decoded, or null if not enough\n     *     data exists in the input stream to decode a complete code point.\n     */\n    this.decode = function(byte_pointer) {\n      var bite = byte_pointer.get();\n      if (bite === EOF_byte && shiftjis_lead === 0x00) {\n        return EOF_code_point;\n      }\n      if (bite === EOF_byte && shiftjis_lead !== 0x00) {\n        shiftjis_lead = 0x00;\n        return decoderError(fatal);\n      }\n      byte_pointer.offset(1);\n      if (shiftjis_lead !== 0x00) {\n        var lead = shiftjis_lead;\n        shiftjis_lead = 0x00;\n        if (inRange(bite, 0x40, 0x7E) || inRange(bite, 0x80, 0xFC)) {\n          var offset = (bite < 0x7F) ? 0x40 : 0x41;\n          var lead_offset = (lead < 0xA0) ? 0x81 : 0xC1;\n          var code_point = indexCodePointFor((lead - lead_offset) * 188 +\n                                             bite - offset, indexes['jis0208']);\n          if (code_point === null) {\n            return decoderError(fatal);\n          }\n          return code_point;\n        }\n        byte_pointer.offset(-1);\n        return decoderError(fatal);\n      }\n      if (inRange(bite, 0x00, 0x80)) {\n        return bite;\n      }\n      if (inRange(bite, 0xA1, 0xDF)) {\n        return 0xFF61 + bite - 0xA1;\n      }\n      if (inRange(bite, 0x81, 0x9F) || inRange(bite, 0xE0, 0xFC)) {\n        shiftjis_lead = bite;\n        return null;\n      }\n      return decoderError(fatal);\n    };\n  }\n\n  /**\n   * @constructor\n   * @param {{fatal: boolean}} options\n   */\n  function ShiftJISEncoder(options) {\n    var fatal = options.fatal;\n    /**\n     * @param {ByteOutputStream} output_byte_stream Output byte stream.\n     * @param {CodePointInputStream} code_point_pointer Input stream.\n     * @return {number} The last byte emitted.\n     */\n    this.encode = function(output_byte_stream, code_point_pointer) {\n      var code_point = code_point_pointer.get();\n      if (code_point === EOF_code_point) {\n        return EOF_byte;\n      }\n      code_point_pointer.offset(1);\n      if (inRange(code_point, 0x0000, 0x0080)) {\n        return output_byte_stream.emit(code_point);\n      }\n      if (code_point === 0x00A5) {\n        return output_byte_stream.emit(0x5C);\n      }\n      if (code_point === 0x203E) {\n        return output_byte_stream.emit(0x7E);\n      }\n      if (inRange(code_point, 0xFF61, 0xFF9F)) {\n        return output_byte_stream.emit(code_point - 0xFF61 + 0xA1);\n      }\n      var pointer = indexPointerFor(code_point, indexes['jis0208']);\n      if (pointer === null) {\n        return encoderError(code_point);\n      }\n      var lead = div(pointer, 188);\n      var lead_offset = lead < 0x1F ? 0x81 : 0xC1;\n      var trail = pointer % 188;\n      var offset = trail < 0x3F ? 0x40 : 0x41;\n      return output_byte_stream.emit(lead + lead_offset, trail + offset);\n    };\n  }\n\n  name_to_encoding['shift_jis'].getEncoder = function(options) {\n    return new ShiftJISEncoder(options);\n  };\n  name_to_encoding['shift_jis'].getDecoder = function(options) {\n    return new ShiftJISDecoder(options);\n  };\n\n  //\n  // 12. Legacy multi-byte Korean encodings\n  //\n\n  // 12.1 euc-kr\n\n  /**\n   * @constructor\n   * @param {{fatal: boolean}} options\n   */\n  function EUCKRDecoder(options) {\n    var fatal = options.fatal;\n    var /** @type {number} */ euckr_lead = 0x00;\n    /**\n     * @param {ByteInputStream} byte_pointer\n     * @return {?number} The next code point decoded, or null if not enough\n     *     data exists in the input stream to decode a complete code point.\n     */\n    this.decode = function(byte_pointer) {\n      var bite = byte_pointer.get();\n      if (bite === EOF_byte && euckr_lead === 0) {\n        return EOF_code_point;\n      }\n      if (bite === EOF_byte && euckr_lead !== 0) {\n        euckr_lead = 0x00;\n        return decoderError(fatal);\n      }\n      byte_pointer.offset(1);\n      if (euckr_lead !== 0x00) {\n        var lead = euckr_lead;\n        var pointer = null;\n        euckr_lead = 0x00;\n\n        if (inRange(lead, 0x81, 0xC6)) {\n          var temp = (26 + 26 + 126) * (lead - 0x81);\n          if (inRange(bite, 0x41, 0x5A)) {\n            pointer = temp + bite - 0x41;\n          } else if (inRange(bite, 0x61, 0x7A)) {\n            pointer = temp + 26 + bite - 0x61;\n          } else if (inRange(bite, 0x81, 0xFE)) {\n            pointer = temp + 26 + 26 + bite - 0x81;\n          }\n        }\n\n        if (inRange(lead, 0xC7, 0xFD) && inRange(bite, 0xA1, 0xFE)) {\n          pointer = (26 + 26 + 126) * (0xC7 - 0x81) + (lead - 0xC7) * 94 +\n            (bite - 0xA1);\n        }\n\n        var code_point = (pointer === null) ? null :\n              indexCodePointFor(pointer, indexes['euc-kr']);\n        if (pointer === null) {\n          byte_pointer.offset(-1);\n        }\n        if (code_point === null) {\n          return decoderError(fatal);\n        }\n        return code_point;\n      }\n\n      if (inRange(bite, 0x00, 0x7F)) {\n        return bite;\n      }\n\n      if (inRange(bite, 0x81, 0xFD)) {\n        euckr_lead = bite;\n        return null;\n      }\n\n      return decoderError(fatal);\n    };\n  }\n\n  /**\n   * @constructor\n   * @param {{fatal: boolean}} options\n   */\n  function EUCKREncoder(options) {\n    var fatal = options.fatal;\n    /**\n     * @param {ByteOutputStream} output_byte_stream Output byte stream.\n     * @param {CodePointInputStream} code_point_pointer Input stream.\n     * @return {number} The last byte emitted.\n     */\n    this.encode = function(output_byte_stream, code_point_pointer) {\n      var code_point = code_point_pointer.get();\n      if (code_point === EOF_code_point) {\n        return EOF_byte;\n      }\n      code_point_pointer.offset(1);\n      if (inRange(code_point, 0x0000, 0x007F)) {\n        return output_byte_stream.emit(code_point);\n      }\n      var pointer = indexPointerFor(code_point, indexes['euc-kr']);\n      if (pointer === null) {\n        return encoderError(code_point);\n      }\n      var lead, trail;\n      if (pointer < ((26 + 26 + 126) * (0xC7 - 0x81))) {\n        lead = div(pointer, (26 + 26 + 126)) + 0x81;\n        trail = pointer % (26 + 26 + 126);\n        var offset = trail < 26 ? 0x41 : trail < 26 + 26 ? 0x47 : 0x4D;\n        return output_byte_stream.emit(lead, trail + offset);\n      }\n      pointer = pointer - (26 + 26 + 126) * (0xC7 - 0x81);\n      lead = div(pointer, 94) + 0xC7;\n      trail = pointer % 94 + 0xA1;\n      return output_byte_stream.emit(lead, trail);\n    };\n  }\n\n  name_to_encoding['euc-kr'].getEncoder = function(options) {\n    return new EUCKREncoder(options);\n  };\n  name_to_encoding['euc-kr'].getDecoder = function(options) {\n    return new EUCKRDecoder(options);\n  };\n\n  // 12.2 iso-2022-kr\n\n  /**\n   * @constructor\n   * @param {{fatal: boolean}} options\n   */\n  function ISO2022KRDecoder(options) {\n    var fatal = options.fatal;\n    /** @enum */\n    var state = {\n      ASCII: 0,\n      escape_start: 1,\n      escape_middle: 2,\n      escape_end: 3,\n      lead: 4,\n      trail: 5\n    };\n    var /** @type {number} */ iso2022kr_state = state.ASCII,\n        /** @type {number} */ iso2022kr_lead = 0x00;\n    /**\n     * @param {ByteInputStream} byte_pointer\n     * @return {?number} The next code point decoded, or null if not enough\n     *     data exists in the input stream to decode a complete code point.\n     */\n    this.decode = function(byte_pointer) {\n      var bite = byte_pointer.get();\n      if (bite !== EOF_byte) {\n        byte_pointer.offset(1);\n      }\n      switch (iso2022kr_state) {\n      default:\n      case state.ASCII:\n        if (bite === 0x0E) {\n          iso2022kr_state = state.lead;\n          return null;\n        }\n        if (bite === 0x0F) {\n          return null;\n        }\n        if (bite === 0x1B) {\n          iso2022kr_state = state.escape_start;\n          return null;\n        }\n        if (inRange(bite, 0x00, 0x7F)) {\n          return bite;\n        }\n        if (bite === EOF_byte) {\n          return EOF_code_point;\n        }\n        return decoderError(fatal);\n      case state.escape_start:\n        if (bite === 0x24) {\n          iso2022kr_state = state.escape_middle;\n          return null;\n        }\n        if (bite !== EOF_byte) {\n          byte_pointer.offset(-1);\n        }\n        iso2022kr_state = state.ASCII;\n        return decoderError(fatal);\n      case state.escape_middle:\n        if (bite === 0x29) {\n          iso2022kr_state = state.escape_end;\n          return null;\n        }\n        if (bite === EOF_byte) {\n          byte_pointer.offset(-1);\n        } else {\n          byte_pointer.offset(-2);\n        }\n        iso2022kr_state = state.ASCII;\n        return decoderError(fatal);\n      case state.escape_end:\n        if (bite === 0x43) {\n          iso2022kr_state = state.ASCII;\n          return null;\n        }\n        if (bite === EOF_byte) {\n          byte_pointer.offset(-2);\n        } else {\n          byte_pointer.offset(-3);\n        }\n        iso2022kr_state = state.ASCII;\n        return decoderError(fatal);\n      case state.lead:\n        if (bite === 0x0A) {\n          iso2022kr_state = state.ASCII;\n          return decoderError(fatal, 0x000A);\n        }\n        if (bite === 0x0E) {\n          return null;\n        }\n        if (bite === 0x0F) {\n          iso2022kr_state = state.ASCII;\n          return null;\n        }\n        if (bite === EOF_byte) {\n          return EOF_code_point;\n        }\n        iso2022kr_lead = bite;\n        iso2022kr_state = state.trail;\n        return null;\n      case state.trail:\n        iso2022kr_state = state.lead;\n        if (bite === EOF_byte) {\n          return decoderError(fatal);\n        }\n        var code_point = null;\n        if (inRange(iso2022kr_lead, 0x21, 0x46) && inRange(bite, 0x21, 0x7E)) {\n          code_point = indexCodePointFor((26 + 26 + 126) *\n                                         (iso2022kr_lead - 1) +\n                                         26 + 26 + bite - 1,\n                                         indexes['euc-kr']);\n        } else if (inRange(iso2022kr_lead, 0x47, 0x7E) &&\n                   inRange(bite, 0x21, 0x7E)) {\n          code_point = indexCodePointFor((26 + 26 + 126) * (0xC7 - 0x81) +\n                                         (iso2022kr_lead - 0x47) * 94 +\n                                         (bite - 0x21),\n                                         indexes['euc-kr']);\n        }\n        if (code_point !== null) {\n          return code_point;\n        }\n        return decoderError(fatal);\n      }\n    };\n  }\n\n  /**\n   * @constructor\n   * @param {{fatal: boolean}} options\n   */\n  function ISO2022KREncoder(options) {\n    var fatal = options.fatal;\n    /** @enum */\n    var state = {\n      ASCII: 0,\n      lead: 1\n    };\n    var /** @type {boolean} */ iso2022kr_initialization = false,\n        /** @type {number} */ iso2022kr_state = state.ASCII;\n    /**\n     * @param {ByteOutputStream} output_byte_stream Output byte stream.\n     * @param {CodePointInputStream} code_point_pointer Input stream.\n     * @return {number} The last byte emitted.\n     */\n    this.encode = function(output_byte_stream, code_point_pointer) {\n      var code_point = code_point_pointer.get();\n      if (code_point === EOF_code_point) {\n        return EOF_byte;\n      }\n      if (!iso2022kr_initialization) {\n        iso2022kr_initialization = true;\n        output_byte_stream.emit(0x1B, 0x24, 0x29, 0x43);\n      }\n      code_point_pointer.offset(1);\n      if (inRange(code_point, 0x0000, 0x007F) &&\n          iso2022kr_state !== state.ASCII) {\n        code_point_pointer.offset(-1);\n        iso2022kr_state = state.ASCII;\n        return output_byte_stream.emit(0x0F);\n      }\n      if (inRange(code_point, 0x0000, 0x007F)) {\n        return output_byte_stream.emit(code_point);\n      }\n      if (iso2022kr_state !== state.lead) {\n        code_point_pointer.offset(-1);\n        iso2022kr_state = state.lead;\n        return output_byte_stream.emit(0x0E);\n      }\n      var pointer = indexPointerFor(code_point, indexes['euc-kr']);\n      if (pointer === null) {\n        return encoderError(code_point);\n      }\n      var lead, trail;\n      if (pointer < (26 + 26 + 126) * (0xC7 - 0x81)) {\n        lead = div(pointer, (26 + 26 + 126)) + 1;\n        trail = pointer % (26 + 26 + 126) - 26 - 26 + 1;\n        if (!inRange(lead, 0x21, 0x46) || !inRange(trail, 0x21, 0x7E)) {\n          return encoderError(code_point);\n        }\n        return output_byte_stream.emit(lead, trail);\n      }\n      pointer = pointer - (26 + 26 + 126) * (0xC7 - 0x81);\n      lead = div(pointer, 94) + 0x47;\n      trail = pointer % 94 + 0x21;\n      if (!inRange(lead, 0x47, 0x7E) || !inRange(trail, 0x21, 0x7E)) {\n        return encoderError(code_point);\n      }\n      return output_byte_stream.emit(lead, trail);\n    };\n  }\n\n  name_to_encoding['iso-2022-kr'].getEncoder = function(options) {\n    return new ISO2022KREncoder(options);\n  };\n  name_to_encoding['iso-2022-kr'].getDecoder = function(options) {\n    return new ISO2022KRDecoder(options);\n  };\n\n\n  //\n  // 13. Legacy utf-16 encodings\n  //\n\n  // 13.1 utf-16\n\n  /**\n   * @constructor\n   * @param {boolean} utf16_be True if big-endian, false if little-endian.\n   * @param {{fatal: boolean}} options\n   */\n  function UTF16Decoder(utf16_be, options) {\n    var fatal = options.fatal;\n    var /** @type {?number} */ utf16_lead_byte = null,\n        /** @type {?number} */ utf16_lead_surrogate = null;\n    /**\n     * @param {ByteInputStream} byte_pointer\n     * @return {?number} The next code point decoded, or null if not enough\n     *     data exists in the input stream to decode a complete code point.\n     */\n    this.decode = function(byte_pointer) {\n      var bite = byte_pointer.get();\n      if (bite === EOF_byte && utf16_lead_byte === null &&\n          utf16_lead_surrogate === null) {\n        return EOF_code_point;\n      }\n      if (bite === EOF_byte && (utf16_lead_byte !== null ||\n                                utf16_lead_surrogate !== null)) {\n        return decoderError(fatal);\n      }\n      byte_pointer.offset(1);\n      if (utf16_lead_byte === null) {\n        utf16_lead_byte = bite;\n        return null;\n      }\n      var code_point;\n      if (utf16_be) {\n        code_point = (utf16_lead_byte << 8) + bite;\n      } else {\n        code_point = (bite << 8) + utf16_lead_byte;\n      }\n      utf16_lead_byte = null;\n      if (utf16_lead_surrogate !== null) {\n        var lead_surrogate = utf16_lead_surrogate;\n        utf16_lead_surrogate = null;\n        if (inRange(code_point, 0xDC00, 0xDFFF)) {\n          return 0x10000 + (lead_surrogate - 0xD800) * 0x400 +\n            (code_point - 0xDC00);\n        }\n        byte_pointer.offset(-2);\n        return decoderError(fatal);\n      }\n      if (inRange(code_point, 0xD800, 0xDBFF)) {\n        utf16_lead_surrogate = code_point;\n        return null;\n      }\n      if (inRange(code_point, 0xDC00, 0xDFFF)) {\n        return decoderError(fatal);\n      }\n      return code_point;\n    };\n  }\n\n  /**\n   * @constructor\n   * @param {boolean} utf16_be True if big-endian, false if little-endian.\n   * @param {{fatal: boolean}} options\n   */\n  function UTF16Encoder(utf16_be, options) {\n    var fatal = options.fatal;\n    /**\n     * @param {ByteOutputStream} output_byte_stream Output byte stream.\n     * @param {CodePointInputStream} code_point_pointer Input stream.\n     * @return {number} The last byte emitted.\n     */\n    this.encode = function(output_byte_stream, code_point_pointer) {\n      function convert_to_bytes(code_unit) {\n        var byte1 = code_unit >> 8;\n        var byte2 = code_unit & 0x00FF;\n        if (utf16_be) {\n          return output_byte_stream.emit(byte1, byte2);\n        }\n        return output_byte_stream.emit(byte2, byte1);\n      }\n      var code_point = code_point_pointer.get();\n      if (code_point === EOF_code_point) {\n        return EOF_byte;\n      }\n      code_point_pointer.offset(1);\n      if (inRange(code_point, 0xD800, 0xDFFF)) {\n        encoderError(code_point);\n      }\n      if (code_point <= 0xFFFF) {\n        return convert_to_bytes(code_point);\n      }\n      var lead = div((code_point - 0x10000), 0x400) + 0xD800;\n      var trail = ((code_point - 0x10000) % 0x400) + 0xDC00;\n      convert_to_bytes(lead);\n      return convert_to_bytes(trail);\n    };\n  }\n\n  name_to_encoding['utf-16'].getEncoder = function(options) {\n    return new UTF16Encoder(false, options);\n  };\n  name_to_encoding['utf-16'].getDecoder = function(options) {\n    return new UTF16Decoder(false, options);\n  };\n\n  // 13.2 utf-16be\n  name_to_encoding['utf-16be'].getEncoder = function(options) {\n    return new UTF16Encoder(true, options);\n  };\n  name_to_encoding['utf-16be'].getDecoder = function(options) {\n    return new UTF16Decoder(true, options);\n  };\n\n\n  // NOTE: currently unused\n  function detectEncoding(label, input_stream) {\n    if (input_stream.match([0xFF, 0xFE])) {\n      input_stream.offset(2);\n      return 'utf-16';\n    }\n    if (input_stream.match([0xFE, 0xFF])) {\n      input_stream.offset(2);\n      return 'utf-16be';\n    }\n    if (input_stream.match([0xEF, 0xBB, 0xBF])) {\n      input_stream.offset(3);\n      return 'utf-8';\n    }\n    return label;\n  }\n\n  //\n  // Implementation of Text Encoding Web API\n  //\n\n  /** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n  /**\n   * @constructor\n   * @param {string=} opt_encoding The label of the encoding;\n   *     defaults to 'utf-8'.\n   * @param {{fatal: boolean}=} options\n   */\n  function TextEncoder(opt_encoding, options) {\n    if (!this || this === global) {\n      return new TextEncoder(opt_encoding, options);\n    }\n    opt_encoding = opt_encoding ? String(opt_encoding) : DEFAULT_ENCODING;\n    options = Object(options);\n    /** @private */\n    this._encoding = getEncoding(opt_encoding); // may throw\n    /** @private @type {boolean} */\n    this._streaming = false;\n    /** @private */\n    this._encoder = null;\n    /** @private @type {{fatal: boolean}=} */\n    this._options = { fatal: Boolean(options.fatal) };\n\n    if (Object.defineProperty) {\n      Object.defineProperty(\n        this, 'encoding',\n        { get: function() { return this._encoding.name; } });\n    } else {\n      this.encoding = this._encoding.name;\n    }\n\n    return this;\n  }\n\n  TextEncoder.prototype = {\n    /**\n     * @param {string=} opt_string The string to encode.\n     * @param {{stream: boolean}=} options\n     */\n    encode: function encode(opt_string, options) {\n      opt_string = opt_string ? String(opt_string) : '';\n      options = Object(options);\n      // TODO: any options?\n      if (!this._streaming) {\n        this._encoder = this._encoding.getEncoder(this._options);\n      }\n      this._streaming = Boolean(options.stream);\n\n      var bytes = [];\n      var output_stream = new ByteOutputStream(bytes);\n      var input_stream = new CodePointInputStream(opt_string);\n      while (input_stream.get() !== EOF_code_point) {\n        this._encoder.encode(output_stream, input_stream);\n      }\n      if (!this._streaming) {\n        var last_byte;\n        do {\n          last_byte = this._encoder.encode(output_stream, input_stream);\n        } while (last_byte !== EOF_byte);\n        this._encoder = null;\n      }\n      return new Uint8Array(bytes);\n    }\n  };\n\n\n  /**\n   * @constructor\n   * @param {string=} opt_encoding The label of the encoding;\n   *     defaults to 'utf-8'.\n   * @param {{fatal: boolean}=} options\n   */\n  function TextDecoder(opt_encoding, options) {\n    if (!this || this === global) {\n      return new TextDecoder(opt_encoding, options);\n    }\n    opt_encoding = opt_encoding ? String(opt_encoding) : DEFAULT_ENCODING;\n    options = Object(options);\n    /** @private */\n    this._encoding = getEncoding(opt_encoding); // may throw\n    /** @private @type {boolean} */\n    this._streaming = false;\n    /** @private */\n    this._decoder = null;\n    /** @private @type {{fatal: boolean}=} */\n    this._options = { fatal: Boolean(options.fatal) };\n\n    if (Object.defineProperty) {\n      Object.defineProperty(\n        this, 'encoding',\n        { get: function() { return this._encoding.name; } });\n    } else {\n      this.encoding = this._encoding.name;\n    }\n\n    return this;\n  }\n\n  // TODO: Issue if input byte stream is offset by decoder\n  // TODO: BOM detection will not work if stream header spans multiple calls\n  // (last N bytes of previous stream may need to be retained?)\n  TextDecoder.prototype = {\n    /**\n     * @param {ArrayBufferView=} opt_view The buffer of bytes to decode.\n     * @param {{stream: boolean}=} options\n     */\n    decode: function decode(opt_view, options) {\n      if (opt_view && !('buffer' in opt_view && 'byteOffset' in opt_view &&\n                        'byteLength' in opt_view)) {\n        throw new TypeError('Expected ArrayBufferView');\n      } else if (!opt_view) {\n        opt_view = new Uint8Array(0);\n      }\n      options = Object(options);\n\n      if (!this._streaming) {\n        this._decoder = this._encoding.getDecoder(this._options);\n      }\n      this._streaming = Boolean(options.stream);\n\n      // TODO: encoding detection via BOM?\n\n      var bytes = new Uint8Array(opt_view.buffer,\n                                 opt_view.byteOffset,\n                                 opt_view.byteLength);\n      var input_stream = new ByteInputStream(bytes);\n\n      var detected = detectEncoding(this._encoding.name, input_stream);\n      if (getEncoding(detected) !== this._encoding) {\n        throw new Error('BOM mismatch'); // TODO: what to do here?\n      }\n\n      var output_stream = new CodePointOutputStream(), code_point;\n      while (input_stream.get() !== EOF_byte) {\n        code_point = this._decoder.decode(input_stream);\n        if (code_point !== null && code_point !== EOF_code_point) {\n          output_stream.emit(code_point);\n        }\n      }\n      if (!this._streaming) {\n        do {\n          code_point = this._decoder.decode(input_stream);\n          if (code_point !== null && code_point !== EOF_code_point) {\n            output_stream.emit(code_point);\n          }\n        } while (code_point !== EOF_code_point);\n        this._decoder = null;\n      }\n      return output_stream.string();\n    }\n  };\n\n  global['TextEncoder'] = global['TextEncoder'] || TextEncoder;\n  global['TextDecoder'] = global['TextDecoder'] || TextDecoder;\n}(this));\n","/*\n * BioDigital Human RPC Messaging Client\n *\n * V2\n *\n * Built on 2016-08-24\n *\n * Copyright 2016, BioDigital, Inc.\n */\n\n!function(){\"use strict\";window.HumanAPI=function a(b){var c=this;\"string\"==typeof b&&(b={iframeId:b}),b.onReady=function(){c._ready=!0;for(var a=0,b=c._readyCallbacks.length;b>a;a++)c._readyCallbacks[a](),c._readyCallbacks.length=0},c._rpc=new a.WindowRPCClient(b),c._ready=!1,c._readyCallbacks=[]},HumanAPI.prototype.send=function(a,b,c){return\"function\"==typeof b&&(c=b,b={}),\"function\"==typeof c&&(c=c.bind(this)),this._rpc.call(a,b||{},c),this},HumanAPI.prototype.on=function(a,b){return\"function\"==typeof b&&(b=b.bind(this)),\"human.ready\"===a?(this._ready?b():this._readyCallbacks.push(b),this):(this._rpc.call(\"apiEvents.on\",a,b,!1),this)},HumanAPI.prototype.once=function(a,b){return\"function\"==typeof b&&(b=b.bind(this)),\"human.ready\"===a?(this._ready?b():this._readyCallbacks.push(b),this):(this._rpc.call(\"apiEvents.once\",a,b,!0),this)}}(),function(){\"use strict\";HumanAPI.Map=function(a,b){this.items=a||[];var c=b||0,d=c+1;this.addItem=function(){var a;if(2===arguments.length){var b=arguments[0];if(a=arguments[1],this.items[b])throw\"ID clash: '\"+b+\"'\";return this.items[b]=a,b}for(;;){a=arguments[0];var c=d++;if(!this.items[c])return this.items[c]=a,c}},this.removeItem=function(a){delete this.items[a]}}}(),function(){\"use strict\";HumanAPI.WindowRPCClient=function(a){if(!a.iframeId)throw\"config expected: iframeId\";if(this._iframe=document.getElementById(a.iframeId),!this._iframe)throw\"iframe not found: '\"+a.iframeId+\"'\";if(!this._iframe.contentWindow)throw\"element is not an iframe: '\"+a.iframeId+\"'\";this.destroyed=!1,this._handleMap=new HumanAPI.Map({},Date.now()),this._subs={},this._ready=!1,this._messageBuffer=[],this._messageBufferConnected=[],this._connect(a.onUnsupported,a.onConnected,a.onReady)},HumanAPI.WindowRPCClient.prototype._connect=function(a,b,c){var d=null,e=this,f=100,g=function(){h(),d=setInterval(function(){return!e.destroyed&&e._iframe&&e._iframe.contentWindow?void e._iframe.contentWindow.postMessage(JSON.stringify({action:\"connect\"}),\"*\"):void h()},f)},h=function(){d&&(clearInterval(d),d=null)};window.addEventListener(\"message\",function(d){var f=d.data;switch(f){case\"unsupported\":\"function\"==typeof a&&a(d.data);break;default:var g;try{g=JSON.parse(f)}catch(i){return}if(g.message){var j=g.message;switch(j){case\"connected\":e._connected=!0,e._sendQueuedMessages(!0),\"function\"==typeof b&&b();break;case\"status\":switch(g.status){case\"ready\":e._ready=!0,h(),e._sendQueuedMessages(),\"function\"==typeof c&&c()}}}if(g.results||g.response){var k,l=g.results||g.response;for(var m in l)l.hasOwnProperty(m)&&(k=l[m],e._subs[m]&&e.set(m,k))}g.error}},!1),e._iframe.addEventListener(\"load\",g),e._iframe.addEventListener(\"unload\",h),g()},HumanAPI.WindowRPCClient.prototype._sendQueuedMessages=function(a){for(var b=a?this._messageBufferConnected:this._messageBuffer;b.length>0;){var c=b.pop();this._send(c,c.ok,c.once)}},HumanAPI.WindowRPCClient.prototype.call=function(a,b,c,d){var e={call:a,params:b,ok:c,once:d},f=b.connected?this._messageBufferConnected:this._messageBuffer;this._ready||this._connected&&b.connected?this._send(e,c,d):f.unshift(e)},HumanAPI.WindowRPCClient.prototype._send=function(a,b,c){if(b){var d=this,e=this._on(function(a){(void 0===c||c===!0)&&d._off(e),b.call(d,a)});a.id=e,this._sendMessage(a)}else this._sendMessage(a)},HumanAPI.WindowRPCClient.prototype._sendMessage=function(a){this._onSend&&this._onSend(a),this.destroyed||this._iframe.contentWindow.postMessage(JSON.stringify(a),\"*\")},HumanAPI.WindowRPCClient.prototype.set=function(a,b){var c=this._subs[a];c&&c.call(this,b)},HumanAPI.WindowRPCClient.prototype._on=function(a){var b=this._handleMap.addItem();return this._subs[b]=a,b},HumanAPI.WindowRPCClient.prototype._off=function(a){delete this._subs[a],this._handleMap.removeItem(a)},HumanAPI.WindowRPCClient.prototype.destroy=function(){this.destroyed=!0}}();","!function(n,t){\"object\"==typeof exports&&\"undefined\"!=typeof module?t(exports):\"function\"==typeof define&&define.amd?define([\"exports\"],t):t((n=n||self).immer={})}(this,(function(n){function t(n){for(var t=arguments.length,r=Array(t>1?t-1:0),e=1;e<t;e++)r[e-1]=arguments[e];throw Error(\"[Immer] minified error nr: \"+n+(r.length?\" \"+r.join(\",\"):\"\")+\". Find the full error at: https://bit.ly/3cXEKWf\")}function r(n){return!!n&&!!n[B]}function e(n){return!!n&&(function(n){if(!n||\"object\"!=typeof n)return!1;var t=Object.getPrototypeOf(n);return!t||t===Object.prototype}(n)||Array.isArray(n)||!!n[q]||!!n.constructor[q]||c(n)||v(n))}function i(n,t,r){void 0===r&&(r=!1),0===u(n)?(r?Object.keys:H)(n).forEach((function(r){return t(r,n[r],n)})):n.forEach((function(r,e){return t(e,r,n)}))}function u(n){var t=n[B];return t?t.t>3?t.t-4:t.t:Array.isArray(n)?1:c(n)?2:v(n)?3:0}function o(n,t){return 2===u(n)?n.has(t):Object.prototype.hasOwnProperty.call(n,t)}function f(n,t){return 2===u(n)?n.get(t):n[t]}function a(n,t){return n===t?0!==n||1/n==1/t:n!=n&&t!=t}function c(n){return C&&n instanceof Map}function v(n){return I&&n instanceof Set}function s(n){return n.i||n.u}function p(n,r){if(void 0===r&&(r=!1),Array.isArray(n))return n.slice();var e=Object.create(Object.getPrototypeOf(n));return i(n,(function(i){if(i!==B){var u=Object.getOwnPropertyDescriptor(n,i),o=u.value;u.get&&(r||t(1),o=u.get.call(n)),u.enumerable?e[i]=o:Object.defineProperty(e,i,{value:o,writable:!0,configurable:!0})}})),e}function h(n,t){r(n)||d(n)||!e(n)||(u(n)>1&&(n.set=n.add=n.clear=n.delete=l),Object.freeze(n),t&&i(n,(function(n,t){return h(t,!0)}),!0))}function l(){t(2)}function d(n){return null==n||\"object\"!=typeof n||Object.isFrozen(n)}function _(n){var r=L[n];return r||t(19,n),r}function y(n,t){L[n]=t}function b(){return N}function m(n,t){t&&(_(\"Patches\"),n.o=[],n.v=[],n.s=t)}function j(n){O(n),n.p.forEach(w),n.p=null}function O(n){n===N&&(N=n.h)}function S(n){return N={p:[],h:N,l:n,_:!0,m:0}}function w(n){var t=n[B];0===t.t||1===t.t?t.j():t.O=!0}function P(n,r){r.m=r.p.length;var i=r.p[0],u=void 0!==n&&n!==i;return r.l.S||_(\"ES5\").P(r,n,u),u?(i[B].M&&(j(r),t(4)),e(n)&&(n=M(r,n),r.h||A(r,n)),r.o&&_(\"Patches\").g(i[B],n,r.o,r.v)):n=M(r,i,[]),j(r),r.o&&r.s(r.o,r.v),n!==X?n:void 0}function M(n,t,r){if(d(t))return t;var e=t[B];if(!e)return i(t,(function(i,u){return g(n,e,t,i,u,r)}),!0),t;if(e.A!==n)return t;if(!e.M)return A(n,e.u,!0),e.u;if(!e.R){e.R=!0,e.A.m--;var u=4===e.t||5===e.t?e.i=p(e.k,!0):e.i;i(u,(function(t,i){return g(n,e,u,t,i,r)})),A(n,u,!1),r&&n.o&&_(\"Patches\").F(e,r,n.o,n.v)}return e.i}function g(n,t,i,c,v,s){if(r(v)){var p=M(n,v,s&&t&&3!==t.t&&!o(t.D,c)?s.concat(c):void 0);if(l=c,d=p,2===(_=u(h=i))?h.set(l,d):3===_?(h.delete(l),h.add(d)):h[l]=d,!r(p))return;n._=!1}var h,l,d,_;if((!t||!a(v,f(t.u,c)))&&e(v)){if(!n.l.J&&n.m<1)return;M(n,v),t&&t.A.h||A(n,v)}}function A(n,t,r){void 0===r&&(r=!1),n.l.J&&n._&&h(t,r)}function x(n,t){var r=n[B],e=Reflect.getOwnPropertyDescriptor(r?s(r):n,t);return e&&e.value}function z(n){if(!n.M){if(n.M=!0,0===n.t||1===n.t){var t=n.i=p(n.u);i(n.p,(function(n,r){t[n]=r})),n.p=void 0}n.h&&z(n.h)}}function E(n){n.i||(n.i=p(n.u))}function R(n,t,r){var e=c(t)?_(\"MapSet\").K(t,r):v(t)?_(\"MapSet\").N(t,r):n.S?function(n,t){var r=Array.isArray(n),e={t:r?1:0,A:t?t.A:b(),M:!1,R:!1,D:{},h:t,u:n,k:null,p:{},i:null,j:null,$:!1},i=e,u=Q;r&&(i=[e],u=T);var o=Proxy.revocable(i,u),f=o.revoke,a=o.proxy;return e.k=a,e.j=f,a}(t,r):_(\"ES5\").C(t,r);return(r?r.A:b()).p.push(e),e}function k(n,t){n.S?z(t):_(\"ES5\").I(t)}function F(){function n(n,t){var r=n[B];if(r&&!r.W){r.W=!0;var e=n[t];return r.W=!1,e}return n[t]}function u(n){n.M||(n.M=!0,n.h&&u(n.h))}function f(n){n.i||(n.i=c(n.u))}function c(n){var t=n&&n[B];if(t){t.W=!0;var r=p(t.k,!0);return t.W=!1,r}return p(n)}function v(n){for(var t=n.length-1;t>=0;t--){var r=n[t][B];if(!r.M)switch(r.t){case 5:l(r)&&u(r);break;case 4:h(r)&&u(r)}}}function h(n){for(var t=n.u,r=n.k,e=Object.keys(r),i=e.length-1;i>=0;i--){var u=e[i],f=t[u];if(void 0===f&&!o(t,u))return!0;var c=r[u],v=c&&c[B];if(v?v.u!==f:!a(c,f))return!0}return e.length!==Object.keys(t).length}function l(n){var t=n.k;if(t.length!==n.u.length)return!0;var r=Object.getOwnPropertyDescriptor(t,t.length-1);return!(!r||r.get)}function d(n){n.O&&t(3,JSON.stringify(s(n)))}var _={};y(\"ES5\",{C:function(t,r){var o=Array.isArray(t),v=c(t);i(v,(function(r){!function(t,r,i){var o=_[r];o?o.enumerable=i:_[r]=o={enumerable:i,get:function(){return function(t,r){d(t);var i=n(s(t),r);return t.W?i:i===n(t.u,r)&&e(i)?(f(t),t.i[r]=R(t.A.l,i,t)):i}(this[B],r)},set:function(t){!function(t,r,e){if(d(t),t.D[r]=!0,!t.M){if(a(e,n(s(t),r)))return;u(t),f(t)}t.i[r]=e}(this[B],r,t)}},Object.defineProperty(t,r,o)}(v,r,o||function(n,t){var r=Object.getOwnPropertyDescriptor(n,t);return!(!r||!r.enumerable)}(t,r))}));var p={t:o?5:4,A:r?r.A:b(),M:!1,W:!1,R:!1,D:{},h:r,u:t,k:v,i:null,O:!1,$:!1};return Object.defineProperty(v,B,{value:p,writable:!0}),v},I:u,P:function(n,t,e){n.p.forEach((function(n){n[B].W=!0})),e?r(t)&&t[B].A===n&&v(n.p):(n.o&&function n(t){if(t&&\"object\"==typeof t){var r=t[B];if(r){var e=r.u,f=r.k,a=r.D,c=r.t;if(4===c)i(f,(function(t){t!==B&&(void 0!==e[t]||o(e,t)?a[t]||n(f[t]):(a[t]=!0,u(r)))})),i(e,(function(n){void 0!==f[n]||o(f,n)||(a[n]=!1,u(r))}));else if(5===c){if(l(r)&&(u(r),a.length=!0),f.length<e.length)for(var v=f.length;v<e.length;v++)a[v]=!1;else for(var s=e.length;s<f.length;s++)a[s]=!0;for(var p=Math.min(f.length,e.length),h=0;h<p;h++)void 0===a[h]&&n(f[h])}}}}(n.p[0]),v(n.p))}})}function D(){function n(t){if(!t||\"object\"!=typeof t)return t;if(Array.isArray(t))return t.map(n);if(c(t))return new Map(Array.from(t.entries()).map((function(t){return[t[0],n(t[1])]})));if(v(t))return new Set(Array.from(t).map(n));var r=Object.create(Object.getPrototypeOf(t));for(var e in t)r[e]=n(t[e]);return r}function e(t){return r(t)?n(t):t}var a=\"add\";y(\"Patches\",{X:function(r,e){return e.forEach((function(e){for(var i=e.path,o=e.op,c=r,v=0;v<i.length-1;v++)\"object\"!=typeof(c=f(c,i[v]))&&t(15,i.join(\"/\"));var s=u(c),p=n(e.value),h=i[i.length-1];switch(o){case\"replace\":switch(s){case 2:return c.set(h,p);case 3:t(16);default:return c[h]=p}case a:switch(s){case 1:return c.splice(h,0,p);case 2:return c.set(h,p);case 3:return c.add(p);default:return c[h]=p}case\"remove\":switch(s){case 1:return c.splice(h,1);case 2:return c.delete(h);case 3:return c.delete(e.value);default:return delete c[h]}default:t(17,o)}})),r},F:function(n,t,r,u){switch(n.t){case 0:case 4:case 2:return function(n,t,r,u){var c=n.u,v=n.i;i(n.D,(function(n,i){var s=f(c,n),p=f(v,n),h=i?o(c,n)?\"replace\":a:\"remove\";if(s!==p||\"replace\"!==h){var l=t.concat(n);r.push(\"remove\"===h?{op:h,path:l}:{op:h,path:l,value:p}),u.push(h===a?{op:\"remove\",path:l}:\"remove\"===h?{op:a,path:l,value:e(s)}:{op:\"replace\",path:l,value:e(s)})}}))}(n,t,r,u);case 5:case 1:return function(n,t,r,i){var u=n.u,o=n.D,f=n.i;if(f.length<u.length){var c=[f,u];u=c[0],f=c[1];var v=[i,r];r=v[0],i=v[1]}for(var s=f.length-u.length,p=0;u[p]===f[p]&&p<u.length;)++p;for(var h=u.length;h>p&&u[h-1]===f[h+s-1];)--h;for(var l=p;l<h;++l)if(o[l]&&f[l]!==u[l]){var d=t.concat([l]);r.push({op:\"replace\",path:d,value:e(f[l])}),i.push({op:\"replace\",path:d,value:e(u[l])})}for(var _=r.length,y=h+s-1;y>=h;--y){var b=t.concat([y]);r[_+y-h]={op:a,path:b,value:e(f[y])},i.push({op:\"remove\",path:b})}}(n,t,r,u);case 3:return function(n,t,r,e){var i=n.u,u=n.i,o=0;i.forEach((function(n){if(!u.has(n)){var i=t.concat([o]);r.push({op:\"remove\",path:i,value:n}),e.unshift({op:a,path:i,value:n})}o++})),o=0,u.forEach((function(n){if(!i.has(n)){var u=t.concat([o]);r.push({op:a,path:u,value:n}),e.unshift({op:\"remove\",path:u,value:n})}o++}))}(n,t,r,u)}},g:function(n,t,r,e){r.push({op:\"replace\",path:[],value:t}),e.push({op:\"replace\",path:[],value:n.u})}})}function J(){function n(n,t){function r(){this.constructor=n}o(n,t),n.prototype=(r.prototype=t.prototype,new r)}function r(n){n.i||(n.D=new Map,n.i=new Map(n.u))}function i(n){n.i||(n.i=new Set,n.u.forEach((function(t){if(e(t)){var r=R(n.A.l,t,n);n.p.set(t,r),n.i.add(r)}else n.i.add(t)})))}function u(n){n.O&&t(3,JSON.stringify(s(n)))}var o=function(n,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var r in t)t.hasOwnProperty(r)&&(n[r]=t[r])})(n,t)},f=function(){function t(n,t){return this[B]={t:2,h:t,A:t?t.A:b(),M:!1,R:!1,i:void 0,D:void 0,u:n,k:this,$:!1,O:!1},this}n(t,Map);var i=t.prototype;return Object.defineProperty(i,\"size\",{get:function(){return s(this[B]).size}}),i.has=function(n){return s(this[B]).has(n)},i.set=function(n,t){var e=this[B];return u(e),s(e).get(n)!==t&&(r(e),k(e.A.l,e),e.D.set(n,!0),e.i.set(n,t),e.D.set(n,!0)),this},i.delete=function(n){if(!this.has(n))return!1;var t=this[B];return u(t),r(t),k(t.A.l,t),t.D.set(n,!1),t.i.delete(n),!0},i.clear=function(){var n=this[B];return u(n),r(n),k(n.A.l,n),n.D=new Map,n.i.clear()},i.forEach=function(n,t){var r=this;s(this[B]).forEach((function(e,i){n.call(t,r.get(i),i,r)}))},i.get=function(n){var t=this[B];u(t);var i=s(t).get(n);if(t.R||!e(i))return i;if(i!==t.u.get(n))return i;var o=R(t.A.l,i,t);return r(t),t.i.set(n,o),o},i.keys=function(){return s(this[B]).keys()},i.values=function(){var n,t=this,r=this.keys();return(n={})[G]=function(){return t.values()},n.next=function(){var n=r.next();return n.done?n:{done:!1,value:t.get(n.value)}},n},i.entries=function(){var n,t=this,r=this.keys();return(n={})[G]=function(){return t.entries()},n.next=function(){var n=r.next();if(n.done)return n;var e=t.get(n.value);return{done:!1,value:[n.value,e]}},n},i[G]=function(){return this.entries()},t}(),a=function(){function t(n,t){return this[B]={t:3,h:t,A:t?t.A:b(),M:!1,R:!1,i:void 0,u:n,k:this,p:new Map,O:!1,$:!1},this}n(t,Set);var r=t.prototype;return Object.defineProperty(r,\"size\",{get:function(){return s(this[B]).size}}),r.has=function(n){var t=this[B];return u(t),t.i?!!t.i.has(n)||!(!t.p.has(n)||!t.i.has(t.p.get(n))):t.u.has(n)},r.add=function(n){var t=this[B];return u(t),this.has(n)||(i(t),k(t.A.l,t),t.i.add(n)),this},r.delete=function(n){if(!this.has(n))return!1;var t=this[B];return u(t),i(t),k(t.A.l,t),t.i.delete(n)||!!t.p.has(n)&&t.i.delete(t.p.get(n))},r.clear=function(){var n=this[B];return u(n),i(n),k(n.A.l,n),n.i.clear()},r.values=function(){var n=this[B];return u(n),i(n),n.i.values()},r.entries=function(){var n=this[B];return u(n),i(n),n.i.entries()},r.keys=function(){return this.values()},r[G]=function(){return this.values()},r.forEach=function(n,t){for(var r=this.values(),e=r.next();!e.done;)n.call(t,e.value,e.value,this),e=r.next()},t}();y(\"MapSet\",{K:function(n,t){return new f(n,t)},N:function(n,t){return new a(n,t)}})}var K,N,$=\"undefined\"!=typeof Symbol&&\"symbol\"==typeof Symbol(\"x\"),C=\"undefined\"!=typeof Map,I=\"undefined\"!=typeof Set,W=\"undefined\"!=typeof Proxy&&void 0!==Proxy.revocable&&\"undefined\"!=typeof Reflect,X=$?Symbol(\"immer-nothing\"):((K={})[\"immer-nothing\"]=!0,K),q=$?Symbol(\"immer-draftable\"):\"__$immer_draftable\",B=$?Symbol(\"immer-state\"):\"__$immer_state\",G=\"undefined\"!=typeof Symbol&&Symbol.iterator||\"@@iterator\",H=\"undefined\"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(n){return Object.getOwnPropertyNames(n).concat(Object.getOwnPropertySymbols(n))}:Object.getOwnPropertyNames,L={},Q={get:function(n,t){if(t===B)return n;var r=n.p;if(!n.M&&o(r,t))return r[t];var i=s(n)[t];if(n.R||!e(i))return i;if(n.M){if(i!==x(n.u,t))return i;r=n.i}return r[t]=R(n.A.l,i,n)},has:function(n,t){return t in s(n)},ownKeys:function(n){return Reflect.ownKeys(s(n))},set:function(n,t,r){if(!n.M){var e=x(n.u,t);if(r?a(e,r)||r===n.p[t]:a(e,r)&&t in n.u)return!0;E(n),z(n)}return n.D[t]=!0,n.i[t]=r,!0},deleteProperty:function(n,t){return void 0!==x(n.u,t)||t in n.u?(n.D[t]=!1,E(n),z(n)):n.D[t]&&delete n.D[t],n.i&&delete n.i[t],!0},getOwnPropertyDescriptor:function(n,t){var r=s(n),e=Reflect.getOwnPropertyDescriptor(r,t);return e&&(e.writable=!0,e.configurable=1!==n.t||\"length\"!==t),e},defineProperty:function(){t(11)},getPrototypeOf:function(n){return Object.getPrototypeOf(n.u)},setPrototypeOf:function(){t(12)}},T={};i(Q,(function(n,t){T[n]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),T.deleteProperty=function(n,t){return Q.deleteProperty.call(this,n[0],t)},T.set=function(n,t,r){return Q.set.call(this,n[0],t,r,n[0])};var U=function(){function n(n){this.S=W,this.J=!1,\"boolean\"==typeof(null==n?void 0:n.useProxies)&&this.setUseProxies(n.useProxies),\"boolean\"==typeof(null==n?void 0:n.autoFreeze)&&this.setAutoFreeze(n.autoFreeze),this.produce=this.produce.bind(this),this.produceWithPatches=this.produceWithPatches.bind(this)}var i=n.prototype;return i.produce=function(n,r,i){if(\"function\"==typeof n&&\"function\"!=typeof r){var u=r;r=n;var o=this;return function(n){var t=this;void 0===n&&(n=u);for(var e=arguments.length,i=Array(e>1?e-1:0),f=1;f<e;f++)i[f-1]=arguments[f];return o.produce(n,(function(n){var e;return(e=r).call.apply(e,[t,n].concat(i))}))}}var f;if(\"function\"!=typeof r&&t(6),void 0!==i&&\"function\"!=typeof i&&t(7),e(n)){var a=S(this),c=R(this,n,void 0),v=!0;try{f=r(c),v=!1}finally{v?j(a):O(a)}return\"undefined\"!=typeof Promise&&f instanceof Promise?f.then((function(n){return m(a,i),P(n,a)}),(function(n){throw j(a),n})):(m(a,i),P(f,a))}if((f=r(n))!==X)return void 0===f&&(f=n),this.J&&h(f,!0),f},i.produceWithPatches=function(n,t){var r,e,i=this;return\"function\"==typeof n?function(t){for(var r=arguments.length,e=Array(r>1?r-1:0),u=1;u<r;u++)e[u-1]=arguments[u];return i.produceWithPatches(t,(function(t){return n.apply(void 0,[t].concat(e))}))}:[this.produce(n,t,(function(n,t){r=n,e=t})),r,e]},i.createDraft=function(n){e(n)||t(8);var r=S(this),i=R(this,n,void 0);return i[B].$=!0,O(r),i},i.finishDraft=function(n,t){var r=(n&&n[B]).A;return m(r,t),P(void 0,r)},i.setAutoFreeze=function(n){this.J=n},i.setUseProxies=function(n){W||t(20),this.S=n},i.applyPatches=function(n,t){var e;for(e=t.length-1;e>=0;e--){var i=t[e];if(0===i.path.length&&\"replace\"===i.op){n=i.value;break}}var u=_(\"Patches\").X;return r(n)?u(n,t):this.produce(n,(function(n){return u(n,t.slice(e+1))}))},n}(),V=new U,Y=V.produce,Z=V.produceWithPatches.bind(V),nn=V.setAutoFreeze.bind(V),tn=V.setUseProxies.bind(V),rn=V.applyPatches.bind(V),en=V.createDraft.bind(V),un=V.finishDraft.bind(V);n.Immer=U,n.applyPatches=rn,n.castDraft=function(n){return n},n.castImmutable=function(n){return n},n.createDraft=en,n.default=Y,n.enableAllPlugins=function(){F(),J(),D()},n.enableES5=F,n.enableMapSet=J,n.enablePatches=D,n.finishDraft=un,n.immerable=q,n.isDraft=r,n.isDraftable=e,n.nothing=X,n.original=function(n){if(n&&n[B])return n[B].u},n.produce=Y,n.produceWithPatches=Z,n.setAutoFreeze=nn,n.setUseProxies=tn,Object.defineProperty(n,\"__esModule\",{value:!0})}));\n//# sourceMappingURL=immer.umd.production.min.js.map\n"],"sourceRoot":""}