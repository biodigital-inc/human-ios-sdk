#if 0
#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
#ifndef HUMANKIT_SWIFT_H
#define HUMANKIT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="HumanKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
/// Enumerated background option possible values
typedef SWIFT_ENUM(NSInteger, BackgroundOptions, open) {
/// a circular gradient from the center to the outside of the screen
  BackgroundOptionsRadial = 0,
/// a linear gradient from the top to the bottom of the screen
  BackgroundOptionsLinear = 1,
};

@class NSString;

/// Camera object
SWIFT_CLASS("_TtC8HumanKit8HKCamera")
@interface HKCamera : NSObject
/// Camera position [x,y,z]
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull eye;
/// Look vector [x,y,z]
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull look;
/// Up vector [x,y,z]
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull up;
/// The current zoom factor of the camera
@property (nonatomic) double zoomFactor;
/// Reset camera to original position
/// since:
/// SDK 2.0
- (void)reset;
/// Pan camera by offset in world space.
/// \param x offset on x axis
///
/// \param y offset on y axis
///
/// \param z offset on z axis
///
- (void)panWithX:(double)x y:(double)y z:(double)z;
/// Zoom the camera in and out of its point of focus.
/// <ul>
///   <li>
///     : Zoom factor between 0 and 1
///   </li>
/// </ul>
- (void)zoom:(double)factor;
/// Orbit around camera’s current point of focus.
/// \param yaw Yaw angle (degrees)
///
/// \param pitch Pitch angle (degrees)
///
/// \param duration Time of orbit animation (seconds)
///
- (void)orbitWithYaw:(float)yaw pitch:(float)pitch duration:(float)duration;
/// Move the camera, all values are optional
/// \param eyeIn The new camera postion.
///
/// \param lookIn The new camera look vector.
///
/// \param upIn The new camera up vector.
///
/// \param animated If true, camera will animate from current position to new position, default is true
///
- (void)setWithEyeIn:(NSArray<NSNumber *> * _Nullable)eyeIn lookIn:(NSArray<NSNumber *> * _Nullable)lookIn upIn:(NSArray<NSNumber *> * _Nullable)upIn animated:(BOOL)animated;
/// Animates camera to object specified by its id.
/// \param objectId Object id specified by string
///
- (void)animateToObjectId:(NSString * _Nonnull)objectId;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// HKChapter object
SWIFT_CLASS("_TtC8HumanKit9HKChapter")
@interface HKChapter : NSObject
/// chapter title
@property (nonatomic, copy) NSString * _Nonnull title;
/// chapter description text
@property (nonatomic, copy) NSString * _Nonnull text;
/// chapter order, starts at 0
@property (nonatomic) NSInteger index;
/// true if there is animation in this chapter
@property (nonatomic) BOOL animated;
/// true if there is looping animation in this chapter
@property (nonatomic) BOOL loops;
/// the duration of the animation in this chapter
@property (nonatomic) double duration;
/// contains an image url if the chapter has a thumbnail image
@property (nonatomic, copy) NSString * _Nonnull thumbnail;
/// contains a list of image urls if the chapter contains static images
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull images;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIColor;

/// HKColor object for use with scene.colorObject()
SWIFT_CLASS("_TtC8HumanKit7HKColor")
@interface HKColor : NSObject
/// initialize an HKColor object with a UIColor
/// since:
/// SDK 2.0.1
/// \param color initial UIColor
///
- (nonnull instancetype)init:(UIColor * _Nullable)color OBJC_DESIGNATED_INITIALIZER;
/// tint color as UIColor
@property (nonatomic, strong) UIColor * _Nonnull tint;
/// saturation -1.0 to 1.0, default is 0.0
@property (nonatomic) CGFloat saturation;
/// opacity 0.0 to 1.0, default is 1.0
@property (nonatomic) CGFloat opacity;
/// brightness -1.0 to 1.0, default is 0.0
@property (nonatomic) CGFloat brightness;
/// contrast -1.0 to 1.0, default is 0.0
@property (nonatomic) CGFloat contrast;
/// Set all of the variables to random settings, for demonstration purposes
- (void)randomColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol HKHumanDelegate;
@class HKScene;
@class HKTimeline;
@class HKUI;
@class HKLabels;
@class HKQuiz;
@class UIView;
enum HumanUIOptions : NSInteger;

/// The BioDigital Human 3D View object and API
SWIFT_CLASS("_TtC8HumanKit7HKHuman")
@interface HKHuman : NSObject
/// The HKHumanDelegate object
/// <ul>
///   <li>
///     Set this to have access to the callback functions in your app
///   </li>
/// </ul>
@property (nonatomic, weak) id <HKHumanDelegate> _Nullable delegate;
/// HKScene object provides information and control of the 3D scene
@property (nonatomic, strong) HKScene * _Nonnull scene;
/// HKTimeline object controls Chapter navigation and animations
@property (nonatomic, strong) HKTimeline * _Nonnull timeline;
/// HKCamera object for manipulating the camera and reading camera information
@property (nonatomic, strong) HKCamera * _Nonnull camera;
/// HKUI object for setting and reading the UI parameters
@property (nonatomic, strong) HKUI * _Nonnull ui;
/// HKLabels object managing Labels in the scene
/// since:
/// SDK 2.0
@property (nonatomic, strong) HKLabels * _Nonnull labels;
/// HKQuiz object managing a Quiz in the scene if one exists
/// since:
/// SDK 134.1
@property (nonatomic, strong) HKQuiz * _Nonnull quiz;
/// version of the 3D engine
@property (nonatomic, copy) NSString * _Nonnull version;
/// Initialize the Human Body with a view and the default UI options
/// note:
/// This is the recommended way to use HKHuman as of SDK 2.0
/// \param view the UIView to draw the 3D scene
///
- (nonnull instancetype)initWithView:(UIView * _Nonnull)view OBJC_DESIGNATED_INITIALIZER;
/// Set one UI variable to true or false
/// \param option a value from the enum HumanUIOptions
///
/// \param value true or false
///
- (void)setupUIWithOption:(enum HumanUIOptions)option value:(BOOL)value;
/// Loads a BioDigital Human 3D module.
/// \param model The moduleID string
///
/// \param callback A closure to run after the module is loaded
///
- (void)loadWithModel:(NSString * _Nonnull)model;
/// Unload the currently laoded model
/// <h3>NOTE:<br></h3>
/// this function should be used in conjunction with load() to reuse the HKHuman object for load time improvements
- (void)unload;
/// Reload the currently loaded model
- (void)reload;
/// Disable user input
/// since:
/// SDK 2.0
- (void)disableInput;
/// Enable user input
/// since:
/// SDK 2.0
- (void)enableInput;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class HKLabel;
@class HKQuizSubmission;
@class UIImage;

/// The optional delegate callback functions
SWIFT_PROTOCOL("_TtP8HumanKit15HKHumanDelegate_")
@protocol HKHumanDelegate
@optional
/// :nodoc:
- (void)onTestReady;
/// :nodoc:
- (void)onCapture;
/// :nodoc:
- (void)onLabels;
/// :nodoc:
- (void)onTimelineInfo;
/// :nodoc:
- (void)oneSecondRule;
/// :nodoc:
- (void)onCameraInfo;
/// :nodoc:
- (void)onSceneInfoReady;
/// Callback when the current animation is finished playing
/// since:
/// SDK 2.0
/// \param view the HKHuman object for this event
///
/// \param animationComplete always true
///
- (void)human:(HKHuman * _Nonnull)view animationComplete:(BOOL)animationComplete;
/// Callback when the camera has been initialized or moved
/// since:
/// SDK 2.0
/// \param view the HKHuman object for this event
///
/// \param cameraUpdated the updated HKCamera object
///
- (void)human:(HKHuman * _Nonnull)view cameraUpdated:(HKCamera * _Nonnull)cameraUpdated;
/// Callback when a chapter has been loaded
/// since:
/// SDK 2.0
/// \param view the HKHuman object for this event
///
/// \param chapterId the ID of the chapter, for lookup in the chapters map
///
- (void)human:(HKHuman * _Nonnull)view chapterTransition:(NSString * _Nonnull)chapterTransition;
/// Callback when the scene metadata is accessible
/// since:
/// SDK 2.0
/// \param view the HKHuman object for this event
///
/// \param initScene the title of the loaded scene
///
- (void)human:(HKHuman * _Nonnull)view initScene:(NSString * _Nonnull)initScene;
/// Callback when a Label has been created
/// since:
/// SDK 2.0
/// \param view the HKHuman object for this event
///
/// \param labelCreated the ID of the Label
///
- (void)human:(HKHuman * _Nonnull)view labelCreated:(NSString * _Nonnull)labelCreated;
/// Callback when a Label has been destroyed
/// since:
/// SDK 2.0
/// \param view the HKHuman object for this event
///
/// \param labelDestroyed the ID of the Label
///
- (void)human:(HKHuman * _Nonnull)view labelDestroyed:(NSString * _Nonnull)labelDestroyed;
/// Callback when a Label  has moved on the screen
/// since:
/// SDK 2.0
/// \param view the HKHuman object for this event
///
/// \param labelMoved the updated HKLabel object
///
- (void)human:(HKHuman * _Nonnull)view labelMoved:(HKLabel * _Nonnull)labelMoved;
/// Callback when a scene Label is selected by the user
/// since:
/// SDK 2.0.1
/// \param view the HKHuman object for this event
///
/// \param labelPicked the ID of the selected Label
///
- (void)human:(HKHuman * _Nonnull)view labelPicked:(NSString * _Nonnull)labelPicked;
/// Callback when visibility of scene Labels has changed
/// since:
/// SDK 2.0
/// \param view the HKHuman object for this event
///
/// \param labelsShown a boolean to indicate if the Labels are shown (true) or hidden (false)
///
- (void)human:(HKHuman * _Nonnull)view labelsShown:(BOOL)labelsShown;
/// Callback when a Labe’ls properties have been updated
/// since:
/// SDK 2.0
/// \param view the HKHuman object for this event
///
/// \param labelUpdated the updated HKLabel object
///
- (void)human:(HKHuman * _Nonnull)view labelUpdated:(HKLabel * _Nonnull)labelUpdated;
/// Callback when the scene has completed loading
/// since:
/// SDK 2.0.1
/// \param view the HKHuman object for this event
///
/// \param modelLoaded the title of the loaded scene
///
- (void)human:(HKHuman * _Nonnull)view modelLoaded:(NSString * _Nonnull)modelLoaded;
/// Callback when a loading error has occurred
/// since:
/// SDK 2.0.5
/// \param view the HKHuman object for this event
///
/// \param modelLoadError the title of the loaded scene
///
- (void)human:(HKHuman * _Nonnull)view modelLoadError:(NSString * _Nonnull)modelLoadError;
/// Callback when the color of an object has been read from the scene
/// since:
/// SDK 2.0
/// \param view the HKHuman object for this event
///
/// \param objectColor the ID of the object
///
/// \param color the color of the object
///
- (void)human:(HKHuman * _Nonnull)view objectColor:(NSString * _Nonnull)objectColor color:(HKColor * _Nonnull)color;
/// Callback when an object has been deselected
/// since:
/// SDK 2.0
/// \param view the HKHuman object for this event
///
/// \param objectId the ID of the selected object
///
- (void)human:(HKHuman * _Nonnull)view objectDeselected:(NSString * _Nonnull)objectDeselected;
/// Callback when an object has been picked by the user
/// since:
/// SDK 2.0
/// \param view the HKHuman object for this event
///
/// \param objectId the ID of the selected object
///
/// \param position the world position (x,y,z) of the selected object
///
- (void)human:(HKHuman * _Nonnull)view objectPicked:(NSString * _Nonnull)objectPicked position:(NSArray<NSNumber *> * _Nonnull)position;
/// Callback when an object has been selected
/// since:
/// SDK 2.0
/// \param view the HKHuman object for this event
///
/// \param objectId the ID of the selected object
///
- (void)human:(HKHuman * _Nonnull)view objectSelected:(NSString * _Nonnull)objectSelected;
/// Callback when visibility of scene objects has changed
/// since:
/// SDK 2.0
/// \param view the HKHuman object for this event
///
/// \param objectsShown a dictionary of object IDs and a boolean to indicate if the object is shown (true) or hidden (false)
///
- (void)human:(HKHuman * _Nonnull)view objectsShown:(NSDictionary<NSString *, NSNumber *> * _Nonnull)objectsShown;
/// Callback will fire when an answer or set of answers has been selected
/// since:
/// SDK 134.1
/// \param quizAnswerSelected AnswerIDs of the selected answers
///
- (void)human:(HKHuman * _Nonnull)view quizAnswerSelected:(NSArray<NSString *> * _Nonnull)quizAnswerSelected;
/// Callback will fire when an answer or set of answers has been submitted
/// since:
/// SDK 134.1
/// \param quizAnswerSubmitted the HKSubmission object representing a submitted response to a question
///
- (void)human:(HKHuman * _Nonnull)view quizAnswerSubmitted:(HKQuizSubmission * _Nullable)quizAnswerSubmitted;
/// Callback will fire when a Quiz has been completed
/// since:
/// SDK 134.1
/// \param quizCompleted the user’s score on the quiz is returned
///
- (void)human:(HKHuman * _Nonnull)view quizCompleted:(double)quizCompleted;
/// Callback will return true if the loaded content contains a Quiz
/// since:
/// SDK 134.1
/// \param quizEnabled the UIImage screenshot
///
- (void)human:(HKHuman * _Nonnull)view quizEnabled:(BOOL)quizEnabled;
/// Callback will fire when a Quiz has started
/// since:
/// SDK 134.1
/// \param quizEntered will always return true
///
- (void)human:(HKHuman * _Nonnull)view quizEntered:(BOOL)quizEntered;
/// Callback will fire when a Quiz has been exited
/// since:
/// SDK 134.1
/// \param quizExited will always return true
///
- (void)human:(HKHuman * _Nonnull)view quizExited:(BOOL)quizExited;
/// Callback will fire when a Quiz Question has been loaded
/// since:
/// SDK 134.1
/// \param quizQuestionLoaded Question ID of the loaded question
///
- (void)human:(HKHuman * _Nonnull)view quizQuestionLoaded:(NSString * _Nonnull)quizQuestionLoaded;
/// Callback when a call to scene.restore() has completed successfully
/// since:
/// SDK 2.0
/// \param view the HKHuman object for this event
///
/// \param sceneRestored always true
///
- (void)human:(HKHuman * _Nonnull)view sceneRestored:(BOOL)sceneRestored;
/// Callback when the draw tool download button is pressed
/// since:
/// SDK 2.1.0
/// \param view the HKHuman object for this event
///
/// \param shareImage a png to share with the native UI
///
- (void)human:(HKHuman * _Nonnull)view shareImage:(UIImage * _Nonnull)shareImage;
/// Callback when a URL is shared from the viewer
/// since:
/// SDK 2.1.0
/// \param view the HKHuman object for this event
///
/// \param shareURL a url to share with the native UI
///
- (void)human:(HKHuman * _Nonnull)view shareURL:(NSString * _Nonnull)shareURL;
/// Callback when the current animation has updated
/// since:
/// SDK 2.0
/// \param view the HKHuman object for this event
///
/// \param timelineUpdated the updated timeline object
///
- (void)human:(HKHuman * _Nonnull)view timelineUpdated:(HKTimeline * _Nonnull)timelineUpdated;
/// Callback when a xray mode is enabled or disabled
/// since:
/// SDK 2.0
/// \param view the HKHuman object for this event
///
/// \param xrayEnabled Boolean indicating true for xray enabled or false for xray disabled
///
- (void)human:(HKHuman * _Nonnull)view xrayEnabled:(BOOL)xrayEnabled;
/// Callback when a screenshot has been generated
/// \param image the UIImage screenshot
///
- (void)screenshotWithImage:(UIImage * _Nonnull)image;
@end


/// HKLabel  represents a descriptive UI element in the anatomy viewer, attached to an anatomy object
SWIFT_CLASS("_TtC8HumanKit7HKLabel")
@interface HKLabel : NSObject
/// objectID of the labelled object
/// this is required, all labels must be connected to an object
@property (nonatomic, copy) NSString * _Nonnull objectId;
/// Label title
@property (nonatomic, copy) NSString * _Nonnull title;
/// Label description text
@property (nonatomic, copy) NSString * _Nonnull text;
/// Label ID for reference
@property (nonatomic, copy) NSString * _Nonnull labelId;
/// Label world space position [x,y,z]
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull position;
/// Label screen position [x,y]
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull canvasPosition;
/// Label offset [x,y] from the object, can be used to enhance visibility
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull labelOffset;
/// whether or not the Label is currently visible
/// this will get set to false if the Label moves off screen or is occluded
@property (nonatomic) BOOL shown;
/// whether or not the Label is occludable
@property (nonatomic) BOOL occludable;
/// Create an HKLabel with the ID of its object
/// \param objectId Id of the attached object
///
- (nonnull instancetype)initWithObjectId:(NSString * _Nonnull)objectId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// HKLabels manages object labels in the scene
/// since:
/// SDK 132.2
SWIFT_CLASS("_TtC8HumanKit8HKLabels")
@interface HKLabels : NSObject
/// The SDK will set this when the labels are enabled in the scene
@property (nonatomic) BOOL shown;
/// A map of Label IDs to HKLabel objects in the current scene
@property (nonatomic, copy) NSDictionary<NSString *, HKLabel *> * _Nonnull labels;
/// Shows the Labels in the current scene
- (void)show;
/// Hides the labels in the scene
/// This allows apps to draw native Labels over the view
- (void)hide;
/// Create an label in the scene with an HKLabel object.
/// since:
/// SDK 2.0
/// \param label set up an HKLabel object and pass it to this function to add it to the scene
///
- (void)createWithLabel:(HKLabel * _Nonnull)label;
/// Update a Label in the scene with an updated HKLabel object.
/// since:
/// SDK 2.0
/// \param labelId Id of the updated Label to update in the scene
///
- (void)updateWithLabelId:(NSString * _Nonnull)labelId;
/// Delete a Label in the scene
/// since:
/// SDK 2.0
/// \param labelId Id of the Label to remove from the scene
///
- (void)destroyWithLabelId:(NSString * _Nonnull)labelId;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// HKModel object
SWIFT_CLASS("_TtC8HumanKit7HKModel")
@interface HKModel : NSObject
/// ID of the model.  example: production/maleAdult/flu.json
@property (nonatomic, copy) NSString * _Nonnull modelId;
/// model title
@property (nonatomic, copy) NSString * _Nonnull title;
/// model text description
@property (nonatomic, copy) NSString * _Nonnull text;
/// url of thumbnail image
@property (nonatomic, copy) NSString * _Nonnull thumbnail;
/// thumbnail image
@property (nonatomic, strong) UIImage * _Nonnull thumbnailImage;
/// initialize an HKModel
/// \param modelId the model ID, will look like “production/maleAdult/flu” or “E3W2”
///
/// \param title the title of the model
///
/// \param text the text description of the model
///
/// \param thumb optionally include the name or location of the thumbnail image
///
- (nonnull instancetype)initWithModelId:(NSString * _Nonnull)modelId title:(NSString * _Nonnull)title text:(NSString * _Nonnull)text thumb:(NSString * _Nonnull)thumb OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class HKQuizQuestion;

/// HKQuiz object represents metadata and display data for a BioDigital interactive quiz
/// Some content may contain a quiz and if so this class will provide an interface to the questions, answers, user responses, and scoring
/// <ul>
///   <li>
///     Since SDK 134.1
///   </li>
/// </ul>
SWIFT_CLASS("_TtC8HumanKit6HKQuiz")
@interface HKQuiz : NSObject
/// enabled is true when the interactive anatomy includes a quiz
@property (nonatomic) BOOL enabled;
/// active is true when the quiz has been entered
@property (nonatomic) BOOL active;
/// locked may be set to prevent the user from taking the embedded quiz
/// Use set() to updated this setting
@property (nonatomic) BOOL locked;
/// The question number to start the quiz
/// Use set() to updated this setting
@property (nonatomic) NSInteger startNumber;
/// The question number to end the quiz
/// Use set() to updated this setting
@property (nonatomic) NSInteger endNumber;
/// Set this to false to hide the quiz summary
/// Use set() to updated this setting
@property (nonatomic) BOOL showSummary;
/// Set this to false to hide the answer explanations
/// Use set() to updated this setting
@property (nonatomic) BOOL showExplanation;
/// Set this to false to hide the quiz submit button
/// Use set() to updated this setting
@property (nonatomic) BOOL showSubmit;
/// Set this to false to hide the quiz progress indicator
/// Use set() to updated this setting
@property (nonatomic) BOOL showProgress;
/// Map of IDs to Quiz Questions
@property (nonatomic, copy) NSDictionary<NSString *, HKQuizQuestion *> * _Nonnull questions;
/// Array of user responses to the questions
@property (nonatomic, copy) NSArray<HKQuizSubmission *> * _Nonnull submissions;
/// ID of the current question
@property (nonatomic, copy) NSString * _Nonnull activeQuestionId;
/// Current question object
@property (nonatomic, strong) HKQuizQuestion * _Nullable currentQuestion;
/// Current user response object
@property (nonatomic, strong) HKQuizSubmission * _Nullable currentSubmission;
/// Current set of answerIds
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull currentAnswers;
/// completed is set by the SDK when the quiz has been finished by the user
@property (nonatomic) BOOL completed;
/// score is set by the SDK when the quiz has been finished by the user
@property (nonatomic) double score;
/// total is set by the SDK when the quiz has been finished by the user
@property (nonatomic) NSInteger total;
/// scorableTotal  is set by the SDK when the quiz has been finished by the user
@property (nonatomic) NSInteger scorableTotal;
/// correctTotal is set by the SDK when the quiz has been finished by the user
@property (nonatomic) NSInteger correctTotal;
/// incorrectTotal is set by the SDK when the quiz has been finished by the user
@property (nonatomic) NSInteger incorrectTotal;
/// Start a quiz if one exists in the currently loaded content
- (void)enter;
/// End a quiz if one is in progress without completing the quiz
- (void)exit;
/// Submit a set of answers to a question
- (void)submitWithQuestionId:(NSString * _Nonnull)questionId answerIds:(NSArray<NSString *> * _Nonnull)answerIds;
/// Move to the next question
- (void)nextQuestion;
/// Move to the previous question
- (void)previousQuestion;
/// Reset the quiz to its original settings
- (void)reset;
/// Use this function to lock the quiz or change other settings
- (void)set;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// HKQuizQuestion  represents the data associated with a HKQuiz question
/// <ul>
///   <li>
///     Since SDK 134.1
///   </li>
/// </ul>
SWIFT_CLASS("_TtC8HumanKit14HKQuizQuestion")
@interface HKQuizQuestion : NSObject
/// ID of question for reference
@property (nonatomic, copy) NSString * _Nonnull questionId;
/// type identifier
@property (nonatomic, copy) NSString * _Nonnull questionType;
/// display text of the question
@property (nonatomic, copy) NSString * _Nonnull questionPrompt;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// HKQuizSubmission  represents the data associated with a HKQuiz question’s user response
/// <ul>
///   <li>
///     Since SDK 134.1
///   </li>
/// </ul>
SWIFT_CLASS("_TtC8HumanKit16HKQuizSubmission")
@interface HKQuizSubmission : NSObject
/// ID of question for reference
@property (nonatomic, copy) NSString * _Nonnull questionId;
/// IDs of selected answers for reference
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull answerIds;
/// IDs of correct answers for reference
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull correctAnswerIds;
/// was the submission correct?
@property (nonatomic) BOOL correct;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// HKScene manages the current scene and the scene objects
SWIFT_CLASS("_TtC8HumanKit7HKScene")
@interface HKScene : NSObject
/// The title of the current loaded scene.
@property (nonatomic, copy) NSString * _Nonnull title;
/// The text  description of the current loaded scene.
@property (nonatomic, copy) NSString * _Nonnull text;
/// The text description of the current loaded scene, if it is broken into sections
@property (nonatomic, copy) NSArray<NSDictionary<NSString *, NSString *> *> * _Nonnull textSections;
/// A flat unordered list of visible objects in the current scene
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull objectIds;
/// A map of objectIDs to display names
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull objects;
/// Reports whether or not the model contains layer information
@property (nonatomic) BOOL hasLayers;
/// Brings up the built-in iOS share UI with the current contents of the view
- (void)shareFrom:(CGRect)from;
/// Captures a screenshot and triggers the screenshot callback in HKHumanDelegate
- (void)screenshot;
/// Reset the scene objects to the current scene’s original state
/// note:
/// This does not reset the camera, there is a separate function for that
- (void)reset;
/// Set the layer removal level, i.e. how much to peel back, as a percent bet
/// \param percent percent layer removal between 0 and 100
///
- (void)setLayersWithPercent:(NSInteger)percent;
/// Hide a group of obects by object ID
/// Groups of objects can be hidden by passing more than one objectID or by passing a “group node” ID
/// since:
/// SDK 2.0
/// \param objectIds An array of object IDs to hide
///
- (void)hideWithObjectIds:(NSArray<NSString *> * _Nonnull)objectIds;
/// Show a group of obects by object ID
/// Groups of objects can be shown by passing more than one objectID or by passing a “group node” ID
/// since:
/// SDK 2.0
/// \param objectIds An array of object IDs to show
///
- (void)showWithObjectIds:(NSArray<NSString *> * _Nonnull)objectIds;
/// Show or hide a group of obects by object ID
/// Groups of objects can be affected by passing more than one objectID or by passing a “group node” ID
/// since:
/// SDK 2.0
/// \param objectIds An dictionary of object IDs to true for show or false for hide
///
- (void)showOrHideWithObjectIds:(NSDictionary<NSString *, NSNumber *> * _Nonnull)objectIds;
/// Isolate a group of obects by object ID
/// Groups of objects can be shown by passing more than one objectID or by passing a “group node” ID
/// since:
/// SDK 2.0
/// \param objectIds An array of object IDs to isolate
///
- (void)isolateWithObjectIds:(NSArray<NSString *> * _Nonnull)objectIds;
/// Select a group of objects programatically
/// \param objectIds An array of object IDs to select
///
- (void)selectWithObjectIds:(NSArray<NSString *> * _Nonnull)objectIds;
/// Deselect all objects in the scene
- (void)undoSelections;
/// Change the highlight color
/// \param color Selected objects are yellow by default, set this to use a different color
///
- (void)setHighlightColorWithColor:(UIColor * _Nonnull)color;
/// Change the object highlight color back to the original yellow color
- (void)resetHighlightColor;
/// Disable object highlighting
- (void)disableHighlight;
/// Enable object highlighting
- (void)enableHighlight;
/// Highlight an object even if highlight is disabled for the user
/// \param objectIds object to highlight
///
- (void)highlightWithObjectIds:(NSArray<NSString *> * _Nonnull)objectIds;
/// unhighlight an object
/// \param objectId object to unhighlight
///
- (void)unhighlightWithObjectId:(NSString * _Nonnull)objectId;
/// Prevent objects from being selected
- (void)disablePicking;
/// Allow objects to be selected
- (void)enablePicking;
/// Enables labels to appear when an object is selected, this is the default behavior, unless disabled
- (void)showLabels;
/// Hides all object labels and disables future labels from appearing on selected objects
- (void)hideLabels;
/// Turn xray mode ON or OFF in the current scene
/// \param enabled A boolean to turn xray mode ON or OFF
///
- (void)xray:(BOOL)enabled;
/// Set the color of an object
- (void)colorWithObjectId:(NSString * _Nonnull)objectId color:(HKColor * _Nonnull)color;
/// Unset the color of a scene object
/// \param objectId object ID to uncolor
///
- (void)uncolorWithObjectId:(NSString * _Nonnull)objectId;
/// Get the color of a scene object
/// since:
/// SDK 2.0
/// Calls human(_:colorObject:color:) on success
/// \param objectId object ID to uncolor
///
- (void)getColorWithObjectId:(NSString * _Nonnull)objectId;
/// Move an object in 3D space
/// since:
/// SDK 2.0
/// \param objectId object to transform
///
/// \param translate [x,y,z] array amount to move the object]
///
- (void)translateWithObjectId:(NSString * _Nonnull)objectId translate:(NSArray<NSNumber *> * _Nonnull)translate;
/// Rotate an object in 3D space
/// since:
/// SDK 2.0
/// \param objectId object to transform
///
/// \param rotate [x,y,z] array amount to rotate the object]
///
- (void)rotateWithObjectId:(NSString * _Nonnull)objectId rotate:(NSArray<NSNumber *> * _Nonnull)rotate;
/// Scale an object in 3D space
/// since:
/// SDK 2.0
/// \param objectId object to transform
///
/// \param scale [x,y,z] array amount to scale the object]
///
- (void)scaleWithObjectId:(NSString * _Nonnull)objectId scale:(NSArray<NSNumber *> * _Nonnull)scale;
/// Pivot an object in 3D space
/// since:
/// SDK 2.0
/// \param objectId object to transform
///
/// \param pivot [x,y,z] array amount to rotate the object]
///
- (void)pivotWithObjectId:(NSString * _Nonnull)objectId pivot:(NSArray<NSNumber *> * _Nonnull)pivot;
/// Move an object in 3D space
/// since:
/// SDK 2.0
/// \param objectId object to transform
///
/// \param translate [x,y,z] array amount to move the object]
///
/// \param rotate [x,y,z] array amount to rotate the object]
///
/// \param scale [x,y,z] array amount to scale the object]
///
/// \param pivot [x,y,z] array amount to rotate the object]
///
- (void)transformWithObjectId:(NSString * _Nonnull)objectId translate:(NSArray<NSNumber *> * _Nonnull)translate rotate:(NSArray<NSNumber *> * _Nonnull)rotate scale:(NSArray<NSNumber *> * _Nonnull)scale pivot:(NSArray<NSNumber *> * _Nonnull)pivot;
/// Capture the current state of the scene
/// since:
/// SDK 2.0
- (void)capture;
/// Restore the scene from the previous capture
/// Calls human(_:sceneRestored:) on success
/// since:
/// SDK 2.0
- (void)restore;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol HKServicesDelegate;
enum HumanLanguage : NSInteger;
@class NSData;

/// The BioDigital Human backend services
SWIFT_CLASS("_TtC8HumanKit10HKServices")
@interface HKServices : NSObject <HKHumanDelegate>
/// Models fetched from the BioDigital servers are stored here
/// Providing a secret to the init function will trigger a fetch of models associated with your account, the modelsLoaded callback will alert you when the data is ready
@property (nonatomic, copy) NSArray<HKModel *> * _Nonnull models;
/// Get the shared Singleton insance of HKServices
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HKServices * _Nonnull shared;)
+ (HKServices * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initialize the backend services and authenticate the SDK with an explicit Key and optional Secret
- (void)setupWithKey:(NSString * _Nonnull)key secret:(NSString * _Nonnull)secret delegate:(id <HKServicesDelegate> _Nullable)delegate;
/// Initialize the backend services and authenticate the SDK with Key and optional Secret in the Info.plist file
- (void)setupWithDelegate:(id <HKServicesDelegate> _Nullable)delegate;
/// Request models associated with your account from our server
- (void)getModels;
/// Get a list of Model objects by ICD Number
/// \param ICD String version of ICD number
///
///
/// returns:
/// [HKModel] an array of found Model objects, empty if none are found
- (void)findModelWithICD:(NSString * _Nonnull)ICD;
/// Download a set of models to the device in the background
/// Calls onModelDownload(modelId:counter:total) as each model is downloaded
- (void)downloadWithModelIds:(NSArray<NSString *> * _Nonnull)modelIds;
/// :nodoc:
- (void)human:(HKHuman * _Nonnull)view modelLoaded:(NSString * _Nonnull)modelLoaded;
/// :nodoc:
- (void)human:(HKHuman * _Nonnull)view modelLoadError:(NSString * _Nonnull)modelLoadError;
/// Return a list of modelIDs for data stored on the device
- (NSArray<NSString *> * _Nonnull)offlineModels SWIFT_WARN_UNUSED_RESULT;
/// Returns true if a model is on disk and available for offline use
- (BOOL)modelDownloadedWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Removes all stored BioDigital Human content from the device
- (NSInteger)deleteStoredData SWIFT_WARN_UNUSED_RESULT;
/// Set the language, default is HumanLanguage.english
/// valid options are spanish and arabic
- (void)setLanguageTo:(enum HumanLanguage)to;
/// return true if the language is Unicode (Chinese or Japanese)
- (BOOL)isUnicodeLanguage SWIFT_WARN_UNUSED_RESULT;
/// Returns the json string for a model if it is on disk
- (NSString * _Nonnull)getJsonStringWithModelId:(NSString * _Nonnull)modelId SWIFT_WARN_UNUSED_RESULT;
/// Returns the json string for a model if it is on disk
- (NSData * _Nonnull)getJsonDataWithModelId:(NSString * _Nonnull)modelId SWIFT_WARN_UNUSED_RESULT;
/// Checks the backend service
- (BOOL)checkWebserver SWIFT_WARN_UNUSED_RESULT;
/// Stops the backend service, this should ONLY be done when your app is going to stop running
- (void)stop;
/// Restarts the backend service, this should ONLY be done when your app is returning to the foreground
- (void)restart;
@end


/// callback methods for the HKServices delegate
SWIFT_PROTOCOL("_TtP8HumanKit18HKServicesDelegate_")
@protocol HKServicesDelegate
@optional
/// Callback when the validation process succeeds
- (void)onValidSDK;
/// Callback when the validation process has failed
- (void)onInvalidSDK;
/// Callback when a requested model fetch is complete
- (void)modelsLoaded;
/// Callback when a model download is complete
/// since:
/// SDK 2.0.1
/// \param modelId model Identifier
///
/// \param count progress counter
///
/// \param total total queued downloads
///
- (void)modelDownloadedWithModelId:(NSString * _Nonnull)modelId count:(NSInteger)count total:(NSInteger)total;
/// Callback when a model download cannot be completed
/// since:
/// SDK 2.75.1
/// \param modelId model Identifier
///
- (void)modelDownloadErrorWithModelId:(NSString * _Nonnull)modelId;
@end


/// Timeline object
SWIFT_CLASS("_TtC8HumanKit10HKTimeline")
@interface HKTimeline : NSObject
/// The current animation time
@property (nonatomic) float currentTime;
/// The current animation duration
@property (nonatomic) float duration;
/// The current scene is animated, true or false
@property (nonatomic) BOOL playing;
/// The currently loaded Chapter to access title and description
@property (nonatomic, strong) HKChapter * _Nullable currentChapter;
/// A map of chapter IDs to HKChapter objects.
@property (nonatomic, copy) NSDictionary<NSString *, HKChapter *> * _Nonnull chapters;
/// An ordered list of chapter IDs
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull chapterList;
/// Play the current scene’s animation from the beginning
- (void)play;
/// Pause the current scene’s animation
- (void)pause;
/// Unpause the current scene’s animation
- (void)unpause;
/// Jump to the current module’s next chapter
- (void)nextChapter;
/// Jump to the current module’s previous chapter
- (void)prevChapter;
/// Jump to the chapter with the given chapterID
- (void)moveToChapterWithChapterID:(NSString * _Nonnull)chapterID;
/// Jump to the given time in the current scene’s current animation
/// \param time animation offset in seconds
///
- (void)moveToTimeWithTime:(float)time;
/// Jump to the chapter with the given chapterID and play the animation in a loop
/// since:
/// SDK 2.0
- (void)loopWithChapterId:(NSString * _Nonnull)chapterId;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// UI settings object
SWIFT_CLASS("_TtC8HumanKit4HKUI")
@interface HKUI : NSObject
/// an array of language names, in the appropriate language, for display
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSArray<NSString *> * _Nonnull languageNames;)
+ (NSArray<NSString *> * _Nonnull)languageNames SWIFT_WARN_UNUSED_RESULT;
+ (void)setLanguageNames:(NSArray<NSString *> * _Nonnull)value;
/// an array of standard language codes
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSArray<NSString *> * _Nonnull languageCodes;)
+ (NSArray<NSString *> * _Nonnull)languageCodes SWIFT_WARN_UNUSED_RESULT;
+ (void)setLanguageCodes:(NSArray<NSString *> * _Nonnull)value;
/// top or center color
@property (nonatomic, strong) UIColor * _Nonnull topColor;
/// bottom or outer color
@property (nonatomic, strong) UIColor * _Nonnull bottomColor;
/// background type .radial or .linear
@property (nonatomic) enum BackgroundOptions bgType;
/// color positions for top and bottom as percentage
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull colorStops;
/// A Boolean indicating if there is supposed to be a visible playPause button in the module
@property (nonatomic) BOOL hasPlayPause;
/// A Boolean indicating if there is supposed to be a visible timeline scrubber in the module
@property (nonatomic) BOOL hasScrubber;
///
/// returns:
/// the current language code
+ (NSString * _Nonnull)languageCode SWIFT_WARN_UNUSED_RESULT;
/// Set any UI parameter to true or false
/// \param option HumanUIOption type to set
///
/// \param value true or false
///
- (void)setOptionWithOption:(enum HumanUIOptions)option value:(BOOL)value;
/// Preset the background style with two specified colors
/// \param top Primary color
///
/// \param bottom Secondary color
///
/// \param bgType (optional) Background style (BackgroundOptions.radial or BackgroundOptions.linear, default is .radial)
///
- (void)presetBackgroundColorWithTop:(UIColor * _Nonnull)top bottom:(UIColor * _Nonnull)bottom type:(enum BackgroundOptions)type;
/// Change the background style with two specified colors
/// \param top Primary color
///
/// \param bottom Secondary color
///
/// \param bgType (optional) Background style (BackgroundOptions.radial or BackgroundOptions.linear, default is .radial)
///
- (void)setBackgroundColorWithTop:(UIColor * _Nonnull)top bottom:(UIColor * _Nonnull)bottom type:(enum BackgroundOptions)type;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Enumerated language options for HKHuman
typedef SWIFT_ENUM(NSInteger, HumanLanguage, open) {
/// english
  HumanLanguageEnglish = 0,
/// spanish
  HumanLanguageSpanish = 1,
/// potuguese
  HumanLanguagePortuguese = 2,
/// french
  HumanLanguageFrench = 3,
/// italian
  HumanLanguageItalian = 4,
/// german
  HumanLanguageGerman = 5,
/// chinese
  HumanLanguageChinese = 6,
/// japanese
  HumanLanguageJapanese = 7,
};

/// Enumerated UI option flags you can set to true or false
typedef SWIFT_ENUM(NSInteger, HumanUIOptions, open) {
/// Show or Hide all UI elements
/// Default is true (show)
  HumanUIOptionsAll = 0,
/// Show or don’t show anatomy name and other UI when objects are selected
/// Default is true
  HumanUIOptionsAnatomyLabels = 1,
/// Show orHhide UI for interacting with animations (play/pause, timeline slider)
/// Default is true (show)
  HumanUIOptionsAnimation = 2,
/// Enable/Disable audio controls
/// Default is enabled (show)
  HumanUIOptionsAudio = 3,
/// Show or Hide UI to enter the Draw feature
/// Default is true (show)
  HumanUIOptionsDraw = 4,
/// Show or Hide a help button for UI instruction panel
/// Default is true (show)
  HumanUIOptionsHelp = 5,
/// Show or hide the current module/chapter title and description
/// Default is true (show)
  HumanUIOptionsInfo = 6,
/// Show or hide anatomy labels in the scene
/// Default is true (show)
  HumanUIOptionsLabels = 7,
/// Show the label list in the info panel
/// Default is true (show)
  HumanUIOptionsLabelList = 8,
/// Show or Hide UI to bring up visiblilty layers conrols, if the data exists
/// Default is true (show)
  HumanUIOptionsLayers = 9,
/// Show or hide camera navigation UI
/// Default is true (show)
  HumanUIOptionsNav = 10,
/// Show or Hide a UI button to bring up a searchable tree of objects in the scene
/// Default is true (show)
  HumanUIOptionsObjectTree = 11,
/// Turn on on-demand loading
/// Default is false
  HumanUIOptionsOnDemand = 12,
/// Automatically starts an embedded Quiz if one exists in the loaded interactive
/// Default is false
  HumanUIOptionsQuizAutoStart = 13,
/// Prevents the user from taking an embedded Quiz
/// Default is false
  HumanUIOptionsQuizLock = 14,
/// Show a button that resets the scene after it has been altered
/// Default is true (show)
  HumanUIOptionsReset = 15,
/// Show or Hide tools UI panel
/// Default is true (show)
  HumanUIOptionsTools = 16,
/// Show or Hide Chapter controls
/// Default is true (show)
  HumanUIOptionsTour = 17,
/// Set to true to show the tutorial on the next model load
/// Default is false
  HumanUIOptionsTutorial = 18,
/// :nodoc:
  HumanUIOptionsNolink = 19,
/// :nodoc:
  HumanUIOptionsLogo = 20,
};



#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
